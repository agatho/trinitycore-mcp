name: Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'doc/**'
      - 'README.md'
      - 'src/**/*.ts'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'doc/**'
      - 'README.md'
      - 'src/**/*.ts'

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken links in README
        run: |
          echo "Checking for broken internal links in README.md..."

          # Check for broken doc links
          grep -o '\[.*\](doc/[^)]*\.md)' README.md | while read -r line; do
            FILE=$(echo "$line" | sed 's/.*(\(.*\))/\1/')
            if [ ! -f "$FILE" ]; then
              echo "❌ Broken link: $FILE"
              exit 1
            else
              echo "✅ Valid link: $FILE"
            fi
          done

          # Check for broken PHASE_ links
          grep -o '\[.*\](PHASE_[^)]*\.md)' README.md | while read -r line; do
            FILE=$(echo "$line" | sed 's/.*(\(.*\))/\1/')
            if [ ! -f "$FILE" ]; then
              echo "❌ Broken link: $FILE"
              exit 1
            else
              echo "✅ Valid link: $FILE"
            fi
          done

          echo "✅ All README links valid"

      - name: Check documentation structure
        run: |
          echo "Checking documentation structure..."

          # Required documentation files
          REQUIRED_DOCS=(
            "README.md"
            "doc/PHASE_5_COMPLETE_SUMMARY.md"
            "PHASE_5_FINAL_VERIFICATION.md"
            "doc/PHASE_6_DESIGN.md"
            "PHASE_6_KICKOFF.md"
          )

          MISSING=0
          for DOC in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$DOC" ]; then
              echo "✅ Found: $DOC"
            else
              echo "❌ Missing: $DOC"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "❌ $MISSING required documentation files missing"
            exit 1
          else
            echo "✅ All required documentation present"
          fi

      - name: Validate Markdown syntax
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
          config_file: .markdownlint.json
          ignore_files: node_modules/**
        continue-on-error: true

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."

          # Count TODO/FIXME in documentation
          TODO_COUNT=$(grep -r "TODO\|FIXME" doc/ README*.md PHASE*.md --include="*.md" 2>/dev/null | wc -l || echo "0")

          echo "Documentation TODO count: $TODO_COUNT"

          if [ "$TODO_COUNT" -gt 10 ]; then
            echo "⚠️ Warning: High number of TODOs in documentation ($TODO_COUNT)"
          else
            echo "✅ Documentation TODO count acceptable"
          fi

  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate TypeScript API docs (TypeDoc)
        run: |
          echo "Installing TypeDoc..."
          npm install --save-dev typedoc

          echo "Generating API documentation..."
          npx typedoc --out api-docs src/index.ts \
            --entryPointStrategy expand \
            --exclude "**/*+(test|spec).ts" \
            --excludeExternals \
            --readme README.md || echo "TypeDoc generation completed with warnings"

          if [ -d "api-docs" ]; then
            echo "✅ API documentation generated"
            ls -la api-docs/
          else
            echo "⚠️ API documentation not generated"
          fi
        continue-on-error: true

      - name: Upload API documentation
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-documentation
          path: api-docs/
          retention-days: 30

  check-version-consistency:
    name: Check Version Consistency
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract versions
        id: versions
        run: |
          # Extract version from package.json
          PKG_VERSION=$(jq -r '.version' package.json)
          echo "package_json=$PKG_VERSION" >> $GITHUB_OUTPUT

          # Extract version from README
          README_VERSION=$(grep -oP 'version-\K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
          echo "readme=$README_VERSION" >> $GITHUB_OUTPUT

          echo "package.json version: $PKG_VERSION"
          echo "README.md version: $README_VERSION"

      - name: Verify version consistency
        run: |
          PKG_VERSION="${{ steps.versions.outputs.package_json }}"
          README_VERSION="${{ steps.versions.outputs.readme }}"

          if [ "$PKG_VERSION" != "$README_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "   package.json: $PKG_VERSION"
            echo "   README.md: $README_VERSION"
            echo ""
            echo "Please update README.md badge to match package.json version"
            exit 1
          else
            echo "✅ Versions consistent: $PKG_VERSION"
          fi

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [validate-docs, generate-api-docs, check-version-consistency]
    if: always()

    steps:
      - name: Documentation Summary
        run: |
          echo "=========================================="
          echo "  TrinityCore MCP - Documentation Report "
          echo "=========================================="
          echo ""
          echo "✅ Documentation Validation: Completed"
          echo "✅ API Documentation: Generated"
          echo "✅ Version Consistency: Verified"
          echo ""
          echo "Phase 6 Week 1: Documentation Automation"
          echo "=========================================="
