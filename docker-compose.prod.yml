version: '3.8'

# TrinityCore MCP Server - Production Environment
# This docker-compose file sets up a production-ready stack with HA support

services:
  # MCP Server (Production) - Instance 1
  mcp-server-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trinitycore-mcp-prod-1
    environment:
      - NODE_ENV=production
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - TRINITY_DB_HOST=mysql-primary
      - TRINITY_DB_PORT=3306
      - TRINITY_DB_USER=${TRINITY_DB_USER:-trinity}
      - TRINITY_DB_PASSWORD=${TRINITY_DB_PASSWORD}
      - TRINITY_DB_NAME=${TRINITY_DB_NAME:-world}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HA_ENABLED=true
      - INSTANCE_ID=mcp-1
    volumes:
      - ./logs:/app/logs:delegated
      - ./data:/app/data:ro
    depends_on:
      - mysql-primary
      - redis
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  # MCP Server (Production) - Instance 2
  mcp-server-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trinitycore-mcp-prod-2
    environment:
      - NODE_ENV=production
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - TRINITY_DB_HOST=mysql-primary
      - TRINITY_DB_PORT=3306
      - TRINITY_DB_USER=${TRINITY_DB_USER:-trinity}
      - TRINITY_DB_PASSWORD=${TRINITY_DB_PASSWORD}
      - TRINITY_DB_NAME=${TRINITY_DB_NAME:-world}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HA_ENABLED=true
      - INSTANCE_ID=mcp-2
    volumes:
      - ./logs:/app/logs:delegated
      - ./data:/app/data:ro
    depends_on:
      - mysql-primary
      - redis
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  # MCP Server (Production) - Instance 3
  mcp-server-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trinitycore-mcp-prod-3
    environment:
      - NODE_ENV=production
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - TRINITY_DB_HOST=mysql-primary
      - TRINITY_DB_PORT=3306
      - TRINITY_DB_USER=${TRINITY_DB_USER:-trinity}
      - TRINITY_DB_PASSWORD=${TRINITY_DB_PASSWORD}
      - TRINITY_DB_NAME=${TRINITY_DB_NAME:-world}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HA_ENABLED=true
      - INSTANCE_ID=mcp-3
    volumes:
      - ./logs:/app/logs:delegated
      - ./data:/app/data:ro
    depends_on:
      - mysql-primary
      - redis
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: trinitycore-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-server-1
      - mcp-server-2
      - mcp-server-3
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MySQL Primary
  mysql-primary:
    image: mysql:8.0
    container_name: trinitycore-mysql-primary
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${TRINITY_DB_NAME:-world}
      - MYSQL_USER=${TRINITY_DB_USER:-trinity}
      - MYSQL_PASSWORD=${TRINITY_DB_PASSWORD}
    volumes:
      - mysql-primary-data:/var/lib/mysql
      - ./docker/mysql/my-primary.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./backups:/backups
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL Replica (Read-only)
  mysql-replica:
    image: mysql:8.0
    container_name: trinitycore-mysql-replica
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${TRINITY_DB_NAME:-world}
      - MYSQL_USER=${TRINITY_DB_USER:-trinity}
      - MYSQL_PASSWORD=${TRINITY_DB_PASSWORD}
    volumes:
      - mysql-replica-data:/var/lib/mysql
      - ./docker/mysql/my-replica.cnf:/etc/mysql/conf.d/my.cnf:ro
    depends_on:
      - mysql-primary
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Caching & Session Store)
  redis:
    image: redis:7-alpine
    container_name: trinitycore-redis-prod
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: trinitycore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - trinitycore-prod-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: trinitycore-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - trinitycore-prod-network
    restart: unless-stopped

networks:
  trinitycore-prod-network:
    driver: bridge
    name: trinitycore-prod-network

volumes:
  mysql-primary-data:
    name: trinitycore-mysql-primary-data
  mysql-replica-data:
    name: trinitycore-mysql-replica-data
  redis-data:
    name: trinitycore-redis-data-prod
  prometheus-data:
    name: trinitycore-prometheus-data
  grafana-data:
    name: trinitycore-grafana-data
