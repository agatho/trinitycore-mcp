api:
  class: AoEDecisionManager
  method: GetDoTSpreadTargets
  signature: int AoEDecisionManager::GetDoTSpreadTargets(uint32 maxTargets) const
documentation:
  brief: Calculates and returns the optimal number of targets for applying DoT effects
    in an area-of-effect context.
  description: The GetDoTSpreadTargets method determines how many targets should be
    affected by a DoT (Damage over Time) spell or ability within an AoE (Area of Effect)
    radius. This method is typically used in AI decision-making processes to optimize
    spell usage, ensuring that the spell's damage is distributed across the most effective
    number of enemies without exceeding specified limits. It considers factors such
    as target proximity, threat levels, and spell mechanics to determine the appropriate
    spread count. The method returns an integer representing the calculated number
    of targets, which can be used by the AI to select appropriate targets for DoT
    application.
  parameters: []
  returns: An integer value indicating the number of targets that should be affected
    by a DoT spell in an AoE context. Returns 0 if no suitable targets are found or
    if the calculation results in zero targets. The return value is capped at the
    maximum allowed targets specified by the input parameter.
  examples:
  - title: Basic Usage
    code: 'int targetCount = decisionManager.GetDoTSpreadTargets(5);

      // targetCount now holds the number of optimal DoT targets, up to a maximum
      of 5'
    language: cpp
  - title: AI Decision Integration
    code: "if (decisionManager.GetDoTSpreadTargets(3) > 0)\n{\n    // Proceed with\
      \ casting DoT spell on calculated targets\n    CastDotSpell();\n}"
    language: cpp
  notes: This method is likely part of a larger AI decision-making framework and may
    rely on internal state tracking of nearby enemies, their threat levels, and spell
    properties. The actual implementation details depend on how the AoEDecisionManager
    class calculates target selection based on game mechanics such as threat, proximity,
    and target priority.
  warnings: The method assumes that the AI context has been properly initialized with
    relevant target information. If called in an environment without proper target
    data, it may return unexpected values or zero targets. Ensure that the AoEDecisionManager
    instance is correctly configured before calling this method.
  related:
  - GetAoETargets
  - CalculateTargetSpread
  - GetSpellTargets
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:41:56.338426'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
