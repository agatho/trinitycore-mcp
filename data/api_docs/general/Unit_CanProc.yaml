api:
  class: Unit
  method: CanProc
  signature: bool Unit::CanProc() const
documentation:
  brief: Determines whether the unit can proc abilities or effects
  description: The CanProc method checks if a Unit object is capable of triggering
    proc-based abilities or effects. This method is commonly used in combat and spell
    systems to determine if a unit's current state allows for proc activation. It
    typically returns true when the unit meets specific conditions such as being in
    combat, having sufficient mana, or not being under certain debuffs that prevent
    proc activation. The method plays a crucial role in determining whether a unit
    can trigger procs during attacks or spell casting.
  parameters: []
  returns: Returns true if the unit can proc abilities or effects, false otherwise.
    A return value of true indicates that the unit meets all necessary conditions
    for proc activation, while false means that either the unit is not in a state
    suitable for proc triggering or the specific conditions required for proc activation
    are not met.
  examples:
  - title: Basic usage example
    code: "if (unit->CanProc()) {\n    // Unit can trigger procs\n    // Proceed with\
      \ proc logic\n}"
    language: cpp
  - title: Combat scenario example
    code: "Unit* target = player->GetVictim();\nif (target && target->CanProc()) {\n\
      \    // Check if target can proc during combat\n    // Perform proc logic\n}"
    language: cpp
  notes: This method is typically used in conjunction with other unit state checks.
    Implementation may vary based on the specific type of unit (player, creature,
    etc.) and the context in which it's being used. Performance considerations include
    checking whether the unit is in combat or has sufficient resources before calling
    this method.
  warnings: Care should be taken when using this method in combat situations as incorrect
    usage can lead to unexpected behavior or performance issues. The method may not
    always return true even when a unit is capable of procing, depending on game mechanics
    and specific conditions.
  related:
  - Unit::HasProc
  - Unit::CanAttack
  - Unit::IsInCombat
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T13:42:41.910496'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
