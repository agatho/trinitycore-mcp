api:
  class: PathfindingManager
  method: SetTimeout
  signature: void PathfindingManager::SetTimeout(uint32 timeoutMs)
documentation:
  brief: Sets the timeout value for pathfinding operations in milliseconds.
  description: The SetTimeout method configures the maximum allowed time a pathfinding
    operation can take before it is terminated. This timeout prevents pathfinding
    from hanging indefinitely during complex navigation scenarios. The timeout value
    is typically used in conjunction with pathfinding requests to ensure that the
    game remains responsive even when calculating difficult paths. Setting this value
    too low may result in incomplete paths, while setting it too high can cause performance
    issues or unresponsiveness during path calculation.
  parameters:
  - name: timeoutMs
    description: The timeout value in milliseconds for pathfinding operations. Valid
      values are positive integers representing time duration. Typical values range
      from 50 to 5000 milliseconds depending on the complexity of the navigation environment.
  returns: null
  examples:
  - title: Setting a moderate timeout for pathfinding
    code: 'PathfindingManager* manager = sObjectMgr->GetPathfindingManager();

      manager->SetTimeout(1000); // Set timeout to 1 second'
    language: cpp
  - title: Configuring timeout based on server settings
    code: 'uint32 customTimeout = sWorld->getIntConfig(CONFIG_PATHFINDING_TIMEOUT);

      PathfindingManager* manager = sObjectMgr->GetPathfindingManager();

      manager->SetTimeout(customTimeout);'
    language: cpp
  notes: This method affects all subsequent pathfinding operations performed by the
    PathfindingManager instance. The timeout value is applied to both synchronous
    and asynchronous pathfinding requests. Changes to the timeout setting take effect
    immediately for new operations without requiring restart of existing pathfinding
    processes.
  warnings: Setting timeout values too low (less than 50ms) may cause frequent pathfinding
    failures and incomplete navigation results. Setting values excessively high (above
    10000ms) can lead to performance degradation and potential server unresponsiveness
    during heavy pathfinding load periods.
  related:
  - GetTimeout
  - CalculatePath
  - IsPathValid
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T08:32:45.926402'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
