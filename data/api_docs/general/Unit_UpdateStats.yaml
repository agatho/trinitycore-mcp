api:
  class: Unit
  method: UpdateStats
  signature: bool Unit::UpdateStats(int stat)
documentation:
  brief: Updates the specified stat for the unit and returns true if successful.
  description: The UpdateStats method recalculates and applies any changes to a specific
    stat for the Unit object. This method is typically invoked when stat modifiers,
    such as buffs, debuffs, or equipment changes, are applied or removed from the
    unit. It ensures that all derived stats (such as attack power, armor, health,
    etc.) are properly updated based on the base stat and any active modifiers. The
    method may also trigger recalculations of related attributes like hit chance,
    critical strike chance, or spell power depending on the stat being updated. This
    function is essential for maintaining accurate character state during gameplay
    events such as level-ups, item equip/remove, or buff/debuff application.
  parameters: []
  returns: Returns true if the stat update was successful and all derived values were
    recalculated correctly; otherwise returns false if an error occurred during the
    update process.
  examples:
  - title: Update a unit's attack power
    code: "Unit* player = ...;\nbool success = player->UpdateStats(STAT_ATTACK_POWER);\n\
      if (success)\n{\n    // Stat updated successfully\n}"
    language: cpp
  - title: Update all stats for a unit after equipment change
    code: "Unit* unit = ...;\nfor (int i = 0; i < MAX_STATS; ++i)\n{\n    unit->UpdateStats(i);\n\
      }\n// All stats recalculated and applied\n"
    language: cpp
  notes: This method is commonly called internally by the game engine when stat-modifying
    effects are applied or removed. It's important to note that calling this method
    manually should be done with caution, as it may trigger cascading recalculations
    of dependent stats and can impact performance if used excessively in loops or
    frequent updates.
  warnings: Calling UpdateStats with invalid stat indices may lead to undefined behavior
    or crashes. Ensure that the stat index passed is within valid range (typically
    defined by STAT_* constants). Avoid calling this method in tight loops without
    proper conditions, as it might cause performance degradation due to repeated recalculations.
  related:
  - GetStat
  - SetStat
  - AddStatModifier
  - RemoveStatModifier
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T16:14:57.442877'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
