api:
  class: ThreatManager
  method: IsThreatenedBy
  signature: bool ThreatManager::IsThreatenedBy(const Unit * who, bool includeOffline)
    const
documentation:
  brief: Determines whether a unit is threatened by the current threat manager.
  description: This method checks if a given unit is being threatened by the current
    ThreatManager instance, which is typically used in the context of NPC AI behavior
    and combat mechanics. The method evaluates whether the target unit has sufficient
    threat level to be considered as actively engaged in combat with the current unit.
    It includes an optional parameter to consider offline players when determining
    threat status. This functionality is essential for determining if a unit should
    be targeted or if it's safe to attack.
  parameters:
  - name: who
    description: A pointer to the Unit that is being checked for threat status. This
      represents the potential threat source, typically an NPC or player.
  - name: includeOffline
    description: Boolean flag indicating whether offline players should be considered
      in the threat evaluation. If true, offline players may contribute to threat
      levels; if false, only online players are considered.
  returns: Returns true if the specified unit is being threatened by the current ThreatManager
    instance, otherwise returns false. This indicates that the unit has sufficient
    threat level to be considered as actively engaged in combat with the current unit.
  examples:
  - title: Basic usage example
    code: "if (threatManager->IsThreatenedBy(player)) {\n    // Do something\n}\n"
    language: cpp
  - title: Advanced usage with offline consideration
    code: "bool result = threatManager->IsThreatenedBy(player, true);\nif (result)\
      \ {\n    // Handle offline player threat\n}\n"
    language: cpp
  notes: The method is typically used in conjunction with other threat-related functions
    within the ThreatManager class. Performance considerations include checking against
    the current unit's threat list and potentially involving multiple units at once.
    Thread safety depends on the implementation of the ThreatManager class, which
    may be thread-safe or require synchronization.
  warnings: This method should not be used as a standalone check for combat status;
    it is intended to be part of a larger threat management system. Care must be taken
    when using the includeOffline parameter, as it can significantly affect performance
    and behavior in certain scenarios.
  related:
  - GetThreatList
  - IsThreatened
  - AddThreat
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:09:05.974650'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
