api:
  class: Player
  method: SendMailResult
  signature: void Player::SendMailResult(uint64 mailId, int mailAction, int mailError,
    uint32 equipError, int itemGuid, uint32 itemCount) const
documentation:
  brief: Sends a mail result notification to the player's client indicating the outcome
    of a mail operation.
  description: This method sends a mail result message to the player's client, informing
    them about the status of their mail operation. It is used internally by the TrinityCore
    server to communicate mail-related outcomes such as successful delivery, errors
    during mail processing, or when items are added to mail. The method handles various
    mail actions including sending, retrieving, and deleting mail items, with specific
    error codes that correspond to different scenarios in the game mechanics. This
    method is typically called after mail operations are completed or when errors
    occur during mail handling.
  parameters:
  - name: mailId
    description: The unique identifier of the mail item being processed. This ID is
      used to track and reference specific mail messages within the game system.
  - name: mailAction
    description: 'The action type being performed on the mail. Valid values include:
      0 (send), 1 (retrieve), 2 (delete), 3 (item retrieve). This determines what
      kind of mail operation is being reported.'
  - name: mailError
    description: The error code associated with the mail operation. This can indicate
      success, failure, or specific error conditions such as 'Mail not found' or 'Item
      not found'. Values include 0 (success), 1 (error), 2 (item not found), 3 (mail
      not found), etc.
  - name: equipError
    description: The equipment error code, used when items are being equipped or added
      to mail. This typically represents inventory-related errors such as 'Item not
      found' or 'Inventory full'.
  - name: itemGuid
    description: The GUID of the item being processed in the mail operation. This
      is used to identify specific items within the game world.
  - name: itemCount
    description: The quantity of items being sent or retrieved. This represents how
      many items are involved in the mail operation, particularly when sending multiple
      items.
  returns: null
  examples:
  - title: Basic Mail Result Notification
    code: 'Player* player = GetPlayer();

      player->SendMailResult(1234567890ULL, 0, 0, 0, 0, 1);'
    language: cpp
  - title: Sending Mail with Error Handling
    code: 'Player* player = GetPlayer();

      uint64 mailId = 987654321ULL;

      int mailAction = 0;

      int mailError = 1;

      uint32 equipError = 0;

      int itemGuid = 0;

      uint32 itemCount = 0;

      player->SendMailResult(mailId, mailAction, mailError, equipError, itemGuid,
      itemCount);'
    language: cpp
  notes: This method is part of the internal mail system implementation and should
    not be called directly by external code. It's typically invoked when mail operations
    are completed or when errors occur during mail handling. The method uses a specific
    protocol for sending mail result notifications to client, which includes various
    error codes and action types.
  warnings: This method should only be used in internal server code contexts and not
    in player-facing code. Calling this method without proper context may cause client-side
    issues or incorrect mail status reporting. Also, the method does not validate
    parameters beyond what's required for sending messages to the client.
  related:
  - SendMail
  - Mail::SendMail
  - Mail::GetMail
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:42:09.083183'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
