api:
  class: SpellMgr
  method: GetPetLevelupSpellList
  signature: const PetLevelupSpellSet * SpellMgr::GetPetLevelupSpellList(uint32 petFamily)
    const
documentation:
  brief: Retrieves the set of spells that a pet learns when leveling up for a given
    family.
  description: The GetPetLevelupSpellList method returns a constant pointer to a PetLevelupSpellSet
    which contains all the spells that a pet of the specified family will learn as
    it levels up. This is used internally by the game engine to determine spell acquisition
    during pet level progression. The method takes a pet family ID as input and returns
    a data structure containing spell IDs and their corresponding levels at which
    they are learned. This functionality is crucial for maintaining pet behavior consistency
    across different pet types in World of Warcraft's TrinityCore implementation.
  parameters: []
  returns: A constant pointer to a PetLevelupSpellSet object that contains the list
    of spells and their level requirements for the specified pet family. Returns nullptr
    if no spell list exists for the given pet family ID.
  examples:
  - title: Retrieve and iterate through pet level-up spells
    code: "const PetLevelupSpellSet* spellList = sSpellMgr->GetPetLevelupSpellList(5);\
      \ // 5 = Felhunter\nif (spellList)\n{\n    for (auto& spellEntry : *spellList)\n\
      \    {\n        uint32 spellId = spellEntry.first;\n        uint32 level = spellEntry.second;\n\
      \        // Process each spell and its level requirement\n        printf(\"\
      Pet learns spell %u at level %u\\n\", spellId, level);\n    }\n}"
    language: cpp
  notes: This method is typically called during pet creation or level-up events. The
    returned PetLevelupSpellSet is a map of spell IDs to their corresponding level
    requirements. The data is loaded from the database at server startup and remains
    static during runtime.
  warnings: The returned pointer should not be modified as it points to internal static
    data structures. Accessing invalid pet family IDs may return nullptr, so always
    check for null before using the result.
  related:
  - GetPetSpellList
  - GetSpellInfo
  - LoadPetLevelupSpells
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:24:03.100912'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
