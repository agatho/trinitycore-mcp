api:
  class: LFGMgr
  method: GetOldState
  signature: LfgState LFGMgr::GetOldState(int guid)
documentation:
  brief: Retrieves the previous LFG state for a player identified by their GUID
  description: The GetOldState method retrieves the last known LFG (Looking For Group)
    state for a specific player using their unique identifier (GUID). This method
    is typically used to track state transitions in the LFG system, allowing the game
    to maintain historical context of a player's group finding status. The returned
    LfgState value represents the player's previous state before any recent changes
    occurred. This functionality is essential for maintaining consistency in group
    matching systems and preventing invalid state transitions.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the player whose previous LFG state
      is being retrieved
  returns: Returns an LfgState enum value representing the player's previous LFG state.
    Possible values may include states such as LFG_STATE_NONE, LFG_STATE_ROLECHECK,
    LFG_STATE_BOOT, LFG_STATE_PROPOSAL, LFG_STATE_GROUP, or LFG_STATE_FINISHED depending
    on the player's last known group finding status.
  examples:
  - title: Retrieve a player's previous LFG state
    code: "uint64 playerGuid = 123456789;\nLfgState previousState = sLFGMgr->GetOldState(playerGuid);\n\
      if (previousState != LFG_STATE_NONE)\n{\n    // Process the previous LFG state\n\
      \    sLog->outString(\"Player %u was previously in state %u\", playerGuid, previousState);\n\
      }"
    language: cpp
  notes: This method likely operates on internal player state tracking data structures
    maintained by the LFG manager. It's important to note that this function may return
    LFG_STATE_NONE if no previous state exists for the specified player GUID, indicating
    they haven't participated in any LFG activities yet.
  warnings: Ensure that the provided GUID is valid and corresponds to an existing
    player in the system. Calling this method with invalid or non-existent GUIDs could
    result in undefined behavior or incorrect state retrieval. The returned state
    may be outdated if multiple state changes occurred rapidly.
  related:
  - GetState
  - SetState
  - UpdatePlayerState
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:48:40.951839'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
