api:
  class: SpellScriptBase
  method: Register
  signature: void SpellScriptBase::Register()
documentation:
  brief: Registers spell script handlers with the spell system to enable custom spell
    behavior.
  description: The Register method is used to register spell script handlers within
    the TrinityCore spell system. This method is typically called during spell script
    initialization to bind specific callback functions (such as OnEffectApply, OnEffectRemove,
    etc.) to corresponding spell effects or phases. It allows developers to implement
    custom logic for spells by hooking into various stages of spell execution, such
    as when a spell effect is applied to a target or removed from it. The registration
    process ensures that the custom spell behavior is properly linked with the game's
    spell handling mechanisms.
  parameters: []
  returns: null
  examples:
  - title: Basic Spell Script Registration
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void Register()\
      \ override\n    {\n        OnEffectHit += SpellEffectFn(MySpellScript::HandleEffectHit,\
      \ EFFECT_0, SPELL_EFFECT_DUMMY);\n    }\n\nprivate:\n    void HandleEffectHit(SpellEffIndex\
      \ effIndex)\n    {\n        // Custom logic here\n    }\n};"
    language: cpp
  notes: This method should be called during spell script initialization, typically
    in the constructor or a dedicated Init() function. The registration must happen
    before the spell is executed to ensure proper hooking of callbacks.
  warnings: Incorrectly registering spell scripts can lead to crashes or undefined
    behavior. Ensure all callback functions are properly implemented and that the
    correct effect indices and spell effects are used when registering handlers.
  related:
  - SpellScript::Register
  - SpellScript::Init
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T20:58:06.689362'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
