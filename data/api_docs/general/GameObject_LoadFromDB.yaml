api:
  class: GameObject
  method: LoadFromDB
  signature: bool GameObject::LoadFromDB(int spawnId, int * map, bool addToMap, bool
    param3)
documentation:
  brief: Loads a game object from the database using the specified spawn ID and optional
    map parameters.
  description: The LoadFromDB method initializes a GameObject instance by loading
    its data from the database based on the provided spawn identifier. It supports
    optional parameters to control map integration and behavior during loading. This
    method is typically used during server startup or when dynamically spawning game
    objects in the world. The method performs database lookups and populates internal
    object state, including position, orientation, and other properties defined in
    the database entries. It returns true on successful loading and false if the object
    could not be found or loaded properly.
  parameters:
  - name: spawnId
    description: The unique identifier of the game object spawn entry in the database.
      This ID corresponds to entries in the gameobject_spawns table.
  - name: map
    description: Pointer to an integer representing the map ID where the object should
      be loaded. If null, the object's map is determined from the database entry.
  - name: addToMap
    description: Boolean flag indicating whether the loaded game object should be
      automatically added to its associated map. If true, the object will be registered
      in the world map system.
  - name: param3
    description: Reserved parameter for future use or specific internal behavior flags.
      Currently unused in standard TrinityCore implementations.
  returns: True if the game object was successfully loaded from the database and initialized;
    false otherwise, which may occur due to invalid spawn ID, missing database entries,
    or loading errors.
  examples:
  - title: Basic GameObject Loading
    code: "GameObject* go = new GameObject();\nint spawnId = 12345;\nint mapId = 0;\n\
      bool success = go->LoadFromDB(spawnId, &mapId, true, false);\nif (success) {\n\
      \    // Object loaded successfully\n}"
    language: cpp
  - title: Loading Without Map Integration
    code: "GameObject* go = new GameObject();\nint spawnId = 67890;\nbool success\
      \ = go->LoadFromDB(spawnId, nullptr, false, false);\nif (success) {\n    //\
      \ Object loaded but not added to map\n    // Can be manually added later using\
      \ AddToWorld()\n}"
    language: cpp
  notes: This method is primarily used during server initialization or dynamic object
    spawning. It performs database queries and should be called carefully in performance-sensitive
    contexts. The method assumes that the GameObject instance has been properly constructed
    before calling.
  warnings: Calling this method with an invalid spawnId may result in undefined behavior
    or crashes. Ensure that the spawnId corresponds to a valid database entry. Also,
    if addToMap is set to true, make sure the map is initialized and ready for object
    addition.
  related:
  - GameObject::SaveToDB
  - GameObject::AddToWorld
  - GameObject::RemoveFromWorld
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T20:13:54.110030'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
