api:
  class: ResourceManager
  method: GetTotalResourceConsumed
  signature: uint32 ResourceManager::GetTotalResourceConsumed(ResourceType type)
documentation:
  brief: Calculates and returns the total amount of a specified resource type consumed
    by all active players in the game world.
  description: The GetTotalResourceConsumed method aggregates the consumption of a
    specific resource type across all currently logged-in players within the TrinityCore
    instance. This method is typically used for tracking resource usage, balancing
    gameplay mechanics, or generating reports on server resource consumption. The
    method operates on a per-resource-type basis, meaning it must be called multiple
    times with different resource types to get a complete picture of total consumption.
    It's important to note that this value represents cumulative consumption and may
    not reflect real-time changes during active gameplay sessions.
  parameters: []
  returns: Returns a uint32 value representing the total quantity of the specified
    resource type consumed across all players in the game world. A return value of
    zero indicates either no consumption has occurred or the resource type is not
    tracked by this system.
  examples:
  - title: Basic Usage Example
    code: 'uint32 totalGold = resourceManager->GetTotalResourceConsumed(ResourceType::GOLD);

      printf("Total gold consumed: %u\n", totalGold);'
    language: cpp
  - title: Iterating Through All Resource Types
    code: "for (int i = 0; i < MAX_RESOURCE_TYPES; ++i)\n{\n    ResourceType type\
      \ = static_cast<ResourceType>(i);\n    uint32 consumed = resourceManager->GetTotalResourceConsumed(type);\n\
      \    printf(\"Resource type %d: %u consumed\\n\", i, consumed);\n}"
    language: cpp
  notes: This method may have performance implications when called frequently due
    to the need to iterate through all active players and aggregate their resource
    consumption data. The implementation likely caches results for a short period
    to reduce computational overhead. This method should only be called from the main
    game thread or within a synchronized context to ensure data consistency.
  warnings: The returned value represents cumulative consumption which may not update
    in real-time during active gameplay sessions. If used for balancing purposes,
    consider the potential for stale data. Additionally, this method might not account
    for resources consumed through non-standard means (e.g., through custom scripts
    or exploits).
  related:
  - GetResourceConsumed
  - UpdateResourceConsumption
  - ResetResourceConsumption
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:13:22.337699'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
