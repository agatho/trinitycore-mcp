api:
  class: Player
  method: _StoreOrEquipNewItem
  signature: bool Player::_StoreOrEquipNewItem(uint32 vendorslot, uint32 item, uint8
    count, uint8 bag, uint8 slot, int64 price, const ItemTemplate * pProto, Creature
    * pVendor, const VendorItem * crItem, bool bStore)
documentation:
  brief: Store or equip an item from a vendor based on vendor slot and item ID
  description: This method handles the process of either storing an item in the player's
    inventory or equipping it directly to a slot, depending on whether the item is
    a container or not. It takes into account the vendor's slot, item ID, quantity,
    bag and slot information, price, and item template to determine the appropriate
    action. The method ensures that items are properly handled according to game mechanics,
    including handling of currency, item quality, and inventory space constraints.
  parameters:
  - name: vendorslot
    description: The vendor slot index from which the item is being retrieved
  - name: item
    description: The item ID to be stored or equipped
  - name: count
    description: The quantity of items to be processed
  - name: bag
    description: The bag slot where the item should be stored (0 = not a container)
  - name: slot
    description: The specific slot within the bag where the item should be placed
  - name: price
    description: The price paid for the item, used for currency handling
  - name: pProto
    description: Pointer to the ItemTemplate structure defining item properties
  - name: pVendor
    description: Pointer to the Creature object representing the vendor
  - name: crItem
    description: Pointer to the VendorItem structure containing vendor item details
  - name: bStore
    description: Boolean flag indicating whether to store (true) or equip (false)
      the item
  returns: Returns true if the item was successfully processed, false otherwise. The
    method may return false if inventory space is insufficient or if the item cannot
    be properly handled due to game mechanics constraints.
  examples:
  - title: Basic usage example
    code: 'Player* player = GetPlayer();


      ItemTemplate* pProto = sObjectMgr->GetItemTemplate(12345);

      Creature* vendor = GetCreature();

      VendorItem* crItem = &vendor->GetVendorItem(0);


      bool result = player->_StoreOrEquipNewItem(0, 12345, 1, 0, 0, 1000, pProto,
      vendor, crItem, true);'
    language: cpp
  - title: Advanced usage example
    code: "Player* player = GetPlayer();\n\nItemTemplate* pProto = sObjectMgr->GetItemTemplate(12345);\n\
      Creature* vendor = GetCreature();\nVendorItem* crItem = &vendor->GetVendorItem(0);\n\
      \nbool result = player->_StoreOrEquipNewItem(1, 12345, 10, 1, 2, 5000, pProto,\
      \ vendor, crItem, false);\nif (result)\n    player->AddItemToInventory(12345,\
      \ 10);"
    language: cpp
  notes: The method is designed to handle both container and non-container items correctly.
    It performs validation checks on inventory space and item quality before processing.
    This method is typically used in vendor transaction handling during quest completion
    or item purchase scenarios.
  warnings: This method should not be called directly without proper validation of
    the vendor item and item template. The method may fail if the player's inventory
    is full or if the item does not match expected parameters. Always ensure that
    the vendor item exists before calling this method.
  related:
  - Player::AddItemToInventory
  - Player::StoreItem
  - Player::EquipItem
  - Player::GetItemCount
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T22:58:07.178953'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
