api:
  class: ProfessionManager
  method: GetGlobalMetrics
  signature: const ProfessionMetrics & ProfessionManager::GetGlobalMetrics() const
documentation:
  brief: Returns a constant reference to the global profession metrics object for
    the current instance.
  description: The GetGlobalMetrics method provides access to global profession-related
    statistics and data that are shared across all players and instances within the
    TrinityCore server. This method returns a const reference to a ProfessionMetrics
    structure, ensuring that the returned data cannot be modified directly through
    this interface. The metrics typically include information such as global crafting
    success rates, resource consumption patterns, and other aggregate profession statistics
    that affect gameplay balance and progression. This method is designed to be thread-safe
    and efficient for frequent access during gameplay operations.
  parameters: []
  returns: A constant reference to a ProfessionMetrics object containing global profession
    statistics and data. The returned object should not be modified directly as it's
    a const reference.
  examples:
  - title: Accessing Global Crafting Statistics
    code: 'const ProfessionMetrics& metrics = sProfessionManager->GetGlobalMetrics();

      uint32 successRate = metrics.GetCraftingSuccessRate();

      uint32 resourceCost = metrics.GetAverageResourceCost();'
    language: cpp
  - title: Using Global Metrics in Custom Logic
    code: "void ApplyGlobalProfessionModifiers(Player* player) {\n    const ProfessionMetrics&\
      \ globalMetrics = sProfessionManager->GetGlobalMetrics();\n    float modifier\
      \ = globalMetrics.GetGlobalCraftingMultiplier();\n    // Apply the modifier\
      \ to player's crafting effectiveness\n    player->SetCraftingEffectiveness(player->GetCraftingEffectiveness()\
      \ * modifier);\n}"
    language: cpp
  notes: This method is typically used for balancing game mechanics and should be
    called sparingly in performance-critical sections. The returned reference remains
    valid for the lifetime of the ProfessionManager instance. This method does not
    perform any locking internally, but if used in a multi-threaded environment, ensure
    proper synchronization if modifications to the metrics are possible.
  warnings: Do not attempt to modify the returned ProfessionMetrics object through
    this reference as it is const. If you need to modify global profession data, use
    appropriate setter methods or dedicated modification functions provided by the
    ProfessionManager class. Be cautious when using this in high-frequency loops as
    repeated calls may impact performance if the metrics are frequently updated.
  related:
  - SetGlobalMetrics
  - GetProfessionMetrics
  - UpdateGlobalMetrics
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:06:13.321901'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
