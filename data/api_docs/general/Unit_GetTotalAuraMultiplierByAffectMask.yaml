api:
  class: Unit
  method: GetTotalAuraMultiplierByAffectMask
  signature: float Unit::GetTotalAuraMultiplierByAffectMask(int auraType, const SpellInfo
    * affectedSpell) const
documentation:
  brief: Calculates the total aura multiplier effect for a specific aura type and
    spell.
  description: This method computes the cumulative multiplier effect of all auras
    that affect a particular aura type on the specified spell. It is used to determine
    how much a given aura type contributes to the overall effectiveness of a spell,
    considering all applicable aura effects. The method takes into account various
    factors including spell modifiers, aura effects, and the specific aura type being
    evaluated.
  parameters:
  - name: auraType
    description: The type of aura to evaluate for multiplier calculation. This typically
      corresponds to a specific aura effect type such as 'AuraType' or 'SpellEffect'
      in TrinityCore.
  - name: affectedSpell
    description: The spell information that is being affected by the aura multipliers.
      This parameter determines which spell's effects are considered when calculating
      the multiplier.
  returns: Returns a float value representing the total multiplier effect applied
    to the specified aura type and spell, where values may range from 0.0 to 1.0 or
    higher depending on the combined effects of all applicable auras.
  examples:
  - title: Basic Usage Example
    code: float multiplier = unit->GetTotalAuraMultiplierByAffectMask(SPELL_AURA_MOD_DAMAGE_PERCENT,
      spellInfo);
    language: cpp
  - title: Advanced Usage Example
    code: "float multiplier = unit->GetTotalAuraMultiplierByAffectMask(SPELL_AURA_MOD_CAST_TIME,\
      \ spellInfo);\nif (multiplier > 1.0f)\n    // Apply additional effects\nelse\
      \ if (multiplier < 1.0f)\n    // Apply reduced effects"
    language: cpp
  notes: This method is typically used in conjunction with other aura calculation
    methods to determine overall spell effectiveness. It may involve complex calculations
    involving multiple sources of aura effects, and performance considerations should
    be taken into account when using it frequently.
  warnings: Care must be taken when using this method as it involves complex calculations
    that can affect game balance if not properly handled. Incorrect usage may lead
    to unexpected behavior in spell effects or player abilities.
  related:
  - GetTotalAuraMultiplierByAffectMask
  - GetAuraEffect
  - GetAuraMod
  - GetSpellMod
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T12:35:54.200707'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
