api:
  class: Player
  method: GetItemByEntry
  signature: Item * Player::GetItemByEntry(uint32 entry, ItemSearchLocation where)
    const
documentation:
  brief: Returns the item instance matching the specified entry ID from the player's
    inventory.
  description: This method retrieves an item from the player's inventory based on
    its entry ID. It searches through all available item slots including bags, equipped
    items, and backpack items. The method is commonly used in scripting and game mechanics
    to locate specific items for various operations such as item checking, quest completion,
    or item manipulation. The search location parameter allows specifying where to
    look within the player's inventory, making it flexible for different use cases.
  parameters:
  - name: entry
    description: The unique identifier (entry ID) of the item to search for. This
      value corresponds to the item's database entry in the 'item_template' table.
  - name: where
    description: Specifies where to search within the player's inventory. Valid values
      include ItemSearchLocation::InventoryBag, ItemSearchLocation::InventoryEquipped,
      and ItemSearchLocation::InventoryBackpack.
  returns: Returns a pointer to the Item object if found, otherwise returns nullptr.
    The returned item may be nullptr if no matching item exists in the specified location
    or if the player's inventory is empty.
  examples:
  - title: Basic usage example
    code: "Item* item = player->GetItemByEntry(12345); // Returns item with entry\
      \ ID 12345\nif (item != nullptr)\n{\n    // Item found, proceed with operations\n\
      \    item->SetCount(1);\n}\nelse\n{\n    // No item found\n}"
    language: cpp
  - title: Advanced usage example
    code: "Item* item = player->GetItemByEntry(12345, ItemSearchLocation::InventoryEquipped);\n\
      if (item != nullptr)\n{\n    // Only checks equipped items\n    // Perform operations\
      \ on found item\n}\nelse\n{\n    // No item found in equipped slots\n}"
    language: cpp
  notes: This method is thread-safe and can be used in both single-threaded and multi-threaded
    contexts. Performance considerations include checking all inventory locations,
    which may impact efficiency if used frequently in loops or high-frequency operations.
    Implementation details include that this method internally uses the player's inventory
    management system to locate items.
  warnings: This method returns nullptr when no matching item is found, so developers
    should always check for null before using the returned item. Common mistakes include
    not checking for null before dereferencing the returned pointer, which can lead
    to crashes or undefined behavior. The method may return nullptr even if an item
    exists but is not in the specified location.
  related:
  - GetItemByGuid
  - GetItemBySlot
  - HasItemByEntry
  - GetItemCountByEntry
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:57:22.762441'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
