api:
  class: GuildMgr
  method: GetGuildByGuid
  signature: Guild * GuildMgr::GetGuildByGuid(int guid) const
documentation:
  brief: Retrieves a guild object by its unique identifier (GUID) from the guild manager.
  description: The GetGuildByGuid method is used to fetch a Guild object from the
    TrinityCore server's guild management system using a specified GUID. This method
    serves as a lookup mechanism for accessing guild data in memory, allowing other
    systems to retrieve information about a specific guild without needing to query
    the database directly. The method performs a fast lookup in an internal container
    or map that stores all active guilds, making it efficient for frequent access
    during gameplay operations such as guild-related commands, member management,
    or guild communication. It is important to note that this method returns a pointer
    to the guild object, which may be null if no guild exists with the provided GUID.
  parameters: []
  returns: A pointer to the Guild object corresponding to the provided GUID, or nullptr
    if no guild exists with that identifier.
  examples:
  - title: Basic Usage
    code: "Guild* guild = sGuildMgr->GetGuildByGuid(12345);\nif (guild)\n{\n    //\
      \ Guild found, perform operations\n    std::string guildName = guild->GetName();\n\
      }"
    language: cpp
  - title: Error Handling
    code: "Guild* guild = sGuildMgr->GetGuildByGuid(99999);\nif (!guild)\n{\n    //\
      \ Handle case where guild does not exist\n    sLog->outString(\"Guild with GUID\
      \ 99999 not found.\");\n}\nelse\n{\n    // Proceed with guild operations\n}"
    language: cpp
  notes: This method performs a lookup in an internal data structure, typically implemented
    as a hash map or similar container for O(1) average time complexity. The returned
    Guild pointer is valid only while the guild exists in memory and should not be
    stored for long-term use without proper reference counting or lifecycle management.
  warnings: The returned Guild pointer may become invalid if the guild is disbanded
    or removed from memory during the lifetime of the pointer. Always check for null
    returns before dereferencing the pointer to avoid segmentation faults.
  related:
  - GetGuildByName
  - GetGuildByLeaderGuid
  - CreateGuild
  - RemoveGuild
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T13:01:31.024774'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
