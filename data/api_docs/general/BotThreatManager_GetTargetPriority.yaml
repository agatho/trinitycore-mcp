api:
  class: BotThreatManager
  method: GetTargetPriority
  signature: ThreatPriority BotThreatManager::GetTargetPriority(Unit * target) const
documentation:
  brief: Calculates and returns the threat priority level for a specified target unit
    within the bot's threat management system.
  description: The GetTargetPriority method evaluates the current threat level assigned
    to a given target unit by the bot's AI system. It determines how prioritized the
    target is for the bot to attack or focus on during combat situations. This priority
    value influences decision-making processes such as target selection, spell casting
    order, and overall combat behavior. The method considers various factors like
    the target's threat contribution, proximity, threat modifiers, and the bot's current
    combat state to compute this value. It is a core part of the bot's tactical awareness
    system that helps maintain optimal engagement strategies.
  parameters: []
  returns: Returns a ThreatPriority enum value indicating the calculated priority
    level for the target. Possible values typically include LOW, MEDIUM, HIGH, or
    CRITICAL, representing different levels of threat importance. The exact enumeration
    values depend on the internal implementation but generally follow a hierarchical
    system where higher values indicate more urgent targeting requirements.
  examples:
  - title: Basic Target Priority Check
    code: "Unit* target = bot->GetVictim();\nThreatPriority priority = bot->GetThreatManager()->GetTargetPriority(target);\n\
      if (priority >= ThreatPriority::HIGH)\n{\n    // Execute high-priority actions\n\
      \    bot->CastSpell(target, SPELL_CRITICAL_STRIKE, true);\n}"
    language: cpp
  notes: This method is typically called during combat decision-making cycles and
    may involve performance considerations when evaluating multiple targets. The returned
    value should be treated as a dynamic priority that changes with the target's threat
    state and bot's current situation. Implementation details suggest this method
    might cache previous results for efficiency, but it will recalculate when necessary
    based on changing conditions.
  warnings: The method assumes the target unit is valid and in the same combat context
    as the bot. Calling this method with a null or invalid target may lead to undefined
    behavior. Additionally, threat priorities can change rapidly during combat, so
    relying on cached values without re-evaluation might result in outdated decisions.
  related:
  - GetThreatList
  - AddThreat
  - RemoveThreat
  - GetHighestThreatTarget
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T16:44:09.913134'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
