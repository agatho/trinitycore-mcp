api:
  class: Item
  method: hasQuest
  signature: bool Item::hasQuest(uint32 quest_id) const
documentation:
  brief: Checks if the item is associated with a specific quest in the game database.
  description: The hasQuest method determines whether the current Item object is linked
    to a particular quest through the game's quest system. This check typically involves
    verifying the existence of a record in the database that connects the item to
    the specified quest ID. The method is commonly used during quest progression,
    item usage, or when determining if an item should be available for quest completion.
    It does not validate the player's quest status or progress, only the item's association
    with the quest.
  parameters: []
  returns: Returns true if the item has a quest association with the specified quest_id;
    otherwise returns false. A return value of true indicates that there exists a
    database entry linking this item to the given quest ID.
  examples:
  - title: Basic Quest Association Check
    code: "Item* item = player->GetItemByEntry(12345);\nif (item && item->hasQuest(67890))\
      \ {\n    // The item is associated with quest 67890\n    SendQuestCompleteMessage(\"\
      Quest completed!\");\n}"
    language: cpp
  - title: Conditional Item Usage Based on Quest
    code: "void UseItem(Item* item) {\n    if (item->hasQuest(54321)) {\n        //\
      \ Item can only be used if player has completed quest 54321\n        player->CompleteQuest(54321);\n\
      \    } else {\n        SendSystemMessage(\"You cannot use this item yet.\");\n\
      \    }\n}"
    language: cpp
  notes: This method relies on database records linking items to quests. The check
    is typically fast as it's based on pre-indexed database lookups. It should be
    used in conjunction with other quest validation methods for full quest progression
    logic.
  warnings: The method only checks for item-quest association, not whether the player
    has completed or started the quest. Using this without proper quest state validation
    may lead to unexpected behavior in quest progression.
  related:
  - GetQuestId
  - AddQuest
  - RemoveQuest
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T11:17:50.941021'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
