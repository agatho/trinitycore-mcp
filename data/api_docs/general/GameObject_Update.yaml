api:
  class: GameObject
  method: Update
  signature: void GameObject::Update(uint32 p_time)
documentation:
  brief: Updates the game object's state and handles time-based logic for the object.
  description: The GameObject::Update method is a core part of the TrinityCore game
    loop, responsible for updating the state of game objects such as doors, chests,
    and other interactive elements. It processes time-based events, handles animations,
    and manages the object's behavior over time. This method is called by the core
    game engine during each update cycle, typically every 100 milliseconds, to ensure
    that all GameObjects maintain their correct state and respond appropriately to
    in-game conditions. The method takes a time parameter that represents the elapsed
    time since the last update, which is used for calculating movement, cooldowns,
    or other time-dependent behaviors.
  parameters:
  - name: p_time
    description: The time elapsed in milliseconds since the last update cycle. This
      value is used to calculate time-based behavior such as animation progress, cooldown
      timers, and state transitions.
  returns: null
  examples:
  - title: Basic GameObject Update Usage
    code: "void MyGameObject::Update(uint32 p_time)\n{\n    // Call base class update\n\
      \    GameObject::Update(p_time);\n    \n    // Custom logic for this specific\
      \ object\n    if (m_cooldown > 0)\n        m_cooldown = std::max(0u, m_cooldown\
      \ - p_time);\n}"
    language: cpp
  - title: Advanced GameObject Update with State Management
    code: "void DoorGameObject::Update(uint32 p_time)\n{\n    // Base update logic\n\
      \    GameObject::Update(p_time);\n    \n    // Handle door opening/closing based\
      \ on time\n    if (m_isOpen && m_openTimer > 0)\n    {\n        m_openTimer\
      \ = std::max(0u, m_openTimer - p_time);\n        if (m_openTimer == 0)\n   \
      \         CloseDoor();\n    }\n    \n    // Handle any scheduled events\n  \
      \  HandleScheduledEvents(p_time);\n}"
    language: cpp
  notes: This method is automatically called by the TrinityCore core during each game
    tick. Developers should not call this method directly unless implementing custom
    GameObject behavior that requires explicit control over update timing. The p_time
    parameter represents actual elapsed time and may vary between updates due to system
    load or frame rate changes.
  warnings: Do not modify the GameObject's position or state in a way that could cause
    race conditions or invalid game states during update cycles. Avoid performing
    heavy computations in this method as it runs frequently and can impact performance
    if not optimized properly.
  related:
  - GameObject::GetGUID
  - GameObject::SetPhaseMask
  - GameObject::UpdateObjectVisibility
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T20:10:09.256760'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
