api:
  class: Transport
  method: GetPositionOffsetTo
  signature: int Transport::GetPositionOffsetTo(const int & endPos) const
documentation:
  brief: Calculates and returns the positional offset of a transport object relative
    to a specified end position.
  description: The GetPositionOffsetTo method computes the difference in position
    between the current transport's location and a given endpoint. This is commonly
    used in World of Warcraft's TrinityCore framework to determine how far a transport
    (such as a boat or zeppelin) has moved from its starting point toward a destination.
    The method takes an integer representing the end position and returns an integer
    offset that indicates the relative displacement along the transport's path. It
    is typically employed during movement calculations, pathfinding, or synchronization
    of transport entities with their destinations.
  parameters:
  - name: endPos
    description: An integer value representing the target or endpoint position on
      the transport's path. This parameter defines where the offset should be calculated
      from the current transport position.
  returns: Returns an integer value indicating the positional offset from the current
    transport position to the specified end position. A positive value suggests movement
    in the forward direction, while a negative value indicates backward movement or
    a reversal along the path.
  examples:
  - title: Calculate Transport Offset
    code: 'int offset = transport->GetPositionOffsetTo(1000);

      // Returns the difference between current position and end position 1000'
    language: cpp
  - title: Determine Movement Direction
    code: "int currentPosition = transport->GetPos();\nint offset = transport->GetPositionOffsetTo(currentPosition\
      \ + 500);\nif (offset > 0) {\n    // Transport is moving forward\n} else if\
      \ (offset < 0) {\n    // Transport is moving backward\n}"
    language: cpp
  notes: This method assumes that the transport's current position and the provided
    endPos are in the same coordinate system. The implementation may rely on internal
    state tracking of the transport's movement, so calling this method during an active
    movement update could yield inconsistent results if not synchronized properly.
  warnings: Ensure that the 'endPos' parameter is valid and within expected bounds
    to avoid unexpected behavior. This method should not be called in high-frequency
    loops without performance consideration, as it may involve calculations or state
    lookups depending on the transport's implementation.
  related:
  - GetPos
  - GetTransportInfo
  - MoveTo
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T14:41:12.918434'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
