api:
  class: BotLifecycleMgr
  method: OnBotSpawnSuccess
  signature: void BotLifecycleMgr::OnBotSpawnSuccess(int guid, uint32 accountId)
documentation:
  brief: Handles successful bot spawning events by associating a bot's GUID with an
    account ID in the lifecycle management system.
  description: The OnBotSpawnSuccess method is invoked when a bot has been successfully
    created and spawned within the TrinityCore environment. This method serves as
    a callback mechanism to notify the BotLifecycleMgr that a new bot instance is
    active and ready for use. It associates the unique identifier (GUID) of the newly
    spawned bot with the account ID of its owner, enabling tracking and management
    of bot instances per user account. The method likely updates internal data structures
    or logs to reflect the successful spawn event, which may be used for billing,
    statistics, or administrative purposes. This method is typically called from within
    the core spawning logic after all necessary checks and initialization steps have
    completed successfully.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the newly spawned bot. This value
      represents the internal database ID assigned to the bot object upon successful
      creation.
  - name: accountId
    description: The account ID of the player who owns the bot. This identifies which
      user account the bot belongs to and is used for tracking ownership.
  returns: null
  examples:
  - title: Basic usage in spawn handler
    code: "void MySpawnHandler::HandleBotSpawn(int botGuid, uint32 ownerAccountId)\n\
      {\n    // After confirming successful bot creation\n    BotLifecycleMgr::Instance()->OnBotSpawnSuccess(botGuid,\
      \ ownerAccountId);\n}"
    language: cpp
  - title: Integration with account management system
    code: "class AccountManager\n{\npublic:\n    void RegisterNewBot(int botGuid,\
      \ uint32 accountId)\n    {\n        // Perform account-specific operations\n\
      \        LogBotCreation(accountId, botGuid);\n        \n        // Notify lifecycle\
      \ manager of successful spawn\n        BotLifecycleMgr::Instance()->OnBotSpawnSuccess(botGuid,\
      \ accountId);\n    }\n};"
    language: cpp
  notes: This method is likely part of an event-driven architecture where bot lifecycle
    events are processed asynchronously. The implementation may involve thread-safe
    operations since bot spawning can occur concurrently across multiple threads.
    It's expected that this method does not perform heavy computations or blocking
    I/O operations to maintain system responsiveness.
  warnings: Ensure that the GUID and accountId parameters are valid before calling
    this method, as invalid values could lead to data inconsistency or corruption
    in internal tracking systems. This method should only be called after confirming
    that the bot has truly been spawned successfully, otherwise it may cause incorrect
    state management.
  related:
  - OnBotSpawnFailure
  - OnBotDespawn
  - GetBotByGuid
  - GetBotsByAccount
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T01:47:46.667274'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
