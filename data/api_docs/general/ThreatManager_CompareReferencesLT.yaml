api:
  class: ThreatManager
  method: CompareReferencesLT
  signature: bool ThreatManager::CompareReferencesLT(const ThreatReference * a, const
    ThreatReference * b, float aWeight)
documentation:
  brief: Compares two threat references for ordering based on threat values and weights.
  description: The CompareReferencesLT method is used to determine the relative ordering
    of two ThreatReference objects within the ThreatManager. It evaluates whether
    the first reference should be ordered before the second one based on their threat
    levels and a provided weight factor. This comparison is typically used in sorting
    operations or priority queue management where threat values need to be prioritized.
    The method considers both the raw threat values and applies a weighting mechanism
    to influence the ordering decision, which is essential for proper mob targeting
    behavior in World of Warcraft's combat system.
  parameters:
  - name: a
    description: Pointer to the first ThreatReference object to compare
  - name: b
    description: Pointer to the second ThreatReference object to compare
  - name: aWeight
    description: Float value representing the weight factor applied to the comparison
      logic
  returns: Returns true if reference 'a' should be ordered before reference 'b', false
    otherwise. The ordering is determined by comparing threat values adjusted by the
    provided weight factor.
  examples:
  - title: Basic threat reference comparison
    code: 'ThreatReference* ref1 = new ThreatReference();

      ThreatReference* ref2 = new ThreatReference();

      float weight = 1.5f;

      bool result = threatManager->CompareReferencesLT(ref1, ref2, weight);

      // Returns true if ref1''s weighted threat is less than ref2''s weighted threat'
    language: cpp
  notes: This method is typically used internally by the ThreatManager for maintaining
    ordered lists of threat references. The weighting factor allows for dynamic adjustment
    of threat priorities, which can be useful in special combat scenarios or when
    implementing custom AI behaviors.
  warnings: Ensure that both ThreatReference pointers are valid and not null before
    calling this method, as dereferencing invalid pointers will cause undefined behavior.
    The weight parameter should be carefully chosen to avoid unexpected ordering results.
  related:
  - GetThreatList
  - AddThreat
  - UpdateThreat
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T05:26:05.073027'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
