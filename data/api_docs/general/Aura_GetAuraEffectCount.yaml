api:
  class: Aura
  method: GetAuraEffectCount
  signature: std::size_t Aura::GetAuraEffectCount() const
documentation:
  brief: Returns the total count of aura effects associated with this aura instance.
  description: The GetAuraEffectCount method retrieves the number of active aura effects
    that are currently applied to a target through this aura. In World of Warcraft's
    TrinityCore framework, an aura can have multiple effects (such as damage over
    time, stat bonuses, or debuffs), and this method provides a way to determine how
    many such effects are active. This is useful for various game mechanics including
    aura stacking rules, effect validation, and UI display logic. The returned count
    reflects the current state of the aura and may change dynamically as effects are
    applied or removed.
  parameters: []
  returns: A std::size_t value representing the number of active aura effects contained
    within this aura instance. Returns zero if no effects are currently active.
  examples:
  - title: Basic Usage to Check Active Effects
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    std::size_t effectCount\
      \ = aura->GetAuraEffectCount();\n    if (effectCount > 0)\n    {\n        //\
      \ Process or display the number of active effects\n        sLog->outString(\"\
      Aura has %zu active effects.\", effectCount);\n    }\n}"
    language: cpp
  - title: Using Effect Count for Stacking Logic
    code: "Aura* aura = player->GetAura(67890);\nif (aura)\n{\n    std::size_t effectCount\
      \ = aura->GetAuraEffectCount();\n    if (effectCount >= 5)\n    {\n        //\
      \ Prevent further stacking or apply special behavior\n        sLog->outString(\"\
      Maximum stacking reached for aura.\");\n    }\n}"
    language: cpp
  notes: This method does not account for temporary removals of effects during combat
    or spell processing. The count returned is based on the current internal state
    of the aura object. Performance-wise, this is a fast operation as it simply returns
    a cached value.
  warnings: Be cautious when using this method in loops or frequently called functions,
    as repeatedly checking effect counts can impact performance if done excessively.
    Also, ensure that the Aura pointer is valid before calling this method to avoid
    undefined behavior.
  related:
  - GetAuraEffect
  - AddAuraEffect
  - RemoveAuraEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:25:33.643759'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
