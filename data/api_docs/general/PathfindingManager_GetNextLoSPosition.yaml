api:
  class: PathfindingManager
  method: GetNextLoSPosition
  signature: int PathfindingManager::GetNextLoSPosition(const int & current, Unit
    * target)
documentation:
  brief: Calculates and returns the next line-of-sight position for a unit moving
    toward a target.
  description: The GetNextLoSPosition method determines the optimal next position
    along a path that maintains line-of-sight visibility between the current unit
    and its target. This is commonly used in AI pathfinding to ensure units do not
    lose sight of their targets during movement, particularly in combat scenarios
    where maintaining visual contact is crucial for spell casting or targeting. The
    method evaluates potential positions based on navigation mesh data and obstacle
    detection to find a valid location that preserves line-of-sight. It typically
    returns an identifier or index representing the next navigable point in the path.
  parameters:
  - name: current
    description: The current position index or identifier within the pathfinding system.
      This represents the unit's present location in the navigation mesh.
  - name: target
    description: Pointer to the target Unit object that the current unit is attempting
      to maintain line-of-sight with during movement.
  returns: An integer representing the index or identifier of the next valid position
    in the pathfinding grid that maintains line-of-sight visibility to the target.
    Returns -1 if no valid position can be determined.
  examples:
  - title: Basic usage for AI movement
    code: "int nextPos = pathfinder->GetNextLoSPosition(currentNode, targetUnit);\n\
      if (nextPos != -1) {\n    // Proceed to move to nextPos\n    unit->MoveTo(nextPos);\n\
      }"
    language: cpp
  - title: Pathfinding with error handling
    code: "int result = pathfinder->GetNextLoSPosition(currentNode, targetUnit);\n\
      if (result >= 0) {\n    // Valid position found\n    unit->SetDestination(result);\n\
      } else if (result == -1) {\n    // No line-of-sight path available\n    unit->Stop();\n\
      }"
    language: cpp
  notes: This method relies heavily on the underlying navigation mesh and may be computationally
    expensive when evaluating multiple positions. It should only be called periodically
    during movement updates rather than every frame to avoid performance degradation.
  warnings: Ensure that the target unit remains valid throughout the lifetime of the
    call, as invalid pointers can lead to undefined behavior or crashes. Also, this
    method does not account for dynamic obstacles that may appear between units after
    the initial calculation.
  related:
  - GetNextPosition
  - IsInLineOfSight
  - CalculatePath
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:38:34.650518'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
