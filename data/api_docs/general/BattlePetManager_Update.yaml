api:
  class: BattlePetManager
  method: Update
  signature: void BattlePetManager::Update(int * player, uint32 diff)
documentation:
  brief: Updates the battle pet manager state with the provided player data and time
    difference.
  description: The Update method in BattlePetManager is responsible for processing
    and maintaining the state of battle pets associated with a player. It takes a
    pointer to a player object and a time difference value, likely used to synchronize
    pet states, update cooldowns, or handle AI behavior over time. This method is
    typically called during the game loop to ensure that battle pet data remains consistent
    with the passage of time and player actions. The method does not return any value
    but modifies internal state based on the provided parameters.
  parameters:
  - name: player
    description: Pointer to an integer representing the player identifier or index
      in the game world. This parameter is used to identify which player's battle
      pets should be updated.
  - name: diff
    description: A uint32 value representing the time difference (in milliseconds)
      since the last update call. Used to calculate elapsed time for pet behavior,
      cooldowns, or status updates.
  returns: null
  examples:
  - title: Basic Update Call
    code: 'int playerId = 12345;

      uint32 deltaTime = 1000; // 1 second

      battlePetManager->Update(&playerId, deltaTime);'
    language: cpp
  - title: Integration with Game Loop
    code: "void GameWorld::Update(uint32 diff) {\n    for (auto& player : players_)\
      \ {\n        battlePetManager_->Update(&player->GetGUID().GetCounter(), diff);\n\
      \    }\n}"
    language: cpp
  notes: This method is likely called from within the main game loop or a dedicated
    update thread. It's important to ensure that the player pointer passed in is valid
    and points to an active player object. The time difference parameter should accurately
    reflect the actual elapsed time for correct behavior simulation.
  warnings: Passing an invalid or null player pointer may lead to undefined behavior
    or crashes. Ensure that the player data is valid before calling this method, especially
    if it's accessed from multiple threads.
  related:
  - GetBattlePet
  - AddBattlePet
  - RemoveBattlePet
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T02:31:52.239316'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
