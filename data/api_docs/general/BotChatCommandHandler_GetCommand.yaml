api:
  class: BotChatCommandHandler
  method: GetCommand
  signature: const ChatCommand * BotChatCommandHandler::GetCommand(const std::string
    & name)
documentation:
  brief: Retrieves a chat command by its name from the bot's command list
  description: The GetCommand method searches through the internal collection of available
    chat commands within the BotChatCommandHandler class and returns a pointer to
    the ChatCommand structure that matches the provided command name. This method
    is typically used during command processing to locate and validate user-input
    commands before execution. The returned pointer will be null if no matching command
    is found, indicating an invalid or unrecognized command. This functionality supports
    the dynamic command handling system used by TrinityCore's bot framework for managing
    in-game bot behavior through chat commands.
  parameters:
  - name: name
    description: The string name of the chat command to search for. This should match
      exactly with the command identifier defined in the command list, including proper
      capitalization and spacing.
  returns: A pointer to a const ChatCommand structure representing the found command,
    or nullptr if no command with the specified name exists in the handler's command
    list.
  examples:
  - title: Basic Command Retrieval
    code: "const ChatCommand* cmd = botHandler->GetCommand(\"help\");\nif (cmd)\n\
      {\n    // Command found, proceed with execution\n    // cmd->handler would contain\
      \ the function to call\n}"
    language: cpp
  - title: Error Handling for Invalid Commands
    code: "const ChatCommand* cmd = botHandler->GetCommand(\"invalidcommand\");\n\
      if (!cmd)\n{\n    // Handle unknown command case\n    // Log error or send message\
      \ back to user\n    sLog->outString(\"Unknown command: invalidcommand\");\n}"
    language: cpp
  notes: This method performs a linear search through the command list, so performance
    may degrade with large numbers of commands. The returned ChatCommand pointer is
    valid only as long as the BotChatCommandHandler instance exists and its command
    list remains unchanged.
  warnings: The returned pointer should never be modified or freed directly as it
    points to internal data structures managed by the BotChatCommandHandler class.
    Always check for null return values before dereferencing the result.
  related:
  - AddCommand
  - RemoveCommand
  - HandleCommand
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:27:34.061286'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
