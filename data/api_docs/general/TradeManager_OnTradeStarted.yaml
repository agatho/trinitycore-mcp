api:
  class: TradeManager
  method: OnTradeStarted
  signature: void TradeManager::OnTradeStarted(Player * trader)
documentation:
  brief: Initializes trade processing when a player begins a trading session
  description: The OnTradeStarted method is invoked when a player initiates a trade
    with another player in World of Warcraft. This method serves as a callback to
    handle the beginning of the trading process, typically used for setting up trade
    data structures, validating trade conditions, and preparing the trade window for
    interaction. It is part of the TradeManager's event handling system and is called
    automatically by the TrinityCore framework when a trade session starts. The method
    does not perform any direct trade operations but rather sets up the necessary
    state for the trade to proceed.
  parameters:
  - name: trader
    description: Pointer to the Player object representing the player who initiated
      the trade. This parameter cannot be null and must point to a valid player instance
      within the game world.
  returns: null
  examples:
  - title: Basic usage in custom trade handler
    code: "class CustomTradeHandler : public TradeManager {\npublic:\n    void OnTradeStarted(Player*\
      \ trader) override {\n        // Log the start of a trade\n        TC_LOG_INFO(\"\
      trade\", \"Player %s started trading\", trader->GetName().c_str());\n      \
      \  // Call base implementation if needed\n        TradeManager::OnTradeStarted(trader);\n\
      \    }\n};"
    language: cpp
  notes: This method is typically called from within the core trade system when a
    player sends a trade request to another player. It's important to note that this
    method may be invoked multiple times during a single trade session if the players
    cancel and restart trading. The method should not perform any blocking operations
    as it's called in a game loop context.
  warnings: Do not modify the trader parameter directly or attempt to access its members
    without proper validation, as the player object might be in an inconsistent state
    during this callback. Avoid performing heavy computations in this method as it
    could impact game performance and responsiveness.
  related:
  - OnTradeUpdated
  - OnTradeFinished
  - OnTradeCancelled
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T20:18:16.191096'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
