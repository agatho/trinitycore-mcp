api:
  class: WaypointMgr
  method: GetVisualGUIDByNode
  signature: const int & WaypointMgr::GetVisualGUIDByNode(uint32 pathId, uint32 nodeId)
    const
documentation:
  brief: Retrieves the visual GUID associated with a specific waypoint node in a path.
  description: 'The GetVisualGUIDByNode method retrieves the unique identifier (GUID)
    of the visual object associated with a given waypoint node within a specified
    path. This is commonly used in World of Warcraft''s TrinityCore to manage and
    display visual waypoints for creatures or NPCs during movement routines. The method
    takes two parameters: the path ID identifying which path to query, and the node
    ID indicating which specific node within that path. It returns a constant reference
    to an integer representing the GUID of the visual object associated with that
    node.'
  parameters:
  - name: pathId
    description: The unique identifier of the waypoint path to query. This identifies
      which set of waypoints is being accessed.
  - name: nodeId
    description: The index or identifier of the specific node within the path. This
      determines which particular waypoint's visual GUID is returned.
  returns: A constant reference to an integer representing the GUID of the visual
    object associated with the specified waypoint node. Returns a valid GUID if the
    node exists, otherwise behavior is undefined or may return invalid data.
  examples:
  - title: Retrieve Visual GUID for a Specific Waypoint Node
    code: "uint32 pathId = 1001;\nuint32 nodeId = 5;\nconst int& visualGuid = sWaypointMgr->GetVisualGUIDByNode(pathId,\
      \ nodeId);\nif (visualGuid > 0)\n{\n    // Use the visual GUID to manipulate\
      \ or reference the waypoint visual\n    printf(\"Visual GUID for node %u in\
      \ path %u is: %d\\n\", nodeId, pathId, visualGuid);\n}"
    language: cpp
  notes: This method is typically used internally by the TrinityCore AI and movement
    systems. The returned reference must be used carefully to avoid dangling references
    or undefined behavior if the underlying data changes. Performance-wise, this operation
    should be fast as it likely uses indexed lookups.
  warnings: Ensure that both pathId and nodeId are valid before calling this method;
    invalid indices may lead to undefined behavior or memory corruption. The returned
    reference points to internal data which might not remain stable across different
    calls or modifications to the waypoint system.
  related:
  - GetPath
  - GetNode
  - AddWaypoint
  - RemoveWaypoint
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T04:59:30.208666'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
