api:
  class: Item
  method: ReplaceAllItemFlags
  signature: void Item::ReplaceAllItemFlags(ItemFieldFlags flags)
documentation:
  brief: Replaces all item flags with the specified flags value.
  description: The ReplaceAllItemFlags method updates all the flags associated with
    an Item object to match the provided ItemFieldFlags parameter. This operation
    completely overwrites any existing flags, effectively resetting the item's flag
    state. In the context of TrinityCore's World of Warcraft emulation, item flags
    control various properties and behaviors of items such as enchantments, binding
    status, and usability restrictions. The method is typically used during item creation,
    modification, or when applying specific item configurations programmatically.
    This method does not validate the input flags against game rules, so developers
    must ensure that the provided flags are appropriate for the intended use case.
  parameters:
  - name: flags
    description: The new set of item flags to apply to this Item object. This parameter
      represents a bitmask containing one or more ItemFieldFlags values that define
      the item's properties and behaviors.
  returns: null
  examples:
  - title: Setting Basic Item Flags
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    ItemFieldFlags\
      \ newFlags = ITEM_FLAG_UNK1 | ITEM_FLAG_UNK2;\n    item->ReplaceAllItemFlags(newFlags);\n\
      }"
    language: cpp
  - title: Clearing All Item Flags
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    // Clear\
      \ all flags by setting to 0\n    item->ReplaceAllItemFlags(ItemFieldFlags(0));\n\
      }"
    language: cpp
  notes: This method directly modifies the internal flag state of the Item object.
    It should be used carefully as it completely replaces existing flags without preserving
    any previous settings. The method does not trigger any item update packets or
    database synchronization, so any changes made using this method will only affect
    the in-memory representation unless additional actions are taken.
  warnings: Using this method can lead to unexpected behavior if incorrect flag combinations
    are applied. Since it completely overwrites existing flags, developers must ensure
    they understand the implications of each flag value. Additionally, calling this
    method on items that are currently equipped or in use may cause synchronization
    issues with the client unless proper update mechanisms are implemented.
  related:
  - GetItemFlags
  - AddItemFlag
  - RemoveItemFlag
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T11:22:04.592784'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
