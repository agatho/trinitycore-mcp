api:
  class: Unit
  method: _CreateAuraApplication
  signature: AuraApplication * Unit::_CreateAuraApplication(Aura * aura, uint32 effMask)
documentation:
  brief: Creates and returns a new AuraApplication instance for the specified aura.
  description: The _CreateAuraApplication method is an internal utility function used
    by the Unit class to instantiate a new AuraApplication object. This application
    represents the binding between a specific Aura and the unit that is affected by
    it. The method takes an existing Aura pointer and an effect mask, which determines
    which effects of the aura should be applied. It's typically called during aura
    application or reapplication processes within the game's combat system. The returned
    AuraApplication object manages the state and behavior of how the aura affects
    the unit, including tracking duration, visual effects, and applying periodic effects.
  parameters:
  - name: aura
    description: Pointer to the Aura object that will be applied to this unit. This
      represents the actual spell effect or buff/debuff being applied.
  - name: effMask
    description: Bitmask specifying which effects of the aura should be activated.
      Each bit corresponds to a specific aura effect index, allowing selective application
      of aura components.
  returns: Returns a pointer to the newly created AuraApplication object that manages
    the aura's application state for this unit. Returns nullptr if creation fails
    or if invalid parameters are provided.
  examples:
  - title: Basic Aura Application Creation
    code: 'Aura* aura = new Aura(player, caster, spellInfo);

      AuraApplication* app = unit->_CreateAuraApplication(aura, 0x01); // Apply first
      effect only'
    language: cpp
  - title: Creating Multiple Aura Applications
    code: 'Aura* aura1 = new Aura(player, caster, spellInfo);

      Aura* aura2 = new Aura(player, caster, spellInfo);


      AuraApplication* app1 = unit->_CreateAuraApplication(aura1, 0x03); // Apply
      first two effects

      AuraApplication* app2 = unit->_CreateAuraApplication(aura2, 0x07); // Apply
      all three effects'
    language: cpp
  notes: This is an internal method and should not be called directly by external
    code. The AuraApplication objects created are managed internally by the Unit's
    aura system and will be automatically cleaned up when the aura expires or is removed.
    The effMask parameter allows for fine-grained control over which effects of a
    multi-effect aura are applied, useful for partial application scenarios.
  warnings: Direct usage of this method can lead to memory leaks or inconsistent aura
    states if not properly integrated into the unit's aura management system. Always
    ensure that aura applications are properly registered with the unit's aura list
    and that proper cleanup occurs when the aura is removed.
  related:
  - Unit::AddAura
  - Unit::RemoveAura
  - Unit::GetAuraApplication
  - Aura::ApplyAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T16:13:52.055457'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
