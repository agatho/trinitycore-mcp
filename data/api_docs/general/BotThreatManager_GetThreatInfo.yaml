api:
  class: BotThreatManager
  method: GetThreatInfo
  signature: const ThreatInfo * BotThreatManager::GetThreatInfo(Unit * target) const
documentation:
  brief: Retrieves threat information for a specified target unit from the bot's threat
    manager.
  description: The GetThreatInfo method retrieves a pointer to the ThreatInfo structure
    associated with a given target unit within the bot's threat management system.
    This method is used to access detailed threat data such as the current threat
    level, aggro status, and other relevant combat metrics for a specific unit. The
    returned ThreatInfo object provides insight into how the bot perceives and manages
    threat towards that particular target. This functionality is essential for AI-driven
    decision-making in combat scenarios where understanding threat levels determines
    priority targeting and spell selection.
  parameters: []
  returns: A constant pointer to a ThreatInfo object representing the threat data
    for the specified target unit. Returns nullptr if no threat information exists
    for the target or if the target is invalid.
  examples:
  - title: Basic Usage Example
    code: "Unit* target = bot->GetVictim();\nif (target)\n{\n    const ThreatInfo*\
      \ threatInfo = bot->GetThreatManager()->GetThreatInfo(target);\n    if (threatInfo)\n\
      \    {\n        // Use threatInfo to determine combat behavior\n        float\
      \ threatLevel = threatInfo->GetThreat();\n        // ... process threat level\
      \ ...\n    }\n}"
    language: cpp
  notes: The method operates within the context of the bot's threat management system
    and assumes that threat data has been properly initialized for the target unit.
    The returned ThreatInfo pointer is valid only as long as the target unit remains
    in the threat manager's tracking scope.
  warnings: Ensure that the target unit is valid and tracked by the bot's threat manager
    before calling this method, otherwise the returned pointer may be null. Avoid
    storing the returned pointer beyond the lifetime of the threat data structure
    to prevent dangling pointer issues.
  related:
  - AddThreat
  - UpdateThreat
  - RemoveThreat
  - GetThreatList
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:42:43.960415'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
