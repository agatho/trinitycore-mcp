api:
  class: BotLifecycleMgr
  method: SetMaxConcurrentOperations
  signature: void BotLifecycleMgr::SetMaxConcurrentOperations(uint32 maxOps)
documentation:
  brief: Sets the maximum number of concurrent bot operations allowed by the lifecycle
    manager.
  description: The SetMaxConcurrentOperations method configures the BotLifecycleMgr
    to limit the number of simultaneous bot-related operations that can be executed.
    This is crucial for managing system resources and preventing performance degradation
    in environments with many active bots. The value set determines how many bot lifecycle
    actions (such as creation, destruction, or state changes) can occur concurrently
    before new operations are queued or rejected. This method typically affects the
    internal thread pool or operation queue of the manager to enforce the specified
    concurrency limit.
  parameters:
  - name: maxOps
    description: The maximum number of concurrent bot operations allowed. Must be
      a positive integer value. Setting this to zero may disable concurrent operations
      entirely, while higher values allow more parallel processing.
  returns: null
  examples:
  - title: Setting Maximum Concurrent Bot Operations
    code: 'BotLifecycleMgr* mgr = BotLifecycleMgr::Instance();

      mgr->SetMaxConcurrentOperations(10); // Allow up to 10 concurrent bot operations'
    language: cpp
  - title: Adjusting Concurrency Based on Server Load
    code: "BotLifecycleMgr* mgr = BotLifecycleMgr::Instance();\nuint32 currentLoad\
      \ = GetServerLoad(); // Hypothetical function\nif (currentLoad > 80)\n{\n  \
      \  mgr->SetMaxConcurrentOperations(5); // Reduce concurrency under high load\n\
      }\nelse\n{\n    mgr->SetMaxConcurrentOperations(20); // Increase concurrency\
      \ when load is low\n}"
    language: cpp
  notes: This method may affect performance and resource usage directly. It's recommended
    to test different values in a controlled environment before deploying changes
    to production servers. The implementation likely involves internal locking mechanisms
    or semaphore-based queuing to enforce the concurrency limit.
  warnings: Setting this value too high can lead to resource exhaustion and server
    instability, especially under heavy bot activity. Conversely, setting it too low
    may cause bottlenecks and delayed bot lifecycle operations. Changes take effect
    immediately and may impact ongoing operations.
  related:
  - GetMaxConcurrentOperations
  - GetActiveOperationsCount
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:09:50.619915'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
