api:
  class: WorldObject
  method: GetSpellMinRangeForTarget
  signature: float WorldObject::GetSpellMinRangeForTarget(const Unit * target, const
    SpellInfo * spellInfo) const
documentation:
  brief: Calculates and returns the minimum casting range for a spell target.
  description: The GetSpellMinRangeForTarget method determines the minimum distance
    at which a spell can be cast on a given target. This value is derived from the
    spell's properties and the target's characteristics, ensuring that spells are
    properly constrained by game mechanics such as line of sight, target proximity,
    and spell-specific range limitations. The method accounts for various factors
    including spell range attributes, target size, and potential obstructions to provide
    an accurate minimum range calculation.
  parameters:
  - name: target
    description: Pointer to the Unit object representing the intended spell target.
      Must not be null for valid calculations.
  - name: spellInfo
    description: Pointer to the SpellInfo structure containing detailed information
      about the spell being cast. Must not be null for valid calculations.
  returns: Returns a float value representing the minimum casting range in yards.
    A return value of 0.0 indicates no minimum range requirement or an error condition.
  examples:
  - title: Basic Usage Example
    code: "float minRange = caster->GetSpellMinRangeForTarget(target, spellInfo);\n\
      if (minRange > 0.0f)\n{\n    // Proceed with spell casting logic\n    // Ensure\
      \ target is at least 'minRange' yards away\n}"
    language: cpp
  - title: Spell Range Validation Example
    code: "float minRange = caster->GetSpellMinRangeForTarget(target, spellInfo);\n\
      float distanceToTarget = caster->GetDistance(target);\nif (distanceToTarget\
      \ < minRange)\n{\n    // Send error message or prevent casting\n    // Player\
      \ is too close to target for this spell\n}"
    language: cpp
  notes: This method considers both the base minimum range of the spell and any adjustments
    based on the target's size and position. It may be called during spell preparation
    or validation phases to ensure proper targeting mechanics. The implementation
    likely includes checks for line-of-sight restrictions and other environmental
    factors.
  warnings: Ensure that both 'target' and 'spellInfo' parameters are valid non-null
    pointers before calling this method, as passing null values could lead to undefined
    behavior or crashes. This method should not be used for spells that do not require
    a target range check.
  related:
  - GetSpellMaxRangeForTarget
  - GetSpellRange
  - IsInRange
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T21:41:21.626809'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
