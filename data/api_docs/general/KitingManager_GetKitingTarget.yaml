api:
  class: KitingManager
  method: GetKitingTarget
  signature: Unit * KitingManager::GetKitingTarget() const
documentation:
  brief: Returns the target unit that the kiting manager is currently tracking for
    kiting behavior.
  description: The GetKitingTarget method retrieves the Unit object that represents
    the current target being used by the KitingManager for kiting mechanics. This
    target is typically the unit that the AI-controlled creature or player is attempting
    to kite around, often in a combat scenario where maintaining distance is important.
    The returned Unit pointer may be null if no valid kiting target is currently set
    or tracked by the manager. This method is commonly used within AI logic to determine
    the current kiting behavior target and make decisions based on its state.
  parameters: []
  returns: A pointer to the Unit object representing the current kiting target, or
    nullptr if no valid kiting target exists.
  examples:
  - title: Basic usage in AI logic
    code: "if (Unit* target = kitingManager->GetKitingTarget()) {\n    // Perform\
      \ kiting behavior towards the target\n    if (target->IsDead()) {\n        //\
      \ Handle case when target dies\n        kitingManager->ClearKitingTarget();\n\
      \    }\n}"
    language: cpp
  - title: Checking kiting target validity before action
    code: "Unit* kitingTarget = kitingManager->GetKitingTarget();\nif (kitingTarget\
      \ && !kitingTarget->IsInWorld()) {\n    // Target is no longer valid, clear\
      \ it\n    kitingManager->ClearKitingTarget();\n} else if (kitingTarget) {\n\
      \    // Proceed with kiting actions\n    DoKitingBehavior(kitingTarget);\n}"
    language: cpp
  notes: This method does not perform any validation on the returned Unit pointer
    beyond ensuring it's a valid object reference. Developers should check for null
    returns and verify that the target is still valid before using it in actions.
    The kiting target may be updated by other systems or AI logic, so calling this
    method multiple times in quick succession might return different values.
  warnings: The returned Unit pointer can become invalid if the target unit is removed
    from the world or destroyed. Always validate the returned pointer and its validity
    before using it in any operations that could cause crashes or undefined behavior.
  related:
  - SetKitingTarget
  - ClearKitingTarget
  - IsKitingTargetValid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:04:15.518219'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
