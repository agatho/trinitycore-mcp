api:
  class: BotChatCommandHandler
  method: SetMaxConcurrentCommands
  signature: void BotChatCommandHandler::SetMaxConcurrentCommands(uint32 maxConcurrent)
documentation:
  brief: Sets the maximum number of concurrent bot chat commands that can be executed
    simultaneously.
  description: The SetMaxConcurrentCommands method configures the upper limit on how
    many bot chat commands are allowed to run at the same time within the TrinityCore
    framework. This setting is crucial for managing system resources and preventing
    performance degradation caused by excessive parallel command execution. The value
    typically affects bot behavior in multi-bot scenarios, ensuring that command processing
    remains efficient without overwhelming the server's processing capabilities. This
    method does not validate the input value but assumes it will be a reasonable positive
    integer representing command concurrency limits.
  parameters:
  - name: maxConcurrent
    description: The maximum number of concurrent bot chat commands to allow. Must
      be a positive integer; values of zero or negative numbers may lead to undefined
      behavior.
  returns: null
  examples:
  - title: Setting Maximum Concurrent Commands to 5
    code: 'BotChatCommandHandler handler;

      handler.SetMaxConcurrentCommands(5);'
    language: cpp
  - title: Adjusting Command Limit Based on Server Load
    code: "uint32 serverLoad = GetServerLoad();\nBotChatCommandHandler handler;\n\
      if (serverLoad > 80)\n    handler.SetMaxConcurrentCommands(3);\nelse\n    handler.SetMaxConcurrentCommands(10);"
    language: cpp
  notes: This method modifies an internal configuration parameter used by the bot
    command handling system. It should be called before initializing bots or during
    server startup to ensure consistent behavior across all active bot instances.
    The effect of this setting is immediate and impacts all subsequent bot commands
    issued through the handler.
  warnings: Setting this value too high may cause resource exhaustion or performance
    issues on servers with limited capacity. Conversely, setting it too low might
    restrict bot functionality in complex scenarios involving multiple concurrent
    operations.
  related:
  - GetMaxConcurrentCommands
  - ExecuteBotCommand
  - IsCommandAllowed
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:21:41.301873'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
