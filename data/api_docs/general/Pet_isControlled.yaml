api:
  class: Pet
  method: isControlled
  signature: bool Pet::isControlled() const
documentation:
  brief: Determines whether the pet is currently under the player's control.
  description: The isControlled method checks if a pet is currently under the direct
    control of its owner. This method returns true when the pet is actively controlled
    by the player, such as when the pet is following the player or executing commands
    issued by the player. It returns false when the pet is not under direct player
    control, for example, when it is in a passive state or has been dismissed. This
    functionality is crucial for determining pet behavior and interaction states within
    the World of Warcraft game mechanics.
  parameters: []
  returns: Returns true if the pet is currently under the player's control; otherwise
    returns false.
  examples:
  - title: Check if Pet is Controlled Before Issuing Commands
    code: "if (pet->isControlled()) {\n    // Safe to issue commands to the pet\n\
      \    pet->SetReactState(REACT_AGGRESSIVE);\n} else {\n    // Pet is not under\
      \ control, handle accordingly\n    sLog->outString(\"Pet is not under control\"\
      );\n}"
    language: cpp
  notes: This method typically checks internal pet state flags and owner relationship
    to determine control status. It's commonly used in AI logic and command processing
    systems within TrinityCore.
  warnings: null
  related:
  - Pet::SetControlled
  - Pet::IsInCombat
  - Pet::GetOwner
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T21:06:16.721302'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
