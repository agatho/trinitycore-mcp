api:
  class: ThreatManager
  method: GetThreat
  signature: float ThreatManager::GetThreat(const Unit * who, bool includeOffline)
    const
documentation:
  brief: Returns the threat level of a specified unit from the current ThreatManager.
  description: The GetThreat method retrieves the threat value associated with a specific
    Unit within the ThreatManager. This method is commonly used in World of Warcraft's
    combat system to determine how much threat a unit has generated towards the current
    target. The returned value represents the magnitude of threat, which can be used
    to assess whether a unit is a suitable target for the current creature or player.
    The method includes an optional parameter to include offline units, allowing developers
    to control whether to consider units that are not currently in the game world.
  parameters:
  - name: who
    description: A pointer to the Unit whose threat level is being retrieved. This
      can be any unit type including players, NPCs, or pets.
  - name: includeOffline
    description: Boolean flag indicating whether to include units that are not currently
      in the game world. If true, offline units will be considered; if false, only
      active units will be used for threat calculation.
  returns: Returns a float value representing the threat level of the specified unit.
    A value of 0.0f indicates no threat, while higher values indicate increasing levels
    of threat. The method may return negative values in some cases depending on how
    threat is calculated internally.
  examples:
  - title: Basic Usage Example
    code: "float threatLevel = threatManager->GetThreat(targetUnit, false);\nif (threatLevel\
      \ > 0.0f)\n{\n    // Unit has generated some threat\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "float threatLevel = threatManager->GetThreat(playerUnit, true);\nif (threatLevel\
      \ > 100.0f)\n{\n    // Player has generated significant threat\n}"
    language: cpp
  notes: This method is typically used in conjunction with other threat management
    functions to determine target selection and combat behavior. It's important to
    note that the method does not directly modify threat levels but rather retrieves
    them from internal calculations. Performance considerations should be taken into
    account when calling this method frequently during combat.
  warnings: Be cautious when using includeOffline parameter as it may affect performance
    if used incorrectly. Also, ensure that the Unit pointer passed is valid to avoid
    accessing invalid memory.
  related:
  - AddThreat
  - GetThreatList
  - ClearThreat
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T03:10:43.840060'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
