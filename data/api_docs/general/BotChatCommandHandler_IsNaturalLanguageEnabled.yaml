api:
  class: BotChatCommandHandler
  method: IsNaturalLanguageEnabled
  signature: bool BotChatCommandHandler::IsNaturalLanguageEnabled()
documentation:
  brief: Checks whether natural language processing is enabled for bot chat commands
  description: This method determines if the bot chat command handler has natural
    language processing capabilities enabled. In TrinityCore's context, this typically
    relates to whether bots can interpret and respond to natural language input rather
    than strict command syntax. The feature allows for more conversational interactions
    with game bots, enabling them to understand varied phrasing and context. This
    setting is often configurable through server settings or bot configuration files.
  parameters: []
  returns: Returns true if natural language processing is enabled for bot chat commands,
    false otherwise
  examples:
  - title: Check if natural language is enabled before sending a message
    code: "if (botChatHandler->IsNaturalLanguageEnabled()) {\n    // Send natural\
      \ language message\n    botChatHandler->SendChatMessage(\"Hello there, how are\
      \ you?\");\n} else {\n    // Send command-based message\n    botChatHandler->SendChatMessage(\"\
      !greeting\");\n}"
    language: cpp
  notes: This method likely checks a configuration flag or internal state variable
    that controls natural language processing behavior. The implementation may involve
    checking server-wide settings or per-bot configuration options.
  warnings: null
  related:
  - SetNaturalLanguageEnabled
  - IsCommandBasedChat
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:23:14.282205'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
