api:
  class: Map
  method: ToBattlegroundMap
  signature: const BattlegroundMap * Map::ToBattlegroundMap() const
documentation:
  brief: Converts a Map instance to a BattlegroundMap pointer if the map is a battleground.
  description: The ToBattlegroundMap method attempts to cast the current Map instance
    to a BattlegroundMap pointer. This method is used to determine whether the map
    instance represents a battleground and to obtain access to battleground-specific
    functionality. It performs a type check internally, returning a valid BattlegroundMap
    pointer if the map is indeed a battleground, or nullptr otherwise. The method
    is commonly used in battleground-related code paths where specific battleground
    behavior needs to be accessed.
  parameters: []
  returns: A const pointer to a BattlegroundMap if the current Map instance represents
    a battleground; otherwise, returns nullptr.
  examples:
  - title: Basic usage to check if map is a battleground
    code: "Map* map = player->GetMap();\nBattlegroundMap* bgMap = map->ToBattlegroundMap();\n\
      if (bgMap != nullptr)\n{\n    // This is a battleground, safe to use BattlegroundMap\
      \ methods\n    bgMap->DoSomethingSpecificToBattlegrounds();\n}"
    language: cpp
  - title: Using in battleground event handling
    code: "void HandlePlayerEnterBattleground(Player* player)\n{\n    Map* map = player->GetMap();\n\
      \    BattlegroundMap* bgMap = map->ToBattlegroundMap();\n    if (bgMap != nullptr\
      \ && bgMap->GetBGType() == BATTLEGROUND_AV)\n    {\n        // Handle specific\
      \ AV battleground logic\n        bgMap->HandleAVSpecificEvent(player);\n   \
      \ }\n}"
    language: cpp
  notes: This method is a safe casting operation that relies on the internal type
    system of TrinityCore's map management. It should be used in contexts where you
    need to access battleground-specific features without performing explicit type
    checks. The returned pointer is const, meaning modifications to the battleground
    map through this interface are not allowed.
  warnings: Be cautious when using the returned pointer - it may be nullptr if the
    map is not a battleground. Always check for null before dereferencing. Also note
    that the returned pointer is const, so any modifications must be done through
    other means or methods specific to the BattlegroundMap class.
  related:
  - Map::IsBattleground
  - Map::GetBgTypeId
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T10:52:07.657253'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
