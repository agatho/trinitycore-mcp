api:
  class: AuraEffect
  method: HandlePhase
  signature: void AuraEffect::HandlePhase(const AuraApplication * aurApp, uint8 mode,
    bool apply) const
documentation:
  brief: Handles phase change application or removal for an aura effect.
  description: The HandlePhase method manages the application or removal of phase-related
    effects within the TrinityCore framework. This method is invoked during aura application
    or removal to update the affected unit's phase state, ensuring proper visibility
    and interaction with other game objects based on defined phase masks. It typically
    integrates with the core phase system to control which players or creatures can
    see or interact with specific entities in the game world.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This contains information about the aura's target, caster,
      and application state.
  - name: mode
    description: The mode of operation indicating whether the phase effect is being
      applied (1) or removed (0). Used to determine the appropriate action for updating
      phase state.
  - name: apply
    description: Boolean flag specifying whether to apply (true) or remove (false)
      the phase effect. This parameter works in conjunction with mode to control behavior.
  returns: null
  examples:
  - title: Basic Phase Aura Application
    code: "void MyPhaseAura::HandlePhase(const AuraApplication* aurApp, uint8 mode,\
      \ bool apply) const {\n    if (apply)\n        aurApp->GetTarget()->SetPhaseMask(0x10,\
      \ true);\n    else\n        aurApp->GetTarget()->SetPhaseMask(0x10, false);\n\
      }"
    language: cpp
  - title: Advanced Phase Handling with Multiple Phases
    code: "void AdvancedPhaseAura::HandlePhase(const AuraApplication* aurApp, uint8\
      \ mode, bool apply) const {\n    Unit* target = aurApp->GetTarget();\n    if\
      \ (!target)\n        return;\n\n    uint32 phaseMask = GetPhaseMaskForAura();\n\
      \    if (apply)\n        target->SetPhaseMask(phaseMask, true);\n    else\n\
      \        target->SetPhaseMask(phaseMask, false);\n}"
    language: cpp
  notes: This method is part of the aura effect handling system and should be implemented
    carefully to avoid conflicts with other phase-related systems. It's typically
    called internally by the core aura application/removal logic and may not need
    direct invocation from external code.
  warnings: Incorrect handling of phase masks can lead to visibility issues or game
    objects becoming permanently invisible to players. Ensure that all phase mask
    changes are properly synchronized with the client-side phase system.
  related:
  - AuraEffect::ApplyPhase
  - AuraEffect::RemovePhase
  - Unit::SetPhaseMask
  - AuraApplication::GetTarget
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:06:37.686407'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
