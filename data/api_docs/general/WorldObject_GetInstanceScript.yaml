api:
  class: WorldObject
  method: GetInstanceScript
  signature: InstanceScript * WorldObject::GetInstanceScript() const
documentation:
  brief: Retrieves the InstanceScript associated with the WorldObject's current instance.
  description: The GetInstanceScript method returns a pointer to the InstanceScript
    object that manages the scripted behavior for the instance where this WorldObject
    resides. This is commonly used in dungeon and raid instances to access instance-specific
    data, events, and state management. The method performs a lookup based on the
    object's current instance ID and returns NULL if the object is not within an instance
    or if no script is associated with that instance. It is essential for accessing
    instance-specific variables, tracking boss encounters, managing quest states,
    and coordinating scripted events within the instance context.
  parameters: []
  returns: A pointer to the InstanceScript object for this WorldObject's instance,
    or NULL if the object is not in an instance or has no associated script.
  examples:
  - title: Accessing InstanceScript to Check Boss State
    code: "if (InstanceScript* instance = unit->GetInstanceScript())\n{\n    if (instance->GetData(DATA_BOSS_DEFEATED)\
      \ == 1)\n        // Handle boss defeated logic\n}"
    language: cpp
  - title: Using InstanceScript for Instance-Specific Event Handling
    code: "InstanceScript* script = player->GetInstanceScript();\nif (script && script->GetBossState(BOSS_MARWYN)\
      \ == DONE)\n{\n    // Grant rewards or trigger events\n    player->AddItem(ITEM_VICTORY_CROWN,\
      \ 1);\n}"
    language: cpp
  notes: This method relies on the WorldObject's instance ID to find the correct InstanceScript.
    It is important to check for NULL return values before using the returned pointer.
    The returned InstanceScript pointer is valid only as long as the instance remains
    active and the object is not removed from the instance.
  warnings: Never assume that GetInstanceScript() will return a non-NULL value. Always
    perform a null check before dereferencing the returned pointer. Using an invalid
    InstanceScript pointer can lead to crashes or undefined behavior.
  related:
  - GetInstanceId
  - GetMap
  - SetInstanceScript
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:05:03.507497'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
