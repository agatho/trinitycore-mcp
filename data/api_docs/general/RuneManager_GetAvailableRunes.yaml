api:
  class: RuneManager
  method: GetAvailableRunes
  signature: uint32 RuneManager::GetAvailableRunes(RuneType type) const
documentation:
  brief: Returns the count of available runes of the specified type for the player.
  description: The GetAvailableRunes method retrieves the number of currently available
    runes of a given type (such as Blood, Unholy, Frost, or Death) for the player.
    This method is typically used in the context of World of Warcraft's rune system,
    where players consume runes to cast certain spells and abilities. The returned
    value represents how many runes of the specified type can be used immediately
    without waiting for them to regenerate. This method does not modify any internal
    state and is read-only.
  parameters: []
  returns: A uint32 value representing the number of available runes of the specified
    type. Returns 0 if no runes of that type are available or if the type is invalid.
  examples:
  - title: Check Available Blood Runes
    code: "uint32 bloodRunes = player->GetRuneManager()->GetAvailableRunes(RUNE_TYPE_BLOOD);\n\
      if (bloodRunes > 0)\n{\n    // Player has available Blood runes\n    // Proceed\
      \ with rune-based spell casting\n}"
    language: cpp
  - title: Determine Total Available Runes
    code: 'RuneManager* runeMgr = player->GetRuneManager();

      uint32 totalRunes = 0;

      totalRunes += runeMgr->GetAvailableRunes(RUNE_TYPE_BLOOD);

      totalRunes += runeMgr->GetAvailableRunes(RUNE_TYPE_UNHOLY);

      totalRunes += runeMgr->GetAvailableRunes(RUNE_TYPE_FROST);

      totalRunes += runeMgr->GetAvailableRunes(RUNE_TYPE_DEATH);

      // totalRunes now contains the sum of all available runes'
    language: cpp
  notes: This method assumes that the RuneManager instance is properly initialized
    and that the player has a valid rune system set up. The method does not perform
    any validation on the rune type parameter, so calling with an invalid type may
    return unexpected results. In TrinityCore, runes are managed per-player and are
    part of the player's combat abilities, particularly for Death Knights.
  warnings: Ensure that the RuneManager instance is valid before calling this method
    to avoid undefined behavior. This method should not be used in performance-critical
    sections without considering potential overhead from internal state checks.
  related:
  - GetRuneCooldown
  - SetRuneType
  - ConsumeRune
  - RegenerateRune
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:04:13.124941'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
