api:
  class: LineOfSightManager
  method: GetBlockingObjects
  signature: int LineOfSightManager::GetBlockingObjects(Unit * target)
documentation:
  brief: Calculates and returns the number of blocking objects between the caller
    and a specified target unit in the game world.
  description: The GetBlockingObjects method determines how many solid objects (such
    as walls, furniture, or other units) obstruct the line of sight from the calling
    Unit to the provided target Unit. This is commonly used for spell casting validation,
    AI decision-making, and determining whether a character can see or attack another
    unit directly. The method performs a raycast check through the game world's collision
    system to identify any blocking geometry or entities that would prevent direct
    visual contact or magical line of sight. It returns an integer count representing
    the number of such blocking objects encountered along the path.
  parameters: []
  returns: An integer value indicating the number of blocking objects found between
    the caller and the target unit. A return value of 0 means no blocking objects
    were detected, while any positive integer indicates the count of obstacles that
    would block line of sight.
  examples:
  - title: Basic usage to check line of sight
    code: "Unit* player = ...;\nUnit* target = ...;\nint blockingCount = player->GetMap()->GetLineOfSightManager()->GetBlockingObjects(target);\n\
      if (blockingCount == 0)\n{\n    // No obstruction, can see target\n}\nelse\n\
      {\n    // Target is blocked by 'blockingCount' objects\n}"
    language: cpp
  notes: This method relies on the underlying collision detection system of TrinityCore
    and may have performance implications when called frequently. It should be used
    judiciously in performance-critical code paths such as AI updates or spell validation
    routines. The result is only accurate for static geometry and dynamic units that
    are properly registered with the collision system.
  warnings: This method assumes that both the caller and target Units are valid and
    located within the same map instance. Calling this method on invalid or null pointers
    will likely cause undefined behavior or crashes. Additionally, it does not account
    for temporary visual effects or environmental conditions that might affect line
    of sight in gameplay but aren't represented in the physical collision system.
  related:
  - IsInLineOfSight
  - GetLineOfSightStatus
  - CheckLOS
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:12:05.678222'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
