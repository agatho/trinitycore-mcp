api:
  class: BotLifecycleMgr
  method: OnBotSpawnFailure
  signature: void BotLifecycleMgr::OnBotSpawnFailure(int guid, const std::string &
    reason)
documentation:
  brief: Handles the event when a bot fails to spawn during creation or initialization.
  description: The OnBotSpawnFailure method is invoked when a bot fails to successfully
    spawn in the game world. This typically occurs due to invalid configuration, resource
    constraints, or other runtime errors during the bot creation process. The method
    receives the unique identifier (GUID) of the failed bot and a descriptive reason
    for the failure. It allows the system to log the event, notify relevant components,
    or trigger cleanup routines. This method is part of the bot lifecycle management
    system and is crucial for maintaining system stability when bot creation encounters
    issues.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the bot that failed to spawn. This
      value represents the internal tracking ID assigned by the TrinityCore framework
      for the specific bot instance.
  - name: reason
    description: A descriptive string explaining why the bot spawn failed. This may
      include error messages, configuration issues, or resource limitations encountered
      during the spawning process.
  returns: null
  examples:
  - title: Basic Usage in Bot Manager
    code: "void MyBotManager::HandleSpawnFailure(int guid, const std::string& reason)\
      \ {\n    BotLifecycleMgr::OnBotSpawnFailure(guid, reason);\n    // Additional\
      \ cleanup or logging logic can be added here\n}"
    language: cpp
  - title: Logging Failure Event
    code: "void BotLifecycleMgr::OnBotSpawnFailure(int guid, const std::string& reason)\
      \ {\n    sLog->outError(\"Bot spawn failed for GUID %d: %s\", guid, reason.c_str());\n\
      \    // Additional logic to handle the failure\n}"
    language: cpp
  notes: This method is typically called internally by the TrinityCore bot system
    when a bot fails during the spawning process. Developers should ensure that any
    custom implementations properly log or handle the failure reason for debugging
    purposes. The GUID parameter can be used to retrieve additional information about
    the failed bot from the system.
  warnings: Ensure that this method does not cause recursive calls or infinite loops,
    especially if it's part of a larger error handling chain. Avoid performing heavy
    operations in this method as it may be called frequently during bot creation processes.
  related:
  - OnBotSpawnSuccess
  - OnBotDespawn
  - OnBotCreate
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T01:48:33.550038'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
