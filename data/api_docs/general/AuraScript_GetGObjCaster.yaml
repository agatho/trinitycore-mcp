api:
  class: AuraScript
  method: GetGObjCaster
  signature: GameObject * AuraScript::GetGObjCaster() const
documentation:
  brief: Returns the GameObject that cast the aura.
  description: The GetGObjCaster method retrieves a pointer to the GameObject that
    originally applied the aura effect. This is particularly useful in scenarios where
    the aura was cast by a game object such as a trap, door, or other interactive
    environment element rather than a player or creature. The returned GameObject
    pointer can be used to access properties and methods of the casting object, enabling
    complex interactions based on the source of the aura. It's important to note that
    this method will return nullptr if the aura was not cast by a GameObject, such
    as when it originates from a spell cast by a unit.
  parameters: []
  returns: A pointer to the GameObject that cast the aura, or nullptr if the aura
    was not cast by a GameObject.
  examples:
  - title: Check if aura was cast by a GameObject
    code: "if (GameObject* caster = auraScript->GetGObjCaster()) {\n    // The aura\
      \ was cast by a GameObject\n    // Perform actions based on the caster\n   \
      \ uint32 entry = caster->GetEntry();\n    // Example: Handle different types\
      \ of GameObject casters\n}"
    language: cpp
  - title: Access GameObject properties from aura script
    code: "void OnApply(AuraEffect const* aurEff, AuraEffectHandleModes mode) override\
      \ {\n    if (GameObject* caster = GetGObjCaster()) {\n        // Access the\
      \ GameObject's position\n        Position pos = caster->GetPosition();\n   \
      \     // Or get its GUID for identification\n        uint64 guid = caster->GetGUID();\n\
      \        // Use these values in custom logic\n    }\n}"
    language: cpp
  notes: This method is part of the AuraScript framework and should only be called
    within the context of an aura script execution. The returned GameObject pointer
    is valid only during the lifetime of the aura and the casting object. If the GameObject
    is destroyed or removed from the world, the pointer becomes invalid.
  warnings: Ensure that you check for nullptr before dereferencing the returned pointer
    to avoid segmentation faults. This method will not return a valid GameObject pointer
    if the aura was cast by a unit (player/creature) rather than an object, so always
    verify the type of caster before using GameObject-specific methods.
  related:
  - GetCaster
  - GetUnitCaster
  - GetOwner
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:17:52.831698'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
