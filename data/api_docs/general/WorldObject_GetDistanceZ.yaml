api:
  class: WorldObject
  method: GetDistanceZ
  signature: float WorldObject::GetDistanceZ(const WorldObject * obj) const
documentation:
  brief: Calculates and returns the vertical distance (Z-axis difference) between
    this WorldObject and another WorldObject.
  description: The GetDistanceZ method computes the absolute difference in the Z-coordinate
    (height) between the calling WorldObject and the provided WorldObject. This method
    is commonly used in game mechanics to determine vertical positioning, such as
    checking if an object is above or below another object for spell targeting, line-of-sight
    calculations, or height-based interactions. The method performs no validation
    on the input parameter and assumes that the provided WorldObject pointer is valid.
    It returns a float value representing the vertical distance in world coordinates.
  parameters: []
  returns: A float value representing the absolute vertical (Z-axis) distance between
    this WorldObject and the specified WorldObject. Returns 0.0f if both objects are
    at the same height on the Z-axis.
  examples:
  - title: Basic usage to check vertical distance
    code: "float zDistance = player->GetDistanceZ(npc);\nif (zDistance > 5.0f) {\n\
      \    // Player is more than 5 yards vertically away from NPC\n}"
    language: cpp
  - title: Using GetDistanceZ for height-based spell targeting
    code: "if (caster->GetDistanceZ(target) < 10.0f) {\n    // Target is within 10\
      \ yards vertically, proceed with spell\n    caster->CastSpell(target, SPELL_HEIGHT_RESTRICTED_ABILITY,\
      \ true);\n}"
    language: cpp
  notes: This method only calculates the Z-axis difference and does not consider horizontal
    distance or 3D Euclidean distance. It is a lightweight operation that directly
    accesses object position data. The method assumes both objects are in the same
    map/phase for accurate results.
  warnings: Ensure the provided WorldObject pointer is valid before calling this method
    to avoid undefined behavior. This method does not perform null checks on the input
    parameter, so calling it with a null pointer will result in a crash or unpredictable
    behavior.
  related:
  - GetDistance
  - GetDistance2D
  - GetPositionZ
  - GetMap
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:13:33.723066'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
