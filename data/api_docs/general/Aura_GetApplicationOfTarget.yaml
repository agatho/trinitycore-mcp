api:
  class: Aura
  method: GetApplicationOfTarget
  signature: AuraApplication * Aura::GetApplicationOfTarget(int guid)
documentation:
  brief: Retrieves the AuraApplication object associated with a specific target GUID.
  description: The GetApplicationOfTarget method retrieves the AuraApplication instance
    that represents the application of an aura to a specific target identified by
    its GUID. This method is used internally by the TrinityCore framework to manage
    and access aura applications on units. The returned AuraApplication object contains
    information about how the aura affects the target, including application time,
    effects, and removal conditions. It's commonly used when checking or modifying
    aura states on targets during combat or spell casting.
  parameters:
  - name: guid
    description: The global unique identifier of the target unit for which to retrieve
      the aura application.
  returns: Returns a pointer to the AuraApplication object if an aura is applied to
    the specified target, or nullptr if no aura application exists for that target.
  examples:
  - title: Check if a target has a specific aura applied
    code: "AuraApplication* app = aura->GetApplicationOfTarget(targetGuid);\nif (app\
      \ != nullptr)\n{\n    // Aura is applied to the target\n    // Access application\
      \ data here\n}"
    language: cpp
  - title: Access aura effect data from application
    code: "AuraApplication* app = aura->GetApplicationOfTarget(targetGuid);\nif (app\
      \ != nullptr)\n{\n    AuraEffect const* eff = app->GetEffect(0);\n    if (eff)\n\
      \    {\n        // Process aura effect data\n        int32 amount = eff->GetAmount();\n\
      \        // Use amount for calculations\n    }\n}"
    language: cpp
  notes: This method performs a lookup in an internal container that maps GUIDs to
    AuraApplication objects. The returned pointer is valid only as long as the aura
    application exists and has not been removed from the target. Care should be taken
    to avoid dangling pointers if the target is removed or the aura is removed during
    the lifetime of the returned pointer.
  warnings: Calling this method on a GUID that does not correspond to any active target
    will return nullptr. Always check for null before dereferencing the returned pointer.
    This method should not be called from within aura application removal callbacks
    as it may cause unexpected behavior or deadlocks.
  related:
  - GetAuraScript
  - GetEffect
  - Remove
  - HasEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:27:24.345133'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
