api:
  class: Group
  method: GetDifficultyID
  signature: int Group::GetDifficultyID(const MapEntry * mapEntry) const
documentation:
  brief: Returns the difficulty ID for the group based on the provided map entry.
  description: The GetDifficultyID method retrieves the current difficulty level identifier
    for a group when operating within a specific map context. This is used primarily
    in World of Warcraft's raid and dungeon systems to determine appropriate content
    scaling, loot distribution, and player experience adjustments. The method takes
    a MapEntry parameter which defines the map or instance type being accessed by
    the group. It returns an integer representing the difficulty level (e.g., 1 for
    normal, 2 for heroic, etc.), allowing the game engine to apply correct mechanics
    and settings based on group composition and instance type.
  parameters:
  - name: mapEntry
    description: A pointer to the MapEntry structure that defines the map or instance
      being accessed. This parameter is required and must not be null for valid results.
  returns: An integer representing the difficulty ID of the group for the specified
    map entry. Common values include 1 for normal difficulty, 2 for heroic difficulty,
    and higher numbers for mythic difficulties. Returns 0 if no valid difficulty is
    determined or if the map entry is invalid.
  examples:
  - title: Basic usage to check group difficulty
    code: "Group* group = player->GetGroup();\nMapEntry const* mapEntry = sMapStore.LookupEntry(1234);\
      \ // Example map ID\nint difficultyId = group->GetDifficultyID(mapEntry);\n\
      if (difficultyId > 0)\n{\n    // Process based on difficulty level\n    switch(difficultyId)\n\
      \    {\n        case 1: // Normal\n            break;\n        case 2: // Heroic\n\
      \            break;\n        case 3: // Mythic\n            break;\n    }\n}"
    language: cpp
  - title: Using difficulty ID for content adjustment
    code: "Group* group = player->GetGroup();\nMapEntry const* mapEntry = player->GetMap()->GetMapEntry();\n\
      int difficultyId = group->GetDifficultyID(mapEntry);\nif (difficultyId >= 2)\n\
      {\n    // Apply heroic or higher difficulty scaling\n    // e.g., increased\
      \ mob health, different loot tables\n}\nelse\n{\n    // Standard normal difficulty\
      \ behavior\n}"
    language: cpp
  notes: This method relies on the group's current difficulty settings and the map
    entry provided. It does not modify any group state but rather queries existing
    configuration. The returned difficulty ID corresponds to the game's internal difficulty
    definitions used throughout TrinityCore's instance management system.
  warnings: Ensure that the MapEntry parameter is valid and not null, as passing an
    invalid pointer may lead to undefined behavior or incorrect results. This method
    should only be called when the group has a valid map context.
  related:
  - GetDifficulty
  - SetDifficultyID
  - IsRaidGroup
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T16:52:18.413147'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
