api:
  class: Object
  method: GetTypeId
  signature: TypeID Object::GetTypeId() const
documentation:
  brief: Returns the type identifier of the object, used for dynamic type checking
    and identification.
  description: The GetTypeId method returns the TypeID of the Object instance, which
    is a unique identifier used to distinguish between different types of objects
    within the TrinityCore framework. This method is essential for runtime type checking
    and ensures that objects can be properly identified and handled according to their
    specific type. The TypeID is typically used in conjunction with other methods
    like IsKindOf or dynamic_cast to determine object compatibility and behavior.
    It is a fundamental part of the object-oriented design pattern within the TrinityCore
    engine, allowing developers to maintain type safety while working with complex
    object hierarchies.
  parameters: []
  returns: Returns the TypeID of the Object instance, which uniquely identifies the
    type of the object. This value is typically used for dynamic type checking and
    can be compared against other TypeIDs to determine object compatibility.
  examples:
  - title: Basic usage example
    code: 'Object* obj = new Player();

      TypeID id = obj->GetTypeId();

      // id now contains the TypeID for Player'
    language: cpp
  - title: Type checking example
    code: "Object* obj = new Creature();\nTypeID id = obj->GetTypeId();\nif (id ==\
      \ TYPEID_UNIT)\n{\n    // Handle creature-specific logic\n}\nelse\n{\n    //\
      \ Handle other object types\n}"
    language: cpp
  notes: The method is implemented as a virtual function in the Object class, allowing
    for proper polymorphic behavior. It should be used carefully when dealing with
    object hierarchies to ensure correct type identification and avoid runtime errors.
    Performance considerations are minimal since this method simply returns a stored
    value.
  warnings: This method should not be used for direct comparisons with TypeID values
    from other objects unless the objects are of the same type or derived types. Using
    incorrect TypeID comparisons can lead to logical errors in object handling.
  related:
  - IsKindOf
  - GetTypeId
  - GetType
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T17:59:22.956361'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
