api:
  class: AccountMgr
  method: GetSecurity
  signature: uint32 AccountMgr::GetSecurity(uint32 accountId, int32 realmId)
documentation:
  brief: Retrieves the security level associated with a specific account ID and realm
    ID.
  description: The GetSecurity method fetches the security level (access rights) assigned
    to a given account on a specified realm. In TrinityCore, security levels determine
    what administrative actions an account can perform within the game server. The
    method takes an account identifier and a realm identifier as inputs and returns
    the corresponding security level. This is commonly used for permission checks
    and access control in game administration systems. The returned value typically
    corresponds to predefined security tiers such as Player (0), GM (1-4), and Admin
    (5+).
  parameters:
  - name: accountId
    description: Unique identifier of the account for which to retrieve the security
      level. Must be a valid, existing account ID in the database.
  - name: realmId
    description: Identifier of the realm on which to check the account's security
      level. Use -1 to indicate global or current realm context.
  returns: Returns a uint32 value representing the security level of the specified
    account on the given realm. A value of 0 typically indicates a regular player,
    while higher values (1-5) represent increasing levels of administrative access.
    If no matching record is found, the method may return 0 or throw an exception
    depending on implementation.
  examples:
  - title: Basic Usage
    code: uint32 securityLevel = AccountMgr::GetSecurity(12345, -1); // Get security
      level for account ID 12345 on current realm
    language: cpp
  - title: Checking Admin Access
    code: "uint32 sec = AccountMgr::GetSecurity(playerAccountId, realmId);\nif (sec\
      \ >= SEC_ADMINISTRATOR) {\n    // Grant admin privileges\n}"
    language: cpp
  notes: This method likely queries the database for account security information
    and may cache results for performance. It is essential to ensure that accountId
    and realmId are valid before calling this function to avoid unexpected behavior
    or errors.
  warnings: Calling this method with an invalid accountId or realmId may result in
    incorrect return values or database exceptions. Always validate input parameters
    before invoking the function.
  related:
  - AccountMgr::SetSecurity
  - AccountMgr::GetAccountName
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T18:50:40.834560'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
