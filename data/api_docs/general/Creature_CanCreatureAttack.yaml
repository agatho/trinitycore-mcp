api:
  class: Creature
  method: CanCreatureAttack
  signature: bool Creature::CanCreatureAttack(const int * victim, bool force) const
documentation:
  brief: Determines whether a creature can attack a target based on game rules and
    conditions.
  description: The CanCreatureAttack method evaluates whether a creature is allowed
    to initiate an attack against a specified victim. This method checks various game
    mechanics including faction relationships, creature flags, and player state conditions
    to determine if the attack is valid. It considers both the creature's own state
    and the target's condition, ensuring that attacks only occur when appropriate.
    The force parameter allows for overriding normal game rules in certain situations,
    such as when dealing with hostile creatures or when a creature is in combat.
  parameters:
  - name: victim
    description: Pointer to the target creature or player that the creature is attempting
      to attack. This parameter represents the victim's ID and is used to determine
      if the creature can attack based on game rules.
  - name: force
    description: Boolean flag that overrides normal game rules when true, allowing
      creatures to attack even when they would normally be prevented from doing so.
      This is useful for situations where a creature should attack regardless of faction
      or state conditions.
  returns: Returns true if the creature can attack the target under current game conditions,
    false otherwise. The method may return false due to faction restrictions, creature
    flags, or player state conditions that prevent an attack.
  examples:
  - title: Basic usage example
    code: "if (creature->CanCreatureAttack(&targetId, false))\n{\n    // creature\
      \ can attack target\n}\nelse\n{\n    // creature cannot attack target\n}"
    language: cpp
  - title: Force override example
    code: "if (creature->CanCreatureAttack(&targetId, true))\n{\n    // creature can\
      \ attack target even if normally prevented\n}\nelse\n{\n    // creature cannot\
      \ attack target\n}"
    language: cpp
  notes: Implementation details include checking creature flags, faction relationships,
    and player state conditions. Performance considerations are minimal as this method
    primarily involves simple conditional checks. Thread safety is ensured through
    proper locking mechanisms in the game world.
  warnings: This method should not be used for direct attack initiation without proper
    validation. Common mistakes include using incorrect target IDs or ignoring the
    force parameter when it's needed. Dangerous edge cases occur when creatures are
    in combat with themselves or when targeting invalid players.
  related:
  - Creature::CanCreatureAttack
  - Creature::GetCreatureTemplate
  - Creature::GetVictim
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:28:44.799759'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
