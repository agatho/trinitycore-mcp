api:
  class: Player
  method: ApplyBaseModPctValue
  signature: void Player::ApplyBaseModPctValue(int modGroup, float pct)
documentation:
  brief: Applies a percentage modifier to a base value for a specific mod group.
  description: This method applies a percentage modifier to a base value for a specified
    mod group, allowing players to modify various game attributes such as damage,
    healing, or stat values. The method is commonly used in game mechanics to adjust
    player stats based on different factors like buffs, debuffs, or equipment effects.
    It typically affects the player's base value calculations rather than directly
    modifying the final calculated value.
  parameters:
  - name: modGroup
    description: The mod group identifier that determines which type of modifier is
      being applied. This usually corresponds to specific game mechanics like damage
      types, stat categories, or attribute modifiers.
  - name: pct
    description: The percentage value to apply as a modifier. Positive values increase
      the base value while negative values decrease it. The percentage is typically
      expressed as a decimal (e.g., 0.1 for 10%)
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = GetPlayer();

      player->ApplyBaseModPctValue(MOD_DAMAGE, 0.1f); // Apply 10% damage modifier'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = GetPlayer();

      float pct = 0.25f;

      player->ApplyBaseModPctValue(MOD_STAT, pct);

      // Apply 25% stat modifier to player''s base stats'
    language: cpp
  notes: This method is typically used in conjunction with other base value modification
    methods. It may be called during player initialization or when applying game effects.
    The implementation likely involves calculations that affect the final base values
    before any modifiers are applied.
  warnings: The method should not be used to directly modify player's final calculated
    stats as it only affects base values. Care must be taken to ensure proper application
    of modifiers to avoid incorrect stat calculations.
  related:
  - ApplyBaseModValue
  - GetBaseModValue
  - GetBaseModPctValue
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T01:20:54.434073'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
