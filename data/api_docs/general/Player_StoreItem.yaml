api:
  class: Player
  method: StoreItem
  signature: Item * Player::StoreItem(const ItemPosCountVec & pos, Item * pItem, bool
    update)
documentation:
  brief: Stores an item in the player's inventory and returns a pointer to the stored
    item.
  description: The StoreItem method handles the process of storing an item in a player's
    inventory, either in a specific position or automatically finding an appropriate
    slot. It manages item stacking, updates the player's inventory, and returns a
    pointer to the stored item. This method is commonly used when items are added
    to a player's inventory through various game mechanics such as quest rewards,
    loot, or crafting. The method ensures that the item is properly placed in the
    inventory and updates the player's inventory state accordingly.
  parameters:
  - name: pos
    description: A vector of ItemPosCount structures specifying the positions where
      items should be stored. Each ItemPosCount contains a slot and count, indicating
      where to place the item and how many slots to use.
  - name: pItem
    description: The item to be stored in the player's inventory. This can be any
      valid Item object that has not yet been stored in the inventory.
  - name: update
    description: A boolean flag indicating whether to update the player's inventory.
      If true, the method will update the player's inventory state and send updates
      to the client.
  returns: Returns a pointer to the stored Item object. If the item was successfully
    stored, it returns the pointer to the item; otherwise, it may return nullptr if
    the item could not be stored or if the operation failed.
  examples:
  - title: Basic usage example
    code: 'ItemPosCountVec pos;


      // Create a new item

      Item *item = Item::CreateItem(12345, player);


      // Store the item in inventory

      Item *storedItem = player->StoreItem(pos, item, true);'
    language: cpp
  - title: Advanced usage example with multiple items
    code: "ItemPosCountVec pos;\n\n// Create a new item\nItem *item = Item::CreateItem(12345,\
      \ player);\n\n// Store item in specific slots\npos.push_back(ItemPosCount(0,\
      \ 1));\n\n// Store the item in inventory\nItem *storedItem = player->StoreItem(pos,\
      \ item, true);\n\n// Check if item was stored successfully\nif (storedItem)\n\
      {\n    // Handle successful storage\n    printf(\"Item stored successfully\\\
      n\");\n}\nelse\n{\n    // Handle failed storage\n    printf(\"Failed to store\
      \ item\\n\");\n}"
    language: cpp
  notes: The method performs inventory checks and updates, ensuring that the player's
    inventory is properly managed. It handles item stacking and ensures that items
    are placed in appropriate slots. The method may also update the player's inventory
    state and send updates to the client if the update parameter is set to true.
  warnings: The method requires careful handling of item positions and must ensure
    that the item is properly stored in the inventory. Failure to correctly specify
    positions can lead to incorrect placement or failed storage. Also, if update is
    set to false, the player's inventory may not be updated, potentially causing inconsistencies
    in game state.
  related:
  - Item::CreateItem
  - Player::AddItem
  - Player::GetItemCount
  - Player::HasItem
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:27:13.980012'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
