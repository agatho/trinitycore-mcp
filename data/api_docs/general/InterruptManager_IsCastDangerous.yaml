api:
  class: InterruptManager
  method: IsCastDangerous
  signature: bool InterruptManager::IsCastDangerous(Unit * caster)
documentation:
  brief: Determines whether a unit's current cast is considered dangerous for interruption
    purposes.
  description: The IsCastDangerous method evaluates if a unit's ongoing spell cast
    poses a significant threat or danger that would warrant immediate interruption.
    This typically involves checking if the spell being cast has properties that make
    it harmful to enemies, such as damaging spells, area-of-effect attacks, or other
    high-priority offensive abilities. The method is commonly used in AI logic and
    combat systems to prioritize interrupting certain casts over others. It helps
    determine the urgency of interrupting a target's spellcasting for tactical advantage.
  parameters:
  - name: caster
    description: Pointer to the Unit object whose cast is being evaluated for danger
      level. Must not be null, otherwise behavior is undefined.
  returns: Returns true if the caster's current spell cast is considered dangerous
    (e.g., damaging or harmful), false otherwise. A dangerous cast typically indicates
    that interrupting it would provide tactical benefit.
  examples:
  - title: Basic usage in AI logic
    code: "if (interruptManager->IsCastDangerous(victim)) {\n    // Prioritize interrupting\
      \ this target's cast\n    DoInterruptSpell(victim);\n}"
    language: cpp
  - title: Using with conditional interrupt logic
    code: "Unit* target = GetTarget();\nif (target && interruptManager->IsCastDangerous(target))\
      \ {\n    if (CanInterrupt(target)) {\n        // Execute high-priority interrupt\n\
      \        InterruptCurrentSpell(target);\n    }\n}"
    language: cpp
  notes: This method likely checks spell properties such as damage type, area of effect,
    and threat level to determine danger. It may also consider the caster's faction,
    target relationship, and combat state when making its determination.
  warnings: Ensure that the Unit pointer passed is valid and not null before calling
    this method, as undefined behavior may occur if a null pointer is provided.
  related:
  - IsSpellInterruptible
  - GetInterruptPriority
  - CanInterruptSpell
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:31:06.645596'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
