api:
  class: Unit
  method: SetPower
  signature: void Unit::SetPower(int power, int32 val, bool withPowerUpdate)
documentation:
  brief: Sets the power value of a unit to a specified amount.
  description: The SetPower method allows developers to directly modify the power
    value of a Unit object, which represents any creature or player in the game world.
    This method is commonly used for managing mana, rage, energy, focus, or other
    power types during gameplay mechanics such as spell casting, combat, or special
    abilities. The method can optionally trigger a power update notification to the
    client if withPowerUpdate is set to true, ensuring that the visual representation
    of the power changes are properly displayed.
  parameters:
  - name: power
    description: The power type to be set (e.g., mana, rage, energy, focus). This
      parameter defines which power type is being modified.
  - name: val
    description: The new value for the specified power type. This value represents
      the amount of power to be set, typically ranging from 0 to maximum possible
      values depending on the power type.
  - name: withPowerUpdate
    description: When true, triggers a power update notification to the client. When
      false, only updates the internal value without sending updates to the player's
      UI.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* target = new Unit();


      // Set mana to 500

      target->SetPower(Powers::POWER_MANA, 500, false);


      // Set energy to 100 with update

      target->SetPower(Powers::POWER_ENERGY, 100, true);'
    language: cpp
  - title: Advanced Usage Example
    code: '// Assuming a player unit

      Unit* player = GetPlayer();


      // Set rage to maximum value

      player->SetPower(Powers::POWER_RAGE, 1000, true);


      // Set focus to 0

      player->SetPower(Powers::POWER_FOCUS, 0, false);'
    language: cpp
  notes: This method should be used carefully as it bypasses normal game mechanics
    and may cause visual inconsistencies if not properly handled. It is recommended
    to use this method in conjunction with other power-related methods like GetPower
    or SetMaxPower for complete control over power management.
  warnings: Improper use of this method can lead to incorrect power values, causing
    display issues or gameplay bugs. Always ensure that the value being set does not
    exceed the maximum allowed power for the given type.
  related:
  - GetPower
  - SetMaxPower
  - GetMaxPower
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T00:55:10.615669'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
