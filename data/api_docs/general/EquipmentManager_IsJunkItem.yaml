api:
  class: EquipmentManager
  method: IsJunkItem
  signature: bool EquipmentManager::IsJunkItem(int * player, int * item)
documentation:
  brief: Determines whether a specified item is classified as junk within the player's
    equipment.
  description: The IsJunkItem method evaluates whether a given item, identified by
    its item ID, is categorized as junk in the context of the EquipmentManager. This
    classification typically affects how the item is handled during inventory management,
    such as whether it should be automatically sold or destroyed. The method takes
    two integer pointers representing the player and item identifiers, and returns
    true if the item is considered junk, false otherwise. It is commonly used in automated
    systems for managing player inventories and optimizing gear usage.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID). This value must be a valid player GUID or the method may produce undefined
      behavior.
  - name: item
    description: Pointer to an integer representing the item's unique identifier (entry
      ID). This should correspond to a valid item entry in the game database or the
      result will be unreliable.
  returns: Returns true if the specified item is classified as junk, false otherwise.
    The classification depends on internal game rules and item properties such as
    quality, level, and type.
  examples:
  - title: Basic Usage
    code: "int playerId = 12345;\nint itemId = 67890;\nbool isJunk = equipmentManager.IsJunkItem(&playerId,\
      \ &itemId);\nif (isJunk) {\n    // Handle junk item logic\n}"
    language: cpp
  - title: Inventory Cleanup Check
    code: "void CleanUpInventory(Player* player) {\n    for (uint8 slot = INVENTORY_SLOT_ITEM_START;\
      \ slot < INVENTORY_SLOT_ITEM_END; ++slot) {\n        Item* item = player->GetItemByPos(INVENTORY_SLOT_BAG_0,\
      \ slot);\n        if (item && equipmentManager.IsJunkItem(&player->GetGUID().GetRawValue(),\
      \ &item->GetEntry())) {\n            player->DestroyItem(INVENTORY_SLOT_BAG_0,\
      \ slot, true);\n        }\n    }\n}"
    language: cpp
  notes: This method relies on internal item classification logic which may vary based
    on game updates or custom configurations. The method assumes valid pointers and
    does not perform null checks internally.
  warnings: Passing invalid player or item GUIDs can lead to undefined behavior. Ensure
    that the pointers passed are valid before calling this method.
  related:
  - EquipmentManager::IsEquippedItem
  - EquipmentManager::GetItemInfo
  - Player::DestroyItem
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T13:57:15.895767'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
