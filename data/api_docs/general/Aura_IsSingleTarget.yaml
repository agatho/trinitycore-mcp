api:
  class: Aura
  method: IsSingleTarget
  signature: bool Aura::IsSingleTarget() const
documentation:
  brief: Determines whether the aura is a single-target effect.
  description: The IsSingleTarget method checks if the aura instance represents a
    single-target spell effect. In World of Warcraft's TrinityCore implementation,
    auras can be classified as either single-target or area-of-effect (AoE) based
    on their application mechanics and game behavior. This method returns true if
    the aura is designed to affect only one specific target, such as most harmful
    spells like Fireball or healing spells like Heal. It returns false for auras that
    apply to multiple targets simultaneously, such as AoE damage effects or group
    buffs. The determination is typically based on the aura's spell properties and
    how it was applied to targets within the game engine.
  parameters: []
  returns: Returns true if the aura is a single-target effect; otherwise returns false
    for area-of-effect or multi-target auras.
  examples:
  - title: Check if an aura is single-target before applying additional effects
    code: "Aura* aura = player->GetAura(12345);\nif (aura && aura->IsSingleTarget())\
      \ {\n    // Apply special handling for single-target auras\n    target->AddAura(67890,\
      \ player);\n}"
    language: cpp
  - title: Use in combat logic to differentiate aura behavior
    code: "void HandleAuraApplication(Unit* target, Aura* aura) {\n    if (aura->IsSingleTarget())\
      \ {\n        // Single-target logic\n        target->SetFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_SINGLE_TARGET);\n    } else {\n        // Multi-target logic\n \
      \       target->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_SINGLE_TARGET);\n   \
      \ }\n}"
    language: cpp
  notes: This method relies on the aura's internal spell data and application type.
    It does not consider dynamic modifications to the aura after creation. The implementation
    may vary depending on how the aura was originally created through spell effects
    or direct application.
  warnings: Do not use this method as a definitive indicator of whether an aura can
    be dispelled or removed, as some single-target auras might still be subject to
    certain removal mechanics. Also, this check does not account for custom aura modifications
    that may alter the original targeting behavior.
  related:
  - Aura::GetSpellInfo
  - Aura::IsAreaAura
  - Aura::IsPassive
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:10:20.628549'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
