api:
  class: WorldObject
  method: GetDistance2d
  signature: float WorldObject::GetDistance2d(float x, float y) const
documentation:
  brief: Calculates the 2D distance between this WorldObject and a specified point
    in world coordinates
  description: The GetDistance2d method computes the Euclidean distance between the
    calling WorldObject's current position and the provided x, y coordinates. This
    calculation ignores the z-coordinate (height) and only considers horizontal distance.
    The method is commonly used for range-based checks, such as determining if a target
    is within casting range or if an object is close enough to interact with. The
    result is returned in yards, matching the World of Warcraft game coordinate system
    units.
  parameters:
  - name: x
    description: The x-coordinate of the target point in world space
  - name: y
    description: The y-coordinate of the target point in world space
  returns: Returns a float value representing the 2D distance in yards between the
    WorldObject and the specified coordinates. Returns 0.0f if the coordinates are
    identical to the object's position.
  examples:
  - title: Basic Distance Check
    code: "float distance = player->GetDistance2d(100.0f, 200.0f);\nif (distance <\
      \ 5.0f) {\n    // Player is within 5 yards of coordinates (100, 200)\n}"
    language: cpp
  - title: Using with Creature Target
    code: "Creature* target = ...;\nfloat distance = player->GetDistance2d(target->GetPositionX(),\
      \ target->GetPositionY());\nif (distance > 30.0f) {\n    // Player is more than\
      \ 30 yards away from target\n}"
    language: cpp
  notes: This method performs a direct distance calculation using the Pythagorean
    theorem and does not account for terrain or obstacles. It's optimized for performance
    and is safe to call frequently in game logic. The method assumes valid world coordinates
    and will produce inaccurate results if passed invalid coordinate values.
  warnings: Be aware that this function only calculates horizontal (2D) distance,
    ignoring height differences. For 3D distance calculations, use GetDistance instead.
    This method does not validate input parameters, so passing extreme coordinate
    values may lead to unexpected behavior or performance issues.
  related:
  - GetDistance
  - GetDistanceZ
  - GetPositionX
  - GetPositionY
  - GetPositionZ
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:16:27.145486'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
