api:
  class: Aura
  method: ToUnitAura
  signature: const UnitAura * Aura::ToUnitAura() const
documentation:
  brief: Converts an Aura object to a UnitAura pointer, returning nullptr if the aura
    is not applied to a unit.
  description: The ToUnitAura() method performs a type cast conversion from an Aura
    object to a UnitAura pointer. This method is typically used in the TrinityCore
    WoW server engine to safely access unit-specific aura data when the base Aura
    object represents an aura that is applied to a Unit (such as a player or creature).
    The method returns a const UnitAura* pointer if the aura is indeed associated
    with a unit, otherwise it returns nullptr. This conversion is essential for accessing
    unit-specific aura properties and behaviors, such as stacking counts, application
    times, and debuff effects that are not available in the base Aura class.
  parameters: []
  returns: A const UnitAura* pointer to the unit aura if the current Aura object represents
    a unit aura; otherwise returns nullptr. The returned pointer can be used to access
    unit-specific aura properties and methods.
  examples:
  - title: Basic usage to check if aura is unit-based
    code: "Aura* aura = player->GetAura(12345);\nif (UnitAura* unitAura = aura->ToUnitAura())\
      \ {\n    // Safe to access unit-specific aura properties\n    uint32 stackCount\
      \ = unitAura->GetStackAmount();\n    // Process the unit aura data\n}"
    language: cpp
  - title: Using ToUnitAura in a spell effect handler
    code: "void HandleSpellEffect(SpellEffIndex effIndex) {\n    Aura* aura = GetCaster()->GetAura(78901);\n\
      \    if (UnitAura* unitAura = aura->ToUnitAura()) {\n        // Apply logic\
      \ specific to unit auras\n        if (unitAura->GetAuraType() == SPELL_AURA_MOD_DECREASE_SPEED)\
      \ {\n            float speedMod = unitAura->GetAmount();\n            // Modify\
      \ target movement speed based on aura\n        }\n    }\n}"
    language: cpp
  notes: This method is part of the TrinityCore's aura system hierarchy where Aura
    serves as a base class and UnitAura is a derived class. The conversion is safe
    and does not perform any deep copying or memory allocation. It simply returns
    a pointer to the same underlying object with a different type cast, making it
    efficient for type checking and access.
  warnings: Be sure to always check if the returned pointer is nullptr before using
    it, as not all Aura objects are unit-based. Using the returned pointer without
    null checking may cause segmentation faults or undefined behavior in the server
    code.
  related:
  - Aura::ToUnitAura
  - Aura::GetAuraType
  - Aura::GetCaster
  - Aura::GetOwner
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T13:49:25.828292'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
