api:
  class: Player
  method: AutoStoreLoot
  signature: void Player::AutoStoreLoot(uint32 loot_id, const LootStore & store, int
    context, bool broadcast, bool createdByPlayer)
documentation:
  brief: Automatically stores loot items into player's inventory based on loot rules
    and context.
  description: This method handles the automatic distribution of loot items to a player's
    inventory according to predefined loot rules and context. It processes the loot
    store, applies the appropriate loot mechanics, and ensures that items are properly
    added to the player's bag or bank. The method supports various contexts including
    quest loot, skinning, fishing, and other loot types. It can optionally broadcast
    loot notifications to nearby players and handles different loot types based on
    whether the loot was created by a player or NPC.
  parameters:
  - name: loot_id
    description: Unique identifier for the specific loot instance being processed
  - name: store
    description: Reference to the LootStore containing the loot items and their rules
  - name: context
    description: Context of the loot, such as quest, skinning, or fishing - determines
      how loot is processed
  - name: broadcast
    description: Whether to broadcast loot notifications to nearby players
  - name: createdByPlayer
    description: Whether the loot was created by a player (as opposed to an NPC)
  returns: null
  examples:
  - title: Basic Loot Storage Example
    code: 'Player* player = GetPlayer();

      uint32 loot_id = 12345;

      LootStore store;

      player->AutoStoreLoot(loot_id, store, LOOT_QUEST, false, true);'
    language: cpp
  - title: Advanced Loot Context Example
    code: 'Player* player = GetPlayer();

      uint32 loot_id = 67890;

      LootStore store;

      int context = LOOT_SKINNING;

      bool broadcast = true;

      bool createdByPlayer = false;

      player->AutoStoreLoot(loot_id, store, context, broadcast, createdByPlayer);'
    language: cpp
  notes: Implementation details include handling of loot rules, inventory space checks,
    and proper item distribution. Performance considerations involve checking for
    sufficient space in player's inventory before processing. Thread safety is ensured
    through proper locking mechanisms during loot processing.
  warnings: The method may fail if the player's inventory is full or if the loot store
    contains invalid entries. Care must be taken when using broadcast flag as it can
    cause performance issues with large groups of players.
  related:
  - Player::AddItem
  - Player::Loot
  - Player::StoreLoot
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T01:10:21.038762'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
