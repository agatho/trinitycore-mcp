api:
  class: AuraEffect
  method: HandleModCharm
  signature: void AuraEffect::HandleModCharm(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Applies or removes charm effects on a target based on aura application state
  description: The HandleModCharm method manages the application and removal of charm
    effects in the TrinityCore framework. This method is invoked during aura application
    or removal to modify the target's charm state, typically affecting creature behavior
    and player control mechanics. It handles the transition between charmed and uncharmed
    states for affected units, ensuring proper synchronization of visual effects,
    AI behavior changes, and game state updates. The method operates within the aura
    system's framework and interacts with the target's unit data to maintain consistent
    charm status across the game world.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura application
      context. This parameter contains information about which unit is affected by
      the aura and the current application state.
  - name: mode
    description: The mode of operation indicating how the charm effect should be applied.
      This typically represents different application modes or levels of charm effect
      implementation within the aura system.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the charm effect. When true, the target becomes charmed; when false, the charm
      is removed.
  returns: null
  examples:
  - title: Applying a Charm Aura
    code: 'AuraEffect* charmEffect = aura->GetEffect(0);

      charmEffect->HandleModCharm(auraApp, 1, true); // Apply charm effect'
    language: cpp
  - title: Removing a Charm Aura
    code: 'AuraEffect* charmEffect = aura->GetEffect(0);

      charmEffect->HandleModCharm(auraApp, 1, false); // Remove charm effect'
    language: cpp
  notes: This method is part of the core aura handling system and should only be called
    during proper aura application/removal sequences. The method directly modifies
    unit state and may trigger additional events or callbacks in the game engine.
    Developers should ensure that all parameters are valid before calling this method
    to prevent undefined behavior.
  warnings: Improper use of this method can lead to inconsistent charm states, visual
    glitches, or AI behavior anomalies. Never call this method outside of proper aura
    application contexts as it may cause crashes or unexpected unit behavior. The
    'apply' parameter must be carefully managed to ensure correct state transitions.
  related:
  - AuraEffect::HandleEffect
  - AuraApplication::GetTarget
  - Unit::SetCharmedBy
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:41:22.189433'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
