api:
  class: Creature
  method: HasLabel
  signature: bool Creature::HasLabel(int32 cretureLabel) const
documentation:
  brief: Checks if a creature has a specific label assigned to it.
  description: This method determines whether a creature object possesses a particular
    label, which is used for various game mechanics including quest tracking, NPC
    interaction, and special behaviors. The label system allows developers to categorize
    and identify creatures based on their role within the game world. This method
    is essential for implementing conditional logic in creature AI scripts where specific
    labels are required for triggering certain actions or events.
  parameters: []
  returns: Returns true if the creature has the specified label assigned, false otherwise.
    The label value is typically an integer identifier that corresponds to predefined
    game labels used in the TrinityCore system.
  examples:
  - title: Basic usage example
    code: "if (creature->HasLabel(12345)) {\n    // Perform action when creature has\
      \ label 12345\n}"
    language: cpp
  notes: This method is commonly used in conjunction with other creature label-related
    methods such as AddLabel, RemoveLabel, and GetLabel. It's important to note that
    labels are assigned at runtime and may be modified during the creature's lifecycle.
    Performance considerations include checking for label existence rather than using
    multiple conditional checks.
  warnings: Be cautious when using this method in AI scripts as it can lead to infinite
    loops if not properly implemented. The label value should be carefully managed
    to avoid conflicts with other creatures or quest systems.
  related:
  - Creature::AddLabel
  - Creature::RemoveLabel
  - Creature::GetLabel
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:02:55.662265'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
