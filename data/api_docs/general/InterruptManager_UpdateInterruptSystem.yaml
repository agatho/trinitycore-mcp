api:
  class: InterruptManager
  method: UpdateInterruptSystem
  signature: void InterruptManager::UpdateInterruptSystem(uint32 diff)
documentation:
  brief: Updates the interrupt system to process pending interrupts and manage their
    states.
  description: The UpdateInterruptSystem method is responsible for maintaining and
    updating the state of active interrupts within the TrinityCore framework. It processes
    all pending interrupt events, checks their conditions, and manages their lifecycle
    including removal when appropriate. This method is typically called during the
    game loop to ensure that interrupt mechanics such as spell interruption, movement
    interruption, or other gameplay interruptions are properly handled in real-time.
    The method operates on a time-based delta (diff) parameter which represents the
    elapsed time since last update, allowing for precise timing of interrupt checks
    and actions.
  parameters:
  - name: diff
    description: The time difference in milliseconds since the last update call. This
      value is used to determine how much time has passed and whether interrupt conditions
      should be evaluated or updated accordingly.
  returns: null
  examples:
  - title: Basic usage in game loop
    code: "void GameWorld::Update(uint32 diff)\n{\n    // ... other updates ...\n\
      \    m_interruptManager.UpdateInterruptSystem(diff);\n    // ... other updates\
      \ ...\n}"
    language: cpp
  - title: Usage with custom interrupt handling
    code: "class MyInterruptHandler\n{\npublic:\n    void HandleInterruptUpdate(uint32\
      \ diff)\n    {\n        // Perform custom logic before updating system\n   \
      \     if (ShouldProcessInterrupts())\n        {\n            m_interruptManager.UpdateInterruptSystem(diff);\n\
      \        }\n    }\n};"
    language: cpp
  notes: This method is typically invoked from the main game loop or update cycle.
    It's important to note that this method may trigger various interrupt-related
    callbacks and event handlers, so performance considerations should be taken into
    account when dealing with high-frequency updates or large numbers of active interrupts.
  warnings: Improper handling of the diff parameter can lead to incorrect timing of
    interrupt checks. Always ensure that the diff value accurately reflects the time
    elapsed since the last system update for consistent behavior.
  related:
  - InterruptManager::AddInterrupt
  - InterruptManager::RemoveInterrupt
  - InterruptManager::HasInterrupt
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T00:04:31.262509'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
