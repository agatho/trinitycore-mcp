api:
  class: SummonList
  method: Despawn
  signature: void SummonList::Despawn(const int * summon)
documentation:
  brief: Despawns a specific summon from the SummonList
  description: The Despawn method removes a specified summon from the SummonList,
    effectively removing it from the world. This method is typically used by AI systems
    or game mechanics to control summoned creatures or objects. The summon is removed
    from the list and its associated GameObject or Creature is destroyed. The method
    takes a pointer to an integer representing the summon's identifier within the
    list.
  parameters:
  - name: summon
    description: Pointer to an integer identifying the specific summon in the SummonList
      to be despawned. Must point to a valid index or identifier within the list bounds.
  returns: null
  examples:
  - title: Basic Despawn Usage
    code: 'SummonList list;

      // Assume list contains summons

      int summonId = 0;

      list.Despawn(&summonId);'
    language: cpp
  - title: Despawn with Validation
    code: "SummonList list;\nint* summonPtr = list.GetSummon(0);\nif (summonPtr !=\
      \ nullptr)\n{\n    list.Despawn(summonPtr);\n}"
    language: cpp
  notes: This method assumes the provided pointer points to a valid summon within
    the SummonList. It is recommended to validate the pointer before calling to prevent
    undefined behavior. The method does not perform any checks for whether the summon
    is already despawned.
  warnings: Passing an invalid or null pointer to this method may result in undefined
    behavior or crashes. Always ensure that the summon identifier points to a valid
    entry in the SummonList before invoking this method.
  related:
  - SummonList::Add
  - SummonList::Remove
  - SummonList::Clear
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T20:43:50.091379'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
