api:
  class: LineOfSightManager
  method: GetFirstBlockedWaypoint
  signature: int LineOfSightManager::GetFirstBlockedWaypoint(const int & waypoints)
documentation:
  brief: Determines the index of the first waypoint that blocks line of sight in a
    path.
  description: The GetFirstBlockedWaypoint method evaluates a sequence of waypoints
    to identify the first point that obstructs direct line of sight from the starting
    position. This is commonly used in AI pathfinding and movement logic to determine
    where an NPC or creature's movement route is impeded by obstacles such as walls,
    terrain features, or other entities. The method iterates through the provided
    waypoints and checks for visibility between each consecutive pair. It returns
    the index of the first waypoint that fails this visibility test, or -1 if all
    waypoints are visible from the previous one. This functionality is essential for
    realistic path navigation in World of Warcraft environments where line of sight
    must be maintained for certain actions like casting spells or following targets.
  parameters: []
  returns: Returns an integer representing the index of the first waypoint that blocks
    line of sight. If no waypoints block visibility, returns -1. A negative return
    value indicates either an empty waypoint list or no blocking waypoints were found.
  examples:
  - title: Basic Usage to Identify Blocked Path
    code: "LineOfSightManager losManager;\nint blockedIndex = losManager.GetFirstBlockedWaypoint(waypoints);\n\
      if (blockedIndex != -1) {\n    std::cout << \"Path blocked at waypoint index:\
      \ \" << blockedIndex << std::endl;\n} else {\n    std::cout << \"No blocking\
      \ waypoints found.\" << std::endl;\n}"
    language: cpp
  notes: This method assumes that the waypoints are provided in order of traversal
    and that the starting position is implicitly defined as the origin of the first
    waypoint. The implementation likely uses raycasting or similar visibility algorithms
    to test for obstructions between points. Performance may degrade with large numbers
    of waypoints due to repeated line-of-sight checks.
  warnings: Ensure that the waypoint array is properly initialized before calling
    this method, as passing an invalid or unsorted list may lead to incorrect results.
    The method does not validate input parameters, so unexpected behavior could occur
    if waypoints are malformed or contain invalid coordinates.
  related:
  - GetWaypointCount
  - IsWaypointVisible
  - CalculatePath
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:10:48.240428'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
