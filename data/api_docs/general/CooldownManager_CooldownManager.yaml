api:
  class: CooldownManager
  method: CooldownManager
  signature: void CooldownManager::CooldownManager()
documentation:
  brief: Initializes a new CooldownManager instance with default settings and empty
    cooldown tracking.
  description: The CooldownManager constructor initializes a new cooldown manager
    object, setting up internal data structures for tracking spell and item cooldowns.
    This method prepares the manager to handle cooldown-related operations such as
    adding, checking, and removing cooldowns for various game actions. The initialization
    ensures that all cooldown entries are properly registered with default values,
    allowing subsequent calls to cooldown management functions to operate correctly.
    No specific preconditions are required before calling this constructor, as it
    solely handles object setup.
  parameters: []
  returns: null
  examples:
  - title: Creating a new CooldownManager instance
    code: 'CooldownManager* manager = new CooldownManager();

      // The manager is now ready to track cooldowns for spells and items'
    language: cpp
  - title: Using CooldownManager in a player context
    code: "class Player {\nprivate:\n    CooldownManager cooldownManager;\npublic:\n\
      \    void OnSpellCast(Spell* spell) {\n        // Use the cooldown manager to\
      \ track spell cooldowns\n        cooldownManager.AddCooldown(spell->GetSpellInfo(),\
      \ spell->GetCooldownTime());\n    }\n};"
    language: cpp
  notes: This constructor does not take any parameters, so it is typically used in
    conjunction with other initialization routines. Developers should ensure that
    the CooldownManager instance is properly initialized before any cooldown-related
    operations are performed.
  warnings: null
  related:
  - AddCooldown
  - HasCooldown
  - RemoveCooldown
  - GetRemainingCooldown
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T04:18:21.696434'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
