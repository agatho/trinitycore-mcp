api:
  class: Map
  method: AddGameObjectToMoveList
  signature: void Map::AddGameObjectToMoveList(GameObject * go, float x, float y,
    float z, float ang)
documentation:
  brief: Adds a game object to the map's movement list for processing.
  description: The AddGameObjectToMoveList method is used to register a GameObject
    with the map's movement system, allowing it to be processed during the next update
    cycle. This is typically used when a game object needs to be moved or has its
    position updated in a way that requires the map's internal systems to track and
    handle the change. The method takes the GameObject pointer along with new coordinates
    and orientation, which are then queued for processing by the map's movement manager.
    This ensures that the object's state is properly synchronized with the map's spatial
    indexing and collision detection systems.
  parameters:
  - name: go
    description: Pointer to the GameObject instance that needs to be added to the
      movement list. Must not be null.
  - name: x
    description: New X coordinate for the game object's position in world space.
  - name: y
    description: New Y coordinate for the game object's position in world space.
  - name: z
    description: New Z coordinate for the game object's position in world space.
  - name: ang
    description: New orientation angle (in radians) of the game object.
  returns: null
  examples:
  - title: Basic usage example
    code: 'GameObject* go = player->GetGameObject();

      Map* map = player->GetMap();

      map->AddGameObjectToMoveList(go, 100.0f, 200.0f, 300.0f, 1.57f);'
    language: cpp
  - title: Updating a game object's position
    code: "void UpdateGameObjectPosition(GameObject* go, float newX, float newY, float\
      \ newZ)\n{\n    Map* map = go->GetMap();\n    if (map)\n    {\n        float\
      \ angle = go->GetOrientation();\n        map->AddGameObjectToMoveList(go, newX,\
      \ newY, newZ, angle);\n    }\n}"
    language: cpp
  notes: This method is typically called internally by the game engine when position
    updates occur. It does not immediately move the object but rather schedules it
    for processing in the next update cycle. The method assumes that the GameObject
    pointer is valid and that the coordinates are within acceptable world bounds.
  warnings: Passing a null GameObject pointer will likely cause undefined behavior
    or crashes. Ensure that the provided coordinates are valid and within the map's
    boundaries to avoid unexpected results during movement processing.
  related:
  - Map::RemoveGameObjectFromMoveList
  - Map::UpdateObjectPosition
  - GameObject::UpdatePosition
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:52:34.529461'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
