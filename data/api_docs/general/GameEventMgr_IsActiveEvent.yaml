api:
  class: GameEventMgr
  method: IsActiveEvent
  signature: bool GameEventMgr::IsActiveEvent(uint16 event_id) const
documentation:
  brief: Checks whether a specified game event is currently active in the world.
  description: The IsActiveEvent method determines if a game event identified by the
    given event_id is currently active within the TrinityCore server. This functionality
    is crucial for managing seasonal events, holiday celebrations, and other time-based
    content that should only be available during specific periods. The method typically
    queries an internal event manager system that tracks active events and their time
    constraints. It returns true if the event is active and false otherwise, making
    it useful for conditional logic in quest handlers, NPC behaviors, and world object
    interactions.
  parameters: []
  returns: Returns true if the specified game event is currently active; otherwise
    returns false. An event is considered active when its start time has passed and
    its end time has not yet been reached, or when it has no defined end time and
    is currently running.
  examples:
  - title: Basic usage to check if a holiday event is active
    code: "if (sGameEventMgr->IsActiveEvent(1234)) {\n    // Enable holiday-specific\
      \ quest rewards\n    player->AddItem(ITEM_HOLIDAY_GIFT, 1);\n}"
    language: cpp
  - title: Using in NPC gossip logic to show event-specific options
    code: "if (sGameEventMgr->IsActiveEvent(5678)) {\n    player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT,\
      \ \"Special Event Quest\", GOSSIP_SENDER_MAIN, 1001);\n} else {\n    player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT,\
      \ \"Regular Quest\", GOSSIP_SENDER_MAIN, 1002);\n}"
    language: cpp
  notes: This method is typically used in conjunction with the GameEventMgr's internal
    event tracking system. It relies on accurate time management and event scheduling
    within the server. The method is thread-safe as it only performs read operations
    on shared data structures.
  warnings: Ensure that the event_id passed to this method corresponds to a valid
    registered game event, otherwise behavior may be undefined or return false unexpectedly.
    This method does not validate the existence of the event ID itself, so callers
    should ensure proper event registration before calling.
  related:
  - GameEventMgr::GetNextEventTime
  - GameEventMgr::GetActiveEventList
  - GameEventMgr::IsEventValid
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T13:36:01.671995'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
