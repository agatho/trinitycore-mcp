api:
  class: Aura
  method: Create
  signature: Aura * Aura::Create(AuraCreateInfo & createInfo)
documentation:
  brief: Creates a new Aura instance with specified creation parameters
  description: The Aura::Create method is used to instantiate a new Aura object based
    on provided creation information. This method serves as a factory function for
    creating aura effects, typically used when applying buffs, debuffs, or other game
    mechanics that require aura handling. The created aura will have specific properties
    and behaviors determined by the AuraCreateInfo structure passed in. It is commonly
    employed during spell casting, item usage, or other game events where aura effects
    need to be generated.
  parameters:
  - name: createInfo
    description: The AuraCreateInfo structure containing parameters needed to define
      the new aura's properties, including duration, stack count, and effect type.
      This parameter determines how the aura will behave and what effects it will
      have on the target.
  returns: Returns a pointer to the newly created Aura object, which can be used for
    further manipulation or application to targets. If creation fails or the parameters
    are invalid, this may return nullptr.
  examples:
  - title: Basic Aura Creation
    code: "Aura* aura = Aura::Create(createInfo);\nif (aura)\n{\n    // Use the aura\n\
      }"
    language: cpp
  - title: Advanced Aura Creation with Stack Count
    code: "AuraCreateInfo createInfo;\ncreateInfo.duration = 30000;\ncreateInfo.stackCount\
      \ = 5;\ncreateInfo.effectMask = 1;\n\nAura* aura = Aura::Create(createInfo);\n\
      if (aura)\n{\n    // Apply to target\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related methods
    like Aura::ApplyToTarget or Aura::Remove. The created aura object must be properly
    managed to prevent memory leaks. It's important to note that the method may return
    nullptr if invalid parameters are provided, and it should be called from a valid
    context where the target exists.
  warnings: This method does not perform any validation checks on the input parameters
    beyond what is required by the AuraCreateInfo structure. If the createInfo contains
    invalid values, such as negative duration or invalid effect mask, the resulting
    aura may behave unexpectedly or cause crashes. Always ensure that the parameters
    are valid before calling this method.
  related:
  - Aura::ApplyToTarget
  - Aura::Remove
  - Aura::GetEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T02:54:24.146400'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
