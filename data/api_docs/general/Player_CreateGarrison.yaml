api:
  class: Player
  method: CreateGarrison
  signature: void Player::CreateGarrison(uint32 garrSiteId)
documentation:
  brief: Creates a garrison for the player using the specified garrison site identifier.
  description: The CreateGarrison method initializes and sets up a garrison structure
    for the player within the game world. This method is typically invoked when a
    player unlocks or gains access to a new garrison, such as during quest completion
    or faction progression. It establishes the foundational data structures required
    for garrison management, including building placement areas, follower slots, and
    resource tracking systems. The method requires a valid garrison site identifier
    to determine the type and layout of the garrison being created. This operation
    modifies the player's internal garrison state and may trigger related updates
    in the game client UI and server-side data persistence.
  parameters:
  - name: garrSiteId
    description: The unique identifier for the garrison site type to be created. This
      value determines the garrison's layout, available buildings, and faction-specific
      properties. Valid values correspond to predefined garrison site types in the
      game database.
  returns: null
  examples:
  - title: Basic Garrison Creation
    code: 'Player* player = ...;

      player->CreateGarrison(1234); // Creates a garrison with site ID 1234'
    language: cpp
  - title: Conditional Garrison Creation
    code: "Player* player = ...;\nif (player->GetGarrison() == nullptr)\n{\n    player->CreateGarrison(5678);\n\
      }"
    language: cpp
  notes: This method should only be called when the player is in a valid state to
    receive a garrison. The garrSiteId parameter must reference an existing garrison
    site definition in the game database. The method does not perform any validation
    on the input ID, so calling with invalid IDs may result in undefined behavior
    or incomplete garrison initialization.
  warnings: Calling this method without proper preconditions can lead to client-server
    desynchronization or corrupted player data. Ensure that the player has completed
    necessary prerequisites before invoking this method. Avoid calling this method
    multiple times for the same player without proper cleanup, as it may cause duplicate
    garrison instances or resource conflicts.
  related:
  - GetGarrison
  - HasGarrison
  - DeleteGarrison
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T19:48:43.310995'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
