api:
  class: ExampleManager
  method: GetCurrentTaskType
  signature: Task::Type ExampleManager::GetCurrentTaskType() const
documentation:
  brief: Retrieves the type of the currently active task managed by the ExampleManager
    instance.
  description: The GetCurrentTaskType method returns the Task::Type enumeration value
    representing the category or classification of the task currently being handled
    by this ExampleManager instance. This method is typically used in game logic to
    determine what kind of operation or objective is currently in progress, allowing
    for conditional behavior based on task type. The method does not modify any internal
    state and is safe to call repeatedly. It assumes that a task is already initialized
    and active within the manager; calling this method when no task exists may result
    in undefined behavior or return an invalid task type value.
  parameters: []
  returns: A Task::Type enumeration value indicating the current task's category.
    Possible values depend on the specific implementation of Task::Type but commonly
    include types such as TASK_TYPE_QUEST, TASK_TYPE_DUNGEON, TASK_TYPE_RAID, etc.,
    depending on how tasks are classified in the TrinityCore system.
  examples:
  - title: Basic Usage to Check Current Task Type
    code: "ExampleManager manager;\n// Assume manager has an active task\nTask::Type\
      \ currentType = manager.GetCurrentTaskType();\nif (currentType == Task::TYPE_QUEST)\n\
      {\n    // Handle quest-specific logic\n}"
    language: cpp
  - title: Using Return Value in Conditional Logic
    code: "ExampleManager* mgr = GetExampleManager();\nTask::Type type = mgr->GetCurrentTaskType();\n\
      switch (type)\n{\n    case Task::TYPE_QUEST:\n        // Process quest-related\
      \ actions\n        break;\n    case Task::TYPE_DUNGEON:\n        // Handle dungeon-specific\
      \ behavior\n        break;\n    default:\n        // Default handling for unknown\
      \ or invalid task types\n        break;\n}"
    language: cpp
  notes: This method is read-only and does not perform any side effects. It should
    only be called when the ExampleManager instance is in a valid state with an active
    task. If the manager has no current task, the returned value may be undefined
    or represent an invalid task type.
  warnings: Calling this method without ensuring that a task exists within the manager
    can lead to unpredictable results. Always verify that a task is active before
    calling GetCurrentTaskType if the behavior for inactive states is not well-defined.
  related:
  - SetCurrentTaskType
  - GetCurrentTask
  - HasActiveTask
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:51:15.048208'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
