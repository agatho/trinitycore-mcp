api:
  class: Object
  method: operator=
  signature: Object & Object::operator=(Object && right)
documentation:
  brief: Moves the contents of another Object instance to this Object, leaving the
    source in a valid but unspecified state.
  description: The move assignment operator transfers ownership of resources from
    the right-hand side Object to the left-hand side Object. This operation is typically
    used to efficiently transfer the internal state of one Object to another without
    performing expensive deep copies. After the move, the source Object is left in
    a valid state, but its contents are unspecified and should not be relied upon.
    In the context of TrinityCore's World of Warcraft server implementation, this
    operator is commonly used when managing game entities such as Players, Creatures,
    and GameObjects where resource ownership needs to be transferred efficiently during
    object lifecycle management. The move operation is particularly important for
    performance-critical code paths involving temporary objects or container operations.
  parameters: []
  returns: A reference to the left-hand side Object after the move assignment has
    completed, allowing for chaining of assignments.
  examples:
  - title: Basic Move Assignment
    code: 'Object obj1;

      Object obj2 = std::move(obj1); // Move obj1''s contents to obj2

      // obj1 is now in a valid but unspecified state'
    language: cpp
  - title: Assignment Chaining with Move
    code: 'Object obj1, obj2, obj3;

      obj1 = std::move(obj2); // Move obj2 to obj1

      obj1 = std::move(obj3); // Move obj3 to obj1 (previous contents of obj1 are
      destroyed)

      // Both obj2 and obj3 are now in valid but unspecified states'
    language: cpp
  notes: This operator is part of the C++ move semantics standard and should be implemented
    efficiently. In TrinityCore, it's crucial to understand that after a move operation,
    the source object remains in a valid state but its contents are undefined. This
    means any further operations on the moved-from object should only use methods
    that don't depend on its previous state.
  warnings: Never assume the moved-from object retains any meaningful data after a
    move assignment. Avoid using the source object for anything other than destruction
    or reassignment immediately afterward. In TrinityCore, be especially careful when
    moving objects that manage server-side game state, as improper use could lead
    to memory corruption or inconsistent game state.
  related:
  - Object::Object(Object &&)
  - Object::operator=
  - Object::CopyFrom
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:55:42.708188'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
