api:
  class: InterruptManager
  method: CanInterruptInTime
  signature: bool InterruptManager::CanInterruptInTime(const InterruptTarget & target,
    InterruptMethod method)
documentation:
  brief: Determines whether an interrupt can be successfully applied to a target within
    the specified time frame.
  description: The CanInterruptInTime method evaluates if a given interrupt action
    can be executed against a target based on timing constraints and game mechanics.
    This method is typically used in combat systems to check if an ability or spell
    interruption is valid at the current moment. It considers factors such as the
    target's current state, the interrupt method being applied, and temporal conditions
    required for successful interruption. The method returns true if all conditions
    are met for a timely interrupt, otherwise false.
  parameters:
  - name: target
    description: The target entity that is being interrupted. This parameter defines
      which unit or object will be affected by the interrupt action.
  - name: method
    description: The method of interruption to be applied. This specifies the type
      of interrupt (e.g., spell interruption, ability cancellation) that is being
      evaluated for validity.
  returns: Returns true if the interrupt can be successfully applied to the target
    within the required time constraints; otherwise returns false.
  examples:
  - title: Basic Interrupt Check
    code: "if (interruptManager.CanInterruptInTime(target, InterruptMethod::SPELL_INTERRUPT))\
      \ {\n    // Proceed with interrupt logic\n    target.InterruptSpell();\n}"
    language: cpp
  - title: Advanced Interrupt Validation
    code: "InterruptTarget playerTarget = GetPlayerTarget();\nInterruptMethod interruptType\
      \ = InterruptMethod::ABILITY_CANCEL;\n\nif (interruptManager.CanInterruptInTime(playerTarget,\
      \ interruptType)) {\n    // Validate that target is not immune to interruption\n\
      \    if (!playerTarget.IsImmuneToInterrupt()) {\n        playerTarget.ApplyInterrupt(interruptType);\n\
      \    }\n}"
    language: cpp
  notes: This method likely performs checks against internal cooldowns, state flags,
    and timing windows. It may be called frequently during combat processing so performance
    is important. The method assumes valid parameters are passed; invalid inputs could
    lead to undefined behavior.
  warnings: Ensure that both target and method parameters are properly initialized
    before calling this method. Improper handling of these parameters can result in
    incorrect interrupt decisions or potential crashes.
  related:
  - InterruptManager::InterruptTarget
  - InterruptManager::InterruptMethod
  - InterruptManager::ExecuteInterrupt
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:38:24.434907'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
