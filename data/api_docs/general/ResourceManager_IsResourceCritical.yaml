api:
  class: ResourceManager
  method: IsResourceCritical
  signature: bool ResourceManager::IsResourceCritical(ResourceType type)
documentation:
  brief: Checks if a specified resource type is currently at or below its critical
    threshold.
  description: The IsResourceCritical method determines whether a given resource type
    has reached its critical level, which typically signifies that the resource is
    nearly depleted and requires immediate attention or replenishment. This method
    is commonly used in game logic to trigger warnings, disable actions, or initiate
    recovery mechanisms when player resources such as mana, energy, or health fall
    below predefined thresholds. The check is performed against internal resource
    management state and may consider both current values and configured critical
    limits for each resource type.
  parameters:
  - name: type
    description: The ResourceType enumeration value specifying which resource to evaluate
      for critical status. Valid values include common resource types such as RESOURCE_MANA,
      RESOURCE_ENERGY, RESOURCE_RAGE, and RESOURCE_HEALTH.
  returns: Returns true if the specified resource type is at or below its critical
    threshold; otherwise returns false. A return value of true indicates that the
    resource is in a critical state and may require immediate action.
  examples:
  - title: Basic Usage to Check Mana Critical Status
    code: "if (resourceManager.IsResourceCritical(RESOURCE_MANA)) {\n    // Trigger\
      \ mana warning or prevent spell casting\n    SendSystemMessage(\"Your mana is\
      \ critically low!\");\n}"
    language: cpp
  - title: Advanced Usage with Conditional Logic
    code: "switch (resourceManager.IsResourceCritical(RESOURCE_ENERGY) ? 1 : 0) {\n\
      \    case 1:\n        // Handle energy critical state\n        break;\n    default:\n\
      \        // Normal energy levels\n        break;\n}"
    language: cpp
  notes: This method relies on internal resource tracking and assumes that the ResourceManager
    has been properly initialized with valid resource configurations. It does not
    perform any external I/O operations but instead accesses cached or computed values
    related to resource states.
  warnings: Ensure that the ResourceType parameter passed is valid and supported by
    the ResourceManager implementation; passing an invalid resource type may lead
    to undefined behavior or incorrect results.
  related:
  - GetResourceLevel
  - SetResourceCriticalThreshold
  - IsResourceEmpty
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:10:42.372599'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
