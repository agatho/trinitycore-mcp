api:
  class: WorldObject
  method: CanNeverSee
  signature: bool WorldObject::CanNeverSee(const WorldObject * obj, bool ignorePhaseShift)
    const
documentation:
  brief: Determines whether a WorldObject can never see another WorldObject, ignoring
    phase shifts.
  description: This method evaluates whether one WorldObject can never see another
    WorldObject, taking into account the current phase shift state of both objects.
    It is used primarily in game mechanics to determine visibility and interaction
    between objects in different phases. The method returns true if the objects cannot
    see each other under any circumstances, considering the phase shift settings.
    This functionality is crucial for determining object visibility in various game
    scenarios such as combat, questing, and interaction with NPCs.
  parameters:
  - name: obj
    description: The WorldObject to check against. This represents the target object
      that may be visible or invisible to the current object based on phase shift
      settings.
  - name: ignorePhaseShift
    description: Boolean flag indicating whether phase shift should be ignored. If
      true, the method will ignore phase shift information and return true only if
      the objects are completely separated by distance or other factors.
  returns: Returns true if the current WorldObject can never see the target object
    under any circumstances, false otherwise. The return value indicates whether visibility
    is possible based on phase shift and distance considerations.
  examples:
  - title: Basic usage example
    code: "if (player->CanNeverSee(targetNPC)) {\n    // Do something\n}\n"
    language: cpp
  - title: Advanced usage with phase shift
    code: "bool result = player->CanNeverSee(targetNPC, true);\nif (result) {\n  \
      \  // This object cannot see the target regardless of phase shift\n}"
    language: cpp
  notes: This method is primarily used in game logic to determine visibility between
    objects. It considers both phase shift and distance factors. Performance-wise,
    it may be computationally expensive if used frequently in loops or conditions.
    Thread safety depends on the implementation of phase shift handling.
  warnings: This method should not be used for determining actual visibility in combat
    situations, as it may not account for all visibility factors including line of
    sight or visual obstruction. Also, this method does not consider other factors
    like object size or height that might affect visibility.
  related:
  - WorldObject::CanSee
  - WorldObject::IsVisible
  - WorldObject::HasVisibility
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T03:02:42.017079'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
