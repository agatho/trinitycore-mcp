api:
  class: AuraScript
  method: GetDynobjOwner
  signature: DynamicObject * AuraScript::GetDynobjOwner() const
documentation:
  brief: Returns the DynamicObject that owns this AuraScript instance.
  description: The GetDynobjOwner method retrieves a pointer to the DynamicObject
    that is associated with the current AuraScript. This is typically used in aura
    scripts that are triggered by dynamic objects such as area auras or spell effects
    created by traps, to access properties of the object that cast or applied the
    aura. The returned pointer may be null if the aura is not owned by a dynamic object,
    which can happen for regular auras applied directly by spells or abilities.
  parameters: []
  returns: A pointer to the DynamicObject that owns this aura script, or nullptr if
    the aura is not associated with a dynamic object.
  examples:
  - title: Accessing Owner's Source Object
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnApply(AuraEffect\
      \ const* aurEff, AuraEffectHandleModes mode) override\n    {\n        DynamicObject*\
      \ dynObj = GetDynobjOwner();\n        if (dynObj)\n        {\n            Unit*\
      \ caster = dynObj->GetCaster();\n            if (caster)\n                //\
      \ Use the caster information from the dynamic object\n        }\n    }\n};"
    language: cpp
  notes: This method is primarily intended for use within AuraScript implementations
    where the aura is tied to a DynamicObject. It's important to check for null returns
    before using the pointer, as not all auras will have a dynamic object owner.
  warnings: Using this method without checking for null can lead to crashes if the
    aura is not owned by a DynamicObject. Ensure that any code relying on the returned
    pointer has proper null checks in place.
  related:
  - GetCaster
  - GetOwner
  - GetAura
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T18:19:17.453043'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
