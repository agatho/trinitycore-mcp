api:
  class: EquipmentManager
  method: GetStatPriorityByClassSpec
  signature: const StatPriority & EquipmentManager::GetStatPriorityByClassSpec(uint8
    classId, uint32 specId)
documentation:
  brief: Retrieves the stat priority configuration for a specified class and specialization.
  description: The GetStatPriorityByClassSpec method fetches the stat priority settings
    associated with a given class ID and specialization ID. These stat priorities
    define how various attributes (such as Strength, Agility, Intellect) are prioritized
    for itemization and gear selection in the game. This information is crucial for
    determining optimal stat distributions on equipment and is used internally by
    the game's itemization and loot systems. The method returns a constant reference
    to a StatPriority structure, ensuring that the returned data cannot be modified
    directly through this interface. It is expected that valid class and spec IDs
    are provided, as invalid inputs may lead to undefined behavior or incorrect stat
    prioritization.
  parameters: []
  returns: A constant reference to a StatPriority object which contains the stat priority
    configuration for the specified class and specialization. This structure typically
    includes mappings of stat types to their relative importance values used during
    gear evaluation and itemization decisions.
  examples:
  - title: Retrieve stat priorities for a Warrior's Arms specialization
    code: 'const StatPriority& priority = equipmentManager.GetStatPriorityByClassSpec(CLASS_WARRIOR,
      SPEC_WARRIOR_ARMS);

      // Use ''priority'' to determine optimal stat allocation for Arms Warriors'
    language: cpp
  notes: This method is likely cached or pre-loaded in memory for performance reasons,
    as it's accessed frequently during itemization and loot generation. The returned
    reference should not be stored beyond the scope of its use, as modifications to
    the internal stat priority data may invalidate any stored references.
  warnings: Do not modify the returned StatPriority object directly through the reference,
    as it is intended to be read-only. Using invalid class or spec IDs can result
    in accessing incorrect or uninitialized stat priority data.
  related:
  - GetStatPriorityByClass
  - GetStatPriorityBySpec
  - SetStatPriorityByClassSpec
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:58:57.432258'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
