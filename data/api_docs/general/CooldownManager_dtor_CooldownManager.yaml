api:
  class: CooldownManager
  method: ~CooldownManager
  signature: void CooldownManager::~CooldownManager()
documentation:
  brief: Destroys a CooldownManager instance and releases all associated cooldown
    data.
  description: The ~CooldownManager destructor is automatically invoked when a CooldownManager
    object goes out of scope or is explicitly deleted. This method ensures proper
    cleanup of all cooldown entries managed by the instance, including removing references
    to active cooldowns and freeing associated memory. In the context of TrinityCore's
    World of Warcraft emulation, this cleanup is essential for preventing memory leaks
    and maintaining accurate cooldown tracking for players and game objects. The destructor
    does not require any specific preconditions as it handles its own internal state
    management.
  parameters: []
  returns: null
  examples:
  - title: Automatic destruction of CooldownManager
    code: "void SomeFunction()\n{\n    CooldownManager manager;\n    // ... use manager\
      \ ...\n    // manager is automatically destroyed here\n}"
    language: cpp
  - title: Explicit deletion of CooldownManager
    code: 'CooldownManager* manager = new CooldownManager();

      // ... use manager ...

      delete manager; // Triggers destructor'
    language: cpp
  notes: The destructor is implicitly called by the C++ runtime when objects go out
    of scope. Developers should not manually invoke this destructor unless explicitly
    managing object lifetime through dynamic allocation. The cleanup process ensures
    that no cooldown entries are left in an inconsistent state.
  warnings: null
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T04:17:58.978162'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
