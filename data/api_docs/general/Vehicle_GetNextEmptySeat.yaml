api:
  class: Vehicle
  method: GetNextEmptySeat
  signature: int Vehicle::GetNextEmptySeat(int8 seatId, bool next) const
documentation:
  brief: Finds the next available seat on a vehicle starting from the specified seat
    ID.
  description: The GetNextEmptySeat method searches for the next empty seat on a vehicle,
    beginning its search at the provided seat ID. If the 'next' parameter is true,
    it will look forward through the seat indices; otherwise, it will search backward.
    This method is commonly used in vehicle boarding logic to determine where a passenger
    can be seated. The method respects the vehicle's seat configuration and returns
    -1 if no empty seat is found within the valid range of seats.
  parameters:
  - name: seatId
    description: The starting seat ID from which to begin searching for an empty seat.
      Must be a valid seat index within the vehicle's seat range.
  - name: next
    description: If true, searches forward through seat indices; if false, searches
      backward. Controls the direction of seat search.
  returns: Returns the index of the next empty seat if found, otherwise returns -1
    indicating no available seat exists.
  examples:
  - title: Find Next Empty Seat Forward
    code: "int nextSeat = vehicle->GetNextEmptySeat(0, true);\nif (nextSeat != -1)\n\
      {\n    // Proceed with boarding at nextSeat\n    player->EnterVehicle(vehicle,\
      \ nextSeat);\n}\nelse\n{\n    // No seats available\n    player->SendSystemMessage(\"\
      No available seats on the vehicle.\");\n}"
    language: cpp
  - title: Find Next Empty Seat Backward
    code: "int prevSeat = vehicle->GetNextEmptySeat(5, false);\nif (prevSeat != -1)\n\
      {\n    // Board the passenger at the previous empty seat\n    player->EnterVehicle(vehicle,\
      \ prevSeat);\n}\nelse\n{\n    // No seats available in backward direction\n\
      \    player->SendSystemMessage(\"No seats available behind this point.\");\n\
      }"
    language: cpp
  notes: This method assumes that vehicle seat indices are contiguous and starts searching
    from the given seatId. It is typically used during passenger boarding or dismounting
    operations to determine where a player can be seated on a vehicle.
  warnings: Ensure that the provided seatId is within valid bounds for the vehicle,
    otherwise behavior may be undefined. The method does not perform any validation
    on seatId beyond checking if it's a valid index.
  related:
  - GetSeatForPassenger
  - IsVehicleSeatEmpty
  - EnterVehicle
  - ExitVehicle
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:34:22.466796'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
