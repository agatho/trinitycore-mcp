api:
  class: PositionManager
  method: IsInOptimalRange
  signature: bool PositionManager::IsInOptimalRange(int * target, float desiredRange)
documentation:
  brief: Checks if a target is within the optimal range for spell casting or melee
    attack.
  description: The IsInOptimalRange method determines whether a specified target entity
    is within the optimal distance range for performing actions such as melee attacks
    or casting spells. This method evaluates the current position of the caller against
    the target's position and compares it with the desired range parameter. It considers
    both the physical distance between entities and any relevant game mechanics like
    line-of-sight restrictions or movement penalties. The method is commonly used
    in AI behavior trees and combat logic to decide when an action can be executed.
  parameters:
  - name: target
    description: Pointer to the target entity (such as a player or creature) to check
      distance against. Must not be null.
  - name: desiredRange
    description: The maximum allowed distance in yards for the target to be considered
      within optimal range. Should be a positive value representing the desired range.
  returns: Returns true if the target is within the specified desired range; otherwise
    returns false.
  examples:
  - title: Basic usage in combat AI
    code: "if (positionManager.IsInOptimalRange(&target, 5.0f)) {\n    // Perform\
      \ melee attack\n    attacker->MeleeAttack();\n}"
    language: cpp
  - title: Using with spell casting logic
    code: "float optimalRange = spellInfo->GetRange();\nif (positionManager.IsInOptimalRange(&target,\
      \ optimalRange)) {\n    // Cast the spell\n    caster->CastSpell(target);\n\
      } else {\n    // Move closer to target\n    caster->MoveTowards(target);\n}"
    language: cpp
  notes: This method likely uses cached position data for performance reasons and
    may account for movement speed and target positioning. It's recommended to call
    this method before performing actions that require proximity to ensure valid targeting.
  warnings: Ensure the target pointer is valid and not null before calling this method,
    as passing a null pointer could lead to undefined behavior or crashes. Also, be
    aware that range calculations may differ based on character size and collision
    detection settings in TrinityCore.
  related:
  - GetPosition
  - GetDistance
  - IsInRange
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:12:14.981025'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
