api:
  class: BotThreatManager
  method: GetThreatRadius
  signature: float BotThreatManager::GetThreatRadius() const
documentation:
  brief: Returns the threat radius used by the bot for targeting and aggro calculations.
  description: The GetThreatRadius method retrieves the current threat radius value
    configured for the bot's threat management system. This radius determines how
    far away from the bot's target enemies it will consider applying threat effects
    or initiating combat behavior. The value is typically used in conjunction with
    other threat-related methods to control the bot's aggressive and defensive capabilities
    within the game world. This method does not modify any internal state and is purely
    informational.
  parameters: []
  returns: A float value representing the current threat radius in game units (typically
    yards). This value defines the maximum distance at which the bot will apply threat
    mechanics to nearby enemies.
  examples:
  - title: Basic Usage
    code: 'float radius = botThreatManager->GetThreatRadius();

      printf("Bot threat radius: %.2f units\n", radius);'
    language: cpp
  - title: Using Threat Radius for AI Decision Making
    code: "float radius = botThreatManager->GetThreatRadius();\nif (targetDistance\
      \ <= radius) {\n    // Bot can apply threat to target\n    bot->ApplyThreat(target);\n\
      } else {\n    // Target is out of threat range\n    bot->MoveToTarget(target);\n\
      }"
    language: cpp
  notes: This method returns a cached value and should be efficient to call. The actual
    threat radius may vary based on the bot's class, level, and equipped gear. In
    TrinityCore, this value is typically configured through bot behavior settings
    or AI parameters.
  warnings: null
  related:
  - SetThreatRadius
  - GetThreatLevel
  - IsInThreatRadius
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:41:40.754807'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
