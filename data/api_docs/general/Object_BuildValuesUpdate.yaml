api:
  class: Object
  method: BuildValuesUpdate
  signature: void Object::BuildValuesUpdate(ByteBuffer * data, int flags, const Player
    * target) const
documentation:
  brief: Builds and populates a ByteBuffer with object update data for a target player.
  description: This method constructs an update packet containing the object's data
    fields, including dynamic and static values, for transmission to a specific player.
    It is used in the context of World of Warcraft's object update system where objects
    (such as players, creatures, or game objects) send their data to clients. The
    method handles the construction of update data based on flags and target player,
    ensuring proper synchronization of object state information across network boundaries.
    This is essential for maintaining accurate client-side representation of object
    states.
  parameters:
  - name: data
    description: A pointer to a ByteBuffer where the update data will be written.
      This buffer is used to construct the update packet that will be sent to the
      target player.
  - name: flags
    description: An integer representing update flags that determine which data fields
      are included in the update packet. The flags control the type of update being
      constructed, such as dynamic or static values.
  - name: target
    description: A pointer to a Player object that specifies which player the update
      data is intended for. This parameter determines the specific client receiving
      the update packet and affects how the data is formatted.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Object* obj = new Object();

      ByteBuffer data;

      int flags = 1;

      Player* target = new Player();

      obj->BuildValuesUpdate(&data, flags, target);'
    language: cpp
  - title: Advanced usage example
    code: "Object* obj = new Object();\nByteBuffer data;\nint flags = 3;\nPlayer*\
      \ target = new Player();\nobj->BuildValuesUpdate(&data, flags, target);\n//\
      \ Process the data packet\nif (data.size() > 0) {\n    // Send to client\n}"
    language: cpp
  notes: This method is part of the object update system in TrinityCore and should
    be called during update operations. The method may perform multiple internal calls
    to populate data fields, and it's important that the target player is valid for
    proper update packet construction. Performance considerations include memory allocation
    and buffer size management.
  warnings: The method requires a valid target player pointer; invalid or null pointers
    can lead to crashes or incorrect update packet construction. Care should be taken
    when using flags as they determine which data fields are included in the update
    packet, potentially affecting client-side behavior.
  related:
  - Object::GetUpdateData
  - Object::BuildUpdateData
  - Player::BuildUpdateData
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T01:57:47.574548'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
