api:
  class: GameObjectScript
  method: GetAI
  signature: GameObjectAI * GameObjectScript::GetAI(GameObject * go) const
documentation:
  brief: Retrieves the AI instance associated with a game object.
  description: The GetAI method is used to obtain the GameObjectAI instance that controls
    the behavior of a specific game object. This method allows scripts to access and
    interact with the AI logic assigned to a GameObject, enabling dynamic behavior
    modification during runtime. The returned pointer can be used to call AI-specific
    methods or check the current state of the object's AI system. It is important
    to note that this method should only be called on GameObjects that have been properly
    initialized with an AI component; otherwise, it may return a null pointer or cause
    undefined behavior.
  parameters: []
  returns: A pointer to the GameObjectAI instance associated with the game object,
    or nullptr if no AI is assigned or if the operation fails.
  examples:
  - title: Basic usage of GetAI
    code: "class MyGameObjectScript : public GameObjectScript\n{\npublic:\n    void\
      \ OnGossipHello(Player* player, GameObject* go) override\n    {\n        GameObjectAI*\
      \ ai = go->GetAI();\n        if (ai)\n        {\n            // Use the AI instance\
      \ to perform actions\n            ai->DoAction(1);\n        }\n    }\n};"
    language: cpp
  - title: Checking AI state before interaction
    code: "class AdvancedGameObjectScript : public GameObjectScript\n{\npublic:\n\
      \    void OnQuestAccept(Player* player, GameObject* go) override\n    {\n  \
      \      GameObjectAI* ai = go->GetAI();\n        if (ai && ai->IsInCombat())\n\
      \        {\n            // Prevent interaction while in combat\n           \
      \ return;\n        }\n        \n        // Proceed with normal quest acceptance\
      \ logic\n        go->SetFlag(GO_FLAG_IN_USE);\n    }\n};"
    language: cpp
  notes: The GameObjectAI instance returned by this method is managed by the game
    engine and should not be deleted or modified directly. The AI system is typically
    initialized when the GameObject is created and may be destroyed when the object
    is removed from the world. This method does not perform any validation on whether
    the GameObject actually has an AI component assigned to it.
  warnings: Calling GetAI on a GameObject that has not been properly initialized with
    an AI component may result in a null pointer dereference if not checked. Always
    validate the returned pointer before using it. Additionally, modifying the AI
    state directly through this interface should be done carefully as it might interfere
    with the normal operation of the AI system.
  related:
  - GameObject::GetAI
  - GameObject::SetAI
  - GameObject::IsInCombat
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T13:35:11.384678'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
