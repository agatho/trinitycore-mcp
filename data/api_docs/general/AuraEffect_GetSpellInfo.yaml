api:
  class: AuraEffect
  method: GetSpellInfo
  signature: const SpellInfo * AuraEffect::GetSpellInfo() const
documentation:
  brief: Retrieves the SpellInfo structure associated with this aura effect, providing
    detailed spell data and properties.
  description: The GetSpellInfo method returns a pointer to the SpellInfo structure
    that defines the spell properties for the aura effect. This method is commonly
    used in aura handling code to access spell attributes such as duration, effects,
    cast time, and other spell-specific configurations. The returned SpellInfo pointer
    is valid for the lifetime of the aura effect and should not be modified. This
    method is essential for implementing custom aura behaviors, checking spell properties,
    or determining how an aura should interact with game mechanics like stacking,
    proc rates, or visual effects.
  parameters: []
  returns: A constant pointer to the SpellInfo structure that defines this aura effect's
    spell properties. Returns nullptr if the aura effect is not properly initialized
    or does not have associated spell data.
  examples:
  - title: Accessing Spell Duration from Aura Effect
    code: "AuraEffect* auraEff = unit->GetAuraEffect(SPELL_ID, EFFECT_INDEX);\nif\
      \ (auraEff)\n{\n    const SpellInfo* spellInfo = auraEff->GetSpellInfo();\n\
      \    if (spellInfo)\n    {\n        uint32 duration = spellInfo->Duration;\n\
      \        // Use duration for custom logic\n    }\n}"
    language: cpp
  - title: Checking Spell Effects in Custom Aura Handler
    code: "void CustomAuraHandler(AuraEffect* auraEff)\n{\n    const SpellInfo* spellInfo\
      \ = auraEff->GetSpellInfo();\n    if (spellInfo && spellInfo->Effects[EFFECT_INDEX].Effect\
      \ == SPELL_EFFECT_SCHOOL_DAMAGE)\n    {\n        // Handle specific spell effect\
      \ type\n        float damage = spellInfo->Effects[EFFECT_INDEX].BasePoints;\n\
      \        // Apply custom damage logic\n    }\n}"
    language: cpp
  notes: The returned SpellInfo pointer is managed by the core and should not be deleted
    or modified. This method is thread-safe when called on valid aura effect objects,
    but accessing spell data from different threads requires proper synchronization
    if modifications are involved.
  warnings: Do not assume that the returned SpellInfo pointer is always valid - always
    check for nullptr before using it. Accessing spell properties from within aura
    application or removal callbacks should be done carefully to avoid potential recursion
    issues.
  related:
  - GetAura
  - GetSpellId
  - GetEffectIndex
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:01:17.309854'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
