api:
  class: RuneManager
  method: ConsumeRunes
  signature: void RuneManager::ConsumeRunes(uint8 blood, uint8 frost, uint8 unholy)
documentation:
  brief: Consumes specified amounts of blood, frost, and unholy runes for a player's
    death knight abilities.
  description: The ConsumeRunes method is used to deduct a specified number of runes
    from a death knight's rune pool. This method is typically invoked when a death
    knight uses an ability that requires rune consumption, such as Obliterate or Howling
    Blast. The method modifies the internal rune state of the player's RuneManager
    instance by reducing the count of each rune type (blood, frost, unholy) accordingly.
    It ensures proper rune management and prevents invalid rune usage by checking
    if sufficient runes are available before consuming them. This method is integral
    to the death knight class mechanics in World of Warcraft, particularly for managing
    the cooldown and usage of powerful abilities.
  parameters:
  - name: blood
    description: The number of blood runes to consume (0-127). Valid values are non-negative
      integers representing the count of blood runes required for the ability being
      used.
  - name: frost
    description: The number of frost runes to consume (0-127). Valid values are non-negative
      integers representing the count of frost runes required for the ability being
      used.
  - name: unholy
    description: The number of unholy runes to consume (0-127). Valid values are non-negative
      integers representing the count of unholy runes required for the ability being
      used.
  returns: null
  examples:
  - title: Basic rune consumption for a death knight ability
    code: 'RuneManager* runeMgr = player->GetRuneManager();

      // Consume 1 blood rune and 1 frost rune for a basic attack

      runeMgr->ConsumeRunes(1, 1, 0);'
    language: cpp
  - title: Consuming multiple runes for a powerful death knight ability
    code: 'RuneManager* runeMgr = player->GetRuneManager();

      // Consume 2 blood runes and 1 unholy rune for a powerful ability

      runeMgr->ConsumeRunes(2, 0, 1);'
    language: cpp
  notes: This method assumes that the player has a valid RuneManager instance and
    that sufficient runes are available. The implementation likely includes checks
    to ensure that rune counts do not go below zero. It's designed to be thread-safe
    as part of the player's core state management system in TrinityCore.
  warnings: Improper use of this method without checking rune availability can lead
    to invalid rune states or game-breaking behavior. Always verify that the requested
    rune amounts are valid and available before calling this method.
  related:
  - GetRuneCount
  - RestoreRunes
  - CheckRuneAvailability
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T23:23:59.789959'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
