api:
  class: Player
  method: CheckLoadedLegacyRaidDifficultyID
  signature: int Player::CheckLoadedLegacyRaidDifficultyID(int difficulty)
documentation:
  brief: Checks and returns the loaded legacy raid difficulty ID for the player
  description: The CheckLoadedLegacyRaidDifficultyID method verifies and retrieves
    the current difficulty setting for legacy raid content that the player has loaded.
    This method is typically used in World of Warcraft's TrinityCore server implementation
    to determine what raid difficulty level a player is currently set to for older
    raid instances. The method ensures consistency between the player's stored difficulty
    settings and the actual loaded raid data, particularly important for maintaining
    proper gameplay balance and progression through legacy content. It may also validate
    that the requested difficulty ID is valid and supported by the current game version.
  parameters:
  - name: difficulty
    description: The difficulty ID to check against the player's loaded legacy raid
      settings. Valid values typically correspond to standard WoW raid difficulties
      such as 10-player normal (1), 25-player normal (2), 10-player heroic (3), and
      25-player heroic (4).
  returns: Returns an integer representing the valid difficulty ID if the player's
    loaded legacy raid settings are consistent with the provided difficulty parameter.
    Returns -1 if there is a mismatch or invalid difficulty setting, or if no legacy
    raid data is currently loaded for the player.
  examples:
  - title: Basic usage to check raid difficulty
    code: "int currentDifficulty = player->CheckLoadedLegacyRaidDifficultyID(2);\n\
      if (currentDifficulty != -1) {\n    // Valid difficulty found\n    printf(\"\
      Player is set to difficulty ID: %d\\n\", currentDifficulty);\n} else {\n   \
      \ // Invalid or mismatched difficulty\n    printf(\"Invalid or no legacy raid\
      \ difficulty loaded\\n\");\n}"
    language: cpp
  - title: Using the method to validate player's raid settings
    code: "void ValidatePlayerRaidSettings(Player* player) {\n    int requestedDifficulty\
      \ = 3; // Heroic 10-player\n    int actualDifficulty = player->CheckLoadedLegacyRaidDifficultyID(requestedDifficulty);\n\
      \    \n    if (actualDifficulty == requestedDifficulty) {\n        // Player's\
      \ settings match requested difficulty\n        player->SendNotification(\"Raid\
      \ difficulty confirmed: %d\", requestedDifficulty);\n    } else if (actualDifficulty\
      \ == -1) {\n        // No valid difficulty found or mismatch\n        player->SendNotification(\"\
      Invalid raid difficulty setting\");\n    }\n}"
    language: cpp
  notes: This method is primarily used in legacy raid content handling within TrinityCore.
    It may interact with internal player data structures that track raid difficulty
    preferences and loaded instance data. The method likely performs validation against
    the server's supported difficulty configurations, so it's important to ensure
    that the difficulty ID passed matches what the server currently supports for legacy
    raids.
  warnings: This method should only be called when dealing with legacy raid content
    as it may not apply to newer raid systems. Passing invalid difficulty IDs could
    result in -1 return values which might be misinterpreted as valid settings if
    not properly handled. Ensure proper error checking is implemented when using this
    method.
  related:
  - GetDifficultyID
  - SetDifficultyID
  - IsInRaidGroup
  - GetRaidDifficulty
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T19:52:01.497752'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
