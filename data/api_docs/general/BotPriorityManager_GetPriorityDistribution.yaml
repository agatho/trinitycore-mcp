api:
  class: BotPriorityManager
  method: GetPriorityDistribution
  signature: void BotPriorityManager::GetPriorityDistribution(uint32 & emergency,
    uint32 & high, uint32 & medium, uint32 & low, uint32 & suspended) const
documentation:
  brief: Retrieves the distribution of bot priorities across emergency, high, medium,
    low, and suspended categories.
  description: 'The GetPriorityDistribution method provides a breakdown of all active
    bots managed by the BotPriorityManager, organizing them into five distinct priority
    levels: emergency, high, medium, low, and suspended. This allows systems to understand
    how bots are prioritized within the game environment and make informed decisions
    about resource allocation or bot behavior adjustments. The method populates the
    provided reference parameters with counts of bots in each category, enabling efficient
    querying without requiring iteration over all managed bots. This functionality
    is particularly useful for administrators or AI systems that need to monitor or
    adjust bot priority distributions dynamically.'
  parameters:
  - name: emergency
    description: Reference to a uint32 variable that will be filled with the count
      of bots assigned to the emergency priority level.
  - name: high
    description: Reference to a uint32 variable that will be filled with the count
      of bots assigned to the high priority level.
  - name: medium
    description: Reference to a uint32 variable that will be filled with the count
      of bots assigned to the medium priority level.
  - name: low
    description: Reference to a uint32 variable that will be filled with the count
      of bots assigned to the low priority level.
  - name: suspended
    description: Reference to a uint32 variable that will be filled with the count
      of bots currently in the suspended priority state.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'uint32 emergencyCount = 0;

      uint32 highCount = 0;

      uint32 mediumCount = 0;

      uint32 lowCount = 0;

      uint32 suspendedCount = 0;

      botPriorityManager.GetPriorityDistribution(emergencyCount, highCount, mediumCount,
      lowCount, suspendedCount);

      // Now all variables contain the respective bot counts per priority level'
    language: cpp
  - title: Monitoring Bot Priority Distribution
    code: "void MonitorBotPriorities() {\n    uint32 emergency = 0;\n    uint32 high\
      \ = 0;\n    uint32 medium = 0;\n    uint32 low = 0;\n    uint32 suspended =\
      \ 0;\n    \n    botPriorityManager.GetPriorityDistribution(emergency, high,\
      \ medium, low, suspended);\n    \n    LOG_INFO(\"bot\", \"Emergency: {} | High:\
      \ {} | Medium: {} | Low: {} | Suspended: {}\", \n             emergency, high,\
      \ medium, low, suspended);\n}"
    language: cpp
  notes: This method is designed to be lightweight and efficient, avoiding expensive
    operations like sorting or filtering. It assumes that internal bot priority tracking
    has been properly maintained by the system. The method does not modify any internal
    state; it only reads and reports existing data.
  warnings: Ensure that all parameters are initialized before calling this method
    to avoid undefined behavior if the method fails to populate them correctly. Also,
    note that the counts returned may change between calls if bot priorities are dynamically
    adjusted during runtime.
  related:
  - SetPriority
  - GetBotPriority
  - UpdateBotPriorities
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:54:47.784156'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
