api:
  class: LineOfSightManager
  method: IsObstructionTemporary
  signature: bool LineOfSightManager::IsObstructionTemporary(const LoSResult & result)
documentation:
  brief: Determines whether a line-of-sight obstruction is temporary or permanent.
  description: The IsObstructionTemporary method evaluates a LoSResult to determine
    if the detected obstruction is temporary in nature, such as a moving object or
    an animated environment element. This is particularly useful for AI pathfinding
    and spell targeting logic where temporary obstructions may be ignored or avoided
    differently than permanent ones. The method checks internal state flags or timestamps
    associated with the obstruction to make this determination. It assumes that the
    LoSResult parameter has already been computed and contains valid obstruction data.
  parameters:
  - name: result
    description: A reference to a LoSResult structure containing the line-of-sight
      calculation result, including information about any detected obstructions.
  returns: Returns true if the obstruction is determined to be temporary (e.g., a
    moving NPC or animated door), and false if it's considered permanent (e.g., a
    wall or static object).
  examples:
  - title: Check if an obstruction is temporary before pathfinding
    code: "LineOfSightManager losManager;\nLoSResult result = losManager.CalculateLos(playerPos,\
      \ targetPos);\nif (losManager.IsObstructionTemporary(result)) {\n    // Handle\
      \ temporary obstruction - perhaps try alternative route\n    std::cout << \"\
      Temporary obstruction detected\" << std::endl;\n} else {\n    // Permanent obstruction\
      \ - pathfinding should avoid this area\n    std::cout << \"Permanent obstruction\
      \ detected\" << std::endl;\n}"
    language: cpp
  notes: This method relies on the internal state of the LoSResult and assumes that
    the result was generated using a valid line-of-sight calculation. Temporary obstructions
    may be marked with specific flags or time-based data that this function evaluates.
  warnings: Ensure that the LoSResult passed to this method is valid and has been
    properly computed before calling this function, as invalid results could lead
    to incorrect temporary obstruction determinations.
  related:
  - CalculateLos
  - GetObstructionType
  - IsObstructionPermanent
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:02:17.817791'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
