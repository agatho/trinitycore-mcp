api:
  class: Transport
  method: GetTransportOrientation
  signature: float Transport::GetTransportOrientation() const
documentation:
  brief: Returns the current orientation angle of the transport object in radians.
  description: The GetTransportOrientation method retrieves the angular orientation
    of a transport entity within the game world. This value represents the direction
    the transport is facing, measured in radians from the positive X-axis (typically
    east). The orientation is used for calculating positions relative to the transport
    and determining how passengers are positioned and oriented during movement. This
    method is commonly used in conjunction with other transport-related functions
    to manage passenger positioning and movement logic.
  parameters: []
  returns: "A float value representing the transport's orientation in radians. A value\
    \ of 0.0 represents east, \u03C0/2 represents north, \u03C0 represents west, and\
    \ 3\u03C0/2 represents south. The value will be normalized to the range [0, 2\u03C0\
    )."
  examples:
  - title: Basic Usage Example
    code: 'float orientation = transport->GetTransportOrientation();

      float degrees = orientation * (180.0f / M_PI);

      // Use orientation for calculations or debugging'
    language: cpp
  - title: Using Orientation to Calculate Passenger Position
    code: 'float transportOrient = transport->GetTransportOrientation();

      float passengerX = transportX + cos(transportOrient) * offsetDistance;

      float passengerY = transportY + sin(transportOrient) * offsetDistance;'
    language: cpp
  notes: "This method returns the orientation as a continuous value in radians, which\
    \ may exceed 2\u03C0 or be negative. For display purposes, you might need to normalize\
    \ the angle. The transport's orientation is updated during movement and can change\
    \ dynamically as the transport moves along its path."
  warnings: 'Be aware that this method returns raw radians values. If you need degrees
    for UI or debugging, convert using the standard formula: degrees = radians * (180.0f
    / M_PI). Also note that orientation values may not be immediately synchronized
    with visual rendering during rapid transport movement.'
  related:
  - GetTransportPosition
  - SetTransportOrientation
  - GetTransportRotation
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:39:32.069679'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
