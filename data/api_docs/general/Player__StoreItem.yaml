api:
  class: Player
  method: _StoreItem
  signature: Item * Player::_StoreItem(uint16 pos, Item * pItem, uint32 count, bool
    clone, bool update)
documentation:
  brief: Stores an item in the player's inventory at the specified position.
  description: The _StoreItem method is responsible for placing an Item object into
    the player's inventory at a given slot position. It handles the internal management
    of item storage, including updating the inventory container and managing item
    stacks. The method supports both cloning items and updating their state within
    the inventory system. This function is typically used internally by the game engine
    when items are added to a player's inventory through various means such as looting,
    purchasing, or quest rewards.
  parameters:
  - name: pos
    description: The inventory slot position where the item should be stored. This
      represents the specific container and slot index within the player's inventory.
  - name: pItem
    description: Pointer to the Item object that is to be stored in the inventory.
      This item will be moved or copied depending on the 'clone' parameter.
  - name: count
    description: The number of items to store. If this exceeds the stack size of the
      item, multiple stacks may be created.
  - name: clone
    description: If true, creates a copy of the item instead of moving it. If false,
      the original item is moved into inventory and may be removed from its previous
      location.
  - name: update
    description: If true, updates the item's state in the database and sends relevant
      update packets to the player client. If false, no database or network updates
      are performed.
  returns: Returns a pointer to the Item object that was stored. This may be the original
    item if not cloned, or a new item if cloning occurred.
  examples:
  - title: Basic Item Storage
    code: Item* newItem = player->_StoreItem(INVENTORY_SLOT_BAG_0, droppedItem, 1,
      false, true);
    language: cpp
  - title: Cloned Item Storage with Update
    code: Item* clonedItem = player->_StoreItem(INVENTORY_SLOT_ITEM_0, existingItem,
      5, true, false);
    language: cpp
  notes: This method is primarily used internally by TrinityCore's inventory management
    system. It performs checks for valid slot positions and item stacking limits.
    The 'update' parameter controls whether the client is notified of changes, which
    should be set to true when external modifications are made that require UI updates.
  warnings: Calling this method with invalid parameters such as an out-of-bounds position
    or null pItem pointer can cause undefined behavior or crashes. Always validate
    inputs before calling this function. The 'clone' parameter affects memory management,
    so ensure proper cleanup of cloned items if not properly managed.
  related:
  - Player::AddItem
  - Player::StoreNewItem
  - Player::DestroyItem
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:44:59.012339'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
