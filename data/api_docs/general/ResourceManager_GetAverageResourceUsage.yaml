api:
  class: ResourceManager
  method: GetAverageResourceUsage
  signature: float ResourceManager::GetAverageResourceUsage(ResourceType type)
documentation:
  brief: Calculates and returns the average resource usage for a specified resource
    type across all managed resources.
  description: The GetAverageResourceUsage method computes the average utilization
    percentage of a given resource type across all tracked resources within the ResourceManager.
    This method is typically used for monitoring system performance, identifying resource
    bottlenecks, or making decisions about resource allocation in World of Warcraft's
    server environment. The calculation takes into account all active and available
    resources of the specified type, providing an aggregate view of how heavily the
    system is utilizing that particular resource. The returned value represents a
    floating-point number between 0.0 and 1.0, where 0.0 indicates no usage and 1.0
    indicates maximum usage.
  parameters: []
  returns: A float value representing the average resource usage percentage for the
    specified resource type. Values range from 0.0 (no usage) to 1.0 (maximum usage).
    Returns 0.0 if no resources of the specified type are found or if there's an error
    in calculation.
  examples:
  - title: Basic Usage Example
    code: 'float cpuUsage = resourceManager.GetAverageResourceUsage(ResourceType::CPU);

      float memoryUsage = resourceManager.GetAverageResourceUsage(ResourceType::Memory);'
    language: cpp
  - title: Performance Monitoring Example
    code: "float avgUsage = resourceManager.GetAverageResourceUsage(ResourceType::Memory);\n\
      if (avgUsage > 0.8f) {\n    // Trigger performance warning or optimization\n\
      \    LOG_WARN(\"High memory usage detected: %.2f%%\", avgUsage * 100);\n}"
    language: cpp
  notes: This method performs calculations across all managed resources and may have
    performance implications if called frequently. The ResourceManager maintains internal
    tracking data that must be updated regularly for accurate results. The method
    is thread-safe and can be called from any thread context.
  warnings: The returned value represents an average over time and may not reflect
    instantaneous resource usage. If no resources of the specified type exist, the
    method returns 0.0 without throwing an exception. Ensure that resource types are
    properly initialized before calling this method to avoid unexpected results.
  related:
  - GetResourceUsage
  - GetTotalResources
  - UpdateResourceTracking
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:20:39.745096'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
