api:
  class: Player
  method: HandleDrowning
  signature: void Player::HandleDrowning(uint32 time_diff)
documentation:
  brief: Handles player drowning mechanics including breath management and damage
    application.
  description: The HandleDrowning method manages the drowning behavior of a player
    character in World of Warcraft. It processes the time difference since last update
    to determine if the player should take drowning damage, lose breath, or surface
    from water. This method is typically called during player update cycles when the
    character is submerged in water. The method checks the player's current breath
    level and applies appropriate damage if breath runs out, potentially leading to
    death if not rescued quickly. It also handles the visual and auditory effects
    of drowning.
  parameters: []
  returns: null
  examples:
  - title: Basic usage in update loop
    code: "void Player::Update(uint32 diff)\n{\n    // ... other update logic ...\n\
      \    HandleDrowning(diff);\n    // ... rest of update logic ...\n}"
    language: cpp
  - title: Integration with custom drowning system
    code: "void Player::HandleDrowning(uint32 time_diff)\n{\n    if (!IsInWater())\n\
      \        return;\n    \n    m_drowningTime += time_diff;\n    \n    if (m_drowningTime\
      \ >= 1000) // 1 second\n    {\n        ModifyBreath(-10);\n        m_drowningTime\
      \ = 0;\n        \n        if (GetBreath() <= 0)\n        {\n            DealDamage(this,\
      \ this, 100, DAMAGE_NORMAL); // Drown damage\n        }\n    }\n}"
    language: cpp
  notes: This method is automatically called by the core during player updates when
    the player is in water. Developers should not call it directly unless implementing
    custom drowning mechanics. The method relies on internal player state variables
    like breath level and time tracking. Performance is generally minimal as it only
    processes when player is in water.
  warnings: Direct calls to this method outside of normal update cycles may cause
    unexpected behavior or inconsistent drowning states. The method assumes the player
    is already in a water environment, so calling it on land players may produce undefined
    results. Improper handling of breath mechanics can lead to exploits or unbalanced
    gameplay.
  related:
  - IsInWater
  - ModifyBreath
  - GetBreath
  - DealDamage
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T10:12:59.269448'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
