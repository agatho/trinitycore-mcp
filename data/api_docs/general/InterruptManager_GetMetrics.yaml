api:
  class: InterruptManager
  method: GetMetrics
  signature: const InterruptMetrics & InterruptManager::GetMetrics() const
documentation:
  brief: Retrieves the interrupt metrics for the InterruptManager instance.
  description: The GetMetrics method returns a constant reference to the InterruptMetrics
    structure that contains statistical and performance data related to interrupt
    handling within the TrinityCore framework. This method provides insights into
    how interrupts are being processed, including counts of successful and failed
    interruptions, timing information, and other relevant metrics. The returned metrics
    object is immutable, ensuring that external code cannot modify internal state
    through this interface. This functionality is primarily used for monitoring, debugging,
    and performance analysis purposes within the game's core systems.
  parameters: []
  returns: A constant reference to an InterruptMetrics object containing interrupt-related
    statistics and performance data such as interruption counts, timing measurements,
    and processing status indicators.
  examples:
  - title: Basic Usage Example
    code: 'const InterruptMetrics& metrics = interruptManager.GetMetrics();

      uint32 totalInterrupts = metrics.total_interrupts;

      uint32 successfulInterrupts = metrics.successful_interrupts;'
    language: cpp
  - title: Performance Monitoring Example
    code: "const InterruptMetrics& metrics = interruptManager.GetMetrics();\nif (metrics.failed_interrupts\
      \ > 0) {\n    // Log warning about failed interruptions\n    sLog->outError(\"\
      Interrupt system has %u failed interruptions\", metrics.failed_interrupts);\n\
      }"
    language: cpp
  notes: The returned InterruptMetrics reference is valid only as long as the InterruptManager
    instance exists. The method itself is thread-safe and does not modify any internal
    state. It provides a snapshot of metrics at the time of invocation, which may
    change with subsequent interrupt operations.
  warnings: Do not attempt to modify the returned InterruptMetrics object through
    the returned reference, as it is const. Accessing metrics from multiple threads
    simultaneously is safe, but relying on metric values for critical game logic decisions
    should be done carefully due to potential race conditions in data collection.
  related:
  - SetMetrics
  - ResetMetrics
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:33:48.232943'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
