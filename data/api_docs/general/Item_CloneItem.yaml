api:
  class: Item
  method: CloneItem
  signature: Item * Item::CloneItem(uint32 count, const Player * player) const
documentation:
  brief: Creates and returns a new cloned instance of this item with the specified
    count, optionally associated with a player.
  description: The CloneItem method creates a duplicate of the current Item object
    with a specified quantity. This is commonly used when an item needs to be split
    or copied in the game world, such as when trading, looting, or transferring items
    between containers. The cloned item will have the same properties and attributes
    as the original but can exist independently with its own count. If a player is
    provided, the clone may be associated with that player's inventory or context.
    This method does not modify the original item; it returns a new Item pointer to
    the cloned object. The returned item must be managed carefully by the caller to
    prevent memory leaks.
  parameters:
  - name: count
    description: The number of items to clone. Must be a positive integer representing
      how many copies of the item should exist in the new instance.
  - name: player
    description: Optional pointer to a Player object that the cloned item may be associated
      with. Can be NULL if no player association is required.
  returns: A pointer to the newly created Item clone. Returns NULL if cloning fails
    due to invalid parameters or allocation issues.
  examples:
  - title: Basic item cloning
    code: Item* clonedItem = originalItem->CloneItem(5, nullptr);
    language: cpp
  - title: Cloning an item for a specific player
    code: "Player* player = ...; // Assume valid player\nItem* clonedItem = originalItem->CloneItem(1,\
      \ player);\nif (clonedItem)\n{\n    // Use the cloned item\n}"
    language: cpp
  notes: The method internally handles memory allocation for the new Item object.
    It is important to note that the returned Item pointer should be managed properly
    by the caller, especially in scenarios involving frequent cloning or when dealing
    with temporary items. The cloned item will not automatically appear in any container
    unless explicitly added.
  warnings: Do not assume that the cloned item will be automatically inserted into
    a player's inventory or container. Always manually handle insertion if needed.
    Also, be cautious about memory management; failing to properly delete cloned items
    may lead to memory leaks.
  related:
  - Item::GetCount
  - Item::SetCount
  - Item::Create
  - Item::AddToWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T11:27:27.282333'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
