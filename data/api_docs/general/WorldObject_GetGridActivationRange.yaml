api:
  class: WorldObject
  method: GetGridActivationRange
  signature: float WorldObject::GetGridActivationRange() const
documentation:
  brief: Returns the grid activation range of the WorldObject, determining how far
    it influences nearby grid cells.
  description: The GetGridActivationRange method retrieves the float value representing
    the radius within which a WorldObject activates and interacts with surrounding
    grid cells in the TrinityCore world system. This range is crucial for determining
    when objects become visible to players, trigger events, or participate in various
    game mechanics such as AI behavior, loot distribution, and quest tracking. The
    activation range is typically defined by the object's type (player, creature,
    GameObject, etc.) and may be influenced by factors like object size, movement
    state, or special flags. This method does not take any parameters and returns
    a constant float value that represents the radius in yards.
  parameters: []
  returns: A float value representing the grid activation range of the WorldObject
    in yards. This value determines how far the object's presence affects nearby grid
    cells and player visibility.
  examples:
  - title: Retrieve Grid Activation Range for a Creature
    code: 'Creature* creature = ...; // Assume creature is initialized

      float activationRange = creature->GetGridActivationRange();

      TC_LOG_DEBUG("grid", "Creature activation range: %f yards", activationRange);'
    language: cpp
  - title: Compare Activation Ranges for Different Object Types
    code: 'Player* player = ...;

      Creature* creature = ...;

      GameObject* go = ...;


      float playerRange = player->GetGridActivationRange();

      float creatureRange = creature->GetGridActivationRange();

      float goRange = go->GetGridActivationRange();


      TC_LOG_DEBUG("grid", "Player range: %f, Creature range: %f, GO range: %f", playerRange,
      creatureRange, goRange);'
    language: cpp
  notes: The grid activation range is a core component of TrinityCore's spatial partitioning
    system. It determines how many grid cells an object affects and influences performance
    by limiting the number of objects that need to be processed for each player's
    view. This value is typically set during object creation or based on the object's
    template definition.
  warnings: Modifying the return value directly through this method is not recommended
    as it's a read-only accessor. The activation range should be defined by the object
    type and configuration, not changed dynamically at runtime without careful consideration
    of grid system behavior.
  related:
  - GetGridActivationRange
  - IsInGrid
  - HasInGrid
  - GetMap
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:08:33.377753'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
