api:
  class: Player
  method: GetPrimarySpecialization
  signature: ChrSpecialization Player::GetPrimarySpecialization() const
documentation:
  brief: Returns the primary specialization of the player, which determines their
    class-specific abilities and talents points.
  description: The GetPrimarySpecialization method retrieves the player's primary
    specialization, which is used to determine their class-specific abilities, talents,
    and gameplay mechanics. This method returns a ChrSpecialization structure that
    represents the player's current specialization in the game. The returned value
    corresponds to the player's active specialization at the time of calling, and
    it affects various aspects such as spell casting, ability usage, and talent point
    allocation. This method is essential for determining the player's gameplay style
    and class-specific mechanics within the TrinityCore framework.
  parameters: []
  returns: Returns a ChrSpecialization structure representing the player's primary
    specialization. The value corresponds to the active specialization of the player,
    with possible values including 0 (no specialization), or specific specialization
    IDs for each class. This value determines which abilities and talents are available
    to the player.
  examples:
  - title: Basic usage example
    code: "ChrSpecialization spec = player->GetPrimarySpecialization();\nif (spec\
      \ != 0)\n{\n    // Player has a valid specialization\n    // Use spec to determine\
      \ class-specific abilities\n}"
    language: cpp
  notes: This method is typically used in conjunction with other specialization-related
    methods. The returned specialization value may be updated when the player changes
    their specialization or when they level up. Performance considerations are minimal
    as this is a simple getter method, but it should be used carefully in performance-critical
    code sections.
  warnings: Care should be taken when using this method as it directly affects gameplay
    mechanics and ability usage. The returned value may not always reflect the player's
    current specialization if they have not yet updated their specialization after
    level-up or class change. Avoid using this method in contexts where the player's
    specialization might be changing.
  related:
  - GetSecondarySpecialization
  - SetPrimarySpecialization
  - GetSpecializationPoints
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:42:00.581093'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
