api:
  class: Pet
  method: LoadPetFromDB
  signature: bool Pet::LoadPetFromDB(Player * owner, uint32 petEntry, uint32 petnumber,
    bool current, int forcedSlot)
documentation:
  brief: Loads a pet from the database for the specified player, initializing its
    properties and state.
  description: The LoadPetFromDB method retrieves pet data from the database for a
    given player and pet entry, populating the pet's attributes such as health, mana,
    experience, and behavior. It handles loading of existing pets or creation of new
    ones based on the provided parameters. This method is typically invoked during
    player login or when summoning a pet to ensure it's properly initialized with
    saved data from the database. The method supports loading current pets (active
    in the world) or historical pets (saved in the database but not currently active).
  parameters:
  - name: owner
    description: Pointer to the Player object that owns this pet. Must be a valid
      player instance.
  - name: petEntry
    description: The creature entry ID of the pet type (e.g., 416 for Imp). Determines
      what kind of pet is loaded.
  - name: petnumber
    description: Unique identifier number for this specific pet instance. Used to
      distinguish between multiple pets of the same type.
  - name: current
    description: Boolean flag indicating whether to load the current pet (true) or
      a historical pet (false).
  - name: forcedSlot
    description: Integer representing the forced slot index where the pet should be
      placed. -1 means no forced slot.
  returns: Returns true if the pet was successfully loaded from the database; false
    otherwise, which may occur due to invalid parameters, missing data, or database
    errors.
  examples:
  - title: Load a current pet for a player
    code: "Player* player = ...;\nPet* pet = new Pet();\nbool success = pet->LoadPetFromDB(player,\
      \ 416, 12345, true, -1);\nif (success)\n{\n    // Pet loaded successfully\n}"
    language: cpp
  - title: Load a historical pet with forced slot
    code: "Player* player = ...;\nPet* pet = new Pet();\nbool success = pet->LoadPetFromDB(player,\
      \ 417, 12346, false, 0);\nif (success)\n{\n    // Pet loaded with forced slot\
      \ 0\n}"
    language: cpp
  notes: This method assumes that the database connection is already established and
    valid. It performs internal checks for pet existence and validity before attempting
    to load data. The method may trigger additional initialization routines like setting
    up pet AI, updating stats, or linking to the owner's pet list.
  warnings: Do not call this method with a null owner pointer as it will likely cause
    crashes or undefined behavior. Ensure that the pet entry ID corresponds to a valid
    creature template in the database. Avoid calling this method from within critical
    sections of code due to potential database access delays.
  related:
  - SavePetToDB
  - CreatePet
  - RemovePet
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:19:20.119696'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
