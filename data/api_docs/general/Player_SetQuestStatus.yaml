api:
  class: Player
  method: SetQuestStatus
  signature: void Player::SetQuestStatus(uint32 questId, int status, bool update)
documentation:
  brief: Sets the quest status for a specified quest ID for the player.
  description: The SetQuestStatus method allows developers to update the quest status
    of a specific quest for a player. This method is commonly used in quest scripts
    and quest-related code to modify the state of a quest, such as setting it to complete
    or resetting it to incomplete. It directly affects how the game handles quest
    progression and can influence the player's ability to receive quest rewards or
    continue quest progression. The method operates on the player's quest log, updating
    the status without necessarily triggering immediate updates to the UI or database.
  parameters:
  - name: questId
    description: The unique identifier of the quest for which the status is being
      set. This must be a valid quest ID that exists in the game database.
  - name: status
    description: The new status value to assign to the quest. Valid values include
      0 (incomplete), 1 (complete), and other values depending on how the game handles
      quest status internally.
  - name: update
    description: Controls whether the quest status should be updated in the database.
      If true, changes are saved to the database; if false, changes only affect the
      player's internal state without saving.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = ...;

      player->SetQuestStatus(12345, 1, true);

      // Sets quest ID 12345 to complete status and saves it to database'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = ...;

      player->SetQuestStatus(12345, 0, false);

      // Resets quest ID 12345 to incomplete status without saving to database'
    language: cpp
  notes: This method is part of the player's quest log management system and should
    be used carefully in scripts. It does not directly trigger UI updates, so developers
    may need to manually update the player's quest log UI if necessary. The method
    is thread-safe when used correctly but may cause issues if called from multiple
    threads simultaneously.
  warnings: The method requires that the quest ID exists in the database; otherwise,
    it may lead to undefined behavior or errors. Using incorrect status values can
    result in quests not being properly handled by the game engine. Be cautious when
    using update=false as this can lead to inconsistent state between client and server.
  related:
  - GetQuestStatus
  - AddQuest
  - RemoveQuest
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T14:49:23.414994'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
