api:
  class: Player
  method: SetDrunkValue
  signature: void Player::SetDrunkValue(uint8 newDrunkValue, uint32 itemId)
documentation:
  brief: Sets the drunk value of the player to a specified amount with optional item
    reference.
  description: This method allows a player to have their drunk value set to a specific
    level, either directly or through an item reference. The method modifies the player's
    drunken state in the game world, affecting their behavior and abilities. It is
    commonly used for debugging, testing, or implementing game mechanics related to
    intoxication. The method can be called with or without an itemId parameter, where
    the latter allows setting the drunk value based on a specific item's effect.
  parameters:
  - name: newDrunkValue
    description: The new drunk level value to set for the player. Valid range is typically
      0-100, where 0 means sober and higher values represent increasing drunkenness.
  - name: itemId
    description: Optional item ID that determines how the drunk value is applied.
      If provided, this parameter influences the method's behavior by referencing
      an item's effect on the player's drunk state.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->SetDrunkValue(50);

      // Sets player''s drunk value to 50 without item reference'
    language: cpp
  - title: Advanced usage example with item
    code: 'Player* player = new Player();

      player->SetDrunkValue(75, 12345);

      // Sets player''s drunk value to 75 using item ID 12345'
    language: cpp
  notes: Implementation details include handling of the player's drunken state internally
    and potential effects on gameplay mechanics such as reduced accuracy or increased
    movement speed. Performance considerations are minimal, but this method may affect
    player behavior during gameplay. Thread safety is not a concern for this method
    since it operates within a single player context.
  warnings: Caution should be taken when using this method in live game environments,
    as setting high drunk values can lead to unintended gameplay consequences such
    as loss of control over character actions or reduced combat effectiveness. Avoid
    setting values beyond the normal range unless specifically required for testing
    purposes.
  related:
  - GetDrunkValue
  - SetDrunkValue
  - Player::SetDrunkValue
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T15:11:46.619592'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
