api:
  class: ConditionMgr
  method: HasConditionsForNotGroupedEntry
  signature: bool ConditionMgr::HasConditionsForNotGroupedEntry(ConditionSourceType
    sourceType, uint32 entry) const
documentation:
  brief: Checks whether conditions exist for a non-grouped entry of the specified
    source type.
  description: The HasConditionsForNotGroupedEntry method determines if there are
    any condition entries stored in the ConditionMgr that match the provided ConditionSourceType
    and entry ID, specifically for non-grouped entries. This is used internally by
    TrinityCore to validate whether certain game objects, quests, or other entities
    have associated conditional requirements before allowing operations on them. The
    method does not consider grouped conditions (those that are part of a group with
    a GroupId), focusing only on standalone condition entries.
  parameters:
  - name: sourceType
    description: The type of source for which to check conditions, such as CONDITION_SOURCE_TYPE_QUEST_START,
      CONDITION_SOURCE_TYPE_GOSSIP, etc. This defines the category of object or event
      that the condition applies to.
  - name: entry
    description: The unique identifier (ID) of the specific entry within the source
      type. For example, this could be a quest ID, item ID, or GameObject entry ID
      depending on the sourceType.
  returns: Returns true if at least one condition exists for the given sourceType
    and entry that is not part of a grouped condition; otherwise returns false.
  examples:
  - title: Check for Conditions on a Quest
    code: "if (sConditionMgr->HasConditionsForNotGroupedEntry(CONDITION_SOURCE_TYPE_QUEST_START,\
      \ 12345)) {\n    // There are conditions associated with quest start 12345 that\
      \ are not grouped\n}"
    language: cpp
  - title: Verify Gossip Conditions Exist
    code: "if (sConditionMgr->HasConditionsForNotGroupedEntry(CONDITION_SOURCE_TYPE_GOSSIP,\
      \ 67890)) {\n    // Gossip menu with ID 67890 has non-grouped conditions\n}"
    language: cpp
  notes: This method is typically used during server initialization or runtime checks
    to ensure that conditional logic is properly applied. It's important to note that
    this function only evaluates non-grouped conditions, meaning it ignores conditions
    that are part of a larger group structure defined by GroupId.
  warnings: null
  related:
  - GetConditions
  - AddCondition
  - RemoveCondition
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T16:01:07.563081'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
