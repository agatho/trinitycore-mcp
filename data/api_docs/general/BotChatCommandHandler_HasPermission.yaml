api:
  class: BotChatCommandHandler
  method: HasPermission
  signature: bool BotChatCommandHandler::HasPermission(const CommandContext & context,
    CommandPermission permission)
documentation:
  brief: Checks if a player has the required permission level to execute a bot chat
    command.
  description: The HasPermission method evaluates whether the player associated with
    the given CommandContext possesses the necessary permissions to execute a specific
    bot chat command. It verifies the player's access level against the required permission
    level defined for the command. This method is crucial for enforcing security and
    access control within the TrinityCore bot system, ensuring that only authorized
    players can perform certain administrative or functional commands related to bot
    management.
  parameters:
  - name: context
    description: The CommandContext object containing information about the player
      issuing the command and the command being executed.
  - name: permission
    description: The CommandPermission enum value representing the minimum permission
      level required to execute the command.
  returns: Returns true if the player has sufficient permissions to execute the command,
    false otherwise.
  examples:
  - title: Basic Permission Check
    code: "if (handler.HasPermission(context, COMMAND_PERMISSION_ADMIN)) {\n    //\
      \ Execute admin command\n    handler.ExecuteAdminCommand(context);\n} else {\n\
      \    // Deny access\n    context.SendSysMessage(\"You do not have permission\
      \ to execute this command.\");\n}"
    language: cpp
  - title: Permission Check in Command Handler
    code: "bool BotChatCommandHandler::HandleBotCommand(ChatHandler& handler, const\
      \ std::string& args) {\n    CommandContext context(handler);\n    if (!HasPermission(context,\
      \ COMMAND_PERMISSION_USER)) {\n        handler.SendSysMessage(\"Access denied.\"\
      );\n        return false;\n    }\n    // Proceed with command logic\n    return\
      \ true;\n}"
    language: cpp
  notes: This method relies on the player's account level and any additional role-based
    permissions defined in the TrinityCore configuration. The permission levels are
    typically defined in the database or configuration files and may vary depending
    on server settings.
  warnings: Ensure that all permission checks are performed before executing potentially
    dangerous operations. Incorrect permission handling can lead to unauthorized access
    to bot management features.
  related:
  - GetPlayerLevel
  - CheckPermission
  - IsPlayerGM
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:24:06.185652'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
