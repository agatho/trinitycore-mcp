api:
  class: EquipmentManager
  method: GetPlayerMetrics
  signature: const EquipmentMetrics & EquipmentManager::GetPlayerMetrics(uint32 playerGuid)
documentation:
  brief: Retrieves equipment metrics for a specified player by their GUID
  description: The GetPlayerMetrics method fetches the current equipment statistics
    and metrics for a player identified by their unique Game Object ID (GUID). This
    includes data such as equipped item levels, weapon damage, armor values, and other
    relevant combat-related metrics that affect player performance. The returned EquipmentMetrics
    object is a const reference, ensuring immutability of the data while allowing
    efficient access without copying. This method is typically used in combat calculations,
    player stat displays, and equipment management systems within the TrinityCore
    framework.
  parameters: []
  returns: A constant reference to an EquipmentMetrics object containing all relevant
    equipment statistics for the specified player. The metrics include item level
    totals, weapon damage ranges, armor values, and other combat-relevant attributes
    that define the player's current equipped state.
  examples:
  - title: Basic Usage Example
    code: 'uint32 playerId = 12345;

      const EquipmentMetrics& metrics = equipmentManager.GetPlayerMetrics(playerId);

      uint32 totalItemLevel = metrics.totalItemLevel;

      printf("Player''s total item level: %u\n", totalItemLevel);'
    language: cpp
  - title: Combat Stat Access Example
    code: 'uint32 playerId = player->GetGUID().GetCounter();

      const EquipmentMetrics& metrics = equipmentManager.GetPlayerMetrics(playerId);

      float weaponDPS = metrics.mainHandWeaponDPS;

      uint32 totalArmor = metrics.totalArmor;

      // Use these values for combat calculations or UI display'
    language: cpp
  notes: This method assumes the player is valid and has equipment data available.
    The returned reference remains valid only as long as the EquipmentManager's internal
    data structure maintains the player's metrics. Performance-wise, this operation
    should be relatively fast since it returns a cached reference rather than performing
    expensive calculations or database lookups.
  warnings: Ensure that the provided player GUID corresponds to an active player in
    the world; accessing metrics for non-existent or inactive players may result in
    undefined behavior. Since the returned reference is const, modifications to the
    underlying data should be made through dedicated setter methods of EquipmentManager
    rather than direct manipulation.
  related:
  - SetPlayerMetrics
  - UpdatePlayerMetrics
  - GetPlayerEquipment
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:00:04.178025'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
