api:
  class: Unit
  method: isAttackingPlayer
  signature: bool Unit::isAttackingPlayer() const
documentation:
  brief: Determines whether the unit is currently attacking a player.
  description: This method checks if the Unit object is actively engaged in combat
    with a player character. It returns true when the unit has a valid target and
    that target is a player, false otherwise. The method is commonly used in AI scripts
    to determine player engagement status or to trigger specific behaviors based on
    whether the unit is attacking a player or not.
  parameters: []
  returns: Returns true if the unit is attacking a player, false otherwise. The return
    value indicates whether the unit has an active player target in combat.
  examples:
  - title: Basic usage example
    code: "if (unit->isAttackingPlayer()) {\n    // Unit is attacking a player\n \
      \   // Perform actions specific to player engagement\n}"
    language: cpp
  notes: This method relies on the unit's current target and combat state. The implementation
    may depend on how the unit's combat state is maintained internally in TrinityCore.
    Performance considerations are minimal as this is a simple boolean check.
  warnings: null
  related:
  - Unit::isInCombat
  - Unit::GetVictim
  - Unit::GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:55:29.495418'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
