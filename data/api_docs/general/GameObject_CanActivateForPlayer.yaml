api:
  class: GameObject
  method: CanActivateForPlayer
  signature: bool GameObject::CanActivateForPlayer(const int * target) const
documentation:
  brief: Determines whether a game object can be activated by a specific player.
  description: This method checks if a given game object can be activated by a particular
    player, based on various conditions such as distance, visibility, and player state.
    It is commonly used in quest and interaction logic to verify that an object is
    accessible to the player before allowing activation. The method evaluates whether
    the player meets all requirements for interacting with the object, including proximity
    and valid target selection.
  parameters:
  - name: target
    description: Pointer to the integer representing the player's ID or GUID. This
      parameter specifies which player is being checked for activation capability.
  returns: Returns true if the game object can be activated by the specified player,
    false otherwise. The method may return false due to distance constraints, visibility
    issues, or player state restrictions.
  examples:
  - title: Basic usage example
    code: "if (gameObject->CanActivateForPlayer(&playerId)) {\n    // Perform activation\
      \ logic\n}"
    language: cpp
  notes: Implementation details include checking player distance, visibility conditions,
    and object state. Performance considerations involve avoiding unnecessary checks
    when the player is far away or not in range. Thread safety is ensured through
    proper locking mechanisms during object activation.
  warnings: Common mistakes include using incorrect player ID values or ignoring distance
    requirements. Dangerous edge cases occur when objects are activated without proper
    validation of player state or visibility.
  related:
  - CanActivate
  - IsInUse
  - GetDistance
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T18:32:05.753102'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
