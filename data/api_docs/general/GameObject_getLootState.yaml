api:
  class: GameObject
  method: getLootState
  signature: LootState GameObject::getLootState() const
documentation:
  brief: Returns the current loot state of the game object, indicating whether it
    has been looted or not.
  description: The getLootState method retrieves the current loot state of a GameObject
    instance. This method is used to determine if a game object has been interacted
    with by players and has had its loot generated. The loot state is typically used
    in conjunction with other loot-related methods to manage the game object's loot
    behavior, such as determining whether a player can loot the object or if it needs
    to be reset after a certain time period. This method plays an important role in
    maintaining game balance and preventing exploits related to object looting.
  parameters: []
  returns: Returns a LootState enum value that indicates the current state of the
    GameObject's loot. Possible values include LOOT_NONE, LOOT_UNLOOTED, LOOT_LOOTED,
    and LOOT_SKINNED, representing different states of the object's interaction with
    players.
  examples:
  - title: Basic usage example
    code: "GameObject* go = player->GetGameObject();\nLootState state = go->getLootState();\n\
      if (state == LOOT_LOOTED)\n{\n    // Object has been looted\n}"
    language: cpp
  notes: This method is typically used in conjunction with other loot-related methods
    to manage game object behavior. It's important to note that the loot state can
    be modified by various game mechanics including player interaction, loot reset
    timers, and server-side modifications.
  warnings: Care should be taken when using this method as it may affect game balance
    if not properly handled. Improper use of loot states can lead to exploits or unbalanced
    gameplay.
  related:
  - getLootState
  - SetLootState
  - GetLoot
  - GetLootTemplate
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T02:17:58.057957'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
