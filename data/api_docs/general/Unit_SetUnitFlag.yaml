api:
  class: Unit
  method: SetUnitFlag
  signature: void Unit::SetUnitFlag(UnitFlags flags)
documentation:
  brief: Sets the unit flag for a Unit object, enabling specific game mechanics behaviors.
  description: The SetUnitFlag method allows developers to assign a specific unit
    flag to a Unit object, which controls various gameplay behaviors such as movement
    restrictions, visibility, or interaction states. This method is commonly used
    in TrinityCore to manage unit properties that affect how the unit interacts with
    the world. The flag value determines the specific behavior of the unit within
    the game environment, and can be used to enable or disable certain features based
    on the flags applied.
  parameters: []
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* unit = new Unit();

      unit->SetUnitFlag(UnitFlags::UNIT_FLAG_UNINTERACTABLE);

      '
    language: cpp
  - title: Advanced Usage Example
    code: 'Unit* unit = new Unit();

      unit->SetUnitFlag(UnitFlags::UNIT_FLAG_IN_COMBAT);

      unit->SetUnitFlag(UnitFlags::UNIT_FLAG_NOT_ATTACKABLE);

      '
    language: cpp
  notes: The method is typically used in conjunction with other methods like GetUnitFlags
    or SetUnitFlag to manage unit state. Performance considerations include avoiding
    frequent flag changes, as they may trigger updates to the unit's visual representation
    or behavior.
  warnings: Improper use of this method can lead to unexpected behavior in unit interaction,
    such as preventing players from attacking or being unable to interact with NPCs.
    Care must be taken when applying flags that affect combat state or visibility.
  related:
  - GetUnitFlag
  - SetUnitFlag
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T00:44:40.975447'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
