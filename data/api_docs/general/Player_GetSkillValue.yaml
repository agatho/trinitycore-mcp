api:
  class: Player
  method: GetSkillValue
  signature: uint16 Player::GetSkillValue(uint32 skill) const
documentation:
  brief: Retrieves the current skill value for a specified skill ID.
  description: The GetSkillValue method returns the current value of a specific skill
    for the player. This value represents the player's proficiency level in that skill,
    typically ranging from 0 to the maximum skill cap (usually 1000 for most skills).
    The method takes a skill ID as input and returns the corresponding skill value.
    If the skill is not found or the player does not have the skill trained, it will
    return 0. This method is commonly used in gameplay logic to determine player capabilities
    based on their skill levels.
  parameters:
  - name: skill
    description: The unique identifier for the skill to retrieve the value for. This
      should be a valid skill ID defined in the game's skill system, such as SkillType::SKILL_MINING
      or SkillType::SKILL_HERBALISM.
  returns: Returns a uint16 representing the current skill value for the specified
    skill. A return value of 0 indicates either that the skill is not trained or the
    skill ID is invalid.
  examples:
  - title: Basic usage to check mining skill
    code: "uint16 miningSkill = player->GetSkillValue(SKILL_MINING);\nif (miningSkill\
      \ > 0)\n{\n    // Player has mining skill trained\n    std::cout << \"Mining\
      \ skill level: \" << miningSkill << std::endl;\n}"
    language: cpp
  - title: Using skill value for conditional gameplay
    code: "uint16 blacksmithing = player->GetSkillValue(SKILL_BLACKSMITHING);\nif\
      \ (blacksmithing >= 300)\n{\n    // Player can craft advanced items\n    player->AddItem(ItemTemplate::GetItemTemplate(ITEM_ID_ADVANCED_TOOL),\
      \ 1);\n}"
    language: cpp
  notes: This method does not perform any validation on the skill ID parameter, so
    calling it with an invalid skill ID may result in undefined behavior or return
    0. The returned value represents the base skill level without any temporary modifiers
    or bonuses. This method is thread-safe as long as the player object itself is
    not being modified concurrently.
  warnings: Be cautious when using this method with unvalidated skill IDs, as it could
    lead to incorrect results or crashes if an invalid ID is passed. Also note that
    this method returns only the base skill value and does not account for temporary
    buffs, debuffs, or other gameplay modifiers that might affect a player's effective
    skill level.
  related:
  - SetSkillValue
  - GetMaxSkillValue
  - HasSkill
  - AddSkill
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T08:49:01.274232'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
