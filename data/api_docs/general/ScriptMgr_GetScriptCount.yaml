api:
  class: ScriptMgr
  method: GetScriptCount
  signature: uint32 ScriptMgr::GetScriptCount() const
documentation:
  brief: Returns the total count of registered scripts within the TrinityCore script
    manager.
  description: The GetScriptCount method retrieves the number of scripts currently
    registered with the ScriptMgr instance. This count includes all types of scripts
    such as creature scripts, game object scripts, item scripts, and other scripted
    components that have been loaded into the server. The method is typically used
    for debugging purposes, script loading verification, or to determine how many
    scripts are active in the running TrinityCore instance. It provides a quick way
    to assess the script population without needing to iterate through individual
    script entries.
  parameters: []
  returns: A uint32 value representing the total number of registered scripts in the
    ScriptMgr. This count includes all script types and should be zero if no scripts
    are loaded or registered.
  examples:
  - title: Basic Usage to Check Script Count
    code: 'uint32 scriptCount = sScriptMgr->GetScriptCount();

      TC_LOG_INFO("scripts", "Currently loaded scripts: %u", scriptCount);'
    language: cpp
  - title: Using Script Count for Debugging
    code: "void CheckScriptLoadStatus()\n{\n    uint32 count = sScriptMgr->GetScriptCount();\n\
      \    if (count == 0)\n    {\n        TC_LOG_WARN(\"scripts\", \"No scripts are\
      \ currently loaded!\");\n    }\n    else\n    {\n        TC_LOG_INFO(\"scripts\"\
      , \"Script manager contains %u registered scripts.\", count);\n    }\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any thread context. The
    returned value reflects the current state of script registration at the time of
    invocation, so it may change if new scripts are loaded or unloaded during runtime.
    This method does not perform any expensive operations; it simply returns a cached
    count value.
  warnings: The script count returned by this method may not reflect dynamically loaded
    scripts that are added after the initial server startup unless those additions
    are properly tracked by the ScriptMgr system. Also, be aware that script counts
    can vary between different TrinityCore builds or configurations depending on which
    script modules are compiled in.
  related:
  - GetScriptByName
  - GetScriptById
  - LoadScripts
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:48:07.282881'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
