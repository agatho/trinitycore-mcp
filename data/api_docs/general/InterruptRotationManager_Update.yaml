api:
  class: InterruptRotationManager
  method: Update
  signature: void InterruptRotationManager::Update(uint32 diff)
documentation:
  brief: Updates the interrupt rotation manager state based on the elapsed game time.
  description: The Update method is responsible for processing and managing the state
    of interrupt rotations within the TrinityCore framework. It typically handles
    timing-based logic, such as checking if an interrupt should be triggered or if
    a rotation needs to be reset. This method is called regularly by the game loop
    and uses the provided time delta (diff) to determine how much time has passed
    since the last update. The method ensures that interrupt rotations are properly
    synchronized with the game's timing system and can manage cooldowns, animation
    states, or other time-sensitive behaviors related to character interrupts.
  parameters:
  - name: diff
    description: The time elapsed in milliseconds since the last update call. This
      value is used to determine how much time has passed for processing interrupt
      rotation logic.
  returns: null
  examples:
  - title: Basic Update Call
    code: "void SomeAI::Update(uint32 diff)\n{\n    interruptRotationManager.Update(diff);\n\
      }"
    language: cpp
  - title: Update with Additional Logic
    code: "void CombatAI::Update(uint32 diff)\n{\n    interruptRotationManager.Update(diff);\n\
      \    if (interruptRotationManager.IsInterruptReady())\n    {\n        // Perform\
      \ interrupt action\n        DoInterrupt();\n    }\n}"
    language: cpp
  notes: This method is typically invoked from within AI update loops or game tick
    handlers. It's important to ensure that the diff parameter accurately reflects
    the time passed, as incorrect timing can lead to inconsistent interrupt behavior.
    The implementation may involve internal state tracking and should be called regularly
    for proper operation.
  warnings: Ensure that this method is only called from a thread-safe context where
    game state modifications are allowed. Improper handling of the diff parameter
    or calling this method outside of the intended update cycle may cause unexpected
    behavior in interrupt rotation logic.
  related:
  - IsInterruptReady
  - ResetRotation
  - SetInterruptCooldown
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T00:03:49.479958'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
