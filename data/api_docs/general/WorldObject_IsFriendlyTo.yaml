api:
  class: WorldObject
  method: IsFriendlyTo
  signature: bool WorldObject::IsFriendlyTo(const WorldObject * target) const
documentation:
  brief: Determines whether this WorldObject is friendly towards the specified target
    WorldObject based on faction and relationship rules.
  description: The IsFriendlyTo method evaluates the friendship status between the
    calling WorldObject and a provided target WorldObject. It considers factors such
    as faction relationships, creature types, player versus NPC interactions, and
    any custom alliance or hostility settings defined in the game logic. This function
    is commonly used in AI behavior scripting, combat systems, and interaction logic
    to determine whether an object should engage, ignore, or assist another object.
    The method returns true if the two objects are considered friendly (e.g., same
    faction, allied, or neutral), and false otherwise. It's important to note that
    this check may involve complex faction tables and relationship mappings specific
    to TrinityCore's implementation.
  parameters: []
  returns: A boolean value indicating whether the calling WorldObject is friendly
    towards the target WorldObject. Returns true if they are considered friendly (same
    faction, allied, or neutral), false otherwise.
  examples:
  - title: Basic usage in AI behavior
    code: "if (me->IsFriendlyTo(target)) {\n    // Perform friendly actions\n    me->Say(\"\
      Hello friend!\", LANG_UNIVERSAL);\n}"
    language: cpp
  - title: Using IsFriendlyTo to avoid attacking allies
    code: "Unit* target = SelectTarget(SELECT_TARGET_NEAREST, 0);\nif (target && !me->IsFriendlyTo(target))\
      \ {\n    DoMeleeAttackIfReady();\n} else {\n    // Skip attack if target is\
      \ friendly\n    return;\n}"
    language: cpp
  notes: This method relies on faction data stored in the database and may consider
    additional flags or custom settings defined in the core code. It's typically used
    in combat AI, quest logic, and NPC interaction systems. The result can be influenced
    by temporary buffs, debuffs, or dynamic faction changes during runtime.
  warnings: Ensure that the target pointer is valid before calling this method to
    avoid potential crashes. In some edge cases involving dynamically created objects
    or invalid references, the behavior might not be predictable. Also note that this
    function does not account for temporary state changes like polymorph effects unless
    explicitly coded into faction handling.
  related:
  - IsHostileTo
  - GetFaction
  - SetFaction
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:28:56.765510'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
