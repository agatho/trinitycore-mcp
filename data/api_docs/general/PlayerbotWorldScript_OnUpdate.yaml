api:
  class: PlayerbotWorldScript
  method: OnUpdate
  signature: void PlayerbotWorldScript::OnUpdate(uint32 diff)
documentation:
  brief: Updates player bot behavior and AI logic based on elapsed time
  description: The OnUpdate method is a core callback function in the PlayerbotWorldScript
    class that handles the periodic updating of player bot AI behaviors. This method
    is invoked by the game engine at regular intervals with a time delta parameter,
    allowing bots to process their decision-making logic, movement updates, and action
    execution. It serves as the primary mechanism for maintaining active bot behavior
    within the World of Warcraft environment, ensuring that bots respond appropriately
    to changing game states and maintain consistent AI performance.
  parameters:
  - name: diff
    description: The time elapsed in milliseconds since the last update call. This
      parameter represents the delta time used for timing-based calculations and ensures
      that bot behaviors are synchronized with the game's frame rate.
  returns: null
  examples:
  - title: Basic OnUpdate Implementation
    code: "void PlayerbotWorldScript::OnUpdate(uint32 diff)\n{\n    // Process bot\
      \ AI logic\n    for (auto& bot : GetPlayerBots())\n    {\n        if (bot->IsInWorld())\n\
      \        {\n            bot->UpdateAI(diff);\n        }\n    }\n}"
    language: cpp
  - title: Advanced OnUpdate with State Management
    code: "void PlayerbotWorldScript::OnUpdate(uint32 diff)\n{\n    static uint32\
      \ updateTimer = 0;\n    updateTimer += diff;\n    \n    if (updateTimer >= 1000)\
      \ // Update every second\n    {\n        updateTimer = 0;\n        \n      \
      \  for (auto& bot : GetPlayerBots())\n        {\n            if (bot->IsAlive()\
      \ && bot->IsInWorld())\n            {\n                bot->UpdateCombatAI(diff);\n\
      \                bot->UpdateMovement();\n            }\n        }\n    }\n}"
    language: cpp
  notes: This method is called frequently by the game engine's main loop, so performance
    optimization is crucial. The diff parameter should be used for time-based calculations
    to ensure consistent behavior across different frame rates. Avoid heavy computations
    or blocking operations within this function as it directly impacts overall server
    performance.
  warnings: Do not perform expensive database operations or network calls in this
    method as it's called very frequently. This can cause significant performance
    degradation and potential server instability. Always ensure thread safety when
    accessing shared data structures from this callback.
  related:
  - OnPlayerLogin
  - OnPlayerLogout
  - OnWorldUpdate
metadata:
  confidence: 0.92
  generated_at: '2025-10-31T20:53:57.960103'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
