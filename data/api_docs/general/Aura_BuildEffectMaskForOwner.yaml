api:
  class: Aura
  method: BuildEffectMaskForOwner
  signature: uint32 Aura::BuildEffectMaskForOwner(const SpellInfo * spellProto, uint32
    availableEffectMask, WorldObject * owner)
documentation:
  brief: Calculates and returns a bitmask of active effects for the aura's owner based
    on spell prototype and available effects.
  description: The BuildEffectMaskForOwner method constructs a bitmask that represents
    which spell effects are currently active or applicable to the aura's owner. This
    function evaluates the provided spell prototype against the available effect mask
    and the owner object to determine which effects should be considered active for
    the aura. It is primarily used in the context of aura application and management
    within the TrinityCore framework, particularly when determining how spell effects
    interact with different targets or objects. The method ensures that only valid
    and applicable effects are included in the returned mask, which can then be used
    by other systems to process or apply those effects correctly.
  parameters:
  - name: spellProto
    description: Pointer to the SpellInfo structure containing the spell prototype
      definition. This parameter defines the properties and effects of the spell being
      processed.
  - name: availableEffectMask
    description: Bitmask representing which spell effects are available for activation.
      Each bit corresponds to a specific effect index within the spell.
  - name: owner
    description: Pointer to the WorldObject that owns or is affected by this aura.
      This object determines how the effects are applied and validated.
  returns: Returns a uint32 bitmask where each set bit indicates an active or applicable
    spell effect for the aura's owner. The bits correspond to effect indices defined
    in the spell prototype.
  examples:
  - title: Basic Usage
    code: "uint32 effectMask = aura->BuildEffectMaskForOwner(spellInfo, availableEffects,\
      \ owner);\n// Use effectMask to determine which effects are active\nif (effectMask\
      \ & (1 << EFFECT_0)) {\n    // Handle effect 0\n}"
    language: cpp
  - title: Aura Application Context
    code: "SpellInfo* spellProto = sSpellMgr->GetSpellInfo(spellId);\nuint32 availableMask\
      \ = 0x7; // Assume effects 0, 1, and 2 are available\nWorldObject* target =\
      \ unit->GetOwner();\nuint32 activeMask = aura->BuildEffectMaskForOwner(spellProto,\
      \ availableMask, target);\n// Apply effects based on the computed mask\nfor\
      \ (uint32 i = 0; i < MAX_SPELL_EFFECTS; ++i) {\n    if (activeMask & (1 << i))\
      \ {\n        // Process effect i\n    }\n}"
    language: cpp
  notes: This method is typically called during aura application or update cycles.
    The returned mask can be used to optimize effect processing by only handling effects
    that are actually active. Performance-wise, this function should be efficient
    as it primarily performs bitwise operations and simple conditional checks.
  warnings: Ensure that the spellProto parameter is valid and not null before calling
    this method. Incorrectly constructed effect masks could lead to unexpected behavior
    in aura application or effect processing.
  related:
  - GetEffectMask
  - IsPositiveEffect
  - HasEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:20:26.417018'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
