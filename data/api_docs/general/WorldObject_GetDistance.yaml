api:
  class: WorldObject
  method: GetDistance
  signature: float WorldObject::GetDistance(float x, float y, float z) const
documentation:
  brief: Calculates and returns the 3D distance between this WorldObject and a specified
    world coordinate.
  description: 'The GetDistance method computes the Euclidean distance in three-dimensional
    space from the current WorldObject''s position to the given (x, y, z) coordinates.
    This method is commonly used in game logic for determining proximity of objects,
    triggering events based on range, or calculating movement distances. The calculation
    accounts for the object''s actual spatial position within the game world, making
    it suitable for both player and non-player character interactions. It performs
    a standard 3D distance calculation using the formula: sqrt((x2-x1)^2 + (y2-y1)^2
    + (z2-z1)^2).'
  parameters:
  - name: x
    description: The X coordinate of the target position in world space
  - name: y
    description: The Y coordinate of the target position in world space
  - name: z
    description: The Z coordinate of the target position in world space
  returns: A float value representing the 3D distance in yards between this WorldObject
    and the specified coordinates. Returns 0.0f if the object is at the exact same
    position.
  examples:
  - title: Basic Distance Calculation
    code: "float distance = player->GetDistance(100.0f, 200.0f, 50.0f);\nif (distance\
      \ < 10.0f)\n{\n    // Player is within 10 yards of the target position\n}"
    language: cpp
  - title: Using Distance for NPC Behavior
    code: "float distance = npc->GetDistance(player->GetPositionX(), player->GetPositionY(),\
      \ player->GetPositionZ());\nif (distance < 5.0f)\n{\n    // Trigger attack or\
      \ interaction\n    npc->Attack(player, true);\n}"
    language: cpp
  notes: This method performs a direct 3D distance calculation without considering
    terrain height differences or collision detection. It's optimized for performance
    and is commonly used in AI decision-making loops. The returned value is in yards,
    which is the standard unit of measurement for distances in World of Warcraft's
    game world.
  warnings: Be aware that this method calculates straight-line (Euclidean) distance
    rather than pathfinding distance. For complex terrain or obstacle-aware distance
    calculations, alternative methods such as those involving navigation meshes should
    be used. The method assumes valid coordinate inputs and may produce unexpected
    results with invalid or extreme values.
  related:
  - GetDistance2D
  - GetDistanceSq
  - GetPositionX
  - GetPositionY
  - GetPositionZ
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:19:16.649859'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
