api:
  class: SpellInfo
  method: GetMechanicImmunityMask
  signature: uint64 SpellInfo::GetMechanicImmunityMask(const Unit * caster) const
documentation:
  brief: Returns the mechanic immunity mask for a spell, which determines what mechanics
    the spell is immune to.
  description: This method retrieves the mechanic immunity mask from a SpellInfo object,
    which defines the set of mechanics that a spell is immune to. The returned mask
    is a bitmask representing all the mechanics the spell protects against, such as
    stun, root, silence, and others. This is used primarily for determining how a
    spell interacts with various debuffs and effects in the game. The method does
    not require any parameters and is purely a getter function that returns the static
    immunity mask defined in the spell's data.
  parameters: []
  returns: Returns a uint64 representing the mechanic immunity mask, where each bit
    corresponds to a specific mechanic type. This mask can be used to check if a spell
    is immune to certain mechanics such as stun, root, silence, etc., and is typically
    used in conjunction with other methods like GetMechanicImmunityList or GetSpellInfo.
  examples:
  - title: Basic Usage Example
    code: "uint64 immunityMask = spellInfo->GetMechanicImmunityMask();\nif (immunityMask\
      \ & MECHANIC_STUN)\n{\n    // Spell is immune to stun\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "uint64 immunityMask = spellInfo->GetMechanicImmunityMask();\nuint32 mechanicType\
      \ = 0;\nfor (uint32 i = 0; i < 32; ++i)\n{\n    if (immunityMask & (1ULL <<\
      \ i))\n    {\n        // Spell is immune to mechanic type i\n    }\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other spell-related functions
    to determine how a spell interacts with various mechanics. It's important to note
    that this mask is static and does not change based on caster or target conditions,
    unlike some other spell methods which may vary based on context.
  warnings: Be careful when using bitwise operations with the returned mask, as incorrect
    handling can lead to unexpected behavior. Also, ensure that you're checking against
    the correct mechanic types for your use case, as there are many different mechanics
    in the game.
  related:
  - GetSpellInfo
  - GetMechanicImmunityList
  - GetSpellId
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T14:06:39.406201'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
