api:
  class: CorpsePreventionManager
  method: ShouldPreventCorpse
  signature: bool CorpsePreventionManager::ShouldPreventCorpse(Player * bot)
documentation:
  brief: Determines whether a player's corpse should be prevented from appearing upon
    death.
  description: The ShouldPreventCorpse method evaluates whether a given player's corpse
    should be prevented from spawning when they die. This functionality is typically
    used in AI systems or custom game mechanics where certain players (such as bots
    or specific NPCs) should not leave behind corpses. The method checks internal
    flags, player state, and possibly configuration settings to make this determination.
    It returns true if the corpse should be prevented, false otherwise. This method
    is commonly called during the death processing sequence in TrinityCore's core
    logic.
  parameters:
  - name: bot
    description: Pointer to the Player object whose corpse state is being evaluated.
      Must not be null.
  returns: True if the player's corpse should be prevented from appearing; false if
    the corpse should be allowed to appear normally.
  examples:
  - title: Basic usage in AI logic
    code: "if (CorpsePreventionManager::ShouldPreventCorpse(player)) {\n    // Prevent\
      \ corpse from spawning\n    player->RemoveCorpse();\n}"
    language: cpp
  - title: Integration with custom death handler
    code: "void CustomDeathHandler(Player* player) {\n    if (CorpsePreventionManager::ShouldPreventCorpse(player))\
      \ {\n        // Handle bot/NPC death without corpse\n        player->KillPlayer();\n\
      \        player->SendAreaTriggerMessage(\"Death prevented.\");\n    } else {\n\
      \        // Normal death with corpse\n        player->KillPlayer();\n    }\n\
      }"
    language: cpp
  notes: This method is likely part of a larger system for managing bot behavior and
    AI-driven gameplay. The implementation may depend on internal flags set by the
    AI manager or configuration options that control corpse appearance for different
    player types.
  warnings: Ensure the Player pointer passed to this method is valid and not null,
    as dereferencing a null pointer will cause undefined behavior. This method should
    only be called during appropriate game state transitions where death processing
    occurs.
  related:
  - CorpsePreventionManager::PreventCorpse
  - CorpsePreventionManager::AllowCorpse
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T15:35:37.800958'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
