api:
  class: Unit
  method: isPossessing
  signature: bool Unit::isPossessing(Unit * u) const
documentation:
  brief: Determines whether the unit is currently possessing another unit.
  description: This method checks if the current unit has an active possession state
    where it controls another unit. It typically returns true when a player or creature
    is in the process of possessing another unit, such as during a possess ability
    activation. The method is commonly used in game mechanics involving control and
    ownership of units, particularly in scenarios where a unit's possession state
    needs to be verified for actions or events. This functionality is essential for
    determining active possession states and can be used in conjunction with other
    possession-related methods to manage unit control.
  parameters: []
  returns: Returns true if the unit is currently possessing another unit, false otherwise.
    The method returns false when no possession state exists or when the unit is not
    actively controlling another unit.
  examples:
  - title: Basic Possession Check
    code: "if (player->isPossessing(target)) {\n    // Do something\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other possession-related
    methods like 'isPossessing' and 'GetCharmer' to manage unit control. It's important
    to note that this method only returns true when a unit is actively possessing
    another unit, not when it merely has control over another unit.
  warnings: This method should be used carefully in scenarios where possession state
    needs to be verified for actions or events. Incorrect usage may lead to unexpected
    behavior when controlling units or managing possession states.
  related:
  - isPossessing
  - GetCharmer
  - HasUnitState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:52:36.657304'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
