api:
  class: Unit
  method: IsEngaged
  signature: bool Unit::IsEngaged() const
documentation:
  brief: Determines whether the unit is currently engaged in combat.
  description: The IsEngaged method checks if a Unit object is actively involved in
    combat, returning true when the unit has entered combat and false when it has
    not. This method is commonly used in AI scripts to determine the current state
    of a unit's engagement with targets. The method relies on internal combat state
    tracking within TrinityCore's core system, where the unit's combat status is updated
    based on various triggers such as attacks, spells, or other game mechanics that
    initiate combat.
  parameters: []
  returns: Returns true if the unit is currently engaged in combat, false otherwise.
    This indicates whether the unit has entered combat and is actively fighting with
    a target.
  examples:
  - title: Basic Usage Example
    code: "if (unit->IsEngaged())\n{\n    // Unit is in combat\n    // Do something\n\
      }\nelse\n{\n    // Unit is not in combat\n    // Do something else\n}"
    language: cpp
  notes: This method typically relies on internal combat state flags and may be influenced
    by the unit's current target or whether it has been attacked. Performance considerations
    are minimal as this method simply checks a boolean flag, but it should be used
    carefully in loops to avoid unnecessary overhead.
  warnings: The method may return false even if the unit is actively attacking another
    unit, as it depends on the specific combat state tracking mechanism used by TrinityCore.
    Care should be taken when using this method in conjunction with other combat-related
    methods to ensure consistent behavior.
  related:
  - IsInCombat
  - IsTargeting
  - IsAttacking
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:10:22.743297'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
