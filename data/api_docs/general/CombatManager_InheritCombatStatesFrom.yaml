api:
  class: CombatManager
  method: InheritCombatStatesFrom
  signature: void CombatManager::InheritCombatStatesFrom(const Unit * who)
documentation:
  brief: Transfers combat state information from one unit to another within the CombatManager.
  description: The InheritCombatStatesFrom method copies all relevant combat-related
    states and flags from a specified Unit object to the current CombatManager's associated
    unit. This includes combat engagement status, threat lists, combat duration, and
    any active combat effects or modifiers. The method is typically invoked during
    unit transformations, summons, or when transferring combat involvement between
    entities. It ensures that combat state consistency is maintained across related
    units in the game world, particularly important for mechanics such as pet combat
    inheritance, summoned creature behavior, or unit replacement scenarios.
  parameters:
  - name: who
    description: A pointer to the Unit object from which combat states will be inherited.
      Must not be null and must represent a valid unit in the game world with active
      combat state data.
  returns: null
  examples:
  - title: Inherit combat state from a target unit
    code: 'Unit* target = ...; // Some unit in combat

      CombatManager* manager = player->GetCombatManager();

      manager->InheritCombatStatesFrom(target);'
    language: cpp
  - title: Transfer combat state when summoning a pet
    code: 'Unit* owner = ...; // Player or creature with active combat

      Unit* pet = ...; // Newly summoned pet

      pet->GetCombatManager()->InheritCombatStatesFrom(owner);'
    language: cpp
  notes: This method should only be called when both the source and target units are
    in a valid state for combat inheritance. The method does not perform any validation
    on the 'who' parameter beyond checking for null, so callers must ensure that the
    unit has meaningful combat data before invoking this function.
  warnings: Calling this method with an invalid or uninitialized Unit pointer may
    lead to undefined behavior or crashes. Ensure that the source unit is in a valid
    combat state and that the target CombatManager is properly initialized before
    calling.
  related:
  - CombatManager::SetInCombat
  - CombatManager::IsInCombat
  - Unit::GetCombatManager
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T11:47:38.925306'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
