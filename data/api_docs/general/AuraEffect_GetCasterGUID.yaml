api:
  class: AuraEffect
  method: GetCasterGUID
  signature: int AuraEffect::GetCasterGUID() const
documentation:
  brief: Retrieves the GUID of the caster who applied this aura effect.
  description: The GetCasterGUID method returns the unique identifier (GUID) of the
    creature, player, or game object that originally applied the aura effect to the
    target. This GUID is essential for identifying the source of buffs, debuffs, or
    other magical effects in World of Warcraft's TrinityCore framework. The method
    is commonly used in aura handling logic to determine which entity triggered a
    specific effect, such as a spell proc or periodic damage application. It is important
    to note that this value may be invalid if the caster has been removed from the
    world or if the aura was applied through indirect means like item effects.
  parameters: []
  returns: An integer representing the GUID of the aura's caster. If no valid caster
    exists, the method may return 0 or an invalid GUID value depending on implementation
    details.
  examples:
  - title: Basic Usage to Identify Caster
    code: "void OnAuraPeriodic(AuraEffect const* aurEff)\n{\n    uint64 casterGUID\
      \ = aurEff->GetCasterGUID();\n    if (casterGUID)\n    {\n        // Process\
      \ aura effect based on caster\n        if (Player* player = ObjectAccessor::FindConnectedPlayer(casterGUID))\n\
      \        {\n            // Perform actions specific to the player who applied\
      \ the aura\n        }\n    }\n}"
    language: cpp
  - title: Checking for Specific Caster Type
    code: "void HandleAuraApply(AuraEffect const* aurEff)\n{\n    uint64 casterGUID\
      \ = aurEff->GetCasterGUID();\n    if (Unit* caster = ObjectAccessor::GetUnit(*GetTarget(),\
      \ casterGUID))\n    {\n        // Check if the caster is a player\n        if\
      \ (caster->IsPlayer())\n        {\n            // Apply special logic for player-cast\
      \ auras\n        }\n        else if (caster->IsCreature())\n        {\n    \
      \        // Handle creature-cast auras differently\n        }\n    }\n}"
    language: cpp
  notes: This method is typically used in conjunction with ObjectAccessor::GetUnit()
    or similar functions to retrieve the actual Unit object from the GUID. The returned
    value may be zero if the aura was applied without a valid caster, such as through
    certain item effects or temporary modifications.
  warnings: Be cautious when using this method directly without verifying that the
    GUID corresponds to an existing unit in the world. Accessing invalid GUIDs can
    lead to crashes or undefined behavior.
  related:
  - GetAura
  - GetCaster
  - GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:04:28.309915'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
