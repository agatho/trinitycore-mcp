api:
  class: GameObject
  method: _IsWithinDist
  signature: bool GameObject::_IsWithinDist(const int * obj, float dist2compare, bool
    param2, bool param3, bool param4) const
documentation:
  brief: Checks if the GameObject is within a specified distance from another object.
  description: The _IsWithinDist method determines whether the calling GameObject
    instance is within a given distance of another object, using a squared distance
    comparison for performance. This method is typically used in game logic to check
    proximity between game objects such as players and interactive objects like doors
    or quest items. The method performs a fast distance check without calculating
    the actual Euclidean distance, instead comparing against the square of the distance
    to avoid expensive sqrt() operations. It supports various optional parameters
    that can modify the behavior of the distance calculation.
  parameters:
  - name: obj
    description: Pointer to another object (likely a WorldObject) to compare distance
      against. This parameter is expected to be a valid pointer to an object in the
      game world.
  - name: dist2compare
    description: The maximum squared distance allowed for the objects to be considered
      within range. Uses squared distance for performance optimization.
  - name: param2
    description: Optional boolean flag that may control collision detection behavior
      or include certain object types in the proximity check.
  - name: param3
    description: Additional boolean parameter, potentially used to modify how distance
      is calculated or what type of objects are considered.
  - name: param4
    description: Another optional boolean flag, possibly related to specific game
      mechanics or object state checks during the distance comparison.
  returns: Returns true if the GameObject is within the specified squared distance
    from the target object; otherwise returns false.
  examples:
  - title: Basic usage checking proximity to a player
    code: "if (gameObject->_IsWithinDist(player, 25.0f, true, false, true)) {\n  \
      \  // GameObject is within 5 units (sqrt(25)) of the player\n    gameObject->Use(player);\n\
      }"
    language: cpp
  - title: Advanced usage with multiple parameters
    code: "if (gameObject->_IsWithinDist(targetObject, 100.0f, true, true, false))\
      \ {\n    // Perform action only if within 10 units and specific conditions met\n\
      \    gameObject->SendCustomText(\"You are close!\", targetObject);\n}"
    language: cpp
  notes: This method uses squared distance comparisons for performance reasons. When
    comparing distances, always ensure that the distance threshold is squared when
    passed to this function. The parameters param2 through param4 are likely used
    internally by TrinityCore's proximity system and may affect how different object
    types or states are handled during the check.
  warnings: Be careful when passing distance values; since this method uses squared
    distances, make sure you square your intended distance before passing it to dist2compare.
    Also, ensure that the obj parameter points to a valid WorldObject to avoid undefined
    behavior.
  related:
  - IsWithinDist
  - GetDistance
  - GetDistanceSqr
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T11:44:43.691536'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
