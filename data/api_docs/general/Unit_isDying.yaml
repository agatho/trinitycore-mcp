api:
  class: Unit
  method: isDying
  signature: bool Unit::isDying() const
documentation:
  brief: Checks if the unit is in the process of dying or has died.
  description: The isDying method determines whether a Unit object is currently in
    the process of dying or has already died. This method is commonly used in game
    mechanics to identify when a creature or player is approaching death, particularly
    in combat situations where the unit's health has dropped to zero or below. It
    serves as a crucial indicator for determining if a unit should be removed from
    the world or if death animations should be triggered.
  parameters: []
  returns: Returns true if the unit is dying or has died, false otherwise. The method
    does not distinguish between whether the unit is currently dying or has already
    died, making it useful for general death state checking.
  examples:
  - title: Basic usage in combat
    code: "if (unit->isDying()) {\n    // Handle death logic\n}"
    language: cpp
  notes: This method is typically used in conjunction with other death-related methods
    like isDead() or health below zero. The implementation may vary depending on the
    unit type, as it's designed to work for both players and creatures. Performance
    considerations are minimal since this method simply checks internal state flags.
  warnings: Be cautious when using this method in combination with other death-related
    methods, as it may lead to incorrect assumptions about the unit's current state
    if not properly handled. Also, avoid using this method in situations where you
    need to distinguish between dying and dead states.
  related:
  - isDead
  - isAlive
  - GetHealth
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T19:54:57.322864'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
