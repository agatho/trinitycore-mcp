api:
  class: Unit
  method: SetPowerType
  signature: void Unit::SetPowerType(int power, bool sendUpdate, bool onInit)
documentation:
  brief: Sets the power type for a unit, allowing control over resource management.
  description: This method sets the power type for a Unit object, which determines
    the type of resource (such as mana, rage, focus, or energy) that the unit uses.
    The method allows for precise control over how power is managed within the game
    mechanics, particularly important for player characters and NPCs. It can optionally
    send updates to the client and handle initialization scenarios. This method is
    essential for managing character resources during gameplay and is commonly used
    in various game events and mechanics.
  parameters:
  - name: power
    description: The power type to set, typically represented as an integer value
      corresponding to different power types (mana=0, rage=1, focus=2, energy=3).
      Valid values are 0-3, with 0 representing mana, 1 representing rage, 2 representing
      focus, and 3 representing energy.
  - name: sendUpdate
    description: When true, sends an update to the client about the power type change.
      When false, no update is sent, allowing for internal changes without client
      notification.
  - name: onInit
    description: When true, indicates this is an initialization call and should not
      trigger any additional logic or updates. When false, normal operation occurs
      with potential updates and side effects.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* unit = new Unit();

      unit->SetPowerType(0, true, false);

      // Sets unit''s power type to mana with client update'
    language: cpp
  - title: Initialization example
    code: 'Unit* unit = new Unit();

      unit->SetPowerType(2, false, true);

      // Sets unit''s power type to focus without client update during initialization'
    language: cpp
  notes: Implementation details include handling of different power types and their
    associated resource management. Performance considerations are minimal as this
    method is typically used in limited scenarios. Thread safety depends on the underlying
    implementation but generally should be safe for single-threaded operations.
  warnings: Care must be taken when setting power types, as incorrect values can lead
    to game mechanics issues or client-side errors. Avoid using this method during
    critical gameplay events without proper initialization handling.
  related:
  - GetPowerType
  - SetDisplayId
  - SetHealth
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T00:54:39.246276'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
