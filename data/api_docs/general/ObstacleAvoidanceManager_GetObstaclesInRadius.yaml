api:
  class: ObstacleAvoidanceManager
  method: GetObstaclesInRadius
  signature: int ObstacleAvoidanceManager::GetObstaclesInRadius(const int & center,
    float radius)
documentation:
  brief: Retrieves the number of obstacles within a specified radius from a given
    center point.
  description: The GetObstaclesInRadius method calculates and returns the count of
    obstacles located within a defined circular area centered at the provided location.
    This functionality is typically used in pathfinding and movement AI to determine
    environmental constraints around a unit or position. The method operates on a
    spatial grid system where obstacles are stored and queried efficiently. It's commonly
    employed by AI systems to avoid collisions, navigate complex terrain, or make
    decisions based on surrounding environmental factors.
  parameters:
  - name: center
    description: The center point of the search radius, represented as an integer
      identifier (likely a grid cell or position index). This parameter defines where
      the circular area is centered for obstacle detection.
  - name: radius
    description: The radius of the circular area in which to search for obstacles.
      This value determines how far from the center point the method will look for
      nearby obstacles.
  returns: Returns an integer representing the total number of obstacles found within
    the specified radius from the given center point. A return value of zero indicates
    no obstacles were detected in the area.
  examples:
  - title: Basic obstacle count query
    code: "int obstacleCount = obstacleManager->GetObstaclesInRadius(12345, 10.0f);\n\
      if (obstacleCount > 0)\n{\n    // Handle case where obstacles are present\n\
      \    printf(\"Found %d obstacles in radius\\n\", obstacleCount);\n}"
    language: cpp
  - title: Pathfinding decision based on obstacle density
    code: "int centerPoint = player->GetGridX() * 100 + player->GetGridY();\nfloat\
      \ searchRadius = 5.0f;\nint obstacles = obstacleManager->GetObstaclesInRadius(centerPoint,\
      \ searchRadius);\nif (obstacles > 3)\n{\n    // Consider alternative path due\
      \ to high obstacle density\n    player->SetMovementType(MOVE_TYPE_WANDER);\n\
      }"
    language: cpp
  notes: This method likely operates on a precomputed spatial grid or octree structure
    for efficient querying. The center parameter may represent either a world coordinate
    or a grid index depending on the internal implementation. Performance is optimized
    for frequent queries but may be impacted by large search radii or high obstacle
    density in the area.
  warnings: Ensure that the center parameter is valid and within expected bounds to
    avoid undefined behavior. Large radius values may cause performance degradation
    due to increased computational overhead for spatial queries.
  related:
  - GetObstaclesInLine
  - AddObstacle
  - RemoveObstacle
  - IsPointObstructed
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:52:04.254231'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
