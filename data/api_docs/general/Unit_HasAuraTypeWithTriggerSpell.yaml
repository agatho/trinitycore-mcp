api:
  class: Unit
  method: HasAuraTypeWithTriggerSpell
  signature: bool Unit::HasAuraTypeWithTriggerSpell(int auratype, uint32 triggerSpell)
    const
documentation:
  brief: Checks if a unit has an aura of specified type with a trigger spell.
  description: This method determines whether a Unit object possesses a specific aura
    type that is triggered by a given spell. It evaluates the aura's existence and
    its relationship to the specified trigger spell, returning true if the condition
    is met. The method is commonly used in game mechanics to verify spell effects
    or conditions such as aura application, trigger-based abilities, or special interactions
    between spells and auras. This functionality is essential for implementing complex
    spell behaviors and maintaining accurate gameplay logic.
  parameters:
  - name: auratype
    description: The aura type to check for (e.g., SPELL_AURA_XXX constants). Valid
      values include various aura types such as SPELL_AURA_MOD_STAT, SPELL_AURA_PROC_TRIGGER_SPELL,
      etc. This parameter defines the specific type of aura being evaluated.
  - name: triggerSpell
    description: The spell ID that triggers the aura. This represents the specific
      spell that activates or is associated with the aura type being checked. The
      value must be a valid spell ID from the game database.
  returns: Returns true if the unit has an aura of the specified type that is triggered
    by the given spell; otherwise returns false.
  examples:
  - title: Basic Usage Example
    code: "if (unit->HasAuraTypeWithTriggerSpell(SPELL_AURA_PROC_TRIGGER_SPELL, 12345))\
      \ {\n    // Do something\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "if (unit->HasAuraTypeWithTriggerSpell(SPELL_AURA_MOD_DAMAGE_DONE, 12345))\
      \ {\n    // Check for damage-dealing aura triggered by spell\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related methods
    to determine specific spell interactions. Performance considerations include checking
    against large numbers of auras; it's recommended to use this method sparingly
    in performance-critical code sections.
  warnings: Be cautious when using this method with different aura types, as incorrect
    usage can lead to false positives or negatives. Ensure that the aura type and
    trigger spell are correctly matched for accurate results.
  related:
  - HasAuraType
  - HasAura
  - GetAura
  - GetAuraType
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:22:46.178836'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
