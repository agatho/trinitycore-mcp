api:
  class: GuildBankManager
  method: HasWithdrawRights
  signature: bool GuildBankManager::HasWithdrawRights(int * player, uint32 tabId)
documentation:
  brief: Checks whether a player has permission to withdraw items from a specific
    guild bank tab
  description: The HasWithdrawRights method determines if a specified player possesses
    the necessary permissions to withdraw items from a given guild bank tab. This
    functionality is integral to the guild bank system in TrinityCore, ensuring that
    only authorized members can access and retrieve items stored within guild banks.
    The method evaluates the player's role, rank, and assigned permissions for the
    specific tab in question. It typically checks against the guild's bank tab permissions
    settings which may vary based on player ranks or custom configurations.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID) who is being checked for withdrawal rights
  - name: tabId
    description: The identifier of the guild bank tab to check withdrawal permissions
      for, ranging from 0 to maximum number of tabs configured in the guild
  returns: Returns true if the player has permission to withdraw items from the specified
    guild bank tab, false otherwise. The method may also return false if the player
    is not a member of the guild or if the tab ID is invalid.
  examples:
  - title: Check Withdraw Rights for Player
    code: "uint32 playerId = 12345;\nuint32 tabId = 0;\nbool hasRights = guildBankManager->HasWithdrawRights(&playerId,\
      \ tabId);\nif (hasRights)\n{\n    // Allow player to withdraw items\n    sLog->outString(\"\
      Player %u has withdrawal rights for tab %u\", playerId, tabId);\n}\nelse\n{\n\
      \    // Deny access\n    sLog->outString(\"Player %u does not have withdrawal\
      \ rights for tab %u\", playerId, tabId);\n}"
    language: cpp
  notes: This method likely interacts with internal guild rank and permission systems.
    It may perform database lookups or cache checks to determine the player's current
    permissions. The implementation might be optimized for frequent calls in game
    logic such as when a player attempts to interact with a guild bank tab.
  warnings: Ensure that the player GUID passed is valid and that the tabId corresponds
    to an existing tab within the guild's bank configuration. Passing invalid parameters
    may result in undefined behavior or incorrect permission checks.
  related:
  - HasDepositRights
  - GetGuildBankTabPermissions
  - SetGuildBankTabPermissions
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:04:39.321669'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
