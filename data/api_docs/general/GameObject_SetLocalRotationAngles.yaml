api:
  class: GameObject
  method: SetLocalRotationAngles
  signature: void GameObject::SetLocalRotationAngles(float z_rot, float y_rot, float
    x_rot)
documentation:
  brief: Sets the local rotation angles of a game object in three-dimensional space.
  description: This method allows developers to set the local rotation angles of a
    GameObject instance using Euler angles (Z, Y, X) in radians. The method updates
    the object's orientation within its local coordinate system, which is essential
    for proper positioning and interaction with other game entities. This functionality
    is particularly useful when creating or modifying game objects that require precise
    rotational alignment, such as doors, chests, or other interactive elements. The
    rotation angles are applied directly to the GameObject's internal transformation
    matrix without affecting global coordinates.
  parameters:
  - name: z_rot
    description: The Z-axis rotation angle in radians, representing yaw rotation around
      the vertical axis.
  - name: y_rot
    description: The Y-axis rotation angle in radians, representing pitch rotation
      around the horizontal axis.
  - name: x_rot
    description: The X-axis rotation angle in radians, representing roll rotation
      around the forward axis.
  returns: null
  examples:
  - title: Basic usage example
    code: 'GameObject* go = new GameObject();

      go->SetLocalRotationAngles(M_PI_2, 0.0f, 0.0f);

      // Sets the object''s rotation to 90 degrees around Z-axis'
    language: cpp
  - title: Advanced usage example
    code: 'GameObject* go = new GameObject();

      float yaw = M_PI_2;

      float pitch = 0.5f;

      float roll = 0.0f;

      go->SetLocalRotationAngles(yaw, pitch, roll);

      // Sets the object''s rotation to 90 degrees yaw, 30 degrees pitch, and 0 degrees
      roll'
    language: cpp
  notes: This method directly modifies the GameObject's internal transformation matrix.
    It should be used carefully as it affects the object's orientation in relation
    to its parent or world space. Performance considerations are minimal since this
    is a simple setter operation, but frequent calls may impact rendering efficiency
    if used excessively.
  warnings: "Be cautious when using this method with objects that have parent relationships,\
    \ as local rotation changes may not be properly reflected in global coordinates.\
    \ Also, ensure that the rotation angles are within valid ranges (typically -2\u03C0\
    \ to 2\u03C0 radians) to avoid unexpected behavior."
  related:
  - GetLocalRotationAngles
  - SetOrientation
  - SetPosition
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T18:06:33.513834'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
