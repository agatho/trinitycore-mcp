api:
  class: Pet
  method: addSpell
  signature: bool Pet::addSpell(uint32 spellId, int active, PetSpellState state, PetSpellType
    type)
documentation:
  brief: Adds a spell to the pet's spellbook with specified properties.
  description: The addSpell method is used to dynamically add a new spell to a pet's
    spellbook. This method allows developers to programmatically grant spells to pets,
    which can be useful for custom behaviors, quest rewards, or dynamic pet training
    systems. The method takes several parameters that define how the spell should
    be added, including its activation state and type. It returns true if the spell
    was successfully added, or false if the operation failed due to invalid parameters
    or other constraints. This functionality is particularly important in custom TrinityCore
    modules where pets need to be modified at runtime.
  parameters:
  - name: spellId
    description: The unique identifier of the spell to be added to the pet's spellbook.
      This must correspond to a valid spell entry in the game's spell database.
  - name: active
    description: Determines whether the spell should be active or inactive when added.
      A value of 0 typically means inactive, while non-zero values usually indicate
      active state.
  - name: state
    description: The PetSpellState enum value that defines the current state of the
      spell (e.g., SPELL_STATE_ACTIVE, SPELL_STATE_DISABLED).
  - name: type
    description: The PetSpellType enum value that categorizes the spell type (e.g.,
      PET_SPELL_TYPE_PASSIVE, PET_SPELL_TYPE_DEFENSIVE).
  returns: Returns true if the spell was successfully added to the pet's spellbook;
    otherwise returns false. The method may fail if the spellId is invalid, or if
    there are system limitations on the number of spells a pet can have.
  examples:
  - title: Basic usage adding a passive spell
    code: "Pet* pet = player->GetPet();\nif (pet)\n{\n    bool result = pet->addSpell(12345,\
      \ 1, SPELL_STATE_ACTIVE, PET_SPELL_TYPE_PASSIVE);\n    if (result)\n       \
      \ sLog->outString(\"Spell added successfully to pet.\");\n    else\n       \
      \ sLog->outString(\"Failed to add spell to pet.\");\n}"
    language: cpp
  - title: Adding an active defensive spell with specific parameters
    code: "Pet* pet = player->GetPet();\nif (pet && pet->IsAlive())\n{\n    bool result\
      \ = pet->addSpell(67890, 1, SPELL_STATE_ACTIVE, PET_SPELL_TYPE_DEFENSIVE);\n\
      \    if (result)\n    {\n        // Update pet's spellbook display\n       \
      \ pet->UpdatePetSpellBook();\n        sLog->outString(\"Defensive spell added\
      \ to pet.\");\n    }\n}"
    language: cpp
  notes: This method directly modifies the pet's internal spell data structure. It
    is recommended to call UpdatePetSpellBook() after adding spells to ensure the
    UI reflects the changes. The method may not work correctly if called on a pet
    that is not properly initialized or during certain game states such as combat.
  warnings: Do not call this method with invalid spell IDs as it may cause undefined
    behavior or crashes. Ensure that the pet has sufficient spell slots available
    before attempting to add new spells. Avoid calling this method from within combat
    or other time-sensitive contexts to prevent potential synchronization issues.
  related:
  - removeSpell
  - HasSpell
  - UpdatePetSpellBook
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T21:07:19.522858'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
