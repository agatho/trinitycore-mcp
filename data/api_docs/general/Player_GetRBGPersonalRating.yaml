api:
  class: Player
  method: GetRBGPersonalRating
  signature: uint32 Player::GetRBGPersonalRating() const
documentation:
  brief: Returns the player's personal rating for Rated Battlegrounds.
  description: This method retrieves the player's current personal rating in Rated
    Battlegrounds, which represents their competitive ranking within the game's rated
    battleground system. The rating is used to determine a player's eligibility for
    participation in rated battleground matches and affects their placement in the
    season-based rankings. This value is typically updated after each rated battleground
    match completion and reflects the player's performance over time. The method returns
    a uint32 value representing the numerical rating, which can be used for various
    game mechanics related to ranked battlegrounds.
  parameters: []
  returns: Returns a uint32 value representing the player's personal rating in Rated
    Battlegrounds. This value typically ranges from 0 to several thousand depending
    on the player's performance and rank. Higher values indicate better performance
    and higher ranking within the rated battleground system.
  examples:
  - title: Basic Usage Example
    code: "uint32 rating = player->GetRBGPersonalRating();\nif (rating > 1000)\n{\n\
      \    // Player is in a high-rated bracket\n    // Do something with the rating\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with other rated battleground
    related functions to determine player eligibility and performance. The value returned
    by this method may be updated after each rated battleground match completion,
    making it important for developers to understand that the rating can change over
    time.
  warnings: This method should not be used to determine eligibility for rated battleground
    matches directly, as the player's current rating must be compared against specific
    thresholds for each match type. Also, the rating value may be updated in real-time
    during gameplay, so developers should consider this when implementing logic that
    depends on this value.
  related:
  - GetRBGMatchmakerRating
  - GetRBGWeeklyRatedGames
  - GetRBGSeasonPlayed
  - GetRBGWeeklyWin
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:32:57.768714'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
