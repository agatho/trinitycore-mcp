api:
  class: SimpleCharmedPlayerAI
  method: UpdateAI
  signature: void SimpleCharmedPlayerAI::UpdateAI(int diff)
documentation:
  brief: Updates the AI behavior for a charmed player based on elapsed time
  description: The UpdateAI method is responsible for processing the artificial intelligence
    logic of a charmed player character. It is called regularly by the game engine
    to handle AI-related tasks such as target selection, spell casting, movement decisions,
    and combat behavior. The method receives a time delta parameter that represents
    the milliseconds elapsed since the last update, allowing it to perform time-sensitive
    operations like cooldown management or periodic actions. This method is part of
    the core AI system for controlled player creatures in TrinityCore.
  parameters:
  - name: diff
    description: The time elapsed in milliseconds since the last AI update call. Used
      to determine timing for actions, cooldowns, and behavior updates.
  returns: null
  examples:
  - title: Basic AI Update Implementation
    code: "void SimpleCharmedPlayerAI::UpdateAI(int diff)\n{\n    if (!UpdateVictim())\n\
      \        return;\n\n    if (me->HasUnitState(UNIT_STATE_CASTING))\n        return;\n\
      \n    // Perform basic combat AI logic\n    DoMeleeAttackIfReady();\n}"
    language: cpp
  - title: Advanced AI with Timed Actions
    code: "void SimpleCharmedPlayerAI::UpdateAI(int diff)\n{\n    if (!UpdateVictim())\n\
      \        return;\n\n    _updateTimer += diff;\n    if (_updateTimer > 1000)\n\
      \    {\n        // Execute timed behavior every second\n        DoCast(SPELL_HEAL);\n\
      \        _updateTimer = 0;\n    }\n\n    if (me->HasUnitState(UNIT_STATE_CASTING))\n\
      \        return;\n\n    DoMeleeAttackIfReady();\n}"
    language: cpp
  notes: This method is called from the main game loop and should avoid heavy computations
    or blocking operations. The diff parameter ensures that AI behaviors are time-based
    and consistent across different server performance conditions. Implementations
    should check for unit states like casting before performing new actions to prevent
    conflicts.
  warnings: Do not call this method directly from outside the AI system as it relies
    on internal state management. Avoid performing expensive operations in this method
    as it's called frequently during gameplay. Be careful with spell casting logic
    to ensure proper cooldown handling and avoid interrupting ongoing casts.
  related:
  - UpdateVictim
  - DoMeleeAttackIfReady
  - DoCast
  - HasUnitState
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:38:58.559803'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
