api:
  class: BotSessionManager
  method: UpdateBotSession
  signature: void BotSessionManager::UpdateBotSession(WorldSession * session, uint32
    diff)
documentation:
  brief: Updates the state of a bot session based on the elapsed time since last update.
  description: The UpdateBotSession method is responsible for processing and updating
    the internal state of a bot session associated with a given WorldSession. It typically
    handles tasks such as AI decision making, movement updates, combat logic, or other
    periodic actions that bots need to perform. This method is called regularly by
    the game loop and uses the provided time difference (diff) to determine how much
    processing time should be allocated to each bot's behavior. The method ensures
    that bot sessions remain synchronized with the game world state and respond appropriately
    to changes in their environment.
  parameters:
  - name: session
    description: Pointer to the WorldSession object representing the player session
      associated with the bot. This parameter is required and must not be null.
  - name: diff
    description: Time difference in milliseconds since the last update call. Used
      to calculate time-based behaviors and ensure consistent timing for bot actions.
  returns: null
  examples:
  - title: Basic Usage in Game Loop
    code: "void GameWorld::Update(uint32 diff)\n{\n    // Update all active bot sessions\n\
      \    sBotSessionManager->UpdateBotSession(session, diff);\n}"
    language: cpp
  - title: Updating Specific Bot Session
    code: "void HandlePlayerLogin(Player* player)\n{\n    if (player->IsBot())\n \
      \   {\n        WorldSession* session = player->GetSession();\n        sBotSessionManager->UpdateBotSession(session,\
      \ 50); // Update with 50ms diff\n    }\n}"
    language: cpp
  notes: This method is typically invoked from the main game loop or a dedicated bot
    update thread. The implementation may involve checking for session validity, processing
    queued commands, updating AI states, and managing resource consumption to prevent
    performance degradation. It's important that this method does not block for extended
    periods as it runs in the context of the main game thread.
  warnings: Passing an invalid or null session pointer will likely result in a crash
    or undefined behavior. Ensure that the session is valid before calling this method.
    Also, be cautious about calling this method too frequently without proper time
    diff handling, which could lead to excessive CPU usage or inconsistent bot behavior.
  related:
  - GetBotSession
  - CreateBotSession
  - RemoveBotSession
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T01:38:51.505670'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
