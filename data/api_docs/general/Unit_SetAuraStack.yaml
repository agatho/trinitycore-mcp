api:
  class: Unit
  method: SetAuraStack
  signature: void Unit::SetAuraStack(uint32 spellId, Unit * target, uint32 stack)
documentation:
  brief: Sets the stack count of a specified aura on the target unit.
  description: This method updates the stack count of a specific aura applied to a
    target unit. It is commonly used in World of Warcraft's TrinityCore framework
    to manage aura effects, particularly when dealing with spell mechanics that involve
    stacking or multiple applications of the same spell. The method allows developers
    to control how many times a particular aura appears on a unit, which can affect
    gameplay mechanics such as damage over time, buff stacking, or debuff application.
    This function typically operates within the context of spell handling and is often
    used in conjunction with other aura-related methods to manage complex spell effects.
  parameters:
  - name: spellId
    description: The ID of the spell whose aura stack count is being modified. This
      represents the specific spell that will have its stack updated.
  - name: target
    description: The unit on which the aura is applied. This parameter specifies the
      target unit where the aura will be modified, typically a player or NPC.
  - name: stack
    description: The new stack count value to set for the specified aura. This determines
      how many times the spell effect will appear on the target unit.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* target = player;

      uint32 spellId = 12345;

      uint32 stack = 3;

      unit->SetAuraStack(spellId, target, stack);'
    language: cpp
  - title: Advanced Usage Example
    code: '// Assuming we have a unit pointer and want to update multiple auras

      Unit* target = player;

      uint32 spellId = 12345;

      uint32 stack = 5;

      unit->SetAuraStack(spellId, target, stack);

      // This would set the aura to appear 5 times on the target unit'
    language: cpp
  notes: This method is part of the broader aura management system in TrinityCore
    and should be used carefully when modifying existing auras. It is typically invoked
    during spell application or modification processes, and may require careful handling
    to avoid unintended side effects in gameplay mechanics.
  warnings: Improper use of this method can lead to incorrect aura stacking behavior,
    potentially causing issues with spell effects such as damage over time or buff
    stacking. Care must be taken when setting stack values to ensure they align with
    game balance requirements.
  related:
  - GetAuraStack
  - AddAura
  - RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T01:32:26.767287'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
