api:
  class: Map
  method: UnloadAll
  signature: void Map::UnloadAll()
documentation:
  brief: Unloads all data and resources associated with the map, freeing memory and
    cleaning up internal structures.
  description: The UnloadAll method is responsible for completely unloading all data
    and resources related to a specific map instance. This includes removing all loaded
    grid data, clearing object caches, and freeing memory allocated for the map's
    terrain and game objects. The method ensures that all references to map-related
    data are properly cleaned up, making it safe to destroy or reuse the map container.
    It is typically called when a map needs to be destroyed or reloaded, such as during
    server shutdown, map transitions, or when switching between different game zones.
    This operation is crucial for maintaining memory efficiency and preventing resource
    leaks in the TrinityCore server environment.
  parameters: []
  returns: null
  examples:
  - title: Basic Map Unloading
    code: "Map* map = sMapMgr->FindMap(0, 0);\nif (map)\n{\n    map->UnloadAll();\n\
      \    // Map is now unloaded and ready for cleanup\n}"
    language: cpp
  - title: Unloading All Maps in a Zone
    code: "for (uint32 i = 0; i < MAX_MAPS; ++i)\n{\n    Map* map = sMapMgr->FindMap(i,\
      \ 0);\n    if (map)\n        map->UnloadAll();\n}"
    language: cpp
  notes: This method should only be called when it's safe to unload the map, as any
    active references to objects within the map will become invalid after calling
    this function. The method is typically thread-safe in the context of map management
    but may require synchronization if multiple threads are accessing the same map
    instance. Performance-wise, this operation can be expensive as it involves cleaning
    up potentially large amounts of data and may block until all cleanup operations
    complete.
  warnings: Calling UnloadAll on a map that still has active players or creatures
    will result in undefined behavior and potential crashes. Always ensure that all
    references to the map's objects are cleared before calling this method. This function
    should not be called from within object update loops or other critical sections
    where the map might be accessed concurrently.
  related:
  - Map::Load
  - Map::IsLoaded
  - Map::GetId
  - Map::GetDifficulty
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T10:50:28.460285'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
