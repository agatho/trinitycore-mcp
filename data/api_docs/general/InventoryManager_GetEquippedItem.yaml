api:
  class: InventoryManager
  method: GetEquippedItem
  signature: Item * InventoryManager::GetEquippedItem(uint8 slot) const
documentation:
  brief: Retrieves the item currently equipped in the specified inventory slot.
  description: The GetEquippedItem method returns a pointer to the Item object that
    is currently equipped in the given inventory slot. This method is commonly used
    in player inventory management and item handling systems within TrinityCore. It
    performs a lookup in the player's equipped items array using the provided slot
    index. The method does not validate the slot parameter, so calling it with an
    invalid slot index may result in undefined behavior or return a null pointer.
    The returned Item pointer can be used to access item properties such as GUID,
    entry ID, stack count, and enchantments.
  parameters: []
  returns: A pointer to the Item object currently equipped in the specified slot,
    or nullptr if no item is equipped in that slot or if the slot index is invalid.
  examples:
  - title: Basic Usage
    code: "Item* mainHandWeapon = inventoryManager->GetEquippedItem(EQUIPMENT_SLOT_MAINHAND);\n\
      if (mainHandWeapon)\n{\n    // Item is equipped, access its properties\n   \
      \ uint32 itemId = mainHandWeapon->GetEntry();\n    uint32 stackCount = mainHandWeapon->GetStackCount();\n\
      }"
    language: cpp
  - title: Checking for Equipped Items
    code: "for (uint8 slot = EQUIPMENT_SLOT_START; slot < EQUIPMENT_SLOT_END; ++slot)\n\
      {\n    Item* item = inventoryManager->GetEquippedItem(slot);\n    if (item)\n\
      \    {\n        // Process equipped item\n        sLog->outString(\"Slot %u:\
      \ Item ID %u\", slot, item->GetEntry());\n    }\n}"
    language: cpp
  notes: This method accesses the player's equipped items directly from memory. It
    is recommended to check if the returned pointer is not null before using it to
    avoid segmentation faults. The method assumes valid slot indices and does not
    perform bounds checking.
  warnings: Calling this method with an invalid slot index (outside of the valid equipment
    slot range) may lead to accessing invalid memory locations or returning unexpected
    results. Always validate slot indices when working with this method in custom
    code.
  related:
  - GetItemByPos
  - GetEquippedItemForSlot
  - SetGuidValue
  - AddItem
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T12:15:39.182318'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
