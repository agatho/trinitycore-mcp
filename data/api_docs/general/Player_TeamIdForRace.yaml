api:
  class: Player
  method: TeamIdForRace
  signature: int Player::TeamIdForRace(uint8 race)
documentation:
  brief: Returns the team identifier associated with a specific race in World of Warcraft.
  description: The TeamIdForRace method retrieves the unique team identifier (ID)
    that corresponds to a given player race within the TrinityCore framework. This
    function is essential for determining which faction (Alliance or Horde) a player
    belongs to based on their race, as each race is associated with a specific team
    ID. The method is typically used in conjunction with other game mechanics related
    to faction and team management, such as determining player starting zones, quest
    rewards, and character creation options. It serves as a lookup mechanism for race-specific
    team assignments and is crucial for maintaining proper game balance and gameplay
    logic.
  parameters:
  - name: race
    description: The player race identifier (uint8) for which to retrieve the team
      ID. Valid values include 1 through 10, representing different races such as
      Human, Dwarf, Gnome, Night Elf, Undead, Tauren, Troll, Blood Elf, Draenei, and
      Worgen.
  returns: Returns an integer representing the team ID associated with the specified
    race. The return value can be 0 for Alliance (Human, Dwarf, Gnome, Night Elf,
    Draenei), 1 for Horde (Undead, Tauren, Troll, Blood Elf, Worgen), or -1 for invalid
    races. The method returns -1 when the input race is not valid or recognized within
    the game system.
  examples:
  - title: Basic Usage Example
    code: 'int teamId = player->TeamIdForRace(1); // Returns 0 for Human

      int teamId = player->TeamIdForRace(7); // Returns 1 for Undead'
    language: cpp
  - title: Advanced Usage Example
    code: "uint8 race = player->getRace();\nint teamId = player->TeamIdForRace(race);\n\
      if (teamId == 0) {\n    // Player belongs to Alliance\n} else if (teamId ==\
      \ 1) {\n    // Player belongs to Horde\n}\n// Handle team logic accordingly"
    language: cpp
  notes: This method is part of the core player class functionality and relies on
    internal race-to-team mapping tables. It should be used carefully as it may affect
    game balance and faction-related mechanics. The method does not perform any validation
    checks on the input race value, so developers must ensure valid race values are
    passed to avoid unexpected results.
  warnings: The method returns -1 for invalid or unrecognized races, which could lead
    to incorrect faction assignment if not handled properly in code logic. Developers
    should always validate race inputs before calling this method to prevent unexpected
    behavior.
  related:
  - Player::GetRace
  - Player::GetTeamId
  - Player::GetFaction
  - Player::GetTeam
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:22:50.157108'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
