api:
  class: Creature
  method: Creature
  signature: void Creature::Creature(bool isWorldObject)
documentation:
  brief: Initializes a Creature object with optional world object flag.
  description: The Creature constructor initializes a new Creature instance, setting
    up its basic properties and internal state. The isWorldObject parameter determines
    whether this creature should be treated as a world object within the game environment,
    affecting how it interacts with the server's object management systems. This constructor
    is typically called internally by the TrinityCore framework when spawning creatures
    from database entries or through scripting APIs. The initialization process includes
    setting up the creature's GUID, health, mana, and other core attributes based
    on its template definition.
  parameters:
  - name: isWorldObject
    description: Boolean flag indicating whether this creature should be treated as
      a world object. When true, the creature is registered with the world object
      system and participates in world updates and visibility calculations. When false,
      it's treated more like a temporary or special-purpose object.
  returns: null
  examples:
  - title: Basic Creature Construction
    code: 'Creature* myCreature = new Creature(true);

      // This creates a creature that will be managed as a world object

      // and will participate in normal world updates and visibility checks.'
    language: cpp
  - title: Creating Non-World Object Creature
    code: 'Creature* temporaryCreature = new Creature(false);

      // This creates a creature that won''t be registered with the world object system

      // Useful for temporary or special-purpose creatures that don''t need regular
      updates.'
    language: cpp
  notes: This constructor is typically not called directly by user code. Instead,
    creatures are usually created through factory methods like Creature::CreateFromDB()
    or via scripting APIs such as GameEventMgr::CreateCreature(). The isWorldObject
    flag affects memory management and update scheduling within the server's object
    manager system.
  warnings: Direct instantiation of Creature objects should be avoided in most cases.
    Improper use of this constructor can lead to memory leaks or inconsistent object
    states. Always ensure proper cleanup when creating creatures manually, especially
    when isWorldObject is set to true.
  related:
  - Creature::CreateFromDB
  - Creature::LoadFromDB
  - Creature::Update
  - Creature::AddToWorld
  - Creature::RemoveFromWorld
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T21:01:20.458509'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
