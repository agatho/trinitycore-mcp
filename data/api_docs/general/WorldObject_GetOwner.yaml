api:
  class: WorldObject
  method: GetOwner
  signature: Unit * WorldObject::GetOwner() const
documentation:
  brief: Returns the owner of this WorldObject if it has one, otherwise returns nullptr.
  description: The GetOwner method retrieves the Unit that owns this WorldObject.
    In World of Warcraft terms, this typically applies to creatures, game objects,
    or dynamic objects that are controlled by a specific unit such as a player or
    creature. For example, a pet will have its owner set to the player who summoned
    it, and a vehicle may have an owner that is the player controlling it. The method
    performs no validation on the returned pointer and assumes the object's ownership
    has been properly initialized. This method is commonly used in AI scripts, combat
    systems, and object interaction logic where knowing the owner of an object is
    necessary for proper behavior.
  parameters: []
  returns: A pointer to the Unit that owns this WorldObject, or nullptr if no owner
    is set. The returned pointer is valid only as long as the owner unit exists in
    memory.
  examples:
  - title: Basic usage to check for object ownership
    code: "Unit* owner = worldObject->GetOwner();\nif (owner)\n{\n    // Object has\
      \ an owner, proceed with owner-specific logic\n    sLog->outString(\"Object\
      \ is owned by: %s\", owner->GetName().c_str());\n}\nelse\n{\n    // No owner\
      \ set\n    sLog->outString(\"Object has no owner\");\n}"
    language: cpp
  - title: Using owner in combat logic
    code: "Unit* owner = unit->GetOwner();\nif (owner && owner->IsPlayer())\n{\n \
      \   Player* player = owner->ToPlayer();\n    // Apply player-specific behavior\
      \ or restrictions\n    if (player->HasAura(12345)) // Example aura check\n \
      \   {\n        // Modify combat behavior based on owner's state\n        unit->SetReactState(REACT_AGGRESSIVE);\n\
      \    }\n}"
    language: cpp
  notes: This method is commonly used in conjunction with dynamic object management
    and pet AI. The returned Unit pointer should not be stored for extended periods
    as the owner may be destroyed or removed from the world, leading to dangling pointers.
    It's recommended to use this method only when immediate access to the owner is
    required.
  warnings: Do not assume that a non-null return value means the owner is still valid
    or in the same map. Always verify the owner's existence and state before using
    it. Also, be cautious with objects that may have multiple owners or temporary
    ownership states (e.g., summoned creatures).
  related:
  - GetOwnerGuid
  - SetOwner
  - IsOwnedBy
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:51:27.606139'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
