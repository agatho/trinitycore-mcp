api:
  class: Map
  method: ProcessRelocationNotifies
  signature: void Map::ProcessRelocationNotifies(const uint32 diff)
documentation:
  brief: Processes relocation notifications for objects within the map
  description: The ProcessRelocationNotifies method handles the updating of object
    positions and visibility states across the map. It iterates through all relevant
    objects in the map and processes their relocation events, ensuring that players
    and creatures are properly notified of changes in their surroundings. This method
    is typically called during the map's update cycle to maintain accurate spatial
    awareness and object visibility for clients. The method uses the provided time
    delta to determine how much time has passed since the last update, which affects
    how relocation events are processed.
  parameters:
  - name: diff
    description: The time difference in milliseconds since the last call to this method.
      This value is used to calculate movement and update timing for relocated objects.
  returns: null
  examples:
  - title: Basic usage in map update loop
    code: "void Map::Update(const uint32 diff)\n{\n    // ... other update logic ...\n\
      \    ProcessRelocationNotifies(diff);\n    // ... more update logic ...\n}"
    language: cpp
  - title: Integration with player movement handling
    code: "void Player::Update(const uint32 diff)\n{\n    // ... movement logic ...\n\
      \    if (m_map)\n        m_map->ProcessRelocationNotifies(diff);\n}"
    language: cpp
  notes: This method is crucial for maintaining proper client-side visibility and
    positioning of objects in the game world. It's typically called from within the
    map's main update loop, and performance is important as it may be called frequently.
    The method handles both player and creature relocation events, ensuring that all
    nearby players are notified when objects move or change their visibility state.
  warnings: This method should not be called outside of the normal update cycle as
    it relies on consistent timing and object states. Improper usage could lead to
    incorrect positioning or visibility issues for players and creatures in the game
    world.
  related:
  - Map::Update
  - Map::AddPlayer
  - Map::RemovePlayer
  - WorldObject::UpdatePosition
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:46:47.115404'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
