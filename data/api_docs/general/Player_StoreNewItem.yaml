api:
  class: Player
  method: StoreNewItem
  signature: Item * Player::StoreNewItem(const ItemPosCountVec & pos, uint32 itemId,
    bool update, int randomBonusListId, const int & allowedLooters, int context, const
    int * bonusListIDs, bool addToCollection)
documentation:
  brief: Stores a new item in the player's inventory, updating the item's properties
    and handling random bonuses.
  description: The StoreNewItem method is used to add a new item to a player's inventory,
    with support for various item properties including random bonus lists and loot
    context. It handles item creation, updates, and distribution within the player's
    inventory while respecting game mechanics such as item stacking and slot restrictions.
    The method can be used to create items with specific random bonuses or to simply
    add items to the inventory without updating them.
  parameters:
  - name: pos
    description: A vector of ItemPosCount structures specifying where to place the
      item in the inventory, including slot and count information
  - name: itemId
    description: The ID of the item to be created, representing a specific item template
      from the game database
  - name: update
    description: Boolean flag indicating whether to update the item's properties (stats,
      enchantments) or leave them as-is
  - name: randomBonusListId
    description: The ID of the random bonus list to apply to the item, determining
      the type and quality of random properties
  - name: allowedLooters
    description: The number of players allowed to loot this item, used for loot context
      tracking
  - name: context
    description: The loot context identifier that determines how the item was obtained
      (e.g., from quest, creature, etc.)
  - name: bonusListIDs
    description: Pointer to an array of bonus list IDs for additional item properties
      and modifiers
  - name: addToCollection
    description: Boolean flag indicating whether to add the item to the player's collection
      (achievement tracking)
  returns: Returns a pointer to the created Item object, or nullptr if the item creation
    failed due to inventory constraints or invalid parameters.
  examples:
  - title: Basic Item Creation
    code: Item *item = player->StoreNewItem(pos, 12345, true, 0, 1, 0, nullptr, false);
    language: cpp
  - title: Advanced Item with Random Bonuses
    code: Item *item = player->StoreNewItem(pos, 12345, true, 1234, 1, 10, &bonusListIDs[0],
      true);
    language: cpp
  notes: The method internally handles item creation using the Item::Create function
    and updates inventory slots accordingly. It supports multiple item types including
    weapons, armor, and consumables. The method respects inventory slot limits and
    can handle both stackable and non-stackable items.
  warnings: This method should not be used for items that are already in the player's
    inventory; it will create duplicate items if used incorrectly. The randomBonusListId
    parameter must match valid bonus list IDs from the database or it may result in
    invalid item properties.
  related:
  - StoreItem
  - CreateItem
  - AddItem
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:26:15.897828'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
