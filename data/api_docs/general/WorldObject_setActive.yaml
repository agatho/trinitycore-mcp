api:
  class: WorldObject
  method: setActive
  signature: void WorldObject::setActive(bool isActiveObject)
documentation:
  brief: Sets the active state of a WorldObject to determine whether it should be
    updated or not.
  description: The setActive method controls the active status of a WorldObject, which
    determines whether the object should be processed during game updates. When set
    to true, the object is considered active and will be updated; when set to false,
    it's inactive and won't be updated. This method is crucial for managing object
    lifecycle in TrinityCore's game world system, particularly for objects like creatures
    or players that may need to be temporarily disabled or enabled based on game state.
    The method affects the object's behavior during server tick processing and can
    influence performance by reducing unnecessary updates for inactive objects.
  parameters:
  - name: isActiveObject
    description: A boolean value indicating whether the WorldObject should be active
      (true) or inactive (false).
  returns: null
  examples:
  - title: Basic usage example
    code: 'WorldObject* object = new WorldObject();

      object->setActive(true);

      // Object is now active and will be updated'
    language: cpp
  - title: Setting inactive state for a creature
    code: 'Creature* creature = new Creature();

      creature->setActive(false);

      // Creature is now inactive and won''t be updated'
    language: cpp
  notes: This method directly affects the object's update behavior in the game world.
    It should be used carefully as changing the active state can impact performance
    and may cause issues if not properly managed during object lifecycle. The method
    is typically called during initialization or when objects need to be temporarily
    disabled for gameplay mechanics.
  warnings: Improper use of setActive can lead to objects being updated when they
    shouldn't be, causing performance issues or unexpected behavior. Care should be
    taken when setting active state during update cycles as it may cause race conditions
    if not properly synchronized.
  related:
  - getActive
  - IsInWorld
  - Update
  - SetPhaseMask
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:29:28.706832'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
