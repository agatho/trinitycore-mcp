api:
  class: SpellMgr
  method: GetSpellTargetPositions
  signature: int SpellMgr::GetSpellTargetPositions(uint32 spell_id, int effIndex)
    const
documentation:
  brief: Retrieves the number of target positions associated with a specified spell
    and effect index.
  description: The GetSpellTargetPositions method retrieves the count of target positions
    defined for a given spell ID and effect index. This is typically used in spell
    processing to determine how many destination points are specified for effects
    like area-of-effect spells or teleports. The method accesses internal spell data
    structures within the SpellMgr class, which stores information about all spells
    in the game database. It returns an integer representing the number of target
    positions, or zero if no positions are defined or if the spell/effect index is
    invalid. This functionality is crucial for proper spell targeting and positioning
    logic in TrinityCore's spell system.
  parameters:
  - name: spell_id
    description: The unique identifier of the spell to query for target positions
  - name: effIndex
    description: The effect index within the spell to retrieve target positions for
      (typically 0-2 for main effects)
  returns: Returns an integer representing the number of target positions defined
    for the specified spell and effect index. Returns 0 if no positions are defined,
    or if the spell_id or effIndex is invalid.
  examples:
  - title: Basic usage to check spell target positions
    code: "uint32 spellId = 12345;\nint effectIndex = 0;\nint positionCount = sSpellMgr->GetSpellTargetPositions(spellId,\
      \ effectIndex);\nif (positionCount > 0)\n{\n    // Spell has defined target\
      \ positions\n    printf(\"Spell %u has %d target positions\\n\", spellId, positionCount);\n\
      }\nelse\n{\n    // No target positions defined\n    printf(\"Spell %u has no\
      \ target positions\\n\", spellId);\n}"
    language: cpp
  - title: Using with spell targeting logic
    code: "void ProcessSpellTargeting(uint32 spellId)\n{\n    for (int i = 0; i <\
      \ 3; ++i) // Check all possible effect indices\n    {\n        int posCount\
      \ = sSpellMgr->GetSpellTargetPositions(spellId, i);\n        if (posCount >\
      \ 0)\n        {\n            printf(\"Effect %d of spell %u has %d target positions\\\
      n\", i, spellId, posCount);\n            // Proceed with positioning logic\n\
      \        }\n    }\n}"
    language: cpp
  notes: This method accesses internal spell data structures and should only be called
    after the spell system is fully initialized. The returned value represents the
    number of target positions, not the actual position coordinates themselves. This
    method does not validate whether the spell or effect index actually exists in
    the database - it simply returns what's stored in memory.
  warnings: Be cautious when using this method with invalid spell IDs or effect indices
    as it may return unexpected values. The method assumes that the spell system has
    been properly loaded and initialized before calling. This method should not be
    used during spell loading phases as data might not be fully populated yet.
  related:
  - GetSpellInfo
  - GetSpellEffect
  - GetSpellTargetPosition
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:12:43.470373'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
