api:
  class: SpellMgr
  method: AssertSpellInfo
  signature: const SpellInfo * SpellMgr::AssertSpellInfo(uint32 spellId, Difficulty
    difficulty) const
documentation:
  brief: Retrieves spell information for a given spell ID and difficulty, asserting
    that the spell exists.
  description: The AssertSpellInfo method retrieves the SpellInfo structure for a
    specified spell ID and difficulty level. This method is used internally by the
    TrinityCore server to access detailed spell data required for spell execution,
    validation, and game mechanics processing. It performs an assertion to ensure
    that the requested spell information actually exists in the database or spell
    storage. If the spell ID does not correspond to any valid spell entry, the method
    will trigger an assertion failure, which typically results in a crash or debug
    halt during development. The difficulty parameter allows for retrieving different
    spell data based on game difficulty settings (normal, heroic, etc.), which is
    crucial for handling spells that behave differently across difficulty levels.
    This method should only be called with valid spell IDs and difficulty values to
    avoid runtime errors.
  parameters: []
  returns: A pointer to the SpellInfo structure containing detailed information about
    the specified spell. Returns nullptr if the spell ID or difficulty combination
    is invalid, though this behavior may trigger an assertion failure in debug builds.
  examples:
  - title: Basic usage to retrieve spell info
    code: "const SpellInfo* spellInfo = sSpellMgr->AssertSpellInfo(12345, DIFFICULTY_NORMAL);\n\
      if (spellInfo)\n{\n    // Use spellInfo for spell processing\n    printf(\"\
      Spell name: %s\\n\", spellInfo->SpellName);\n}"
    language: cpp
  - title: Using with difficulty-specific spell data
    code: "const SpellInfo* heroicSpell = sSpellMgr->AssertSpellInfo(67890, DIFFICULTY_HEROIC);\n\
      const SpellInfo* normalSpell = sSpellMgr->AssertSpellInfo(67890, DIFFICULTY_NORMAL);\n\
      \n// Compare spell effects between difficulties\nif (heroicSpell && normalSpell)\n\
      {\n    // Process differences in spell behavior\n}"
    language: cpp
  notes: This method should only be used when you are certain that the spell ID exists
    and is valid. In production builds, invalid spell IDs may cause undefined behavior
    or crashes. The method performs internal validation and assertion checks to ensure
    data integrity. It's primarily intended for internal TrinityCore systems rather
    than general addon or module usage.
  warnings: Using this method with invalid spell IDs will likely result in assertion
    failures during development or debug builds. Do not use this method without verifying
    that the spell ID exists in the database. In release builds, incorrect usage may
    lead to crashes or memory corruption.
  related:
  - GetSpellInfo
  - IsSpellValid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T21:07:51.576679'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
