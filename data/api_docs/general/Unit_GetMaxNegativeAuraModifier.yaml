api:
  class: Unit
  method: GetMaxNegativeAuraModifier
  signature: int32 Unit::GetMaxNegativeAuraModifier(int auraType, const int & predicate)
    const
documentation:
  brief: Returns the maximum negative aura modifier value for a specified aura type.
  description: This method retrieves the highest negative modifier value applied to
    a specific aura type on the unit. It is commonly used in game mechanics to determine
    the effectiveness of negative effects such as debuffs or penalties. The method
    evaluates all applicable negative modifiers and returns the maximum value found,
    which can be useful for calculating damage reduction, stat penalties, or other
    gameplay effects that depend on negative aura modifiers. This function is typically
    used in conjunction with other aura-related methods to assess overall unit vulnerability
    to negative effects.
  parameters:
  - name: auraType
    description: The type of aura to evaluate for negative modifiers. This parameter
      specifies which aura type to check, such as aura type 1, aura type 2, etc. The
      value corresponds to a specific aura type in the game mechanics.
  - name: predicate
    description: A reference to a predicate function that determines whether a modifier
      should be considered. This parameter allows for filtering based on specific
      conditions or criteria, such as whether the modifier is applied to a certain
      spell or effect.
  returns: Represents the maximum negative aura modifier value found for the specified
    aura type, or -1 if no applicable modifiers are found. The return value indicates
    the highest negative modifier that can be applied to the given aura type.
  examples:
  - title: Basic Usage Example
    code: "int32 maxModifier = unit->GetMaxNegativeAuraModifier(SPELL_AURA_1, predicate);\n\
      if (maxModifier > 0)\n{\n    // Process negative modifier\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "int32 maxModifier = unit->GetMaxNegativeAuraModifier(SPELL_AURA_1, [](int32\
      \ modifier) {\n    return modifier < 0;\n});\n// Use the result in calculations\n"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine overall unit vulnerability. It may involve performance considerations
    when evaluating multiple aura types, especially in complex situations involving
    many modifiers. Thread safety depends on the implementation of the predicate function
    and the underlying data structures.
  warnings: Care should be taken when using this method as it may return -1 if no
    applicable modifiers are found, which could lead to incorrect calculations if
    not properly handled. The predicate parameter must be carefully defined to avoid
    unexpected behavior or performance issues.
  related:
  - GetMaxPositiveAuraModifier
  - GetAuraType
  - GetAuraModifier
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T13:04:25.272216'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
