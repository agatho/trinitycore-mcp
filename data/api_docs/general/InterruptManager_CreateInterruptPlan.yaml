api:
  class: InterruptManager
  method: CreateInterruptPlan
  signature: InterruptPlan InterruptManager::CreateInterruptPlan(const InterruptTarget
    & target)
documentation:
  brief: Creates and returns a new interrupt plan for the specified target.
  description: The CreateInterruptPlan method generates a new InterruptPlan object
    tailored for a given InterruptTarget. This plan defines how an AI or system should
    handle interrupting actions or spells targeting the specified entity. The method
    likely initializes internal state, sets up timing parameters, and configures interrupt
    priorities based on the target's properties and current context. It is typically
    used in combat AI systems where strategic interruption of enemy actions is required
    for tactical advantage.
  parameters:
  - name: target
    description: The InterruptTarget object that specifies which entity or action
      should be interrupted. This parameter defines the scope and context of the interrupt
      plan being created.
  returns: An InterruptPlan object representing a configured interrupt strategy for
    the specified target. The returned plan can be used to execute or modify interrupt
    behavior during gameplay.
  examples:
  - title: Basic Usage
    code: 'InterruptTarget target;

      target.SetUnit(targetUnit);

      InterruptPlan plan = interruptManager.CreateInterruptPlan(target);

      // Use plan to manage interrupt behavior'
    language: cpp
  - title: Combat AI Integration
    code: "Unit* enemy = GetEnemy();\nInterruptTarget target;\ntarget.SetUnit(enemy);\n\
      InterruptPlan plan = interruptManager.CreateInterruptPlan(target);\n// Apply\
      \ plan to interrupt enemy's spell casting\nif (plan.IsValid()) {\n    // Execute\
      \ interrupt logic\n}"
    language: cpp
  notes: This method likely performs initialization of internal data structures and
    may cache or precompute values based on the target's current state. The returned
    InterruptPlan should be checked for validity before use, as invalid targets might
    result in an empty or unusable plan.
  warnings: Ensure that the InterruptTarget provided is valid and properly initialized
    before calling this method. Passing an uninitialized or invalid target may lead
    to undefined behavior or failed interrupt planning.
  related:
  - GetInterruptPlan
  - UpdateInterruptPlan
  - ExecuteInterruptPlan
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T00:06:48.233848'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
