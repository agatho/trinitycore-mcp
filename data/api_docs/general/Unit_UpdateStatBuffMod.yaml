api:
  class: Unit
  method: UpdateStatBuffMod
  signature: void Unit::UpdateStatBuffMod(int stat)
documentation:
  brief: Updates the specified stat buff modifier for the unit.
  description: The UpdateStatBuffMod method recalculates and applies any stat modifiers
    that affect the specified stat for the unit. This method is typically called when
    stat-related auras or buffs are applied, removed, or modified. It ensures that
    the unit's effective stats reflect all current buff/debuff effects. The method
    iterates through active auras and updates the stat value accordingly, maintaining
    internal stat tracking for performance optimization. This function is part of
    TrinityCore's core stat management system and is automatically invoked during
    aura application/removal events.
  parameters:
  - name: stat
    description: The stat index to update. Valid values are defined by the Stats enum,
      typically ranging from 0 (STAT_STRENGTH) to 5 (STAT_SPIRIT). This parameter
      determines which specific stat will have its buff modifiers recalculated and
      applied.
  returns: null
  examples:
  - title: Update Strength Stat Buff Modifiers
    code: 'Unit* player = ...;

      player->UpdateStatBuffMod(STAT_STRENGTH);'
    language: cpp
  - title: Update All Stats After Aura Change
    code: "Unit* unit = ...;\nfor (int i = 0; i < MAX_STATS; ++i)\n{\n    unit->UpdateStatBuffMod(i);\n\
      }"
    language: cpp
  notes: This method is typically invoked internally by the aura system when stat-modifying
    effects are applied or removed. It's important to note that this function doesn't
    directly modify the base stat value, but rather recalculates the total effective
    stat including all modifiers. The method may trigger additional recalculations
    for dependent stats (e.g., updating attack power when strength changes).
  warnings: Calling this method directly without proper aura management can lead to
    incorrect stat calculations. It should generally be used only in specific circumstances
    where manual stat recalculation is required, as the system usually handles this
    automatically through the aura application/removal process.
  related:
  - GetStat
  - SetStat
  - AddAura
  - RemoveAura
  - UpdateStats
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T16:16:14.279296'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
