api:
  class: Unit
  method: RemoveAura
  signature: void Unit::RemoveAura(Aura * aur, int mode)
documentation:
  brief: Removes a specified aura from the unit's aura list.
  description: The RemoveAura method removes a specific aura from the unit's aura
    list, effectively ending the aura's effect on the unit. This method is commonly
    used in game mechanics to handle spell effects, debuffs, and buffs that are no
    longer active. The method takes an Aura pointer and an optional mode parameter,
    which determines how the aura removal is handled. It can be used for both active
    and passive auras, and typically involves removing the aura from the unit's application
    list and notifying relevant systems about the change.
  parameters:
  - name: aur
    description: Pointer to the Aura object that needs to be removed from the unit.
      This represents the specific aura being removed.
  - name: mode
    description: Optional integer parameter that specifies how the aura removal should
      be handled. The mode determines whether the aura is removed in a specific way,
      such as by removing it from the unit's application list or by triggering certain
      events related to the aura's removal.
  returns: null
  examples:
  - title: Basic Aura Removal Example
    code: "Unit* target = player;\nAura* aura = target->GetAura(12345);\nif (aura)\n\
      {\n    target->RemoveAura(aura, 0);\n}"
    language: cpp
  - title: Advanced Aura Removal with Mode
    code: "Unit* target = player;\nAura* aura = target->GetAura(12345);\nif (aura)\n\
      {\n    target->RemoveAura(aura, 1);\n}"
    language: cpp
  notes: This method is typically used in conjunction with other methods like AddAura
    or GetAura to manage the lifecycle of auras on a unit. It may involve internal
    checks for validity and can be used in both player and NPC contexts. The removal
    process might trigger callbacks or notifications in the game system, especially
    when dealing with active effects.
  warnings: Improper use of RemoveAura can lead to incorrect aura removals or even
    crashes if the Aura pointer is invalid or null. Developers should ensure that
    the Aura being removed is valid before calling this method. Also, it's important
    to note that removing an aura might not always be immediate, as some auras may
    have delayed effects or may need to be handled in specific ways depending on the
    mode.
  related:
  - AddAura
  - GetAura
  - HasAura
  - Aura::Remove
  - Unit::RemoveAuraFromWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:45:15.847718'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
