api:
  class: Unit
  method: IsSummon
  signature: bool Unit::IsSummon() const
documentation:
  brief: Determines whether the unit is a summon.
  description: This method checks if the current Unit object represents a summoned
    creature or pet. It returns true if the unit is a summon, false otherwise. The
    method is commonly used in game mechanics to distinguish between player-controlled
    summons and regular units. This functionality is essential for determining the
    ownership and behavior of summoned creatures within the TrinityCore framework.
  parameters: []
  returns: Returns true if the unit is a summon, false otherwise. The return value
    indicates whether the unit represents a summoned creature or pet rather than a
    regular unit.
  examples:
  - title: Basic usage example
    code: "if (unit->IsSummon()) {\n    // Handle summon logic\n}"
    language: cpp
  notes: 'Implementation details: This method relies on internal flags and properties
    that indicate whether a unit is a summoned. Performance considerations: The method
    should be used sparingly in performance-critical code sections as it involves
    checking internal state flags.'
  warnings: This method should not be used to determine ownership of summoned units;
    instead, use the IsPlayer() or IsCreature() methods to distinguish between different
    unit types.
  related:
  - IsPlayer
  - IsCreature
  - IsPet
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T11:53:38.973265'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
