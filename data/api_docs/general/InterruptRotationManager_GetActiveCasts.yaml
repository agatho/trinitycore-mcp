api:
  class: InterruptRotationManager
  method: GetActiveCasts
  signature: const int & InterruptRotationManager::GetActiveCasts() const
documentation:
  brief: Returns the count of currently active casts managed by the interrupt rotation
    manager
  description: The GetActiveCasts method retrieves the number of ongoing spell casts
    that are being tracked by this interrupt rotation manager instance. This is typically
    used in AI systems to determine how many spells are currently in progress and
    may need interruption or management. The returned value represents a snapshot
    of the current state at the time of the call, and it's intended for use in decision-making
    logic within combat routines. This method does not modify any internal state and
    is safe to call during active gameplay scenarios.
  parameters: []
  returns: A constant reference to an integer representing the number of currently
    active casts managed by this interrupt rotation manager instance. The value will
    be zero or greater, with negative values indicating an error condition if such
    a case were possible in the implementation.
  examples:
  - title: Basic Usage in AI Logic
    code: "if (rotationManager.GetActiveCasts() > 0)\n{\n    // Handle interrupt logic\n\
      \    // e.g., check for interrupts or wait for casts to finish\n}"
    language: cpp
  - title: Using Active Cast Count for Decision Making
    code: "int activeCasts = rotationManager.GetActiveCasts();\nif (activeCasts ==\
      \ 0)\n{\n    // No active casts, safe to start new spell\n    player.CastSpell(spellId);\n\
      }\nelse if (activeCasts < 3)\n{\n    // Limited active casts, consider interrupting\
      \ or waiting\n    DoInterruptLogic();\n}"
    language: cpp
  notes: This method returns a constant reference to an internal integer member variable,
    which means the returned value should not be modified directly. The implementation
    assumes that the internal cast counter is properly maintained by other methods
    within the class. Performance-wise, this is a very fast operation as it simply
    returns a cached value without any complex calculations or database lookups.
  warnings: Be aware that the returned reference points to an internal member variable,
    so modifying the returned value directly will modify the internal state of the
    manager. Also, since this returns a snapshot in time, concurrent modifications
    by other threads during execution could result in inconsistent behavior if thread
    safety is not properly handled elsewhere in the system.
  related:
  - SetActiveCasts
  - AddActiveCast
  - RemoveActiveCast
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:22:55.282994'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
