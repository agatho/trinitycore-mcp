api:
  class: PersistentInstanceScriptValueBase
  method: LoadValue
  signature: void PersistentInstanceScriptValueBase::LoadValue(double value)
documentation:
  brief: Loads a double precision floating-point value into the persistent instance
    script value base.
  description: The LoadValue method is used to initialize or update a stored double
    precision floating-point value within a PersistentInstanceScriptValueBase object.
    This method typically serves as part of the data persistence mechanism in TrinityCore's
    instance scripting system, allowing scripts to maintain state information across
    different events or reloads. The loaded value can be retrieved later using corresponding
    getter methods and is often used for tracking dynamic values such as timers, health
    percentages, or other numeric game state variables that need to persist through
    instance resets or server restarts.
  parameters:
  - name: value
    description: The double precision floating-point value to be loaded and stored
      within the persistent instance script value base. This parameter represents
      the actual data being set, which could be any valid numeric value including
      integers, decimals, or special values like NaN or infinity.
  returns: null
  examples:
  - title: Basic Value Loading
    code: 'PersistentInstanceScriptValueBase* scriptValue = new PersistentInstanceScriptValueBase();

      scriptValue->LoadValue(42.5);

      // The value 42.5 is now stored in the instance script value base'
    language: cpp
  - title: Loading Timer Value
    code: "class MyInstanceScript : public InstanceScript\n{\npublic:\n    void SetBossTimer(float\
      \ timer)\n    {\n        m_bossTimerValue.LoadValue(static_cast<double>(timer));\n\
      \    }\nprivate:\n    PersistentInstanceScriptValueBase m_bossTimerValue;\n\
      };"
    language: cpp
  notes: This method is typically used in conjunction with other persistent storage
    mechanisms within TrinityCore's instance scripting framework. It should be called
    during initialization or when updating state values, and the value will persist
    across instance resets unless explicitly cleared. The implementation may involve
    serialization to database or memory storage depending on how the base class is
    designed.
  warnings: Ensure that the value being loaded is appropriate for the context in which
    it's used, as incorrect numeric values could lead to unexpected behavior in game
    mechanics. Be cautious when loading very large or small floating-point numbers
    that might lose precision during conversion or storage operations.
  related:
  - SaveValue
  - GetValue
  - ClearValue
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T21:15:43.213923'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
