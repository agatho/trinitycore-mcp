api:
  class: WorldObject
  method: GetSpellMaxRangeForTarget
  signature: float WorldObject::GetSpellMaxRangeForTarget(const Unit * target, const
    SpellInfo * spellInfo) const
documentation:
  brief: Calculates the maximum range of a spell for a given target unit.
  description: The GetSpellMaxRangeForTarget method computes the maximum effective
    range of a specified spell when targeting a particular unit. This calculation
    takes into account various factors such as the spell's base range, the target's
    size, and any applicable modifiers. The result is returned in yards as a floating-point
    value. This method is commonly used during spell casting validation to ensure
    that the caster is within acceptable range of their intended target.
  parameters:
  - name: target
    description: Pointer to the Unit object representing the target of the spell.
      Must not be null for valid calculations.
  - name: spellInfo
    description: Pointer to the SpellInfo structure containing information about the
      spell being cast. Must not be null for valid calculations.
  returns: A float value representing the maximum range (in yards) of the spell for
    the given target. Returns 0.0f if either parameter is invalid or if the spell
    has no defined maximum range.
  examples:
  - title: Basic usage to check spell range
    code: "Unit* target = ...;\nSpellInfo* spellInfo = ...;\nfloat maxRange = caster->GetSpellMaxRangeForTarget(target,\
      \ spellInfo);\nif (maxRange > 0.0f)\n{\n    // Spell can be cast within this\
      \ range\n}"
    language: cpp
  - title: Using with distance checking
    code: "Unit* target = ...;\nSpellInfo* spellInfo = ...;\nfloat maxRange = caster->GetSpellMaxRangeForTarget(target,\
      \ spellInfo);\nfloat distance = caster->GetDistance(target);\nif (distance <=\
      \ maxRange)\n{\n    // Target is within range\n}"
    language: cpp
  notes: This method considers both the base spell range and any applicable modifiers
    from the target's size or other factors. It does not account for movement speed
    or dynamic range changes during combat. The method performs a lookup in the spell
    database to determine base ranges, so performance may vary depending on spell
    complexity.
  warnings: Ensure that both 'target' and 'spellInfo' parameters are valid pointers
    before calling this method. Passing null pointers will result in undefined behavior
    or incorrect calculations. This method should not be used for range validation
    during spell casting without considering additional factors like movement and
    combat state.
  related:
  - GetSpellMinRangeForTarget
  - IsInFront
  - IsWithinDist
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:42:07.746694'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
