api:
  class: Transport
  method: GetNextStopTimestamp
  signature: int Transport::GetNextStopTimestamp() const
documentation:
  brief: Returns the timestamp of the next stop for this transport.
  description: The GetNextStopTimestamp method retrieves the Unix timestamp representing
    when the transport will reach its next scheduled stop. This value is used by the
    game engine to manage transport movement, scheduling, and player boarding mechanics.
    The method returns an integer value representing seconds since epoch. This timestamp
    is updated dynamically as the transport moves through its path and may change
    based on transport state or player activity.
  parameters: []
  returns: An integer representing the Unix timestamp (seconds since epoch) of when
    this transport will arrive at its next stop. Returns 0 if no next stop is scheduled
    or if the transport is not currently in motion.
  examples:
  - title: Basic usage to check next stop time
    code: "int nextStopTime = transport->GetNextStopTimestamp();\nif (nextStopTime\
      \ > 0)\n{\n    time_t stopTime = static_cast<time_t>(nextStopTime);\n    std::cout\
      \ << \"Next stop at: \" << ctime(&stopTime);\n}"
    language: cpp
  - title: Using timestamp to calculate time until next stop
    code: "int nextStopTime = transport->GetNextStopTimestamp();\nif (nextStopTime\
      \ > 0)\n{\n    int currentTime = time(nullptr);\n    int timeUntilStop = nextStopTime\
      \ - currentTime;\n    if (timeUntilStop > 0)\n        std::cout << \"Time until\
      \ next stop: \" << timeUntilStop << \" seconds\";\n}"
    language: cpp
  notes: This method is typically called during transport update cycles to determine
    when the next movement event should occur. The returned timestamp may be affected
    by server tick rates and transport path calculations. This method does not account
    for player boarding delays or transport acceleration/deceleration effects.
  warnings: The return value of 0 may indicate either no scheduled stops or an error
    state, so callers should verify the transport's active state before relying on
    this timestamp. The timestamp is only valid while the transport is actively moving
    along its path.
  related:
  - GetTransportInfo
  - GetNextWaypoint
  - IsTransportMoving
  - GetMoveDelay
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:42:04.331804'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
