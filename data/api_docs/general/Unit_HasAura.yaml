api:
  class: Unit
  method: HasAura
  signature: bool Unit::HasAura(const int & predicate) const
documentation:
  brief: Checks if the unit has a specific aura applied.
  description: This method determines whether a particular aura is currently active
    on the unit. It returns true if the specified aura is present, false otherwise.
    The method is commonly used in gameplay logic to verify the presence of buffs,
    debuffs, or other effects that may influence character behavior. This functionality
    is essential for implementing various game mechanics such as spell effects, talent
    checks, and status condition validation.
  parameters: []
  returns: Returns true if the specified aura is present on the unit; otherwise returns
    false.
  examples:
  - title: Basic Aura Check
    code: "if (player->HasAura(12345)) {\n    // Do something\n}"
    language: cpp
  notes: The method internally uses the aura system to check for presence of a specific
    aura. Performance considerations include avoiding frequent calls in tight loops,
    as this can impact overall frame rate.
  warnings: This method does not distinguish between different types of auras; it
    simply checks if any aura matching the predicate exists on the unit.
  related:
  - Unit::HasAura
  - Unit::GetAura
  - Unit::RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:26:01.203554'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
