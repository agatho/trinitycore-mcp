api:
  class: ObjectMgr
  method: GetCreatureStaticFlagsOverride
  signature: const int * ObjectMgr::GetCreatureStaticFlagsOverride(int spawnId, int
    difficultyId) const
documentation:
  brief: Retrieves the static flags override for a creature based on spawn and difficulty
    IDs
  description: 'The GetCreatureStaticFlagsOverride method fetches a pointer to an
    integer array containing static flags that override default creature behavior
    for specific spawns and difficulties. This functionality is used in World of Warcraft''s
    TrinityCore server to customize creature properties without modifying core game
    data. The method takes two parameters: spawnId which identifies the specific creature
    instance, and difficultyId which defines the game difficulty level. It returns
    a const int* pointer that may be null if no override is defined for the given
    combination. The returned flags can affect how creatures behave in different scenarios
    such as combat, loot, or AI behavior.'
  parameters:
  - name: spawnId
    description: Unique identifier for the creature spawn instance. This value corresponds
      to the spawn point configuration in the database and determines which specific
      creature instance is being queried.
  - name: difficultyId
    description: Game difficulty level identifier. This parameter defines the context
      in which the creature's behavior should be overridden, such as normal, heroic,
      or mythic difficulty modes.
  returns: A const int* pointer to an array of static flags that override default
    creature behavior for the specified spawn and difficulty combination. Returns
    nullptr if no override is defined for the given parameters.
  examples:
  - title: Basic Usage Example
    code: "const int* flags = sObjectMgr->GetCreatureStaticFlagsOverride(12345, 1);\n\
      if (flags != nullptr) {\n    // Process override flags\n    printf(\"Override\
      \ flags: %d\\n\", *flags);\n} else {\n    printf(\"No override defined\\n\"\
      );\n}"
    language: cpp
  - title: Advanced Usage with Multiple Flags
    code: "const int* overrideFlags = sObjectMgr->GetCreatureStaticFlagsOverride(54321,\
      \ 3);\nif (overrideFlags != nullptr) {\n    int flags = *overrideFlags;\n  \
      \  if (flags & 0x01) {\n        // Handle flag 1\n    }\n    if (flags & 0x02)\
      \ {\n        // Handle flag 2\n    }\n    // Process other flags as needed\n\
      }"
    language: cpp
  notes: This method is typically used internally by the server to apply creature-specific
    overrides based on spawn configurations. The returned pointer should not be modified
    directly as it points to internal data structures. Performance-wise, this method
    uses cached lookup tables for efficient access. The implementation assumes that
    spawnId and difficultyId are valid values corresponding to existing database entries.
  warnings: Ensure that the spawnId and difficultyId parameters correspond to valid
    existing entries in the database; otherwise the method may return nullptr or undefined
    behavior. Since this returns a const pointer, attempting to modify the pointed
    data will result in undefined behavior. The returned pointer is only valid until
    the next call to this method or until the ObjectMgr instance is destroyed.
  related:
  - GetCreatureTemplate
  - GetCreatureData
  - GetCreatureSpawnOverride
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:54:37.485099'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
