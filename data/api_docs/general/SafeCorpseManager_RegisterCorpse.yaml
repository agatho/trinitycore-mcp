api:
  class: SafeCorpseManager
  method: RegisterCorpse
  signature: void SafeCorpseManager::RegisterCorpse(Player * bot, Corpse * corpse)
documentation:
  brief: Registers a player's corpse with the safe corpse manager for tracking and
    potential retrieval.
  description: The RegisterCorpse method is used to register a player's corpse within
    the SafeCorpseManager system. This allows the system to track when and where a
    player's corpse has been left, which can be useful for features such as corpse
    retrieval, respawn location management, or AI-driven behavior in bot systems.
    The method takes a pointer to the player and their corresponding corpse object,
    associating them within the manager's internal data structures. This registration
    is typically called when a player dies and their corpse is created, ensuring that
    the system can later locate or manage that corpse if needed.
  parameters:
  - name: bot
    description: A pointer to the Player object whose corpse is being registered.
      Must be a valid player instance.
  - name: corpse
    description: A pointer to the Corpse object associated with the player. Must be
      a valid corpse instance that has been created and is linked to the specified
      player.
  returns: null
  examples:
  - title: Basic usage of RegisterCorpse
    code: 'Player* bot = ...; // Assume this is a valid player

      Corpse* corpse = ...; // Assume this is a valid corpse

      SafeCorpseManager::instance()->RegisterCorpse(bot, corpse);'
    language: cpp
  notes: This method should only be called after a player has died and their corpse
    has been created. It's typically used in conjunction with other corpse management
    functions like GetCorpse or RemoveCorpse. The SafeCorpseManager maintains an internal
    registry of corpses, so calling this function multiple times for the same player
    may result in overwriting or duplicate entries depending on implementation details.
  warnings: Ensure that both the bot and corpse parameters are valid pointers before
    calling this method. Passing null or invalid pointers will likely cause undefined
    behavior or crashes. Also, be aware that registering a corpse does not automatically
    handle corpse removal or cleanup; additional logic may be required to manage the
    lifecycle of the registered corpse.
  related:
  - GetCorpse
  - RemoveCorpse
  - IsCorpseRegistered
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T23:19:45.826424'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
