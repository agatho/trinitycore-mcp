api:
  class: Player
  method: _LoadMailedItem
  signature: Item * Player::_LoadMailedItem(const int & playerGuid, Player * player,
    uint64 mailId, Mail * mail, int * fields, ItemAdditionalLoadInfo * addionalData)
documentation:
  brief: Loads and returns a mailed item for a player from a specific mail ID
  description: This method retrieves and constructs an Item object from a mail that
    has been sent to a player. It is used internally by TrinityCore to handle the
    loading of items that are part of mail messages, particularly those that have
    been sent to players via the mail system. The method processes the mail data and
    creates a new item based on the information stored in the mail's fields, allowing
    for proper handling of item attributes such as item quality, enchantments, and
    other properties. This function is essential for maintaining the integrity of
    item data within the game's mail system.
  parameters:
  - name: playerGuid
    description: The GUID of the player who owns the mail. This parameter identifies
      which player the mail belongs to.
  - name: player
    description: Pointer to the Player object that owns the mail. This is used to
      access player-specific data and ensure proper item loading.
  - name: mailId
    description: The unique identifier of the mail being loaded. This ID corresponds
      to a specific mail message in the database.
  - name: mail
    description: Pointer to the Mail object containing the mail data. This is used
      to access the mail's fields and item information for item construction.
  - name: fields
    description: Pointer to an array of integers representing the mail fields. These
      fields contain information about the item being loaded, such as item ID, enchantment,
      and other properties.
  - name: addionalData
    description: Pointer to additional data structure containing item load information.
      This structure holds extra data needed for proper item construction and loading.
  returns: Returns a pointer to the Item object that was loaded from the mail. If
    no item is found or if an error occurs, it returns nullptr.
  examples:
  - title: Basic usage example
    code: "Item* item = player->_LoadMailedItem(playerGuid, player, mailId, mail,\
      \ fields, additionalData);\nif (item != nullptr)\n{\n    // Process the loaded\
      \ item\n}"
    language: cpp
  - title: Advanced usage example
    code: "Item* item = player->_LoadMailedItem(playerGuid, player, mailId, mail,\
      \ fields, additionalData);\nif (item != nullptr)\n{\n    // Handle item properties\n\
      \    item->SetOwner(player);\n    item->SetBinding(true);\n}"
    language: cpp
  notes: This method is typically used internally by the game engine when processing
    mail messages. It requires proper initialization of the mail fields and additional
    data structures to function correctly. Performance considerations include memory
    allocation for item construction and potential overhead from database queries.
  warnings: Improper handling of the fields or additionalData can lead to invalid
    item construction, resulting in crashes or corrupted items. Care must be taken
    to ensure that all parameters are valid before calling this method.
  related:
  - Mail::GetItem
  - Player::GetMailedItem
  - Item::CreateFromItemTemplate
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T23:08:43.435879'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
