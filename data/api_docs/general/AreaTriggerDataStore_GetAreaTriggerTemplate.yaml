api:
  class: AreaTriggerDataStore
  method: GetAreaTriggerTemplate
  signature: const AreaTriggerTemplate * AreaTriggerDataStore::GetAreaTriggerTemplate(const
    AreaTriggerId & areaTriggerId) const
documentation:
  brief: Retrieves the area trigger template data for a specified area trigger identifier.
  description: The GetAreaTriggerTemplate method fetches the template data associated
    with a given AreaTriggerId. This template contains static configuration information
    about an area trigger, such as its position, size, activation conditions, and
    other properties that define how the trigger behaves in the game world. The method
    performs a lookup in the internal data store using the provided identifier and
    returns a pointer to the corresponding AreaTriggerTemplate object. If no matching
    template is found, the method returns a null pointer. This function is commonly
    used during area trigger initialization, activation checks, or when scripting
    behavior related to area triggers.
  parameters:
  - name: areaTriggerId
    description: The unique identifier for the area trigger template to retrieve.
      This identifier typically corresponds to an entry in the areatrigger_template
      database table.
  returns: A pointer to a const AreaTriggerTemplate object if a matching template
    is found; otherwise, returns nullptr if no template exists for the given identifier.
  examples:
  - title: Basic Usage
    code: "AreaTriggerId triggerId(1234);\nconst AreaTriggerTemplate* templateData\
      \ = areaTriggerDataStore->GetAreaTriggerTemplate(triggerId);\nif (templateData)\n\
      {\n    // Use the template data\n    std::cout << \"Found area trigger template\
      \ with ID: \" << templateData->Id << std::endl;\n}"
    language: cpp
  - title: Checking for Valid Template Before Use
    code: "AreaTriggerId triggerId(5678);\nconst AreaTriggerTemplate* template = areaTriggerDataStore->GetAreaTriggerTemplate(triggerId);\n\
      if (template && template->Radius > 0.0f)\n{\n    // Proceed with logic that\
      \ requires valid area trigger data\n    float radius = template->Radius;\n \
      \   // ... additional processing\n}\nelse\n{\n    // Handle invalid or missing\
      \ template\n    sLog->outError(\"Invalid or missing area trigger template for\
      \ ID %u\", triggerId);\n}"
    language: cpp
  notes: This method is thread-safe as it only performs read operations on the internal
    data store. The returned pointer remains valid for the lifetime of the AreaTriggerDataStore
    instance and should not be modified directly.
  warnings: Always check if the returned pointer is not null before dereferencing
    it to avoid segmentation faults. The method assumes that the AreaTriggerId parameter
    has been properly validated and corresponds to an existing template in the data
    store.
  related:
  - GetAreaTriggerTemplate
  - LoadAreaTriggerTemplates
  - HasAreaTriggerTemplate
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:38:06.432789'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
