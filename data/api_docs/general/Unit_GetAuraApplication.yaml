api:
  class: Unit
  method: GetAuraApplication
  signature: AuraApplication * Unit::GetAuraApplication(const int & predicate) const
documentation:
  brief: Returns the AuraApplication associated with a specific predicate from the
    Unit.
  description: The GetAuraApplication method retrieves a specific AuraApplication
    from a Unit's aura list based on a predicate value. This method is commonly used
    in World of Warcraft's TrinityCore framework to access and manipulate aura applications,
    particularly when dealing with spell effects or status changes. The method allows
    developers to query the current state of auras applied to a unit, providing access
    to detailed information about active effects without directly modifying them.
    It serves as a crucial interface for handling aura-related operations in game
    mechanics.
  parameters:
  - name: predicate
    description: An integer value that represents a specific predicate or condition
      used to identify the desired aura application. This typically corresponds to
      a particular aura type or effect, such as a spell ID or status effect.
  returns: Returns a pointer to an AuraApplication object which contains detailed
    information about the specified aura application. If no matching aura is found,
    it returns nullptr, indicating that no applicable aura exists for the given predicate.
  examples:
  - title: Basic Usage Example
    code: "AuraApplication* auraApp = unit->GetAuraApplication(12345);\nif (auraApp)\n\
      {\n    // Process the aura application\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "AuraApplication* auraApp = unit->GetAuraApplication(12345);\nif (auraApp\
      \ && auraApp->GetSpellInfo())\n{\n    // Access the spell info associated with\
      \ the aura\n    uint32 spellId = auraApp->GetSpellInfo()->Id;\n    // Perform\
      \ actions based on spellId\n}"
    language: cpp
  notes: This method is thread-safe and can be used in both single-threaded and multi-threaded
    contexts. Performance considerations include the fact that this method may involve
    iterating through a unit's aura list, so it should be used judiciously when performance
    is critical. Developers should note that the returned AuraApplication pointer
    may be nullptr if no matching aura exists.
  warnings: This method can return nullptr if no matching aura application exists
    for the given predicate, which could lead to null pointer dereferences if not
    properly handled. Care should be taken to check for null before accessing the
    returned pointer.
  related:
  - GetAura
  - GetAuraByType
  - GetAuraApplicationList
  - RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:34:22.716951'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
