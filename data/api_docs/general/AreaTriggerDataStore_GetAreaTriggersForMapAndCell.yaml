api:
  class: AreaTriggerDataStore
  method: GetAreaTriggersForMapAndCell
  signature: const int * AreaTriggerDataStore::GetAreaTriggersForMapAndCell(uint32
    mapId, Difficulty difficulty, uint32 cellId) const
documentation:
  brief: Retrieves an array of area trigger identifiers for a specified map, difficulty,
    and cell.
  description: The GetAreaTriggersForMapAndCell method fetches a list of area trigger
    IDs associated with a given map ID, difficulty level, and cell identifier. This
    functionality is essential for managing and processing area triggers within the
    game world, particularly in scenarios involving dynamic zone loading or player
    interaction detection. The returned pointer points to an array of integers representing
    unique identifiers for area triggers located in the specified map cell and difficulty
    context. It's important to note that the returned array may be empty if no area
    triggers are defined for the given parameters.
  parameters:
  - name: mapId
    description: The unique identifier of the game map where area triggers are located.
      Valid values correspond to valid map entries in the TrinityCore database.
  - name: difficulty
    description: The difficulty level for which area triggers are retrieved. This
      typically corresponds to standard difficulty settings like Normal, Heroic, or
      Mythic.
  - name: cellId
    description: The unique identifier of the cell within the map. Cells are used
      for spatial partitioning and efficient trigger management in large maps.
  returns: A pointer to a constant integer array containing area trigger identifiers.
    The array may be empty if no triggers match the specified criteria. The caller
    must not modify or free this memory as it is managed internally by the AreaTriggerDataStore.
  examples:
  - title: Retrieve area triggers for a specific map, difficulty, and cell
    code: "const int* triggers = areaTriggerStore->GetAreaTriggersForMapAndCell(1234,\
      \ DIFFICULTY_NORMAL, 5678);\nif (triggers != nullptr) {\n    for (int i = 0;\
      \ triggers[i] != -1; ++i) {\n        // Process each area trigger ID\n     \
      \   printf(\"Area Trigger ID: %d\\n\", triggers[i]);\n    }\n}"
    language: cpp
  notes: This method assumes that the internal data structures for area triggers are
    properly initialized and populated before calling. The returned array is guaranteed
    to be null-terminated with -1, indicating the end of valid entries. Performance
    is optimized through internal caching mechanisms when frequently accessed with
    the same parameters.
  warnings: Ensure that the mapId, difficulty, and cellId values passed are valid
    and correspond to existing entries in the game world data. Incorrect values may
    lead to unexpected behavior or memory access violations. The returned array should
    not be modified or freed by the caller as it's managed internally.
  related:
  - GetAreaTriggerById
  - LoadAreaTriggers
  - AddAreaTrigger
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T18:37:34.966674'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
