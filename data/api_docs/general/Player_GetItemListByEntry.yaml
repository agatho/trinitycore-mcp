api:
  class: Player
  method: GetItemListByEntry
  signature: int Player::GetItemListByEntry(uint32 entry, bool inBankAlso) const
documentation:
  brief: Retrieves the count of items with a specific entry in the player's inventory
    and bank.
  description: This method returns the total number of items with the specified entry
    that exist in the player's inventory and bank. It searches through both the main
    backpack and the bank, counting all instances of the item regardless of stack
    size. The method is useful for checking item availability or implementing game
    mechanics that require knowing item quantities. It does not distinguish between
    different stacks of the same item, but rather counts all items with the same entry
    as a single count.
  parameters:
  - name: entry
    description: The item entry ID to search for in the player's inventory and bank.
      This is typically a unique identifier used by the game engine to identify specific
      items.
  - name: inBankAlso
    description: When set to true, includes items found in the bank; when false, only
      counts items in the main backpack. This parameter allows for flexible search
      scope based on game requirements.
  returns: Returns an integer representing the total count of items with the specified
    entry found in the player's inventory and bank combined. If no items are found,
    returns zero.
  examples:
  - title: Basic Usage Example
    code: "int itemCount = player->GetItemListByEntry(12345, true);\nif (itemCount\
      \ > 0)\n{\n    // Item exists in inventory and bank\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "int itemCount = player->GetItemListByEntry(12345, false);\nif (itemCount\
      \ == 0)\n{\n    // Item not found in backpack only\n}"
    language: cpp
  notes: This method is commonly used in game scripts and quest systems to check item
    availability. Performance considerations include the fact that it searches through
    all slots in both inventory and bank, so for large numbers of items, this operation
    can be costly. Thread safety depends on the implementation details of the player
    object, but generally should be safe when used within a single thread.
  warnings: This method does not account for item stacks properly; it counts all items
    with the same entry as one count regardless of stack size. Be careful when using
    this method in scenarios where item stacking matters, such as quest completion
    or crafting systems.
  related:
  - GetItemCount
  - GetItemByEntry
  - HasItem
  - GetItemListByGuid
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:54:29.862355'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
