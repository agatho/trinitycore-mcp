api:
  class: SceneObject
  method: Update
  signature: void SceneObject::Update(int diff)
documentation:
  brief: Updates the scene object's state and handles time-based logic for animations,
    effects, and positioning.
  description: The SceneObject::Update method is responsible for processing time-based
    updates on scene objects within the TrinityCore framework. This includes managing
    animation states, updating visual effects, handling positional changes over time,
    and ensuring all scene-related components are synchronized with the current game
    tick. The method typically gets called from the main game loop at regular intervals,
    using the 'diff' parameter to determine how much time has passed since the last
    update. It's crucial for maintaining the integrity of dynamic scene elements such
    as environmental effects, scripted sequences, and interactive objects that respond
    to in-game time progression.
  parameters:
  - name: diff
    description: The time difference (in milliseconds) since the last update call.
      This value is used to calculate time-based transitions and animations for the
      scene object.
  returns: null
  examples:
  - title: Basic Scene Object Update Call
    code: "void GameWorld::UpdateSceneObjects(uint32 diff)\n{\n    for (auto& sceneObj\
      \ : m_sceneObjects)\n    {\n        sceneObj->Update(diff);\n    }\n}"
    language: cpp
  - title: Custom Scene Object Update with Conditional Logic
    code: "void CustomSceneObject::Update(int diff)\n{\n    if (m_isActive)\n    {\n\
      \        // Handle animation updates\n        m_animationTimer += diff;\n  \
      \      if (m_animationTimer >= m_animationInterval)\n        {\n           \
      \ AdvanceAnimation();\n            m_animationTimer = 0;\n        }\n      \
      \  \n        // Update visual effects\n        UpdateEffects(diff);\n    }\n\
      }"
    language: cpp
  notes: This method is typically invoked by the core game loop and should not be
    called directly unless implementing custom scene object behavior. The 'diff' parameter
    represents actual elapsed time in milliseconds, which may vary between frames
    due to frame rate fluctuations. Scene objects that are inactive or not currently
    visible might skip certain update logic for performance optimization.
  warnings: Direct calls to SceneObject::Update outside of the normal game loop can
    cause unexpected behavior or visual glitches. The method assumes valid internal
    state and does not perform bounds checking on the diff parameter, so passing invalid
    values may lead to incorrect animation timing or effect updates.
  related:
  - SceneObject::GetGuid
  - SceneObject::IsActive
  - SceneObject::SetPosition
  - SceneObject::PlayAnimation
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T23:08:03.383199'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
