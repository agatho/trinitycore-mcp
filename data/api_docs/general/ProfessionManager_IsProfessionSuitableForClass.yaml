api:
  class: ProfessionManager
  method: IsProfessionSuitableForClass
  signature: bool ProfessionManager::IsProfessionSuitableForClass(uint8 classId, ProfessionType
    profession) const
documentation:
  brief: Determines whether a specified profession is suitable for a given class in
    the game.
  description: The IsProfessionSuitableForClass method checks if a particular profession
    can be learned or used by a specific player class. This validation ensures that
    game mechanics such as skill restrictions, class-specific professions, and role-based
    limitations are properly enforced. The method typically evaluates internal data
    structures that define which professions are available to which classes, often
    based on game design rules or expansion content restrictions. It returns true
    if the profession is valid for the given class, false otherwise.
  parameters:
  - name: classId
    description: The unique identifier of the player class (e.g., WARRIOR = 1, PALADIN
      = 2, etc.). Must be a valid class ID defined in the game's class system.
  - name: profession
    description: The type of profession to check for suitability. This is typically
      an enum or integer representing a specific crafting or gathering skill (e.g.,
      Blacksmithing, Leatherworking).
  returns: Returns true if the specified profession is suitable for the given class;
    otherwise returns false.
  examples:
  - title: Check if Blacksmithing is suitable for a Warrior
    code: "bool isSuitable = professionManager.IsProfessionSuitableForClass(1, PROFESSION_BLACKSMITHING);\
      \ // Class ID 1 = Warrior\nif (isSuitable)\n{\n    // Proceed with profession\
      \ logic\n}"
    language: cpp
  - title: Validate multiple professions for a specific class
    code: "uint8 playerClass = 3; // Mage\nstd::vector<ProfessionType> professions\
      \ = {PROFESSION_BLACKSMITHING, PROFESSION_ENCHANTING, PROFESSION_ENGINEERING};\n\
      for (auto& prof : professions)\n{\n    if (professionManager.IsProfessionSuitableForClass(playerClass,\
      \ prof))\n    {\n        // Profession is valid for Mage\n    }\n}"
    language: cpp
  notes: This method likely relies on internal lookup tables or configuration files
    that define class-profession compatibility. The implementation may vary depending
    on game expansion or server settings. Performance is generally low as it involves
    simple lookups, but frequent calls should be avoided in performance-critical code
    paths.
  warnings: Ensure that the classId and profession values are valid before calling
    this method to avoid unexpected behavior. Invalid IDs could lead to incorrect
    results or potential crashes if not handled properly by internal validation logic.
  related:
  - GetProfessionForClass
  - IsClassAllowedForProfession
  - CanPlayerLearnProfession
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:57:45.907264'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
