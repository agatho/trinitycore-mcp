api:
  class: Transport
  method: CreateNPCPassenger
  signature: int * Transport::CreateNPCPassenger(int guid, const CreatureData * data)
documentation:
  brief: Creates a new NPC passenger on the transport and returns its unique identifier.
  description: The CreateNPCPassenger method is responsible for spawning a new NPC
    passenger onto a transport vehicle. It takes a GUID and creature data as input,
    and returns a pointer to an integer representing the newly created passenger's
    unique identifier. This method is typically used during transport initialization
    or when adding passengers dynamically to existing transports. The method integrates
    with TrinityCore's creature spawning system and ensures proper positioning and
    linking of the NPC to the transport. It handles the creation of the creature object,
    assigns it to the transport's passenger list, and manages its lifecycle within
    the transport context.
  parameters:
  - name: guid
    description: The unique identifier (GUID) for the new NPC passenger. This should
      be a valid GUID that is not already in use by another creature on the transport.
  - name: data
    description: Pointer to the CreatureData structure containing initialization data
      for the NPC passenger, including entry ID, position, orientation, and other
      creature properties.
  returns: Returns a pointer to an integer representing the GUID of the newly created
    NPC passenger. If creation fails, it may return nullptr or a negative value depending
    on implementation details.
  examples:
  - title: Basic NPC Passenger Creation
    code: "Transport* transport = ...; // Assume transport is initialized\nCreatureData\
      \ data;\ndata.id = 12345;\ndata.mapid = 0;\ndata.posX = 100.0f;\ndata.posY =\
      \ 200.0f;\ndata.posZ = 300.0f;\nint* passengerGuid = transport->CreateNPCPassenger(54321,\
      \ &data);\nif (passengerGuid != nullptr) {\n    // Successfully created NPC\
      \ passenger\n    printf(\"Created NPC passenger with GUID: %d\\n\", *passengerGuid);\n\
      }"
    language: cpp
  notes: This method assumes that the transport object is properly initialized and
    that the provided GUID is unique within the context of the transport. The returned
    pointer should be managed carefully to avoid memory leaks or dangling references.
    Implementation may involve synchronization mechanisms if used in multi-threaded
    environments.
  warnings: Ensure that the GUID passed is unique and not already assigned to another
    creature on the same transport. Failure to do so may result in undefined behavior
    or duplicate creature entries. The method might throw exceptions or return error
    codes if data validation fails.
  related:
  - GetNPCPassengers
  - RemoveNPCPassenger
  - HasNPCPassenger
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T09:38:23.090602'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
