api:
  class: Unit
  method: GetMovementForces
  signature: const int * Unit::GetMovementForces() const
documentation:
  brief: Returns the movement forces applied to the unit.
  description: This method retrieves the current movement forces that are being applied
    to the unit, which typically represent the active movement vector or force in
    the game world. The returned pointer points to an array of integers representing
    the X, Y, and Z components of the movement force. This method is commonly used
    for physics calculations and movement tracking within the TrinityCore framework.
  parameters: []
  returns: Returns a const pointer to an array of three integers representing the
    X, Y, and Z movement forces applied to the unit. The values may be null if no
    movement forces are currently active or if the unit is not in motion.
  examples:
  - title: Basic usage example
    code: "int const *forces = unit->GetMovementForces();\nif (forces)\n{\n    std::cout\
      \ << \"X:\" << forces[0] << \" Y:\" << forces[1] << \" Z:\" << forces[2] <<\
      \ std::endl;\n}"
    language: cpp
  notes: The method returns a const pointer to an array of integers, meaning the values
    should not be modified directly. The returned array is managed by the unit's internal
    movement system and may change during gameplay depending on movement state.
  warnings: Be cautious when using this method as it can return null values if no
    movement forces are currently active. Also, ensure that the unit is in a valid
    state before calling this method, as it might not be safe to call on units that
    are not moving or are in an invalid state.
  related:
  - GetMovementForce
  - SetMovementForce
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T12:55:31.527980'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
