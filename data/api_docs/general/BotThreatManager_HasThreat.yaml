api:
  class: BotThreatManager
  method: HasThreat
  signature: bool BotThreatManager::HasThreat(Unit * target) const
documentation:
  brief: Checks if the bot has threat against a specified target unit.
  description: The HasThreat method determines whether the bot currently holds any
    threat level against a given target unit. This is a core function in the AI threat
    management system, used to evaluate the bot's current engagement status with a
    specific enemy. The method typically checks the internal threat table or tracking
    mechanisms within the BotThreatManager to see if a valid threat entry exists for
    the specified target. It's commonly used by AI decision-making logic to determine
    whether the bot should continue attacking, switch targets, or engage in other
    combat behaviors based on its current threat state.
  parameters: []
  returns: Returns true if the bot has established threat against the target unit,
    false otherwise. This indicates that the bot is currently considered a threat
    source for the target, which may affect target selection logic and combat behavior.
  examples:
  - title: Basic Threat Check
    code: "if (botThreatManager->HasThreat(targetUnit)) {\n    // Bot has threat against\
      \ target\n    // Proceed with attack logic\n}"
    language: cpp
  - title: Using in Combat Decision Logic
    code: "if (!botThreatManager->HasThreat(currentTarget) && botThreatManager->HasThreat(newTarget))\
      \ {\n    // Switch to new target since we have threat on it\n    bot->SetTarget(newTarget);\n\
      }"
    language: cpp
  notes: This method relies on the internal threat tracking system which may update
    dynamically during combat. The check is typically fast and does not involve expensive
    calculations, but results may change between calls as threat values fluctuate.
    The method assumes that the target unit is valid and exists in the current world
    context.
  warnings: Do not assume that a lack of threat means the bot is safe from the target
    - other factors such as aggro radius or spell effects might still cause the bot
    to be attacked. Also, threat values may be cleared or reset during certain combat
    events like being stunned or feared.
  related:
  - AddThreat
  - GetThreat
  - ClearThreat
  - IsTargetThreatened
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:40:16.003872'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
