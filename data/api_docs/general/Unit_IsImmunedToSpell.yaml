api:
  class: Unit
  method: IsImmunedToSpell
  signature: bool Unit::IsImmunedToSpell(const SpellInfo * spellInfo, const int *
    caster, bool requireImmunityPurgesEffectAttribute) const
documentation:
  brief: Determines whether a unit is immune to a specific spell.
  description: This method checks if a unit has immunity against a given spell, considering
    both the spell's properties and any applicable immunity attributes. It evaluates
    whether the unit's immunity state prevents the spell from affecting it, which
    is crucial for understanding game mechanics like damage reduction, status effects,
    or special abilities. The method considers various factors including spell attributes,
    caster information, and immunity purges effect attributes to determine the final
    result.
  parameters:
  - name: spellInfo
    description: Pointer to the SpellInfo structure that defines the spell being checked
      for immunity. This contains all relevant spell properties including effects,
      attributes, and mechanics.
  - name: caster
    description: Pointer to an integer representing the caster's level or identifier.
      This parameter allows for checking immunity based on specific caster characteristics,
      such as level or source of the spell.
  - name: requireImmunityPurgesEffectAttribute
    description: Boolean flag indicating whether immunity purges effect attributes
      should be considered. When true, this parameter ensures that the method checks
      for special immunity attributes related to purging effects, which may affect
      how immunity is calculated.
  returns: Returns true if the unit is immune to the specified spell based on its
    properties and any applicable immunity attributes; otherwise returns false.
  examples:
  - title: Basic Usage Example
    code: "Unit* target = player->GetTarget();\nconst SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(12345);\n\
      bool isImmune = target->IsImmunedToSpell(spellInfo, nullptr, false);\nif (isImmune)\n\
      \    // Do something\nelse\n    // Do something else"
    language: cpp
  - title: Advanced Usage Example with Caster
    code: "Unit* target = player->GetTarget();\nconst SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(12345);\n\
      int casterLevel = 10;\nbool isImmune = target->IsImmunedToSpell(spellInfo, &casterLevel,\
      \ true);\nif (isImmune)\n    // Apply immunity logic\nelse\n    // Proceed with\
      \ normal spell effects"
    language: cpp
  notes: The method internally uses the SpellInfo structure to determine if a unit
    has immunity against a spell. It may involve checking multiple attributes including
    immunity purges effect, spell effects, and other related mechanics. Performance
    considerations include avoiding unnecessary checks when dealing with large numbers
    of spells or units.
  warnings: This method requires careful handling of SpellInfo structures as invalid
    pointers can lead to crashes. Also, the caster parameter must be properly managed
    to avoid incorrect results in immunity calculations.
  related:
  - IsImmunedToSpellEffect
  - IsImmuneToSpellSchool
  - GetAuraState
  - HasAuraState
  - GetSpellInfo
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:03:52.940478'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
