api:
  class: WorldObject
  method: isInBack
  signature: bool WorldObject::isInBack(const WorldObject * target, float arc) const
documentation:
  brief: Determines whether a WorldObject is positioned behind target within a specified
    arc.
  description: The isInBack method checks if the current WorldObject is located behind
    the target object within a defined angular arc. This function is commonly used
    in game mechanics to determine line-of-sight or positioning relative to targets,
    particularly for determining if an object is in the back of another object for
    combat purposes. It evaluates the angle between the object's facing direction
    and the direction toward the target, comparing this angle against the provided
    arc value. The method returns true when the object is within the specified back
    arc, false otherwise.
  parameters:
  - name: target
    description: Pointer to the WorldObject that serves as reference for determining
      position. This object defines the orientation and location from which the back
      position is calculated.
  - name: arc
    description: "Float value representing the angular arc in radians. This parameter\
      \ defines the maximum angle within which an object can be considered to be behind\
      \ the target. Typically, values are between 0 and \u03C0 (3.14159) radians."
  returns: Returns true if the current WorldObject is positioned behind the target
    within the specified arc; otherwise returns false.
  examples:
  - title: Basic usage example
    code: "if (player->isInBack(target, M_PI_2)) {\n    // Player is behind target\
      \ within 90 degrees\n}"
    language: cpp
  - title: Advanced usage example
    code: "if (mob->isInBack(player, M_PI)) {\n    // Mob is behind player within\
      \ 180 degrees\n    // This can be used for determining if mob is in back of\
      \ player for attack\n}"
    language: cpp
  notes: This method relies on the object's orientation and position relative to the
    target. It uses angle calculations based on facing direction and position, making
    it sensitive to accurate positioning and rotation data. Performance considerations
    include the use of angle calculations which may be computationally expensive in
    high-frequency scenarios.
  warnings: The method assumes that both objects are positioned in the same coordinate
    space and that the target object has valid orientation data. Improper usage can
    lead to incorrect results if the target object's orientation is not properly set
    or if the arc value is incorrectly calculated.
  related:
  - isInFront
  - isInRight
  - isInLeft
  - isInLineOfSight
  - getAngle
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:30:35.654948'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
