api:
  class: ConditionMgr
  method: IsMeetingWorldStateExpression
  signature: bool ConditionMgr::IsMeetingWorldStateExpression(const Map * map, const
    WorldStateExpressionEntry * expression)
documentation:
  brief: Evaluates whether a given world state expression is currently met within
    the specified map context.
  description: The IsMeetingWorldStateExpression method determines if a provided WorldStateExpressionEntry
    is currently satisfied based on the active world states and conditions within
    the specified Map. This function is typically used during quest evaluation, event
    triggering, or conditional logic processing where certain criteria must be met
    before actions can proceed. The method evaluates complex expressions involving
    world state values, player conditions, and other contextual factors to return
    a boolean result indicating whether the expression's conditions are fully satisfied.
    It relies on the internal condition management system of TrinityCore to perform
    these evaluations accurately.
  parameters:
  - name: map
    description: Pointer to the Map object where the world state expression evaluation
      should occur. This parameter defines the scope and context for evaluating world
      states and their associated conditions.
  - name: expression
    description: Pointer to a WorldStateExpressionEntry structure that contains the
      definition of the expression to be evaluated. This entry specifies the logical
      conditions and world state references that must be satisfied.
  returns: Returns true if all conditions specified in the WorldStateExpressionEntry
    are currently met within the given map context, otherwise returns false. The evaluation
    considers active world states, player conditions, and any related contextual factors.
  examples:
  - title: Basic Usage Example
    code: "if (sConditionMgr->IsMeetingWorldStateExpression(map, expressionEntry))\
      \ {\n    // Proceed with action that requires the expression to be true\n  \
      \  DoSomething();\n}"
    language: cpp
  - title: Quest Condition Check
    code: "WorldStateExpressionEntry* questExpression = sWorldStateExpressionStore.LookupEntry(12345);\n\
      if (questExpression && sConditionMgr->IsMeetingWorldStateExpression(player->GetMap(),\
      \ questExpression)) {\n    player->CompleteQuest(questId);\n}"
    language: cpp
  notes: This method performs a full evaluation of the world state expression including
    any nested conditions and references to global or map-specific world states. It
    is important to note that this function may involve database lookups or complex
    condition processing, so it should not be called excessively in performance-critical
    code paths. The method assumes valid input parameters and will assert or return
    false if either parameter is null.
  warnings: Do not call this method with null pointers for map or expression parameters
    as it may cause undefined behavior or crashes. Be cautious when using this in
    high-frequency loops as the evaluation process can be computationally expensive
    depending on the complexity of the world state expression.
  related:
  - GetWorldStateValue
  - UpdateWorldState
  - IsConditionValid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T15:59:14.876016'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
