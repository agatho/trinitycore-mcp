api:
  class: SpellMgr
  method: CheckSpellGroupStackRules
  signature: SpellGroupStackRule SpellMgr::CheckSpellGroupStackRules(const SpellInfo
    * spellInfo1, const SpellInfo * spellInfo2) const
documentation:
  brief: Determines the stacking rules between two spell groups to manage overlapping
    effects.
  description: The CheckSpellGroupStackRules method evaluates whether two spells belonging
    to specific spell groups can stack together or if they conflict with each other.
    This function is crucial for handling mechanics such as aura stacking, debuff
    limitations, and spell interactions in World of Warcraft's combat system. It checks
    predefined group rules that define how certain spells interact when applied to
    the same target. The method returns a SpellGroupStackRule enum indicating whether
    the spells should stack, override, or be prevented from coexisting.
  parameters: []
  returns: Returns a SpellGroupStackRule enum value that indicates the stacking behavior
    between two spell groups. Possible values include STACK_RULE_ALLOW, STACK_RULE_DENY,
    and STACK_RULE_OVERRIDE, each defining how the spells interact when they belong
    to overlapping groups.
  examples:
  - title: Check if two spells can stack
    code: "const SpellInfo* spell1 = sSpellMgr->GetSpellInfo(12345);\nconst SpellInfo*\
      \ spell2 = sSpellMgr->GetSpellInfo(67890);\nSpellGroupStackRule rule = sSpellMgr->CheckSpellGroupStackRules(spell1,\
      \ spell2);\nif (rule == STACK_RULE_ALLOW)\n{\n    // Spells can stack\n}"
    language: cpp
  notes: This method is typically used internally by the spell system to enforce stacking
    rules defined in the spell group database. Developers should ensure that spell
    groups are properly configured in the database for accurate behavior.
  warnings: Incorrectly configured spell groups in the database may lead to unexpected
    stacking behaviors or conflicts in gameplay mechanics. This function does not
    validate input parameters, so callers must ensure valid SpellInfo pointers are
    passed.
  related:
  - GetSpellInfo
  - IsSpellGroupHaveCommon
  - CheckSpellGroupStackRules
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T21:07:22.534967'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
