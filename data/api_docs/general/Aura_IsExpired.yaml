api:
  class: Aura
  method: IsExpired
  signature: bool Aura::IsExpired() const
documentation:
  brief: Checks whether the aura has expired and is no longer active.
  description: The IsExpired method determines if an aura's duration has elapsed and
    it should be removed from the target. This method evaluates the internal expiration
    time of the aura against the current game time to make this determination. In
    World of Warcraft's TrinityCore implementation, auras that are expired are typically
    cleaned up during the next update cycle, though this method can be used to check
    their status at any point. The method returns true if the aura is past its expiration
    time, and false otherwise. This is commonly used in spell effect handling, aura
    management systems, and when determining whether an aura's effects should still
    be applied.
  parameters: []
  returns: Returns true if the aura has expired (its duration has ended), or false
    if it is still active and valid.
  examples:
  - title: Basic Aura Expiration Check
    code: "if (aura->IsExpired())\n{\n    // Handle expired aura logic\n    target->RemoveAura(aura);\n\
      }"
    language: cpp
  - title: Using IsExpired in Spell Effect Processing
    code: "void ProcessSpellEffect(Unit* caster, Unit* target)\n{\n    Aura* aura\
      \ = target->GetAura(SpellId);\n    if (aura && aura->IsExpired())\n    {\n \
      \       // Aura has expired, do not apply effect\n        return;\n    }\n \
      \   // Apply normal spell effect logic\n}"
    language: cpp
  notes: This method does not modify the aura's state; it only reads its current expiration
    status. The aura may still be in memory even after being marked as expired, but
    it will not have any active effects. This check is typically performed during
    aura updates or when evaluating spell effects.
  warnings: Be cautious when using this method in loops or frequently called functions
    as it performs a time comparison which could impact performance if done excessively.
    Also, note that an aura may be marked as expired but not yet removed from the
    target's aura list; always ensure proper cleanup after expiration checks.
  related:
  - Aura::GetDuration
  - Aura::GetMaxDuration
  - Aura::IsPositive
  - Aura::Remove
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:12:07.455391'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
