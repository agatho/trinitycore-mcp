api:
  class: Player
  method: CanCompleteQuest
  signature: bool Player::CanCompleteQuest(uint32 quest_id, uint32 ignoredQuestObjectiveId)
documentation:
  brief: Determines whether a player can complete a specific quest based on quest
    requirements and player progress
  description: The CanCompleteQuest method checks if a player is eligible to complete
    a given quest by evaluating the quest's requirements, including level requirements,
    quest objectives, and player progress. This method is essential for determining
    quest completion eligibility and is commonly used in quest handling logic to validate
    whether a quest can be turned in or completed. The method considers both the quest
    ID and an ignored quest objective ID parameter which may affect the evaluation
    process. It returns true when all conditions are met for quest completion, false
    otherwise.
  parameters:
  - name: quest_id
    description: The unique identifier of the quest to be evaluated for completion.
      This represents the quest's database ID and must correspond to a valid quest
      in the game database.
  - name: ignoredQuestObjectiveId
    description: An optional parameter that specifies an ignored quest objective ID,
      which may influence how the quest completion is evaluated. This parameter allows
      for special handling of certain quest objectives during evaluation.
  returns: Returns true if the player can complete the specified quest based on current
    progress and requirements; false otherwise. The method may return false if the
    player has not met the required level, completed prerequisites, or if the quest
    objectives are not fulfilled.
  examples:
  - title: Basic Quest Completion Check
    code: "if (player->CanCompleteQuest(12345))\n{\n    // Player can complete this\
      \ quest\n    player->CompleteQuest(12345);\n}\nelse\n{\n    // Player cannot\
      \ complete this quest\n    // Handle accordingly\n}"
    language: cpp
  - title: Advanced Quest Completion with Objective Handling
    code: "uint32 questId = 12345;\nuint32 ignoredObjectiveId = 67890;\nif (player->CanCompleteQuest(questId,\
      \ ignoredObjectiveId))\n{\n    // Player can complete this quest with special\
      \ handling\n    player->CompleteQuest(questId);\n}\nelse\n{\n    // Player cannot\
      \ complete this quest\n    // Handle accordingly\n}"
    language: cpp
  notes: This method is primarily used in quest completion logic and may be called
    during quest progression evaluation. It evaluates player's current progress against
    quest requirements, including level requirements and objective fulfillment. Performance
    considerations are minimal as this method typically involves database queries
    for quest data validation.
  warnings: This method does not validate whether the quest actually exists in the
    database; it only checks if the player can complete it based on current conditions.
    Using invalid quest IDs may result in undefined behavior or incorrect results.
    Also, this method should not be used to determine if a quest is completed, but
    rather whether it can be completed.
  related:
  - Player::GetQuestStatus
  - Player::CompleteQuest
  - Player::CanStartQuest
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T17:51:17.004083'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
