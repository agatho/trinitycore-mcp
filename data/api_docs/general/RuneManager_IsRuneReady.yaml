api:
  class: RuneManager
  method: IsRuneReady
  signature: bool RuneManager::IsRuneReady(uint8 runeIndex) const
documentation:
  brief: Checks if a specific rune is ready for use in World of Warcraft's death knight
    class.
  description: The IsRuneReady method determines whether a death knight's rune at
    the specified index is currently available for activation. In World of Warcraft,
    death knights have six runes (indexed from 0 to 5) that regenerate over time after
    being consumed during abilities. This method returns true if the rune is ready
    (i.e., its cooldown has expired), and false otherwise. The method is typically
    used before attempting to use a rune-based ability to ensure the rune can be activated
    without violating game mechanics or causing errors.
  parameters: []
  returns: Returns true if the rune at the specified index is ready for use, false
    if it is currently on cooldown.
  examples:
  - title: Check if a specific rune is ready
    code: "if (player->GetRuneManager()->IsRuneReady(0)) {\n    // Use Blood Strike\
      \ with rune 0\n    player->CastSpell(target, SPELL_BLOOD_STRIKE, true);\n}"
    language: cpp
  - title: Iterate through all runes to find available ones
    code: "RuneManager* rm = player->GetRuneManager();\nfor (uint8 i = 0; i < 6; ++i)\
      \ {\n    if (rm->IsRuneReady(i)) {\n        // Process ready rune\n        printf(\"\
      Rune %u is ready\\n\", i);\n    }\n}"
    language: cpp
  notes: This method does not modify any internal state of the RuneManager. It only
    reads the current cooldown status of the specified rune. The rune index must be
    between 0 and 5 inclusive, otherwise behavior is undefined. This method is thread-safe
    as it only performs read operations on immutable data.
  warnings: Do not assume that all runes are ready simultaneously; death knights can
    only use one rune per ability. Using an unavailable rune in a spell cast will
    result in an error or failure to execute the spell. Always validate rune readiness
    before attempting to consume a rune for an ability.
  related:
  - GetRuneCooldown
  - SetRuneReady
  - ConsumeRune
  - ResetRune
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:01:22.381610'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
