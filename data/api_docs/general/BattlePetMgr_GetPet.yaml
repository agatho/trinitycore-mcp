api:
  class: BattlePetMgr
  method: GetPet
  signature: BattlePet * BattlePetMgr::GetPet(int guid)
documentation:
  brief: Retrieves a BattlePet object by its unique identifier (GUID) from the BattlePet
    manager.
  description: The GetPet method retrieves a BattlePet object from the BattlePet manager
    using the specified unique identifier (GUID). This method is typically used to
    access a specific battle pet owned by a player or associated with a particular
    game entity. The method performs a lookup in the internal container of active
    battle pets and returns a pointer to the requested pet if found, or nullptr if
    no pet exists with the given GUID. It's important to note that the returned pointer
    should be checked for null before use to avoid dereferencing a null pointer.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the battle pet to retrieve. This
      value corresponds to the pet's globally unique identifier used internally by
      the TrinityCore framework.
  returns: A pointer to the BattlePet object if a pet with the specified GUID exists,
    or nullptr if no such pet is found in the manager.
  examples:
  - title: Basic Usage
    code: "BattlePet* pet = battlePetMgr->GetPet(12345);\nif (pet != nullptr) {\n\
      \    // Use the pet object\n    std::cout << \"Found pet with name: \" << pet->GetName()\
      \ << std::endl;\n} else {\n    std::cout << \"No pet found with GUID 12345\"\
      \ << std::endl;\n}"
    language: cpp
  - title: Safe Access with Null Check
    code: "uint64 petGuid = player->GetBattlePetGUID();\nBattlePet* pet = battlePetMgr->GetPet(petGuid);\n\
      if (pet && pet->IsAlive()) {\n    // Perform actions on the alive pet\n    pet->SetHealth(100);\n\
      } else {\n    // Handle case where pet is not found or dead\n    LOG_ERROR(\"\
      world\", \"Battle pet with GUID {} not found or dead.\", petGuid);\n}"
    language: cpp
  notes: The BattlePet manager maintains an internal data structure to efficiently
    retrieve pets by their GUID. This method is commonly used during combat, pet interactions,
    or when updating pet status in the game world. The returned BattlePet pointer
    is valid only as long as the pet exists in the manager and has not been removed.
  warnings: Always check if the returned pointer is not null before using it to prevent
    segmentation faults. Be aware that pets may be removed from the manager during
    combat or when they are released/deleted, so the pointer might become invalid
    after certain operations.
  related:
  - GetPetBySlot
  - AddPet
  - RemovePet
  - HasPet
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:56:17.832302'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
