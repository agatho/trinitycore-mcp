api:
  class: Spell
  method: CallScriptSuccessfulDispel
  signature: void Spell::CallScriptSuccessfulDispel(int effIndex)
documentation:
  brief: Invokes the script handler for successful dispel events on a spell effect.
  description: The CallScriptSuccessfulDispel method is used to trigger the scripted
    handling of successful dispel events within the TrinityCore spell system. This
    method is typically called when a spell effect successfully removes an aura from
    a target, allowing custom scripts or handlers to execute specific logic in response
    to the dispel event. The method takes an effect index parameter that identifies
    which spell effect caused the dispel, enabling precise targeting of script execution
    for different spell components. It is part of the internal spell handling mechanism
    and is usually invoked automatically by the core during spell processing rather
    than being called directly by external code.
  parameters:
  - name: effIndex
    description: The index of the spell effect that triggered the successful dispel.
      This identifies which effect in the spell's effect array caused the dispel to
      occur, allowing for targeted script execution based on the specific spell component.
  returns: null
  examples:
  - title: Basic usage within spell processing
    code: "void MySpellScript::OnDispel(Unit* target)\n{\n    // Called when a dispel\
      \ is successful\n    if (Spell* spell = GetSpell())\n    {\n        spell->CallScriptSuccessfulDispel(0);\n\
      \    }\n}"
    language: cpp
  - title: Handling multiple effects in a dispel scenario
    code: "void MySpellHandler::HandleDispel(Spell* spell, int effectIndex)\n{\n \
      \   // Process different effects based on their index\n    switch (effectIndex)\n\
      \    {\n        case 0:\n            spell->CallScriptSuccessfulDispel(0);\n\
      \            break;\n        case 1:\n            spell->CallScriptSuccessfulDispel(1);\n\
      \            break;\n        default:\n            break;\n    }\n}"
    language: cpp
  notes: This method is part of the internal spell scripting system and should not
    be called directly from outside the core spell handling logic. The effect index
    parameter must correspond to a valid spell effect within the spell's effect array,
    otherwise behavior is undefined. The method does not perform any validation on
    the effect index internally.
  warnings: Do not call this method without ensuring that the spell has been properly
    initialized and that the effect index is valid. Incorrect usage may lead to memory
    access violations or unexpected behavior in spell processing. This method should
    only be invoked during active spell execution when dispel events occur.
  related:
  - Spell::CallScriptEffectLaunch
  - Spell::CallScriptEffectHit
  - Spell::CallScriptEffectAura
  - Spell::DoAllEffects
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T09:54:44.915594'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
