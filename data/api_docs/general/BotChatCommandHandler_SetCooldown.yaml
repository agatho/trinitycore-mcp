api:
  class: BotChatCommandHandler
  method: SetCooldown
  signature: void BotChatCommandHandler::SetCooldown(const CommandContext & context,
    const ChatCommand & command)
documentation:
  brief: Sets the cooldown period for a bot's chat commands based on the provided
    command context and chat command parameters.
  description: The SetCooldown method configures the cooldown timer for bot chat commands
    within the TrinityCore framework. This function is typically invoked when a bot
    executes a command that should not be repeated too frequently, ensuring controlled
    usage of command-based functionalities. The method processes the CommandContext
    and ChatCommand objects to determine how long the bot must wait before executing
    the same or similar commands again. It integrates with the game's command handling
    system to enforce cooldowns on bot actions, preventing spam or abuse of automated
    features. This functionality is crucial for maintaining balance in bot behavior
    and ensuring that automated commands are used appropriately within the game environment.
  parameters:
  - name: context
    description: The CommandContext object containing information about the current
      command execution context, including player, session, and command source details.
  - name: command
    description: The ChatCommand object representing the specific command being processed,
      which includes command name, parameters, and access level requirements.
  returns: null
  examples:
  - title: Basic cooldown setting for a bot command
    code: "void BotChatCommandHandler::SetCooldown(const CommandContext& context,\
      \ const ChatCommand& command)\n{\n    // Example implementation\n    uint32\
      \ cooldownTime = 5000; // 5 seconds\n    if (command.Name == \"botmove\")\n\
      \        cooldownTime = 10000; // 10 seconds for movement commands\n    \n \
      \   // Apply cooldown logic here\n    context.GetPlayer()->SetBotCommandCooldown(command.Name,\
      \ cooldownTime);\n}"
    language: cpp
  notes: This method likely interacts with internal bot command tracking systems and
    may be part of a larger framework for managing automated player behavior. Developers
    should consider that cooldowns are typically stored per-bot instance and may persist
    across sessions depending on configuration.
  warnings: Improper implementation of this method could lead to bots spamming commands
    or being unable to execute necessary actions due to overly strict cooldowns. Ensure
    that cooldown logic aligns with game balance requirements and does not create
    unintended user experience issues.
  related:
  - GetCooldown
  - IsOnCooldown
  - ResetCooldown
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:22:29.268571'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
