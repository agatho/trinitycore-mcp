api:
  class: Player
  method: CanBankItem
  signature: int Player::CanBankItem(uint8 bag, uint8 slot, ItemPosCountVec & dest,
    Item * pItem, bool swap, bool not_loading, bool reagentBankOnly) const
documentation:
  brief: Checks if an item can be stored in a bank slot.
  description: The CanBankItem method determines whether a given item can be placed
    into a specific bank slot, considering various constraints such as bag type, slot
    availability, and item compatibility. It evaluates the item's position within
    the player's inventory or bank and returns a status code indicating success or
    failure. This method is crucial for handling bank operations and ensuring proper
    item placement during banking transactions.
  parameters:
  - name: bag
    description: The bag slot where the item should be placed, typically representing
      a bank bag (0-11).
  - name: slot
    description: The specific slot within the bag where the item will be stored (0-45).
  - name: dest
    description: A reference to ItemPosCountVec that holds the result of the item
      placement calculation.
  - name: pItem
    description: The item being checked for bank storage, which must be valid and
      not null.
  - name: swap
    description: Boolean indicating whether swapping is allowed when placing items
      in the bank.
  - name: not_loading
    description: Boolean flag that prevents loading checks during item placement operations.
  - name: reagentBankOnly
    description: Boolean flag that restricts item placement to reagent bank slots
      only.
  returns: Returns an integer value representing the success or failure of the item
    placement operation. The return values typically include 0 for success, and non-zero
    values indicating various error conditions such as invalid slot, item type mismatch,
    or insufficient space.
  examples:
  - title: Basic Bank Item Check
    code: "Item* item = player->GetItemByPos(1, 1);\nint result = player->CanBankItem(0,\
      \ 0, dest, item, false, false, false);\nif (result == 0)\n{\n    // Item can\
      \ be banked\n}"
    language: cpp
  - title: Advanced Bank Item Check with Swap
    code: "Item* item = player->GetItemByPos(1, 1);\nItemPosCountVec dest;\nint result\
      \ = player->CanBankItem(0, 0, dest, item, true, false, true);\nif (result !=\
      \ 0)\n{\n    // Item cannot be banked due to swap restrictions\n}"
    language: cpp
  notes: This method is part of the player's banking system and should be used carefully
    during transaction handling. It performs validation checks on item types, slot
    availability, and bag compatibility. The method may involve multiple internal
    checks including item validity, slot restrictions, and inventory space requirements.
  warnings: The method requires valid item references; passing null items will cause
    errors. Also, the swap parameter must be handled carefully as it affects item
    placement logic. Using incorrect bag or slot values can lead to invalid results.
  related:
  - CanBankItem
  - GetItemByPos
  - StoreItem
  - BankItem
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T17:52:46.802787'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
