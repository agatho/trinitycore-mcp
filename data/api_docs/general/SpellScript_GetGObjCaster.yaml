api:
  class: SpellScript
  method: GetGObjCaster
  signature: GameObject * SpellScript::GetGObjCaster() const
documentation:
  brief: Returns the GameObject caster associated with the spell script.
  description: The GetGObjCaster method retrieves the GameObject that cast the spell.
    This is typically used in spell scripts where the caster is a game object such
    as a trap, door, or other interactive environment element. The returned pointer
    can be null if no GameObject caster is set or if the spell was not cast by a GameObject.
    This method is commonly used in custom spell effects that need to interact with
    or reference the originating GameObject.
  parameters: []
  returns: A pointer to the GameObject that cast the spell, or nullptr if no GameObject
    caster is associated with the spell script.
  examples:
  - title: Basic usage to check GameObject caster
    code: "void MySpellScript::HandleEffect(SpellEffIndex effIndex)\n{\n    GameObject*\
      \ goCaster = GetGObjCaster();\n    if (goCaster)\n    {\n        // Perform\
      \ action based on the GameObject caster\n        goCaster->SetGoState(GO_STATE_ACTIVE);\n\
      \    }\n}"
    language: cpp
  - title: Using GameObject caster to trigger custom behavior
    code: "class MyCustomSpellScript : public SpellScript\n{\npublic:\n    void HandleDummyEffect(SpellEffIndex\
      \ effIndex) override\n    {\n        GameObject* goCaster = GetGObjCaster();\n\
      \        if (!goCaster)\n            return;\n\n        // Custom logic based\
      \ on the GameObject type\n        if (goCaster->GetGOInfo()->type == GAMEOBJECT_TYPE_SPELL_FOCUS)\n\
      \        {\n            // Trigger special effect for spell focus objects\n\
      \            goCaster->CastSpell(nullptr, 12345, true);\n        }\n    }\n\
      };"
    language: cpp
  notes: The GameObject caster is only available when the spell was cast by a GameObject
    rather than a player or creature. This method should be used carefully as the
    returned pointer may be null and must not be deleted or modified directly. The
    GameObject remains valid for the duration of the spell effect.
  warnings: Do not assume that the returned GameObject pointer is always valid - always
    check for nullptr before using it. Be cautious when modifying the GameObject through
    this pointer, as direct manipulation might interfere with core game mechanics
    or cause undefined behavior.
  related:
  - GetCaster
  - GetSpell
  - GetEffectIndex
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T05:59:36.263272'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
