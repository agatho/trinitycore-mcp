api:
  class: WorldObject
  method: IsInBetween
  signature: bool WorldObject::IsInBetween(const WorldObject * obj1, const WorldObject
    * obj2, float size) const
documentation:
  brief: Determines whether this WorldObject is positioned between two other WorldObjects
    within a specified size threshold.
  description: The IsInBetween method evaluates if the calling WorldObject lies spatially
    between two specified WorldObjects, considering their relative positions and a
    given size parameter. This functionality is commonly used in game mechanics such
    as determining if an object is obstructed or positioned between two entities,
    for example, when checking if a mob is standing between a player and an NPC, or
    if a spell's target is blocked by another unit. The method uses the objects' positions
    and the provided size to define a buffer zone that influences the result. It returns
    true if the object is considered to be in between the two specified objects, and
    false otherwise.
  parameters:
  - name: obj1
    description: Pointer to the first WorldObject that defines one end of the spatial
      range.
  - name: obj2
    description: Pointer to the second WorldObject that defines the other end of the
      spatial range.
  - name: size
    description: A float value representing the size threshold used to determine if
      the object is considered 'between' the two given objects. This typically represents
      a buffer or margin of error in positioning.
  returns: Returns true if the WorldObject is positioned between obj1 and obj2 within
    the specified size threshold; otherwise, returns false.
  examples:
  - title: Check if a mob is positioned between player and NPC
    code: "if (mob->IsInBetween(player, npc, 2.0f)) {\n    // Mob is considered to\
      \ be in between player and NPC\n    // Perform some logic here\n}"
    language: cpp
  - title: Use with spell targeting mechanics
    code: "if (target->IsInBetween(caster, target, 1.5f)) {\n    // Target is obstructed\
      \ or positioned between caster and itself\n    // Cancel spell or apply obstruction\
      \ effects\n}"
    language: cpp
  notes: This method relies on spatial positioning calculations and may be affected
    by floating-point precision issues in certain edge cases. It should not be used
    for high-frequency checks without performance considerations, as it involves multiple
    vector operations and comparisons.
  warnings: Ensure that both obj1 and obj2 are valid pointers to WorldObjects; passing
    null pointers will likely result in undefined behavior or crashes. The size parameter
    should be carefully chosen based on the expected spatial relationships between
    objects.
  related:
  - GetPosition
  - GetDistance
  - IsWithinDist
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T21:27:05.830673'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
