api:
  class: Unit
  method: HasAuraTypeWithValue
  signature: bool Unit::HasAuraTypeWithValue(int auraType, int32 value) const
documentation:
  brief: Checks if the unit has an aura of a specific type with a given value.
  description: This method determines whether a Unit (such as a player or creature)
    possesses a specific aura type with a particular value. It is commonly used in
    World of Warcraft's TrinityCore framework to evaluate aura effects, particularly
    for checking if a unit has a specific aura that matches a certain value, such
    as a spell effect or stat modifier. The method evaluates the aura's type and value
    against the unit's current aura state, returning true if a matching aura exists.
    This functionality is essential for game mechanics involving spell effects, buffs/debuffs,
    and various gameplay interactions.
  parameters:
  - name: auraType
    description: The aura type to check for (e.g., 0 = SPELL_AURA_NONE, 1 = SPELL_AURA_BIND,
      etc.). This corresponds to the AuraType enum values used in TrinityCore's spell
      system.
  - name: value
    description: The value to compare against the aura. This is typically a numeric
      value that represents the magnitude of the effect (e.g., 100 = 100% bonus, -50
      = 50% penalty).
  returns: Returns true if the unit has an aura of the specified type with the given
    value; otherwise returns false.
  examples:
  - title: Basic usage example
    code: "if (player->HasAuraTypeWithValue(SPELL_AURA_MOD_STAT, 10)) {\n    // Player\
      \ has a stat modifier aura with value 10\n}"
    language: cpp
  - title: Advanced usage example
    code: "bool hasStatMod = player->HasAuraTypeWithValue(SPELL_AURA_MOD_STAT, -50);\n\
      if (hasStatMod) {\n    // Player has a negative stat modifier aura with value\
      \ -50\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related methods
    to evaluate complex spell effects or to determine whether certain conditions are
    met. Performance-wise, it should be used carefully as it involves iterating through
    the unit's aura list, which can be costly if called frequently.
  warnings: The method may not work correctly if the aura type or value is invalid
    or if the unit does not have a proper aura state. Care must be taken to ensure
    that the aura type and value are valid before calling this method.
  related:
  - Unit::HasAura
  - Unit::HasAuraType
  - Unit::GetAura
  - Unit::GetAuraTypeWithValue
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:22:22.963048'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
