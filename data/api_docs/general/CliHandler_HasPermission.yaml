api:
  class: CliHandler
  method: HasPermission
  signature: bool CliHandler::HasPermission(int param0) const
documentation:
  brief: Checks if the CLI handler has the specified permission level.
  description: The HasPermission method determines whether the current Command Line
    Interface (CLI) handler instance possesses a specific permission level. This is
    used in TrinityCore's administrative system to control access to various console
    commands and operations based on user privileges. The method evaluates the internal
    permission level of the CLI handler against the provided parameter, which typically
    represents a required permission tier. It's commonly used before executing privileged
    commands to ensure proper authorization.
  parameters:
  - name: param0
    description: The permission level to check against. This is typically an integer
      representing a specific permission tier or flag within the TrinityCore permission
      system.
  returns: Returns true if the CLI handler has the specified permission level or higher,
    false otherwise.
  examples:
  - title: Basic Permission Check
    code: "if (handler.HasPermission(3)) {\n    // Execute admin command\n    handler.SendSysMessage(\"\
      Admin privileges confirmed.\");\n}"
    language: cpp
  - title: Conditional Command Execution
    code: "void HandleSpecialCommand(CliHandler* handler) {\n    if (!handler->HasPermission(5))\
      \ {\n        handler->SendSysMessage(\"Access denied: Insufficient permissions.\"\
      );\n        return;\n    }\n    // Proceed with privileged operation\n    handler->SendSysMessage(\"\
      Executing special command...\");\n}"
    language: cpp
  notes: The permission levels in TrinityCore typically correspond to different administrative
    tiers, where higher numbers represent more privileged access. This method is often
    used in conjunction with other CLI handler methods to manage secure console access.
  warnings: Be cautious when using this method for access control as incorrect permission
    levels can lead to either unauthorized access or denial of legitimate administrative
    functions.
  related:
  - CliHandler::GetSession
  - CliHandler::SendSysMessage
  - CliHandler::HasPermissionLevel
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:14:06.246132'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
