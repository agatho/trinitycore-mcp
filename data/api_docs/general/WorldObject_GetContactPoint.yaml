api:
  class: WorldObject
  method: GetContactPoint
  signature: void WorldObject::GetContactPoint(const WorldObject * obj, float & x,
    float & y, float & z, float distance2d) const
documentation:
  brief: Calculates and returns the contact point of a WorldObject relative to another
    WorldObject.
  description: The GetContactPoint method determines the closest point of contact
    between two WorldObjects in 3D space, taking into account their physical dimensions
    and positioning. This method is commonly used for determining attack range, interaction
    points, or spatial relationships between objects such as players, creatures, and
    game objects. It calculates a point that represents the nearest position on the
    surface of the target object's bounding box, which can be useful for various gameplay
    mechanics including combat calculations, pathfinding, and spatial interactions.
  parameters:
  - name: obj
    description: Pointer to the WorldObject whose contact point is being calculated.
      This represents the target object against which the contact point is determined.
  - name: x
    description: Reference to the X coordinate of the calculated contact point. This
      value will be updated with the X position of the contact point.
  - name: y
    description: Reference to the Y coordinate of the calculated contact point. This
      value will be updated with the Y position of the contact point.
  - name: z
    description: Reference to the Z coordinate of the calculated contact point. This
      value will be updated with the Z position of the contact point.
  - name: distance2d
    description: The distance in 2D space (X and Y coordinates) between the two objects,
      which is used to determine the contact point location. This parameter affects
      how the method calculates the final contact point based on the relative positions
      of the objects.
  returns: null
  examples:
  - title: Basic usage example
    code: 'WorldObject* target = GetFirstWorldObject();

      float x, y, z;

      GetContactPoint(target, x, y, z, 5.0f);

      // x, y, z now contain the contact point coordinates'
    language: cpp
  - title: Advanced usage example with distance calculation
    code: 'WorldObject* target = GetFirstWorldObject();

      float x, y, z;

      float distance2d = 10.0f;

      GetContactPoint(target, x, y, z, distance2d);

      // Calculates contact point based on distance between objects'
    language: cpp
  notes: This method is typically used in conjunction with other spatial calculation
    methods for determining object interactions. Performance considerations include
    the fact that it involves calculations of bounding box intersections and may be
    computationally expensive if called frequently. Thread safety depends on the implementation
    of the WorldObject class, but generally this method should be safe to use in multi-threaded
    environments if properly synchronized.
  warnings: Care must be taken when using this method with objects that have different
    bounding box sizes or shapes, as it may not accurately reflect real-world spatial
    relationships. Also, ensure that the distance2d parameter is correctly set to
    avoid incorrect contact point calculations.
  related:
  - GetDistance
  - GetPosition
  - GetObjectBoundingRadius
  - GetOrientation
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T00:34:35.173446'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
