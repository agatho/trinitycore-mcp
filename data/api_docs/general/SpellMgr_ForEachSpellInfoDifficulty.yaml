api:
  class: SpellMgr
  method: ForEachSpellInfoDifficulty
  signature: void SpellMgr::ForEachSpellInfoDifficulty(uint32 spellId, std::function<void
    (const SpellInfo *)> callback)
documentation:
  brief: Iterates through all difficulty variants of a spell and applies a callback
    function to each.
  description: The ForEachSpellInfoDifficulty method retrieves all SpellInfo structures
    associated with a given spell ID across different difficulties (normal, heroic,
    mythic, etc.) and invokes the provided callback function for each variant. This
    is useful for performing operations that need to be applied consistently across
    all difficulty levels of a spell, such as applying modifications or gathering
    data from each variant. The method does not return any value but executes the
    callback for each SpellInfo found. It relies on the internal spell difficulty
    system used by TrinityCore to manage different spell behaviors in various encounter
    difficulties.
  parameters:
  - name: spellId
    description: The unique identifier of the spell to iterate through difficulty
      variants. Must correspond to a valid spell entry in the database.
  - name: callback
    description: A std::function object that accepts a const SpellInfo* parameter.
      This function will be called once for each difficulty variant of the specified
      spell ID.
  returns: null
  examples:
  - title: Print all difficulty variants of a spell
    code: "SpellMgr::Instance()->ForEachSpellInfoDifficulty(12345, [](const SpellInfo*\
      \ spellInfo) {\n    std::cout << \"Spell ID: \" << spellInfo->Id << \", Difficulty:\
      \ \" << spellInfo->GetDifficulty() << std::endl;\n});"
    language: cpp
  - title: Modify all difficulty variants of a spell
    code: "SpellMgr::Instance()->ForEachSpellInfoDifficulty(12345, [](const SpellInfo*\
      \ spellInfo) {\n    // Example modification\n    spellInfo->Effects[0].BasePoints\
      \ = 100;\n});"
    language: cpp
  notes: This method assumes that the spell ID passed exists in the database and has
    associated difficulty variants. The SpellInfo objects provided to the callback
    are read-only references, so modifications should be made carefully. Performance
    may vary depending on how many difficulty variants exist for a given spell.
  warnings: Modifying SpellInfo structures directly through this method can affect
    all instances of the spell in the game world. Ensure that any changes are synchronized
    with the core systems to avoid unexpected behavior or crashes.
  related:
  - GetSpellInfo
  - GetSpellDifficulty
  - SpellInfo::GetDifficulty
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T21:06:15.995643'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
