api:
  class: Creature
  method: GetHealthMultiplierForTarget
  signature: float Creature::GetHealthMultiplierForTarget(const int * target) const
documentation:
  brief: Returns the health multiplier for a target creature.
  description: This method retrieves the health multiplier value that determines how
    much health a creature has relative to its target. It is commonly used in AI behavior
    calculations to determine the health percentage of a creature compared to another
    creature or player. The method returns a float value representing the ratio of
    current health to maximum health, which can be used for various game mechanics
    such as determining attack patterns or health-based AI decisions.
  parameters:
  - name: target
    description: Pointer to the target creature whose health multiplier is being calculated.
      This parameter represents a creature object that is being compared against the
      current creature.
  returns: Returns a float value representing the health multiplier for the specified
    target. The value typically ranges from 0.0 to 1.0, where 1.0 indicates full health
    and values below 1.0 indicate reduced health relative to the target.
  examples:
  - title: Basic Usage Example
    code: float multiplier = creature->GetHealthMultiplierForTarget(&targetCreature);
    language: cpp
  notes: This method is typically used in conjunction with other AI-related methods
    to determine creature behavior based on health status. It may be affected by various
    game mechanics such as buffs, debuffs, or special abilities that alter the creature's
    health.
  warnings: Care should be taken when using this method as it may return unexpected
    values if the target creature is not properly initialized or if the creature is
    in a different state (e.g., dead or in combat).
  related:
  - GetHealth
  - GetMaxHealth
  - GetHealthPercent
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T19:17:58.829163'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
