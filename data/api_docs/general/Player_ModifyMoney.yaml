api:
  class: Player
  method: ModifyMoney
  signature: bool Player::ModifyMoney(int64 amount, bool sendError)
documentation:
  brief: Modifies the player's money amount by adding or removing specified coins.
  description: The ModifyMoney method allows players to adjust their money balance
    by a given amount. It handles both positive and negative values, where positive
    values add money and negative values remove money from the player's inventory.
    The method returns true if the operation succeeds, false otherwise. This functionality
    is commonly used in game events, quests, or NPC interactions where players need
    to be rewarded or debited with gold. The method also supports sending error messages
    to the player when the operation fails due to insufficient funds or other conditions.
  parameters:
  - name: amount
    description: The amount of money to add or remove from the player's inventory.
      Positive values increase the player's money, while negative values decrease
      it.
  - name: sendError
    description: When set to true, this parameter triggers an error message to be
      sent to the player if the operation fails due to insufficient funds or other
      conditions.
  returns: Returns true if the money modification was successful, false otherwise.
    A return value of false typically indicates that the player does not have enough
    money to subtract the specified amount or that the operation failed for other
    reasons.
  examples:
  - title: Basic usage example
    code: "int64 amount = 1000;\nbool success = player->ModifyMoney(amount, true);\n\
      if (success) {\n    // Money successfully added\n}\nelse {\n    // Error handling\n\
      }"
    language: cpp
  - title: Advanced usage with error handling
    code: "int64 amount = -500;\nbool success = player->ModifyMoney(amount, true);\n\
      if (!success) {\n    // Player doesn't have enough money\n    // Send error\
      \ message to player\n}"
    language: cpp
  notes: This method is thread-safe and can be used in both single-threaded and multi-threaded
    environments. It internally checks for sufficient funds before modifying the player's
    money balance, making it safe to use without additional validation. Performance-wise,
    this method is lightweight as it only updates the player's money value without
    triggering complex calculations or database operations.
  warnings: Be cautious when using negative amounts, as they may cause the player's
    money to go below zero, which could lead to unexpected behavior in game mechanics.
    Also, ensure that the amount parameter is properly validated to avoid potential
    overflow issues with large positive values.
  related:
  - Player::GetMoney
  - Player::SetMoney
  - Player::AddMoney
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T00:33:00.769813'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
