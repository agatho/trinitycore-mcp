api:
  class: ObstacleAvoidanceManager
  method: SetLookaheadTime
  signature: void ObstacleAvoidanceManager::SetLookaheadTime(float time)
documentation:
  brief: Sets the lookahead time for obstacle avoidance calculations in the AI movement
    system.
  description: The SetLookaheadTime method configures the time horizon used by the
    ObstacleAvoidanceManager to predict and avoid obstacles during pathfinding. This
    parameter determines how far into the future the AI considers potential collisions
    when calculating movement paths. A longer lookahead time allows for more proactive
    avoidance but may result in less responsive movement, while a shorter time provides
    quicker reactions but might miss distant obstacles. The value is typically specified
    in seconds and affects the smoothness and safety of NPC movement behavior.
  parameters:
  - name: time
    description: The lookahead time in seconds to be set for obstacle avoidance calculations.
      This value controls how far ahead the AI predicts potential collisions when
      planning movement paths.
  returns: null
  examples:
  - title: Setting Obstacle Avoidance Lookahead Time
    code: "ObstacleAvoidanceManager* manager = unit->GetMotionMaster()->GetMotionByType(MOTION_TYPE_ROAMING);\n\
      if (manager)\n{\n    manager->SetLookaheadTime(2.5f); // Set lookahead to 2.5\
      \ seconds\n}"
    language: cpp
  - title: Adjusting Lookahead Time Based on Unit Type
    code: "ObstacleAvoidanceManager* manager = unit->GetMotionMaster()->GetMotionByType(MOTION_TYPE_CHASE);\n\
      if (manager)\n{\n    if (unit->GetTypeId() == TYPEID_UNIT && unit->ToCreature()->IsPet())\n\
      \        manager->SetLookaheadTime(1.0f); // Shorter lookahead for pets\n  \
      \  else\n        manager->SetLookaheadTime(3.0f); // Longer lookahead for regular\
      \ units\n}"
    language: cpp
  notes: This method directly influences the AI's pathfinding behavior and should
    be used carefully to balance responsiveness with safety. The lookahead time affects
    performance as larger values require more computational resources for collision
    prediction. Changes take effect immediately on subsequent movement calculations.
  warnings: Setting extremely high values may cause performance degradation due to
    increased computational load. Setting very low values might result in frequent
    collisions or unnatural movement patterns. This method should not be called during
    active pathfinding operations as it may interfere with ongoing calculations.
  related:
  - GetLookaheadTime
  - UpdateObstacleAvoidance
  - EnableObstacleAvoidance
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T08:47:58.931084'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
