api:
  class: Player
  method: HasPlayerFlagEx
  signature: bool Player::HasPlayerFlagEx(PlayerFlagsEx flags) const
documentation:
  brief: Checks if the player has a specific player flag set.
  description: This method determines whether a particular player flag is currently
    set on the player object. It is commonly used in game logic to verify player states
    or permissions, particularly when dealing with player flags that control various
    gameplay behaviors such as PvP status, ghost state, or other special conditions.
    The method returns true if the specified flag is active and false otherwise. Player
    flags are typically defined using enum values from the PlayerFlagsEx enumeration.
  parameters: []
  returns: Returns true if the specified player flag is set on the player, false otherwise.
  examples:
  - title: Basic usage example
    code: "if (player->HasPlayerFlagEx PLAYER_FLAGS_EX_PVP))\n{\n    // Player is\
      \ flagged for PvP\n}"
    language: cpp
  notes: The method performs a bitwise AND operation between the player's flags and
    the provided flag, returning true only if all bits of the specified flag are present
    in the player's current flags. This implies that the method may be used to check
    multiple flags simultaneously by combining them using bitwise operations.
  warnings: This method should not be used for checking flags that are not defined
    in PlayerFlagsEx enum; it will return false for invalid flag values. Also, ensure
    that the player object is valid before calling this method to avoid undefined
    behavior.
  related:
  - Player::GetPlayerFlag
  - Player::SetPlayerFlag
  - Player::HasFlag
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:02:54.332029'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
