api:
  class: Object
  method: ToWorldObject
  signature: const WorldObject * Object::ToWorldObject() const
documentation:
  brief: Returns a pointer to the WorldObject representation of the current Object
    instance
  description: The ToWorldObject method serves as a casting utility that converts
    an Object instance into its corresponding WorldObject representation. This method
    is essential for accessing world-specific properties and methods that are exclusive
    to WorldObject instances. The conversion allows developers to interact with game
    objects in a world context, enabling proper handling of world-based operations
    such as movement, interaction, and spatial queries. It is commonly used when working
    with GameObjects, Players, and other world entities where the distinction between
    Object and WorldObject matters.
  parameters: []
  returns: Returns a const pointer to the WorldObject instance, or nullptr if the
    Object cannot be cast to a WorldObject. This indicates that the method may return
    null in cases where the object is not a valid WorldObject, such as when dealing
    with non-world objects like NPCs or items.
  examples:
  - title: Basic Usage Example
    code: "const WorldObject* wo = obj->ToWorldObject();\nif (wo)\n{\n    // Perform\
      \ world object operations\n}"
    language: cpp
  - title: World Object Access Example
    code: "Player* player = dynamic_cast<Player*>(obj->ToWorldObject());\nif (player)\n\
      {\n    // Access player-specific methods\n}"
    language: cpp
  notes: This method is typically used in conjunction with dynamic casting or type
    checking to ensure proper handling of object types. It is important to note that
    not all Object instances can be converted to WorldObject, particularly when dealing
    with non-world objects such as items or NPCs. Performance considerations are minimal,
    but care should be taken when using this method in high-frequency operations.
  warnings: This method should only be used when the object is confirmed to be a valid
    WorldObject. Using it on non-world objects may lead to undefined behavior or crashes.
    Also, be cautious about using this method in scenarios where the object might
    not be fully initialized.
  related:
  - Object::ToGameObject
  - Object::ToPlayer
  - Object::ToCreature
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T01:43:26.248759'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
