api:
  class: ObjectMgr
  method: ObjectMgr
  signature: void ObjectMgr::ObjectMgr(ObjectMgr && param0)
documentation:
  brief: Moves an ObjectMgr instance to another ObjectMgr instance, transferring all
    managed objects and resources.
  description: The ObjectMgr move constructor transfers ownership of all internal
    data structures, managed objects, and resources from the source ObjectMgr instance
    to the target instance. This operation is typically used during object initialization,
    assignment, or when moving objects between scopes. The method ensures that no
    data duplication occurs, and the source object is left in a valid but unspecified
    state. In TrinityCore's context, this is commonly used for efficient resource
    management when handling game world objects, creatures, items, and other entities
    managed by the ObjectMgr singleton.
  parameters: []
  returns: null
  examples:
  - title: Move ObjectMgr instance to new variable
    code: 'ObjectMgr&& sourceMgr = std::move(*sObjectMgr);

      ObjectMgr newMgr(std::move(sourceMgr));'
    language: cpp
  notes: This is a move constructor, not a copy constructor. After the move operation,
    the source ObjectMgr instance should not be used unless reinitialized. The implementation
    assumes that the source object is in a valid state for moving and that no other
    references to its internal data exist.
  warnings: Using this constructor on an already moved-from ObjectMgr instance results
    in undefined behavior. Ensure proper initialization of the moved-from object before
    reuse.
  related:
  - ObjectMgr::ObjectMgr()
  - ObjectMgr::operator=
  - ObjectMgr::~ObjectMgr
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T03:36:12.131640'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
