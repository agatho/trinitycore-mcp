api:
  class: Unit
  method: GetDispellableAuraList
  signature: void Unit::GetDispellableAuraList(const int * caster, uint32 dispelMask,
    DispelChargesList & dispelList, bool isReflect) const
documentation:
  brief: Collects dispellable auras on the unit based on caster and dispel mask.
  description: This method retrieves all dispellable auras applied to the unit, filtering
    them by caster and dispel mask. It is commonly used in spell mechanics for determining
    which auras can be removed through dispel effects. The method considers both the
    caster's identity and the type of dispel being performed, allowing for precise
    control over which auras are collected for removal. This functionality is essential
    for implementing dispel mechanics in World of Warcraft.
  parameters:
  - name: caster
    description: Pointer to the caster's GUID, or nullptr if all casters should be
      considered. If specified, only auras from that specific caster will be included.
  - name: dispelMask
    description: The type of dispel to filter by (e.g., DispelType::DISPEL_1, DISPEL_2).
      This determines which aura types are considered for removal.
  - name: dispelList
    description: Reference to a DispelChargesList where collected auras will be stored.
      Each entry contains the aura's GUID and charges.
  - name: isReflect
    description: Boolean flag indicating whether to consider reflection effects in
      the filtering process. If true, reflected auras may be included in the list.
  returns: null
  examples:
  - title: Basic Dispel List Collection
    code: 'DispelChargesList dispelList;

      Unit::GetDispellableAuraList(nullptr, DISPEL_1, dispelList, false);

      // Collects all auras that can be removed by DISPEL_1

      '
    language: cpp
  - title: Caster-Specific Dispel List
    code: 'DispelChargesList dispelList;

      Unit::GetDispellableAuraList(&casterGuid, DISPEL_2, dispelList, true);

      // Collects auras from specific caster that can be removed by DISPEL_2

      '
    language: cpp
  notes: The method operates on the principle of filtering auras based on their dispel
    type and caster. It is optimized for performance, with minimal overhead when collecting
    auras. The implementation uses standard C++ containers and does not involve threading
    concerns.
  warnings: This method should be used carefully when dealing with multiple casters,
    as incorrect handling may lead to improper filtering of auras. Ensure that the
    dispelMask parameter matches the intended dispel type for accurate results.
  related:
  - GetAuraList
  - GetDispellableAura
  - RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:14:28.809705'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
