api:
  class: Object
  method: GetSpawnTrackingStateDataForPlayer
  signature: const SpawnTrackingStateData * Object::GetSpawnTrackingStateDataForPlayer(const
    Player * player) const
documentation:
  brief: Retrieves the spawn tracking state data for a specific player associated
    with this object.
  description: This method returns a pointer to the SpawnTrackingStateData structure
    that holds information about how an object's spawn state is being tracked for
    a given player. The spawn tracking mechanism in TrinityCore is used to manage
    visibility and synchronization of dynamic objects (such as creatures, game objects,
    or other entities) between the server and individual players. This data typically
    includes flags or states indicating whether the object has been spawned, despawned,
    or if its spawn status has changed recently for that specific player. It's commonly
    used in scenarios where per-player visibility or state tracking is required, such
    as during zone transitions, object spawning/despawning logic, or when handling
    updates to dynamic elements in the game world.
  parameters: []
  returns: A const pointer to a SpawnTrackingStateData structure which contains tracking
    information for this object's spawn state from the perspective of the specified
    player. Returns nullptr if no tracking data exists for the player or if the object
    is not tracked for that player.
  examples:
  - title: Basic Usage
    code: "const SpawnTrackingStateData* trackingData = myObject->GetSpawnTrackingStateDataForPlayer(player);\n\
      if (trackingData != nullptr)\n{\n    // Use trackingData to determine spawn\
      \ state for this player\n}"
    language: cpp
  - title: Checking Spawn Status
    code: "const SpawnTrackingStateData* data = object->GetSpawnTrackingStateDataForPlayer(player);\n\
      if (data && data->IsSpawned())\n{\n    // Object is currently spawned for this\
      \ player\n}\nelse\n{\n    // Object is not spawned or tracking data unavailable\n\
      }"
    language: cpp
  notes: This method does not perform any locking or thread synchronization internally.
    It should be used carefully in multi-threaded contexts where the object's spawn
    state might change concurrently. The returned pointer is valid only as long as
    the object and player remain alive and the tracking data has not been invalidated.
  warnings: Do not modify the returned SpawnTrackingStateData structure directly;
    it is intended for read-only access. Accessing the returned pointer after the
    player or object has been destroyed may result in undefined behavior. Ensure that
    the player parameter is valid before calling this method.
  related:
  - GetSpawnTrackingStateData
  - SetSpawnTrackingStateDataForPlayer
  - ClearSpawnTrackingStateDataForPlayer
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T20:00:02.522619'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
