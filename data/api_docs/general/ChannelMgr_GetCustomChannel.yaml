api:
  class: ChannelMgr
  method: GetCustomChannel
  signature: Channel * ChannelMgr::GetCustomChannel(const std::string & name) const
documentation:
  brief: Retrieves a custom channel instance by its name from the channel manager.
  description: The GetCustomChannel method searches through the collection of custom
    channels managed by the ChannelMgr and returns a pointer to the Channel object
    that matches the specified name. This method is used to access existing custom
    channels in the game world, such as those created by players for private communication
    or guild-specific discussions. The returned channel pointer may be null if no
    matching channel exists. Custom channels are distinct from system channels like
    'General' or 'Trade' and typically represent player-created groups with specific
    names.
  parameters:
  - name: name
    description: The exact name of the custom channel to retrieve. This string must
      match the channel's name exactly, including case sensitivity.
  returns: A pointer to the Channel object if a custom channel with the specified
    name exists; otherwise, returns nullptr if no matching channel is found.
  examples:
  - title: Retrieve a Custom Channel
    code: "Channel* channel = channelMgr->GetCustomChannel(\"MyPrivateChannel\");\n\
      if (channel)\n{\n    // Channel exists, perform operations\n    sWorld->SendWorldText(LANG_CHANNEL_ONLINE,\
      \ channel->GetName().c_str());\n}\nelse\n{\n    // Channel does not exist\n\
      \    sWorld->SendWorldText(LANG_CHANNEL_NONEXISTENT, \"MyPrivateChannel\");\n\
      }"
    language: cpp
  notes: This method performs a linear search through the internal channel list, so
    performance may degrade with a large number of custom channels. The method is
    typically used in conjunction with other channel management functions to provide
    full channel lifecycle control.
  warnings: The returned Channel pointer should always be checked for null before
    use to prevent dereferencing a null pointer. Custom channels are not persistent
    across server restarts unless explicitly saved to the database.
  related:
  - ChannelMgr::GetChannel
  - ChannelMgr::CreateChannel
  - ChannelMgr::RemoveChannel
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T16:26:56.671470'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
