api:
  class: ObstacleAvoidanceManager
  method: IsPositionBlocked
  signature: bool ObstacleAvoidanceManager::IsPositionBlocked(const int & pos, float
    radius)
documentation:
  brief: Determines whether a given position is blocked by obstacles within the specified
    radius.
  description: The IsPositionBlocked method checks if a particular position in the
    game world is obstructed by static or dynamic obstacles, such as terrain features,
    buildings, or other entities. This function is typically used during AI pathfinding
    to avoid invalid movement targets. The method evaluates the area around the given
    position using the provided radius to determine if any collisions occur with environment
    geometry or interactive objects. It's an essential utility for ensuring that NPC
    movement and player actions are constrained by realistic environmental boundaries.
  parameters:
  - name: pos
    description: A reference to an integer representing the position identifier or
      index within the obstacle avoidance system. This could be a coordinate value,
      a node index, or a handle to a specific location in the navigation mesh.
  - name: radius
    description: A floating-point value specifying the radius around the position
      to check for obstacles. This defines how much space around the point should
      be evaluated for collisions.
  returns: Returns true if the specified position is blocked by obstacles within the
    given radius, otherwise returns false.
  examples:
  - title: Basic Usage
    code: bool isBlocked = obstacleManager.IsPositionBlocked(12345, 2.0f);
    language: cpp
  - title: Pathfinding Check
    code: "if (!obstacleManager.IsPositionBlocked(targetNode, player.GetBoundingRadius()))\
      \ {\n    // Proceed with movement to target\n    MoveToTarget();\n} else {\n\
      \    // Find alternative path\n    FindAlternativePath();\n}"
    language: cpp
  notes: This method likely performs spatial queries against the game's collision
    system or navigation mesh. It may cache results for performance optimization depending
    on implementation details. The 'pos' parameter should be validated to ensure it
    refers to a valid location within the current world context.
  warnings: Incorrect usage of this function can lead to NPCs or players moving through
    solid objects, breaking immersion and gameplay logic. Ensure that the position
    identifier is valid before calling this method.
  related:
  - GetObstacleCount
  - AddObstacle
  - RemoveObstacle
  - UpdateObstacles
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:49:19.564452'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
