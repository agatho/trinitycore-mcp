api:
  class: Unit
  method: GetTotalAuraModifier
  signature: int32 Unit::GetTotalAuraModifier(int auraType, const int & predicate)
    const
documentation:
  brief: Calculates total aura modifier value for a specified aura type.
  description: This method computes the sum of all aura modifiers applied to a unit
    for a specific aura type, considering both positive and negative effects. It is
    commonly used in World of Warcraft's spell system to determine how much a particular
    aura affects a unit's stats or abilities. The method takes into account various
    sources of modifiers including buffs, debuffs, and passive effects, making it
    essential for calculating effective stat values in combat scenarios.
  parameters:
  - name: auraType
    description: The type of aura to calculate modifier for. This represents a specific
      aura category such as damage, healing, or stat modifiers.
  - name: predicate
    description: A function pointer that determines which aura effects should be considered.
      This allows filtering based on specific conditions like whether the aura is
      positive or negative, or if it's from a particular source.
  returns: Returns an integer value representing the total modifier applied to the
    specified aura type. The value can be positive or negative depending on the effects
    of various auras.
  examples:
  - title: Basic usage example
    code: "int32 modifier = unit->GetTotalAuraModifier(SPELL_AURA_MOD_DAMAGE_DONE,\
      \ [](const Aura* aura) {\n    return aura->GetModifierType() == SPELL_AURA_MOD_DAMAGE_DONE;\n\
      });"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine total stat modifiers. Performance considerations include the need
    to iterate through all active auras on the unit, which can be computationally
    expensive if many auras are present.
  warnings: Care must be taken when using this method as it may return negative values
    depending on the aura type and predicate. Also, the method does not account for
    stacking rules or specific game mechanics like critical strike chance calculations
    that might affect the final result.
  related:
  - GetAuraMod
  - GetAuraEffect
  - GetTotalAuraModifierByType
  - GetAuraModValue
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T12:38:33.140999'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
