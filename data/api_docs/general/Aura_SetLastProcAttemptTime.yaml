api:
  class: Aura
  method: SetLastProcAttemptTime
  signature: void Aura::SetLastProcAttemptTime(int lastProcAttemptTime)
documentation:
  brief: Sets the timestamp of the last proc attempt for this aura.
  description: The SetLastProcAttemptTime method updates the internal tracking time
    for when this aura last attempted to proc a spell effect. This is used by the
    game's proc system to determine whether a proc can occur based on cooldowns or
    other timing restrictions. The method accepts an integer representing the timestamp
    in milliseconds since epoch, which should typically be obtained from the server's
    current time. This method is primarily used internally by the core engine during
    aura application and proc evaluation logic.
  parameters:
  - name: lastProcAttemptTime
    description: An integer value representing the Unix timestamp (in milliseconds)
      of when this aura last attempted to proc. This value is typically set using
      GetMSTime() or similar time functions from the TrinityCore framework.
  returns: null
  examples:
  - title: Setting Last Proc Attempt Time
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    aura->SetLastProcAttemptTime(GetMSTime());\n\
      }"
    language: cpp
  - title: Updating Proc Attempt Time During Custom Logic
    code: "void MyCustomAuraHandler(Player* player, Aura* aura)\n{\n    // Perform\
      \ custom proc logic\n    if (CheckProcConditions(player, aura))\n    {\n   \
      \     // Trigger the proc\n        aura->SetLastProcAttemptTime(GetMSTime());\n\
      \    }\n}"
    language: cpp
  notes: This method directly modifies internal state of the Aura object and should
    only be called when necessary for accurate proc timing. It's typically invoked
    automatically by the core engine during aura application or proc evaluation, but
    may also be manually called in custom spell or aura handlers.
  warnings: Modifying this value manually can interfere with normal proc cooldown
    behavior if not handled carefully. Ensure that the timestamp represents a valid
    time and is consistent with the server's time system to avoid unexpected proc
    timing issues.
  related:
  - GetLastProcAttemptTime
  - IsProcCooldownExpired
  - AddAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:08:21.031956'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
