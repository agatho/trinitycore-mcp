api:
  class: Aura
  method: GetApplyTime
  signature: time_t Aura::GetApplyTime() const
documentation:
  brief: Returns the timestamp when the aura was applied to a unit.
  description: The GetApplyTime method retrieves the time at which an aura was initially
    applied to a unit in the game world. This timestamp is typically used for calculating
    duration, tracking aura expiration, or determining the order of applied effects.
    The returned value represents a Unix timestamp (seconds since epoch) and can be
    used to determine how long an aura has been active or when it was originally cast.
    This method is commonly used in conjunction with other aura-related functions
    to manage buff/debuff states and their lifespans within the TrinityCore framework.
  parameters: []
  returns: A time_t value representing the Unix timestamp (seconds since January 1,
    1970) when the aura was applied. Returns 0 if the aura has not been applied yet
    or if the aura object is in an invalid state.
  examples:
  - title: Basic Usage to Check Aura Duration
    code: "Aura* aura = unit->GetAura(12345);\nif (aura)\n{\n    time_t applyTime\
      \ = aura->GetApplyTime();\n    time_t currentTime = time(nullptr);\n    int\
      \ duration = static_cast<int>(currentTime - applyTime);\n    printf(\"Aura has\
      \ been active for %d seconds\\n\", duration);\n}"
    language: cpp
  - title: Determining if an Aura is Expired Based on Apply Time
    code: "Aura* aura = unit->GetAura(12345);\nif (aura)\n{\n    time_t applyTime\
      \ = aura->GetApplyTime();\n    time_t currentTime = time(nullptr);\n    int\
      \ auraDuration = 300; // 5 minutes\n    if ((currentTime - applyTime) >= auraDuration)\n\
      \    {\n        printf(\"Aura has expired\\n\");\n    }\n}"
    language: cpp
  notes: The returned timestamp is based on the server's system time and may be affected
    by time synchronization issues in multiplayer environments. This method assumes
    that the aura object is valid and has been properly initialized with an apply
    time. The value returned is consistent across all TrinityCore versions for this
    specific API.
  warnings: Do not use the return value directly for time calculations without checking
    if it's zero, as this indicates the aura may not have been applied yet or the
    aura object is invalid. Also, be aware that time_t values are platform-dependent
    and may overflow on 32-bit systems after 2038.
  related:
  - GetDuration
  - GetMaxDuration
  - GetAuraDuration
  - IsApplied
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:26:03.455070'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
