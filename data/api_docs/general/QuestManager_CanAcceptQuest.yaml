api:
  class: QuestManager
  method: CanAcceptQuest
  signature: bool QuestManager::CanAcceptQuest(uint32 questId) const
documentation:
  brief: Checks if a player can accept a specified quest based on quest requirements
    and player state.
  description: The CanAcceptQuest method determines whether a player is eligible to
    accept a specific quest by evaluating various conditions such as quest level requirements,
    previous quest completion status, required items or currency, and player class/race
    restrictions. This method is typically called before allowing a player to take
    up a new quest to ensure they meet all prerequisites. It does not modify any game
    state but returns a boolean value indicating acceptance eligibility. The check
    includes validation of quest flags, quest gating conditions, and character-specific
    limitations such as level range or faction requirements.
  parameters: []
  returns: Returns true if the player can accept the quest; otherwise returns false.
    A return value of false indicates that one or more prerequisites for accepting
    the quest are not met, such as insufficient level, missing required previous quests,
    or unmet item/currency conditions.
  examples:
  - title: Basic Quest Acceptance Check
    code: "if (player->GetQuestManager()->CanAcceptQuest(12345)) {\n    // Player\
      \ can accept quest 12345\n    player->AddQuest(12345);\n} else {\n    // Player\
      \ cannot accept quest 12345\n    player->SendNotification(\"You do not meet\
      \ the requirements to accept this quest.\");\n}"
    language: cpp
  - title: Conditional Quest Acceptance with Logging
    code: "uint32 questId = 67890;\nQuestManager* qm = player->GetQuestManager();\n\
      if (qm->CanAcceptQuest(questId)) {\n    // Proceed with quest acceptance logic\n\
      \    player->AddQuest(questId);\n    sLog->outInfo(LOG_FILTER_PLAYER, \"Player\
      \ %u accepted quest %u\", player->GetGUID().GetCounter(), questId);\n} else\
      \ {\n    // Log why quest was denied\n    sLog->outInfo(LOG_FILTER_PLAYER, \"\
      Player %u failed to accept quest %u - requirements not met\", player->GetGUID().GetCounter(),\
      \ questId);\n}"
    language: cpp
  notes: This method performs checks against the player's current state and the quest
    definition. It is commonly used in conjunction with other quest-related methods
    like AddQuest() or CompleteQuest(). The implementation may vary depending on the
    specific TrinityCore version, but generally involves checking quest flags, player
    level, previous quest completion status, and item requirements.
  warnings: This method should not be used to directly modify quest state. It only
    provides a read-only check. If you're implementing quest acceptance logic, ensure
    that you also call appropriate methods like AddQuest() after verifying eligibility
    with CanAcceptQuest().
  related:
  - AddQuest
  - CompleteQuest
  - HasQuest
  - GetQuestStatus
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:49:32.082392'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
