api:
  class: AoEDecisionManager
  method: SetMinimumAoETargets
  signature: void AoEDecisionManager::SetMinimumAoETargets(uint32 count)
documentation:
  brief: Sets the minimum number of targets required for an area of effect ability
    to be cast.
  description: The SetMinimumAoETargets method configures the minimum number of valid
    targets that must be present within the area of effect radius before the spell
    or ability can be executed. This is used in AI decision-making systems to ensure
    that abilities are only cast when there are sufficient targets to make the spell
    worthwhile. The value is typically set during initialization or configuration
    of the AoE decision manager and affects subsequent target selection logic. If
    no valid targets meet the criteria, the ability will not be triggered even if
    other conditions are met.
  parameters:
  - name: count
    description: The minimum number of targets required for the AoE ability to be
      cast. Must be a non-negative integer value representing the target threshold.
  returns: null
  examples:
  - title: Setting Minimum Targets for AoE Ability
    code: 'AoEDecisionManager decisionManager;

      decisionManager.SetMinimumAoETargets(3); // Requires at least 3 targets for
      AoE spell to cast'
    language: cpp
  - title: Configuring AoE Decision Manager with Dynamic Target Count
    code: 'uint32 targetThreshold = GetPlayerLevel() > 10 ? 5 : 2;

      AoEDecisionManager decisionManager;

      decisionManager.SetMinimumAoETargets(targetThreshold); // Adjust based on player
      level'
    language: cpp
  notes: This method directly influences AI behavior and should be called before any
    AoE spell casting decisions are made. The value set here is typically used in
    conjunction with other parameters like target selection radius and validity checks
    to determine whether an ability can be executed.
  warnings: Setting this value too high may prevent abilities from ever being cast
    if the environment doesn't contain enough valid targets, while setting it too
    low might result in inefficient use of resources or unintended gameplay behavior.
  related:
  - GetMinimumAoETargets
  - SetAoERadius
  - SetTargetSelectionLogic
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:39:42.485804'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
