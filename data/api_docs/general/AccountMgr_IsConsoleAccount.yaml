api:
  class: AccountMgr
  method: IsConsoleAccount
  signature: bool AccountMgr::IsConsoleAccount(uint32 gmlevel)
documentation:
  brief: Determines whether the specified account level corresponds to a console account
    with elevated privileges.
  description: The IsConsoleAccount method checks if a given Game Master (GM) level
    represents a console account, which typically has special administrative permissions
    within the TrinityCore framework. This method is used internally by the server
    to identify and handle console-level accounts differently from regular player
    or standard GM accounts. It evaluates the provided GM level against predefined
    console account thresholds to determine access privileges.
  parameters:
  - name: gmlevel
    description: The Game Master level to check. This value typically ranges from
      0 (player) to higher numbers representing increasing administrative privileges,
      with console accounts usually having levels above standard GM tiers.
  returns: Returns true if the specified GM level corresponds to a console account;
    otherwise returns false. Console accounts generally have elevated permissions
    and are used for server administration tasks.
  examples:
  - title: Basic usage to check console account status
    code: "if (AccountMgr::IsConsoleAccount(3))\n{\n    // Handle console account\
      \ logic\n    sLog->outString(\"Console account detected.\");\n}"
    language: cpp
  - title: Using within a permission check context
    code: "uint32 playerGmLevel = sCharacterCache->GetCharacterGmLevel(playerGuid);\n\
      if (AccountMgr::IsConsoleAccount(playerGmLevel))\n{\n    // Grant special console\
      \ permissions\n    player->SetCanModifyWorld(true);\n}"
    language: cpp
  notes: This method likely relies on internal constants or configuration values that
    define what constitutes a 'console' account level. The exact threshold for console
    accounts may vary between different TrinityCore builds or custom configurations.
  warnings: Ensure that the GM level passed to this method is valid and within expected
    ranges, as invalid inputs could lead to incorrect privilege assignments or security
    issues.
  related:
  - AccountMgr::GetSecurityLevel
  - AccountMgr::IsPlayerAccount
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:48:07.868181'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
