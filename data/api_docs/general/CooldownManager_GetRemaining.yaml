api:
  class: CooldownManager
  method: GetRemaining
  signature: uint32 CooldownManager::GetRemaining(uint32 spellId) const
documentation:
  brief: Retrieves the remaining cooldown time in milliseconds for a specified spell.
  description: The GetRemaining method returns the amount of time, in milliseconds,
    that remains before a spell can be cast again. This value is derived from the
    internal cooldown tracking system within the CooldownManager. If the spell is
    not on cooldown, the method will return zero. The returned value represents the
    actual remaining time and should be used to determine when a spell becomes available
    for casting. This method does not modify any internal state and is safe to call
    multiple times.
  parameters: []
  returns: The number of milliseconds remaining until the specified spell can be cast
    again. Returns 0 if the spell is not currently on cooldown.
  examples:
  - title: Check if a spell is ready to cast
    code: "uint32 cooldown = player->GetSpellCooldownManager()->GetRemaining(12345);\n\
      if (cooldown == 0)\n{\n    // Spell is ready to cast\n    player->CastSpell(player,\
      \ 12345, true);\n}\nelse\n{\n    // Spell is on cooldown, display remaining\
      \ time\n    ChatHandler(player->GetSession()).PSendSysMessage(\"Spell still\
      \ on cooldown for %u ms.\", cooldown);\n}"
    language: cpp
  notes: This method accesses the cooldown information stored in the player's or unit's
    internal cooldown manager. It is typically used in conjunction with other cooldown
    management functions to implement proper spell timing and prevent players from
    spamming abilities. The returned value is always in milliseconds, matching the
    internal time representation used throughout TrinityCore.
  warnings: null
  related:
  - GetCooldown
  - AddCooldown
  - RemoveCooldown
  - IsOnCooldown
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T15:43:43.871987'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
