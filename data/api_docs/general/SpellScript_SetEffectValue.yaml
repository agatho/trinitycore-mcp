api:
  class: SpellScript
  method: SetEffectValue
  signature: void SpellScript::SetEffectValue(int value)
documentation:
  brief: Sets the value of a spell effect within the spell script context.
  description: The SetEffectValue method is used to modify the value associated with
    a specific spell effect during the execution of a spell script. This method allows
    developers to dynamically adjust parameters such as damage amounts, healing values,
    or other effect modifiers at runtime. It is typically invoked within spell script
    handlers to alter how effects behave based on conditions, player stats, or other
    game state variables. The method operates on the currently active spell effect
    and updates its value in the spell's execution context.
  parameters:
  - name: value
    description: The integer value to set for the spell effect. This can represent
      damage amount, healing amount, duration, or other numeric parameters depending
      on the spell effect type.
  returns: null
  examples:
  - title: Setting Damage Value for a Fireball Spell
    code: "class FireballSpellScript : public SpellScript\n{\npublic:\n    void HandleDamage()\
      \ override\n    {\n        int damage = 1000;\n        SetEffectValue(damage);\n\
      \    }\n};"
    language: cpp
  - title: Adjusting Effect Value Based on Player Level
    code: "class HealingSpellScript : public SpellScript\n{\npublic:\n    void HandleHeal()\
      \ override\n    {\n        int baseHeal = 500;\n        int playerLevel = GetCaster()->GetLevel();\n\
      \        int adjustedHeal = baseHeal + (playerLevel * 10);\n        SetEffectValue(adjustedHeal);\n\
      \    }\n};"
    language: cpp
  notes: This method should only be called within the appropriate spell script handler
    context, such as during effect application or modification phases. It is important
    to ensure that the value being set is valid for the specific spell effect type
    to avoid unexpected behavior or crashes.
  warnings: Calling SetEffectValue outside of a valid spell script execution context
    may lead to undefined behavior or memory corruption. Additionally, setting invalid
    values (e.g., negative damage when positive is expected) can cause game mechanics
    to behave unexpectedly.
  related:
  - GetEffectValue
  - SetEffect
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T05:45:16.530641'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
