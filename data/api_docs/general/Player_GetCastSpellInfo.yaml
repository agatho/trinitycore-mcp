api:
  class: Player
  method: GetCastSpellInfo
  signature: const int * Player::GetCastSpellInfo(const int * spellInfo, int & triggerFlag,
    int * context) const
documentation:
  brief: Returns spell information for the player's current cast
  description: This method retrieves detailed information about the spell being currently
    cast by the player, including trigger flags and context data. It provides access
    to the spell's configuration and execution details during active casting. The
    method is commonly used in conjunction with other spell-related APIs to gather
    comprehensive casting information for game mechanics implementation.
  parameters:
  - name: spellInfo
    description: Pointer to a buffer where spell information will be stored. This
      parameter represents the spell's data structure and may contain various fields
      depending on the spell type.
  - name: triggerFlag
    description: Reference to an integer that indicates whether the spell is triggered
      or not. This flag helps determine if the spell was cast as a result of another
      spell or if it's a direct cast.
  - name: context
    description: Pointer to context data related to the spell's execution. This parameter
      provides additional information about the casting environment and may include
      details like target information, modifiers, or other contextual elements.
  returns: Returns a pointer to the spell information structure, which contains detailed
    data about the current spell being cast. The returned pointer may be null if no
    spell is currently being cast or if the spell information cannot be retrieved.
  examples:
  - title: Basic Spell Information Retrieval
    code: "Player* player = GetPlayer();\nconst int* spellInfo;\nint triggerFlag;\n\
      int context;\nconst int* result = player->GetCastSpellInfo(spellInfo, triggerFlag,\
      \ context);\nif (result != nullptr)\n{\n    // Process the spell information\n\
      }"
    language: cpp
  - title: Advanced Spell Context Handling
    code: "Player* player = GetPlayer();\nconst int* spellInfo;\nint triggerFlag;\n\
      int context;\nconst int* result = player->GetCastSpellInfo(spellInfo, triggerFlag,\
      \ context);\nif (result != nullptr)\n{\n    // Check if the spell is triggered\n\
      \    if (triggerFlag == 1)\n    {\n        // Handle triggered spell logic\n\
      \    }\n    else\n    {\n        // Handle direct cast logic\n    }\n}"
    language: cpp
  notes: This method should be used carefully during active casting operations. The
    returned pointer may become invalid if the player's casting state changes or if
    the spell information is modified during execution. Developers should ensure thread
    safety when accessing this method in multi-threaded environments.
  warnings: The method may return null values if no spell is currently being cast,
    which can lead to runtime errors if not properly handled. Care should be taken
    to validate the returned pointer before dereferencing it.
  related:
  - GetSpellInfo
  - GetCastTime
  - GetSpellCaster
  - GetSpellTarget
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T17:18:00.761763'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
