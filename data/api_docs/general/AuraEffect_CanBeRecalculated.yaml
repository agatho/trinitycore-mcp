api:
  class: AuraEffect
  method: CanBeRecalculated
  signature: bool AuraEffect::CanBeRecalculated() const
documentation:
  brief: Determines whether the aura effect can be recalculated during updates.
  description: The CanBeRecalculated method checks if an AuraEffect instance is eligible
    to have its calculations re-evaluated during periodic updates or state changes.
    This flag typically controls whether the aura's properties, such as damage values
    or stat modifiers, should be dynamically recalculated each time the aura ticks
    or refreshes. It's commonly used for auras that depend on changing conditions
    like player level, target health, or other dynamic factors that may affect the
    aura's effectiveness over time.
  parameters: []
  returns: Returns true if the aura effect supports recalculation during updates;
    otherwise returns false. When true, the aura system will attempt to recompute
    the effect's values on each tick or refresh cycle.
  examples:
  - title: Checking if an AuraEffect can be recalculated
    code: "AuraEffect* auraEff = unit->GetAuraEffect(12345, 0);\nif (auraEff && auraEff->CanBeRecalculated())\
      \ {\n    // This aura effect supports dynamic recalculation\n    // Perform\
      \ additional logic or logging here\n}"
    language: cpp
  notes: This method is typically used internally by the TrinityCore aura system to
    determine whether an aura's calculations should be updated. It may be influenced
    by aura flags, spell properties, or specific effect types that require dynamic
    updates.
  warnings: null
  related:
  - AuraEffect::GetAuraType
  - AuraEffect::GetAmount
  - AuraEffect::SetAmount
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:06:26.010060'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
