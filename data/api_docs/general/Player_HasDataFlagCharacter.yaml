api:
  class: Player
  method: HasDataFlagCharacter
  signature: bool Player::HasDataFlagCharacter(uint32 dataFlagId) const
documentation:
  brief: Checks if a player has a specific data flag character.
  description: This method determines whether a player possesses a particular data
    flag character, which is used to identify specific game state conditions or features
    within the TrinityCore framework. The method returns true if the specified data
    flag ID is present in the player's data flags, and false otherwise. This functionality
    is essential for managing player-specific game mechanics and ensuring proper handling
    of various character states.
  parameters: []
  returns: Returns true if the player has the specified data flag character, false
    otherwise. The method returns false when the data flag ID is not found in the
    player's data flags.
  examples:
  - title: Basic usage example
    code: "if (player->HasDataFlagCharacter(12345)) {\n    // Do something\n}\n"
    language: cpp
  - title: Advanced usage example
    code: "bool hasFlag = player->HasDataFlagCharacter(0x12345);\nif (hasFlag) {\n\
      \    // Handle flag presence\n} else {\n    // Handle flag absence\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other player data management
    functions to determine character state or game condition flags. Performance considerations
    include checking against a large number of flags, which may impact efficiency
    if not properly optimized.
  warnings: null
  related:
  - HasDataFlagCharacter
  - GetDataFlagCharacter
  - SetDataFlagCharacter
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T16:07:42.384539'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
