api:
  class: Object
  method: IsDestroyedObject
  signature: bool Object::IsDestroyedObject() const
documentation:
  brief: Checks whether the object has been marked for destruction and is in a destroyed
    state.
  description: The IsDestroyedObject method determines if an Object instance has been
    flagged for removal from the game world. This typically occurs when an object
    is being cleaned up after it has been removed from active gameplay, such as when
    a player logs out, a creature dies and is scheduled for despawn, or an item is
    picked up and marked for deletion. The method returns true if the object's destruction
    flag is set, indicating that the object should no longer be used in active gameplay
    logic. This check is essential for preventing access to invalid memory or attempting
    operations on objects that are no longer valid within the game state.
  parameters: []
  returns: Returns true if the object has been marked for destruction and is in a
    destroyed state; otherwise, returns false.
  examples:
  - title: Checking if an Object is Destroyed Before Using It
    code: "if (!myObject->IsDestroyedObject()) {\n    // Safe to perform operations\
      \ on the object\n    myObject->Update();\n} else {\n    // Object is destroyed,\
      \ skip operations\n    sLog->outDebug(LOG_FILTER_GENERAL, \"Object is already\
      \ destroyed.\");\n}"
    language: cpp
  - title: Using IsDestroyedObject in a Game Loop Context
    code: "for (auto& itr : m_objects) {\n    Object* obj = itr.second;\n    if (obj\
      \ && !obj->IsDestroyedObject()) {\n        // Process only non-destroyed objects\n\
      \        obj->Update();\n    }\n}"
    language: cpp
  notes: This method is commonly used in game loop iterations and event handling to
    ensure that objects are not accessed after they have been scheduled for destruction.
    It's important to note that an object may be marked as destroyed but not yet fully
    removed from memory, so additional synchronization or cleanup logic might be required
    depending on the context.
  warnings: Using this method in a multithreaded environment requires caution, especially
    if the destruction state can change concurrently. Always ensure thread safety
    when checking the destruction status of objects that may be modified by other
    threads.
  related:
  - Object::SetDestroyed
  - Object::IsInWorld
  - Object::IsRemoved
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T19:59:20.231469'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
