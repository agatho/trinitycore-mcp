api:
  class: Aura
  method: ModChargesDelayed
  signature: void Aura::ModChargesDelayed(int32 num, AuraRemoveMode removeMode)
documentation:
  brief: Modifies the charges of an aura with a delay before removal.
  description: The ModChargesDelayed method adjusts the number of charges associated
    with an aura, applying the change with a specified removal mode that determines
    how the aura is handled when charges are depleted. This method is typically used
    in World of Warcraft's TrinityCore to manage aura-based effects such as spell
    procs or temporary buffs that have limited uses. The delay aspect implies that
    the modification does not take immediate effect but may be processed at a later
    time, possibly during the next aura update cycle. The removeMode parameter controls
    how the aura behaves when its charges are reduced to zero or below.
  parameters:
  - name: num
    description: The number of charges to add or subtract from the aura. Positive
      values increase charges, negative values decrease them.
  - name: removeMode
    description: Specifies how the aura should be removed when charges are depleted.
      Valid values include AuraRemoveMode::AURA_REMOVE_BY_DEFAULT, AuraRemoveMode::AURA_REMOVE_BY_STACK,
      and others depending on implementation.
  returns: null
  examples:
  - title: Add Charges to an Aura
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    aura->ModChargesDelayed(2,\
      \ AuraRemoveMode::AURA_REMOVE_BY_DEFAULT);\n}"
    language: cpp
  - title: Reduce Charges with Custom Removal
    code: "Aura* aura = player->GetAura(67890);\nif (aura)\n{\n    aura->ModChargesDelayed(-1,\
      \ AuraRemoveMode::AURA_REMOVE_BY_STACK);\n}"
    language: cpp
  notes: This method should only be called on active auras. It is generally used in
    conjunction with aura application logic and may trigger internal updates to the
    aura's state or duration. The delayed behavior allows for more complex interactions,
    such as chaining effects or deferring removal until the next game tick.
  warnings: Calling this method on a null aura pointer will result in undefined behavior.
    Ensure that the aura exists before modifying its charges. Incorrect use of removeMode
    can lead to unexpected aura removal or stacking behavior.
  related:
  - GetCharges
  - SetCharges
  - ModCharges
  - RemoveAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:54:12.892848'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
