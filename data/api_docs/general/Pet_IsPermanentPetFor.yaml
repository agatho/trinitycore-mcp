api:
  class: Pet
  method: IsPermanentPetFor
  signature: bool Pet::IsPermanentPetFor(Player * owner) const
documentation:
  brief: Determines whether the pet is a permanent pet for the specified player.
  description: The IsPermanentPetFor method checks if the current pet instance is
    a permanent pet belonging to the given player. In World of Warcraft's TrinityCore
    implementation, pets can be either temporary (like summoned creatures) or permanent
    (such as those created through pet training or specific quest rewards). This method
    evaluates the pet's ownership status and persistence type to return a boolean
    result indicating whether it qualifies as a permanent pet for the specified player.
    The check typically involves verifying internal pet flags, ownership relationships,
    and possibly the pet's summoning mechanism.
  parameters: []
  returns: Returns true if the pet is a permanent pet for the specified player; otherwise
    returns false. This indicates that the pet will persist beyond the normal temporary
    pet lifecycle and remains bound to the player through persistent mechanisms such
    as pet training or quest rewards.
  examples:
  - title: Check if Pet is Permanent for Player
    code: "Player* player = ...;\nPet* pet = player->GetPet();\nif (pet && pet->IsPermanentPetFor(player))\
      \ {\n    // Handle permanent pet logic\n    sLog->outString(\"Pet is a permanent\
      \ pet for the player.\");\n}"
    language: cpp
  notes: This method likely relies on internal pet flags and ownership tracking within
    the TrinityCore codebase. It may be used in conjunction with other pet-related
    systems such as pet persistence across zoning or logout events. The implementation
    details could involve checking if the pet was created via permanent summoning
    mechanisms rather than temporary summons.
  warnings: Ensure that the player pointer passed to this method is valid and not
    null, otherwise behavior may be undefined. This method should only be called on
    pets that are actually owned by the player to avoid incorrect results.
  related:
  - Pet::IsTemporarySummon
  - Player::GetPet
  - Pet::IsControlled
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:51:04.290222'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
