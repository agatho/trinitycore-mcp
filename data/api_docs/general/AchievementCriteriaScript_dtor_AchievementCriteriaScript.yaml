api:
  class: AchievementCriteriaScript
  method: ~AchievementCriteriaScript
  signature: void AchievementCriteriaScript::~AchievementCriteriaScript()
documentation:
  brief: Destroys an AchievementCriteriaScript instance and releases its resources
  description: The destructor for the AchievementCriteriaScript class is responsible
    for cleaning up any dynamically allocated memory or resources held by the script
    instance. In TrinityCore's achievement system, this method ensures proper cleanup
    when an achievement criteria script object is no longer needed. The destructor
    typically handles deallocation of internal data structures, cancellation of any
    ongoing operations, and release of references to other objects. This method is
    automatically invoked when the object goes out of scope or is explicitly deleted,
    ensuring that memory leaks do not occur in the game's achievement subsystem.
  parameters: []
  returns: void
  examples:
  - title: Automatic destruction of AchievementCriteriaScript
    code: "class MyAchievementScript : public AchievementCriteriaScript\n{\npublic:\n\
      \    MyAchievementScript() : AchievementCriteriaScript(\"My Achievement\") {}\n\
      \    ~MyAchievementScript() override {}\n    // ... other methods\n};\n\nvoid\
      \ SomeFunction()\n{\n    MyAchievementScript* script = new MyAchievementScript();\n\
      \    // ... use the script\n    delete script; // Destructor automatically called\
      \ here\n}"
    language: cpp
  notes: The destructor is part of the standard C++ object lifecycle and should not
    be called manually unless explicitly managing memory. TrinityCore's achievement
    system handles instantiation and destruction of these objects internally, so developers
    typically don't need to directly invoke this destructor.
  warnings: null
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T04:51:58.129851'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
