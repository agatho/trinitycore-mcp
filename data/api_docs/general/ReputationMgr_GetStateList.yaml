api:
  class: ReputationMgr
  method: GetStateList
  signature: const FactionStateList & ReputationMgr::GetStateList() const
documentation:
  brief: Returns a constant reference to the internal list of faction states for this
    reputation manager.
  description: The GetStateList method provides access to the internal collection
    of faction states managed by the ReputationMgr. This list contains information
    about each faction's current standing, including reputation values, flags, and
    other related data. The returned reference is constant, meaning the caller cannot
    modify the list directly through this interface. This method is commonly used
    when iterating over all known factions or checking specific faction states during
    gameplay logic such as quest rewards, vendor interactions, or gossip options.
    The faction state list is updated dynamically as the player's reputation changes
    through various game actions like completing quests, killing creatures, or using
    reputation items.
  parameters: []
  returns: A constant reference to a FactionStateList object containing all current
    faction states managed by this ReputationMgr instance. Each entry in the list
    represents a specific faction and its associated reputation data including standing,
    flags, and current value.
  examples:
  - title: Iterating through all faction states
    code: "const FactionStateList& states = player->GetReputationMgr().GetStateList();\n\
      for (const auto& state : states)\n{\n    std::cout << \"Faction: \" << state.factionId\
      \ << \", Standing: \" << state.standing << std::endl;\n}"
    language: cpp
  - title: Checking specific faction reputation
    code: "const FactionStateList& states = player->GetReputationMgr().GetStateList();\n\
      for (const auto& state : states)\n{\n    if (state.factionId == 729) // Argent\
      \ Dawn\n    {\n        if (state.standing >= REP_HONORED)\n            std::cout\
      \ << \"Player is honored with Argent Dawn\" << std::endl;\n        break;\n\
      \    }\n}"
    language: cpp
  notes: The returned FactionStateList reference points to internal data structures
    that may be modified by other parts of the game engine. While the reference itself
    is const, the underlying data can change during gameplay. This method does not
    perform any locking or synchronization internally, so access should be considered
    thread-safe only if the calling code ensures proper synchronization with other
    systems modifying reputation data.
  warnings: Be cautious when storing references to the returned FactionStateList for
    extended periods, as the underlying data may be modified by reputation changes
    during gameplay. Also note that iterating over this list does not guarantee any
    particular order of factions, so sorting or ordering logic should be applied if
    needed.
  related:
  - GetReputation
  - SetReputation
  - ModifyReputation
  - AddReputation
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:28:18.851514'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
