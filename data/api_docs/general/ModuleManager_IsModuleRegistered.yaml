api:
  class: ModuleManager
  method: IsModuleRegistered
  signature: bool ModuleManager::IsModuleRegistered(const std::string & name)
documentation:
  brief: Checks whether a module with the specified name is currently registered within
    the ModuleManager.
  description: The IsModuleRegistered method determines if a module identified by
    its string name has been successfully registered with the ModuleManager. This
    functionality is essential for runtime module management, allowing systems to
    verify the availability of specific modules before attempting to interact with
    them. The method performs a lookup in the internal registry of loaded modules
    and returns a boolean result indicating the presence or absence of the module.
    This check is commonly used during initialization sequences, plugin loading, or
    when conditional logic depends on the existence of certain modules within the
    TrinityCore framework.
  parameters:
  - name: name
    description: The unique string identifier of the module to check for registration.
      This should match exactly with the name used when the module was registered.
  returns: Returns true if a module with the specified name is currently registered;
    otherwise, returns false.
  examples:
  - title: Basic Module Registration Check
    code: "if (ModuleManager::Instance()->IsModuleRegistered(\"MyCustomModule\"))\
      \ {\n    // Proceed with module-specific operations\n    LOG_INFO(\"module\"\
      , \"MyCustomModule is registered and ready to use.\");\n} else {\n    LOG_ERROR(\"\
      module\", \"MyCustomModule is not registered!\");\n}"
    language: cpp
  - title: Conditional Logic Based on Module Availability
    code: "bool hasCombatSystem = ModuleManager::Instance()->IsModuleRegistered(\"\
      CombatSystem\");\nbool hasQuestSystem = ModuleManager::Instance()->IsModuleRegistered(\"\
      QuestSystem\");\n\nif (hasCombatSystem && hasQuestSystem) {\n    // Both systems\
      \ are available, enable advanced features\n    InitializeAdvancedFeatures();\n\
      } else if (hasCombatSystem) {\n    // Only combat system is available\n    InitializeBasicCombat();\n\
      }"
    language: cpp
  notes: This method performs a linear search through the registered modules list,
    so performance may degrade with a large number of registered modules. The implementation
    assumes that module names are unique and case-sensitive. It is recommended to
    cache the result of this check if it's performed frequently in performance-critical
    sections.
  warnings: Be aware that module registration status can change dynamically during
    runtime; calling this method in a loop or high-frequency context might lead to
    inconsistent results if modules are registered or unregistered concurrently. Always
    ensure thread safety when checking module states in multi-threaded environments.
  related:
  - RegisterModule
  - UnregisterModule
  - GetModule
  - GetAllRegisteredModules
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:30:57.163211'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
