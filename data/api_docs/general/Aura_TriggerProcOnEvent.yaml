api:
  class: Aura
  method: TriggerProcOnEvent
  signature: void Aura::TriggerProcOnEvent(uint32 procEffectMask, AuraApplication
    * aurApp, ProcEventInfo & eventInfo)
documentation:
  brief: Triggers the processing of aura procs based on the provided event information
    and effect mask.
  description: The TriggerProcOnEvent method is responsible for evaluating and executing
    proc effects associated with an aura when a specific event occurs. It takes into
    account the proc effect mask to determine which effects should be triggered, and
    uses the provided ProcEventInfo to pass relevant event data. This method is typically
    invoked during combat or spell activation events where aura procs may be applicable.
    The method does not return any value but modifies the state of the aura application
    and potentially triggers additional actions based on the proc conditions.
  parameters:
  - name: procEffectMask
    description: A bitmask indicating which proc effects should be considered for
      triggering. Each bit corresponds to a specific aura effect type or flag that
      determines whether the corresponding proc should activate.
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura instance
      that is triggering the proc. This parameter provides context about which aura
      is being processed and allows access to aura properties and state.
  - name: eventInfo
    description: Reference to a ProcEventInfo structure containing detailed information
      about the event that triggered the proc, such as damage type, spell school,
      target, and other relevant combat data.
  returns: null
  examples:
  - title: Basic Usage in Combat Event
    code: "void SomeCombatHandler(Aura* aura, AuraApplication* app, ProcEventInfo&\
      \ info)\n{\n    aura->TriggerProcOnEvent(PROC_AURA_EFFECT_1, app, info);\n}"
    language: cpp
  - title: Advanced Usage with Conditional Proc Mask
    code: "void SpellEffectHandler(Aura* aura, AuraApplication* app, ProcEventInfo&\
      \ info)\n{\n    uint32 mask = 0;\n    if (info.GetDamageType() == SPELL_DAMAGE_TYPE_FIRE)\n\
      \        mask |= PROC_AURA_EFFECT_2;\n    \n    aura->TriggerProcOnEvent(mask,\
      \ app, info);\n}"
    language: cpp
  notes: This method is part of the core aura processing system in TrinityCore and
    is usually called internally by the framework when an event occurs that might
    trigger a proc. Developers should ensure that the ProcEventInfo contains accurate
    data to avoid incorrect proc triggering. The method may recursively call other
    proc-related functions depending on the aura's configuration.
  warnings: Improper use of the procEffectMask can lead to unexpected behavior or
    infinite recursion in certain aura combinations. Ensure that event information
    passed via ProcEventInfo is properly initialized before calling this method, as
    invalid data may cause crashes or incorrect logic execution.
  related:
  - Aura::ApplyAura
  - Aura::RemoveAura
  - Aura::HandleProc
  - AuraApplication::GetAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:48:25.766300'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
