api:
  class: SmartScript
  method: GetLastInvoker
  signature: Unit * SmartScript::GetLastInvoker(Unit * invoker) const
documentation:
  brief: Returns the last Unit that invoked this SmartScript.
  description: The GetLastInvoker method retrieves the Unit object that was most recently
    responsible for triggering the execution of the current SmartScript. This is typically
    used in AI scripts to determine which entity caused the script to run, such as
    a player who interacted with an NPC or a creature that was attacked. The method
    maintains internal state tracking of invokers within the SmartScript context and
    provides access to this information for conditional logic or targeting purposes.
    It's commonly used in conjunction with other SmartScript methods to create dynamic
    AI behaviors based on recent events.
  parameters: []
  returns: A pointer to the Unit object that invoked the script, or nullptr if no
    invoker has been set or tracked.
  examples:
  - title: Basic Usage in AI Script
    code: "void OnCombatEnter(Unit* who) {\n    Unit* lastInvoker = GetLastInvoker();\n\
      \    if (lastInvoker && lastInvoker->IsPlayer()) {\n        // Perform action\
      \ specific to player invoker\n        DoCast(lastInvoker, SPELL_PLAYER_SPECIFIC_AURA);\n\
      \    }\n}"
    language: cpp
  - title: Using Invoker for Targeting
    code: "void OnSpellHit(Unit* caster, SpellInfo const* spell) {\n    Unit* lastInvoker\
      \ = GetLastInvoker();\n    if (lastInvoker && lastInvoker->IsInCombat()) {\n\
      \        // Attack the invoker if they are in combat\n        me->Attack(lastInvoker,\
      \ true);\n    }\n}"
    language: cpp
  notes: This method relies on internal state management within SmartScript. The invoker
    is typically set when a script is triggered by an event that has a clear source
    unit. It's important to check for null return values before using the returned
    Unit pointer to avoid access violations.
  warnings: The returned Unit pointer may be invalid or null if the script was not
    invoked by a Unit, or if the invoker has been destroyed since the last invocation.
    Always validate the returned pointer before dereferencing it in your code.
  related:
  - GetInvokers
  - SetLastInvoker
  - GetScriptOwner
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:36:14.350468'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
