api:
  class: SpellInfo
  method: CheckTarget
  signature: SpellCastResult SpellInfo::CheckTarget(const WorldObject * caster, const
    WorldObject * target, bool implicit) const
documentation:
  brief: Checks if a spell can be cast on a target object, returning the appropriate
    spell cast result.
  description: The CheckTarget method evaluates whether a spell can be cast on a specific
    target object, taking into account various conditions such as target validity,
    spell requirements, and game mechanics. It returns a SpellCastResult indicating
    whether the spell can proceed or if there are errors preventing the cast. This
    method is crucial for determining spell validity before execution and is used
    extensively in spell handling logic within TrinityCore's core. The method considers
    both explicit and implicit targets, with implicit parameter controlling whether
    the target is considered as an implicit target or not.
  parameters:
  - name: caster
    description: The object casting the spell, typically a player or creature. Must
      be valid and cannot be nullptr.
  - name: target
    description: The target object on which the spell is being cast. Can be nullptr
      if the spell has no target, or must be a valid WorldObject.
  - name: implicit
    description: Boolean flag indicating whether the target is considered an implicit
      target. If true, the method checks for implicit target conditions; if false,
      it checks explicit target conditions.
  returns: SpellCastResult representing the outcome of the target check. Possible
    values include SPELL_CAST_SUCCESS, SPELL_FAILED, SPELL_FAILED_NOTarget, SPELL_FAILED_Cast,
    etc., depending on the specific conditions being evaluated.
  examples:
  - title: Basic usage example
    code: "SpellCastResult result = spellInfo->CheckTarget(player, target, false);\n\
      if (result == SPELL_CAST_SUCCESS)\n{\n    // Spell can be cast\n}"
    language: cpp
  - title: Advanced usage with implicit target check
    code: "SpellCastResult result = spellInfo->CheckTarget(player, target, true);\n\
      if (result == SPELL_CAST_SUCCESS)\n{\n    // Spell can be cast on implicit target\n\
      }"
    language: cpp
  notes: This method is typically called during spell validation and execution phase.
    It's important to note that the method may return different results based on the
    type of target being checked, and it should be used carefully when dealing with
    different types of WorldObjects. Performance considerations include checking for
    valid targets before calling this method.
  warnings: This method should not be called directly without proper validation of
    caster and target objects. It's important to ensure that both caster and target
    are valid before calling CheckTarget, as invalid pointers can lead to crashes
    or undefined behavior.
  related:
  - SpellInfo::CheckCast
  - SpellInfo::IsSpellValid
  - SpellInfo::HasTarget
  - SpellInfo::GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:38:25.538930'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
