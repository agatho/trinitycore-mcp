api:
  class: BehaviorManager
  method: GetManagerId
  signature: std::string BehaviorManager::GetManagerId() const
documentation:
  brief: Returns the unique identifier string of the behavior manager instance.
  description: The GetManagerId method retrieves and returns a unique string identifier
    associated with the BehaviorManager instance. This identifier is typically used
    to distinguish between different behavior managers within the AI system, especially
    in scenarios involving multiple NPCs or complex AI behaviors. The returned string
    is usually generated based on internal logic such as object GUIDs, instance IDs,
    or other unique identifiers assigned during initialization. This method is commonly
    used for debugging, logging, or tracking specific behavior manager instances in
    the game world.
  parameters: []
  returns: A std::string containing the unique identifier of the BehaviorManager instance.
    The format and content of this string depend on internal implementation but typically
    represents a globally unique identifier or a meaningful label for the manager.
  examples:
  - title: Basic Usage
    code: 'BehaviorManager* manager = ...;

      std::string id = manager->GetManagerId();

      TC_LOG_INFO("ai", "Behavior Manager ID: %s", id.c_str());'
    language: cpp
  - title: Debugging with Manager ID
    code: "void DebugBehaviorManager(BehaviorManager* mgr) {\n    if (mgr) {\n   \
      \     std::string id = mgr->GetManagerId();\n        TC_LOG_DEBUG(\"ai\", \"\
      Debug: BehaviorManager with ID '%s' is active.\", id.c_str());\n    }\n}"
    language: cpp
  notes: The method is marked as const, meaning it does not modify the state of the
    BehaviorManager instance. It's expected to be thread-safe since it only reads
    immutable data. The returned string should not be modified by the caller as it's
    managed internally by the behavior manager.
  warnings: Ensure that the BehaviorManager instance is properly initialized before
    calling this method, as calling it on an uninitialized or destroyed manager may
    result in undefined behavior. The identifier string should not be used for direct
    object comparison; instead, use the manager's pointer or other unique identifiers
    for such purposes.
  related:
  - GetManagerType
  - IsManagerActive
  - SetManagerId
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:40:08.716426'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
