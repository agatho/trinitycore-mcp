api:
  class: Aura
  method: HandleAllEffects
  signature: void Aura::HandleAllEffects(AuraApplication * aurApp, uint8 mode, bool
    apply)
documentation:
  brief: Applies or removes all effects of an aura on a target.
  description: The HandleAllEffects method is responsible for processing all active
    effects of an Aura when it is applied or removed from a target. This method iterates
    through all the effects associated with the aura and calls the appropriate handler
    functions based on the effect type, apply state, and application mode. It's a
    core part of the aura system in TrinityCore that ensures proper activation or
    deactivation of magical effects on units. The method is typically invoked internally
    by the aura application system and should not be called directly by external code
    unless implementing custom aura behavior.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that represents the application
      of this aura to a specific target. This parameter determines which target the
      effects are applied or removed from.
  - name: mode
    description: The mode in which the aura is being handled, typically indicating
      how the effect should be processed (e.g., application, removal, update). Values
      are usually defined by the AuraApplicationMode enum.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the aura effects. When true, effects are activated; when false, they are deactivated.
  returns: null
  examples:
  - title: Basic Aura Application Handling
    code: "void MyAura::HandleAllEffects(AuraApplication* aurApp, uint8 mode, bool\
      \ apply)\n{\n    if (apply)\n        ApplyAuraEffects(aurApp, mode);\n    else\n\
      \        RemoveAuraEffects(aurApp, mode);\n}"
    language: cpp
  - title: Custom Aura Effect Handling
    code: "void CustomAura::HandleAllEffects(AuraApplication* aurApp, uint8 mode,\
      \ bool apply)\n{\n    // Process each effect in the aura\n    for (uint8 i =\
      \ 0; i < GetEffectCount(); ++i)\n    {\n        if (apply)\n            ApplyEffect(aurApp,\
      \ i, mode);\n        else\n            RemoveEffect(aurApp, i, mode);\n    }\n\
      }"
    language: cpp
  notes: This method is part of the internal aura handling system and should not be
    overridden or called directly in most cases. The actual effect processing is delegated
    to individual effect handlers. This method may be called multiple times during
    an aura's lifetime, depending on how many effects it contains and whether it's
    being applied or removed.
  warnings: Direct invocation of this method can cause unexpected behavior if not
    properly coordinated with the aura application system. It assumes that all necessary
    preconditions for applying/removing effects have already been checked by higher-level
    systems.
  related:
  - Aura::ApplyAura
  - Aura::RemoveAura
  - AuraApplication::HandleEffect
  - Aura::GetEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:56:25.944806'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
