api:
  class: WorldObject
  method: GetFactionTemplateEntry
  signature: const FactionTemplateEntry * WorldObject::GetFactionTemplateEntry() const
documentation:
  brief: Retrieves the faction template entry associated with this world object.
  description: The GetFactionTemplateEntry method returns a pointer to the FactionTemplateEntry
    structure that defines the faction-related properties of this WorldObject. This
    includes information such as faction flags, reactions to other factions, and group
    membership. The returned pointer is const, meaning it should not be modified directly.
    This method is commonly used in combat and interaction logic to determine how
    an object interacts with others based on faction relationships. It's important
    to note that the returned entry may be nullptr if the object has no valid faction
    template assigned.
  parameters: []
  returns: A const pointer to the FactionTemplateEntry associated with this WorldObject,
    or nullptr if no valid faction template exists.
  examples:
  - title: Basic Usage to Check Faction Template
    code: "const FactionTemplateEntry* factionEntry = unit->GetFactionTemplateEntry();\n\
      if (factionEntry)\n{\n    // Object has a valid faction template\n    uint32\
      \ factionId = factionEntry->Faction;\n    // Use factionId for further logic\n\
      }"
    language: cpp
  - title: Using Faction Template in Combat Logic
    code: "Unit* target = ...;\nconst FactionTemplateEntry* targetFaction = target->GetFactionTemplateEntry();\n\
      const FactionTemplateEntry* sourceFaction = attacker->GetFactionTemplateEntry();\n\
      \nif (targetFaction && sourceFaction)\n{\n    // Check if the factions are hostile\n\
      \    if (targetFaction->IsHostileTo(*sourceFaction))\n    {\n        // Perform\
      \ hostile action\n    }\n}"
    language: cpp
  notes: This method performs a simple lookup and is generally fast. The FactionTemplateEntry
    returned is part of the global faction template database, so it's safe to cache
    pointers for performance reasons. Be aware that some objects (like items or game
    objects) might not have faction templates assigned.
  warnings: Never modify the returned FactionTemplateEntry pointer directly as it
    points to a shared global resource. Always check for null return values before
    dereferencing the pointer to avoid crashes.
  related:
  - GetFaction
  - SetFaction
  - IsHostileTo
  - IsFriendlyTo
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:11:11.740175'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
