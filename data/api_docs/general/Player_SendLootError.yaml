api:
  class: Player
  method: SendLootError
  signature: void Player::SendLootError(const int & lootObj, const int & owner, LootError
    error) const
documentation:
  brief: Sends a loot error message to the player's client
  description: This method sends a loot error message to the player's client, informing
    them of issues with loot operations such as invalid loot objects or owner information.
    It is used primarily when loot cannot be processed properly due to various conditions
    like invalid loot object IDs, missing or invalid owner references, or other game
    mechanics-related problems. The method ensures that players receive appropriate
    feedback about loot-related errors without causing client-side crashes or inconsistencies.
  parameters:
  - name: lootObj
    description: The loot object identifier that failed to process. This is typically
      a reference to a specific loot object in the game world, such as a loot container
      or item.
  - name: owner
    description: The owner identifier of the loot object. This represents the entity
      that owns the loot (e.g., a creature, player, or object), and must be valid
      for the error to be properly sent.
  - name: error
    description: The specific loot error type to send. This is an enum value representing
      different types of loot errors (e.g., LOOT_ERROR_INVALID, LOOT_ERROR_NO_PERMISSION,
      etc.) that indicate what went wrong with the loot operation.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = ...;

      player->SendLootError(12345, 67890, LOOT_ERROR_INVALID);'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = ...;

      int lootObj = GetLootObjectID();

      int owner = GetOwnerID();

      LootError error = LOOT_ERROR_NO_PERMISSION;

      player->SendLootError(lootObj, owner, error);'
    language: cpp
  notes: This method is part of the internal loot handling system in TrinityCore and
    should only be called when a specific loot error occurs. It does not directly
    affect gameplay mechanics but ensures proper communication between server and
    client for debugging purposes.
  warnings: Improper use of this method can cause client-side errors or inconsistencies
    if invalid parameters are passed. Ensure that the loot object and owner identifiers
    are valid before calling this method.
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:43:04.888342'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
