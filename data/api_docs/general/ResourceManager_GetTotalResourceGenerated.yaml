api:
  class: ResourceManager
  method: GetTotalResourceGenerated
  signature: uint32 ResourceManager::GetTotalResourceGenerated(ResourceType type)
documentation:
  brief: Returns the total amount of a specified resource type generated by the resource
    manager.
  description: The GetTotalResourceGenerated method retrieves the cumulative quantity
    of a specific resource type that has been generated or produced by the ResourceManager
    instance. This method is typically used in game systems where resources such as
    gold, ore, herbs, or other materials are dynamically created or harvested. The
    returned value represents the total count of the specified resource type since
    the manager was initialized or last reset. This method does not modify any internal
    state and is read-only in nature.
  parameters: []
  returns: A uint32 value representing the total amount of the specified resource
    type that has been generated. Returns zero if no resources of the specified type
    have been generated or if the resource type is invalid.
  examples:
  - title: Retrieve total gold generated
    code: 'uint32 totalGold = resourceManager->GetTotalResourceGenerated(ResourceType::GOLD);

      // Returns the total amount of gold generated by this resource manager'
    language: cpp
  - title: Check resource generation for multiple types
    code: 'ResourceManager* rm = ...;

      uint32 ore = rm->GetTotalResourceGenerated(ResourceType::ORE);

      uint32 herbs = rm->GetTotalResourceGenerated(ResourceType::HERBS);

      // Use these values to track overall resource production in a mining or herbalism
      system'
    language: cpp
  notes: This method assumes that resources are tracked and accumulated internally
    by the ResourceManager. It may not reflect real-time changes if the manager's
    internal counters are not updated on every resource generation event. The method
    is likely thread-safe if used in a multi-threaded environment, but this depends
    on how the ResourceManager implements its internal locking mechanisms.
  warnings: Ensure that the ResourceType enum value passed to this method is valid;
    invalid values may return unexpected results or zero. This method should not be
    used as a direct source of resource deduction or consumption logic without proper
    synchronization and validation.
  related:
  - GetResourceGenerated
  - ResetResourceCounters
  - AddResourceGenerated
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:12:52.778616'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
