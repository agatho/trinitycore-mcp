api:
  class: SpellScriptBase
  method: SpellScriptBase
  signature: void SpellScriptBase::SpellScriptBase(SpellScriptBase && right)
documentation:
  brief: Moves a SpellScriptBase object, transferring ownership of its resources to
    the new instance.
  description: The SpellScriptBase move constructor transfers all resources from the
    right-hand side SpellScriptBase object to this object. This operation is typically
    used when creating a new SpellScriptBase instance by moving an existing one, avoiding
    expensive deep copies. After the move, the source object is left in a valid but
    unspecified state. The method is part of the standard C++ move semantics implementation
    for spell script handling within TrinityCore's spell system. It ensures efficient
    resource management during spell script creation and execution.
  parameters: []
  returns: None
  examples:
  - title: Move SpellScriptBase to new variable
    code: 'SpellScriptBase script1;

      // ... initialize script1 ...

      SpellScriptBase script2 = std::move(script1);

      // script1 is now in a valid but unspecified state

      // script2 contains the moved resources'
    language: cpp
  - title: Move in function return
    code: "SpellScriptBase createSpellScript()\n{\n    SpellScriptBase script;\n \
      \   // ... initialize script ...\n    return std::move(script);  // Move the\
      \ local object to the return value\n}\n\n// Usage\nauto myScript = createSpellScript();"
    language: cpp
  notes: This constructor is typically invoked implicitly when moving SpellScriptBase
    objects. It's important to note that after a move operation, the source object
    should not be used for any operations that require valid state. The move constructor
    is part of TrinityCore's spell script optimization strategy to avoid unnecessary
    copying of complex spell data structures.
  warnings: Using the moved object after a move operation results in undefined behavior.
    Developers must ensure that no further operations are performed on the source
    object after it has been moved. Also, this constructor should not be called directly
    with explicit parameters as it's designed for move semantics only.
  related:
  - SpellScriptBase::SpellScriptBase(const SpellScriptBase&)
  - SpellScriptBase::~SpellScriptBase
  - SpellScriptBase& SpellScriptBase::operator=(SpellScriptBase&&)
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T03:03:06.094767'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
