api:
  class: Player
  method: GetItemByPos
  signature: Item * Player::GetItemByPos(uint8 bag, uint8 slot) const
documentation:
  brief: Returns the item located at the specified bag and slot position.
  description: This method retrieves an Item object from the player's inventory at
    the given bag and slot positions. It is commonly used to access items in specific
    inventory slots, such as equipped items or items in bags. The method returns a
    pointer to the Item object if found, or nullptr if no item exists at that position.
    This functionality is essential for game mechanics involving item management,
    equipment swapping, and inventory operations.
  parameters:
  - name: bag
    description: The bag identifier where the item is located. Valid values are 0-11,
      where 0 represents the backpack, and 1-11 represent various bags (e.g., bag
      1 for main hand weapon, bag 2 for off-hand weapon).
  - name: slot
    description: The slot within the specified bag. Valid values are 0-36, representing
      different inventory slots in each bag.
  returns: Returns a pointer to the Item object located at the specified bag and slot
    position. Returns nullptr if no item exists at that location or if the parameters
    are invalid.
  examples:
  - title: Basic usage example
    code: "Item* item = player->GetItemByPos(0, 0); // Get item from backpack slot\
      \ 0\nif (item != nullptr)\n{\n    // Item exists, do something with it\n}\n\
      else\n{\n    // No item at that position\n}"
    language: cpp
  - title: Advanced usage example
    code: "Item* weapon = player->GetItemByPos(1, 0); // Get main hand weapon from\
      \ bag 1\nif (weapon != nullptr)\n{\n    // Weapon exists, access its properties\n\
      \    uint32 itemID = weapon->GetEntry();\n}\nelse\n{\n    // No weapon at that\
      \ position\n}"
    language: cpp
  notes: The method is thread-safe and can be used in both single-threaded and multi-threaded
    environments. Performance considerations include checking for valid bag/slot combinations
    to avoid unnecessary memory access. This method is part of the player's inventory
    management system and should not be used to access items outside of the player's
    own inventory.
  warnings: Be cautious when using this method with invalid bag/slot combinations
    as it may lead to undefined behavior or memory corruption. Always validate that
    the bag and slot values are within valid ranges before calling this method. Also,
    ensure that the item exists at the specified position before attempting to access
    its properties.
  related:
  - GetItemByBag
  - GetItemBySlot
  - GetInventoryItem
  - GetEquippedItemBySlot
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:56:35.635779'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
