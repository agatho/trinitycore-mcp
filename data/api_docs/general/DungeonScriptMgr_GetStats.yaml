api:
  class: DungeonScriptMgr
  method: GetStats
  signature: ScriptStats DungeonScriptMgr::GetStats() const
documentation:
  brief: Retrieves statistical information about loaded dungeon scripts.
  description: The GetStats method returns a ScriptStats structure containing detailed
    statistics about the currently loaded dungeon scripts within the TrinityCore instance.
    This includes information such as the total number of dungeon scripts, active
    script instances, and memory usage statistics. The method is typically used for
    debugging, performance monitoring, and administrative purposes to understand the
    script load distribution across different dungeon types. It provides insight into
    how many scripts are registered and actively managed by the DungeonScriptMgr.
  parameters: []
  returns: A ScriptStats object containing statistical data about dungeon scripts
    including counts of loaded scripts, active instances, and memory metrics. The
    structure typically includes fields for total scripts, active instances, and various
    performance-related counters.
  examples:
  - title: Basic Usage to Retrieve Dungeon Script Statistics
    code: 'ScriptStats stats = sDungeonScriptMgr->GetStats();

      printf("Total Dungeon Scripts: %u\n", stats.totalScripts);

      printf("Active Instances: %u\n", stats.activeInstances);'
    language: cpp
  - title: Monitoring Script Load for Performance Analysis
    code: "ScriptStats stats = sDungeonScriptMgr->GetStats();\nif (stats.totalScripts\
      \ > 1000)\n{\n    sLog->outInfo(LOG_FILTER_SERVER, \"Warning: High dungeon script\
      \ count detected: %u\", stats.totalScripts);\n}\nelse\n{\n    sLog->outInfo(LOG_FILTER_SERVER,\
      \ \"Dungeon script load normal: %u scripts\", stats.totalScripts);\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any thread context. The
    returned ScriptStats structure is a snapshot of current state and may not reflect
    real-time changes during concurrent script loading/unloading operations. The statistics
    are primarily intended for monitoring and diagnostics rather than runtime decision
    making.
  warnings: The statistics returned by this method are snapshots and may become stale
    quickly in high-concurrency environments. Do not rely on these values for critical
    gameplay logic or immediate decision-making processes, as they represent historical
    state at the time of query.
  related:
  - GetScriptByName
  - GetScriptByEntry
  - LoadDungeonScripts
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T14:07:37.410164'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
