api:
  class: Pet
  method: _LoadAuras
  signature: void Pet::_LoadAuras(int auraResult, int effectResult, uint32 timediff)
documentation:
  brief: Loads and applies auras for the pet based on provided aura and effect results.
  description: The _LoadAuras method is responsible for initializing and applying
    auras to a pet character within the TrinityCore framework. This internal method
    processes aura data retrieved from the database or other sources, using the provided
    auraResult and effectResult parameters to determine which auras should be active.
    It typically executes during pet initialization or when auras need to be re-applied
    after certain events like zoning or resurrection. The timediff parameter likely
    represents time elapsed since last update, used for proper aura duration calculations.
    This method is part of the core pet management system and ensures that pets maintain
    their correct magical state according to game rules.
  parameters:
  - name: auraResult
    description: Integer value representing the result or identifier of aura data
      retrieved from database or processing pipeline
  - name: effectResult
    description: Integer value indicating the effect state or result of aura application
      process
  - name: timediff
    description: Time difference in milliseconds since last aura update, used for
      proper duration calculation and expiration handling
  returns: null
  examples:
  - title: Basic Aura Loading During Pet Creation
    code: "void Pet::CreatePetFromTemplate(uint32 entry)\n{\n    // ... initialization\
      \ code ...\n    _LoadAuras(1001, 2002, 0);\n    // ... continue with pet setup\
      \ ...\n}"
    language: cpp
  - title: Aura Reload After Resurrection
    code: "void Pet::HandleResurrection()\n{\n    // ... resurrection logic ...\n\
      \    uint32 timeDiff = GetMap()->GetWorldTickTime() - m_lastAuraUpdateTime;\n\
      \    _LoadAuras(m_auraResult, m_effectResult, timeDiff);\n}"
    language: cpp
  notes: This is an internal method and should not be called directly by external
    code. The method assumes that aura data has already been validated and prepared.
    It's designed to work within the context of pet lifecycle management and may depend
    on other internal state variables. Performance considerations include avoiding
    unnecessary database queries during aura loading.
  warnings: Calling this method outside of proper initialization context can lead
    to undefined behavior or memory corruption. The parameters must be properly validated
    as they directly influence aura application logic. Incorrect timediff values can
    cause aura durations to behave unexpectedly.
  related:
  - Pet::LoadFromDB
  - Pet::SaveToDB
  - Pet::AddAura
  - Pet::RemoveAura
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T10:17:15.586721'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
