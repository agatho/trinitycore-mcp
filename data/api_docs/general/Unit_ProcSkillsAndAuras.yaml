api:
  class: Unit
  method: ProcSkillsAndAuras
  signature: void Unit::ProcSkillsAndAuras(Unit * actor, Unit * actionTarget, const
    int & typeMaskActor, const int & typeMaskActionTarget, ProcFlagsSpellType spellTypeMask,
    ProcFlagsSpellPhase spellPhaseMask, ProcFlagsHit hitMask, Spell * spell, DamageInfo
    * damageInfo, HealInfo * healInfo)
documentation:
  brief: Processes spell proc effects and aura applications for unit interactions
  description: This method handles the processing of spell proc mechanics and aura
    applications when a unit performs actions or receives damage. It manages the interaction
    between actor and action target units, applying various spell flags and phase
    masks to determine how procs should be handled. The method is used in conjunction
    with other combat-related functions to ensure proper handling of triggered spells,
    periodic effects, and aura applications during combat scenarios.
  parameters:
  - name: actor
    description: The unit performing the action or triggering the proc. This represents
      the source of the spell effect.
  - name: actionTarget
    description: The unit receiving the action or being affected by the proc. This
      represents the target of the spell effect.
  - name: typeMaskActor
    description: The type mask for the actor unit, indicating what kind of actions
      are being processed (e.g., melee, ranged, spell).
  - name: typeMaskActionTarget
    description: The type mask for the action target unit, indicating what kind of
      actions are being processed (e.g., melee, ranged, spell).
  - name: spellTypeMask
    description: The spell type mask that determines which spell types should be considered
      for proc processing.
  - name: spellPhaseMask
    description: The spell phase mask that defines the phase of the spell being processed
      (e.g., pre-combat, during combat).
  - name: hitMask
    description: The hit type mask indicating what kind of hit occurred (e.g., critical,
      glancing, normal).
  - name: spell
    description: The spell being processed, which may trigger procs or be affected
      by existing auras.
  - name: damageInfo
    description: Optional pointer to damage information structure that contains details
      about damage dealt during the proc.
  - name: healInfo
    description: Optional pointer to heal information structure that contains details
      about healing done during the proc.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* actor = new Unit();

      Unit* actionTarget = new Unit();

      Spell* spell = new Spell();

      ProcSkillsAndAuras(actor, actionTarget, 1, 1, ProcFlagsSpellType::SPELL_TYPE_SPELL,
      ProcFlagsSpellPhase::PHASE_MASK_ALL, ProcFlagsHit::HIT_NORMAL, spell, nullptr,
      nullptr);

      '
    language: cpp
  - title: Advanced usage example with damage info
    code: 'Unit* actor = new Unit();

      Unit* actionTarget = new Unit();

      Spell* spell = new Spell();

      DamageInfo* damageInfo = new DamageInfo();

      ProcSkillsAndAuras(actor, actionTarget, 1, 1, ProcFlagsSpellType::SPELL_TYPE_SPELL,
      ProcFlagsSpellPhase::PHASE_MASK_ALL, ProcFlagsHit::HIT_CRITICAL, spell, damageInfo,
      nullptr);

      '
    language: cpp
  notes: This method is typically used in combat system processing and may involve
    complex interactions between multiple units. It should be called carefully as
    it can affect the state of both actor and actionTarget units during spell processing.
  warnings: Improper usage of this method can lead to incorrect spell proc handling,
    potentially causing unexpected behavior or game mechanics issues. Care must be
    taken when specifying masks and parameters to ensure correct application of spell
    effects.
  related: []
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T20:52:15.316624'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
