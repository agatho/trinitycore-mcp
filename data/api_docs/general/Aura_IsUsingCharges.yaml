api:
  class: Aura
  method: IsUsingCharges
  signature: bool Aura::IsUsingCharges() const
documentation:
  brief: Determines whether the aura is configured to use charge-based consumption.
  description: The IsUsingCharges method checks if the aura instance has been set
    up to consume charges upon activation or application. In World of Warcraft's TrinityCore,
    auras can be configured to function with charges, where each use of the aura consumes
    one charge until the total charge count is depleted. This method returns true
    if the aura is designed to utilize charges, and false otherwise. It is commonly
    used in spell systems to determine how an aura should behave when triggered or
    applied to a target.
  parameters: []
  returns: Returns true if the aura is configured to use charges for consumption;
    otherwise returns false.
  examples:
  - title: Basic Usage Check
    code: "if (aura->IsUsingCharges()) {\n    // Handle logic specific to charge-based\
      \ auras\n    printf(\"This aura uses charges.\\n\");\n}"
    language: cpp
  - title: Integration with Aura Application Logic
    code: "void OnAuraApply(Unit* target) {\n    if (aura->IsUsingCharges()) {\n \
      \       // Initialize charge count or perform charge-related setup\n       \
      \ aura->SetCharges(3);\n    } else {\n        // Standard aura behavior\n  \
      \      aura->SetDuration(10000);\n    }\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related methods
    such as GetCharges(), SetCharges(), and ModifyCharges() to manage the lifecycle
    of charge-based auras. It's important to note that not all auras use charges,
    so checking this flag before performing charge-specific operations prevents potential
    errors.
  warnings: Do not assume that an aura using charges will always have a non-zero charge
    count. Always validate the actual charge value when performing operations that
    depend on remaining charges.
  related:
  - GetCharges
  - SetCharges
  - ModifyCharges
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:09:45.700756'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
