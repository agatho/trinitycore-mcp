api:
  class: Aura
  method: CalcDispelChance
  signature: int32 Aura::CalcDispelChance(const Unit * auraTarget, bool offensive)
    const
documentation:
  brief: Calculates the chance that an aura will be dispelled by a target unit.
  description: The CalcDispelChance method computes the probability that a specific
    aura will be removed from a target unit through dispel effects. This calculation
    takes into account both the aura's properties and the target's characteristics,
    such as level difference, resistance, and whether the dispel is offensive or defensive.
    The method is typically used in the context of spell mechanics where dispel effects
    are applied to remove buffs or debuffs from units. It returns a value between
    0 and 100, representing the percentage chance of successful dispel.
  parameters:
  - name: auraTarget
    description: Pointer to the Unit object that is the target of the aura. This unit's
      properties are used in the dispel chance calculation.
  - name: offensive
    description: Boolean flag indicating whether the dispel is offensive (true) or
      defensive (false). Offensive dispels typically have different mechanics than
      defensive ones, such as being applied by an attacker or a beneficial spell.
  returns: An int32 value representing the percentage chance that the aura will be
    dispelled. A value of 0 means no chance of dispel, while 100 means guaranteed
    dispel. Values between 0 and 100 are valid probabilities.
  examples:
  - title: Basic usage to determine dispel chance
    code: 'Aura* aura = ...; // Assume aura is initialized

      Unit* target = ...; // Assume target is initialized

      int32 chance = aura->CalcDispelChance(target, true);

      // chance now contains the offensive dispel chance for the aura on the target'
    language: cpp
  - title: Using dispel chance in a spell effect
    code: "void ApplyDispelEffect(Unit* caster, Unit* target, Aura* aura)\n{\n   \
      \ int32 dispelChance = aura->CalcDispelChance(target, false);\n    if (roll_chance_i(dispelChance))\n\
      \    {\n        // Remove the aura\n        target->RemoveAura(aura->GetId());\n\
      \    }\n}"
    language: cpp
  notes: This method is part of the core aura system in TrinityCore and integrates
    with the game's spell and effect mechanics. The calculation may be influenced
    by various factors including aura type, target resistance, caster level, and other
    game-specific modifiers. It's important to note that this function does not actually
    remove the aura; it only calculates the chance for removal.
  warnings: Ensure that the auraTarget parameter is valid and not null before calling
    this method, as passing a null pointer could lead to undefined behavior or crashes.
    Also, be aware that the returned value is a percentage, so values should be interpreted
    accordingly in probability-based logic.
  related:
  - Aura::GetId
  - Aura::GetCaster
  - Aura::RemoveAura
  - Unit::RemoveAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:19:50.050678'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
