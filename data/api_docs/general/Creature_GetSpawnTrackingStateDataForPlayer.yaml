api:
  class: Creature
  method: GetSpawnTrackingStateDataForPlayer
  signature: const int * Creature::GetSpawnTrackingStateDataForPlayer(const Player
    * player) const
documentation:
  brief: Retrieves spawn tracking state data for a specific player associated with
    this creature.
  description: This method returns a pointer to an array of integers that represent
    the current spawn tracking state data for the specified player. The spawn tracking
    mechanism in TrinityCore is used to manage and synchronize the visibility and
    presence of creatures across different players' clients. This data typically includes
    flags or identifiers related to how the creature should be tracked or displayed
    to the given player, such as whether it's currently visible, despawned, or has
    specific tracking behaviors enabled. The returned data is intended for internal
    use within the core's tracking systems and should not be modified directly by
    external code.
  parameters:
  - name: player
    description: A pointer to the Player object for which spawn tracking state data
      is being retrieved. Must not be null.
  returns: A const pointer to an array of integers representing the spawn tracking
    state data for the specified player. Returns nullptr if no valid tracking data
    exists or if the player parameter is invalid.
  examples:
  - title: Basic Usage
    code: "const int* trackingData = creature->GetSpawnTrackingStateDataForPlayer(player);\n\
      if (trackingData != nullptr) {\n    // Process tracking data\n    for (int i\
      \ = 0; i < 5; ++i) {\n        printf(\"Tracking state[%d]: %d\\n\", i, trackingData[i]);\n\
      \    }\n}"
    language: cpp
  notes: The returned integer array is managed internally by the core and should not
    be freed or modified. The size of the array may vary depending on implementation
    details and version of TrinityCore. This method is primarily used in internal
    systems related to creature visibility and tracking synchronization.
  warnings: Do not attempt to modify the contents of the returned array as it's managed
    internally by the core. Ensure that the player parameter is valid and not null
    before calling this method to avoid undefined behavior.
  related:
  - GetSpawnTrackingStateDataForPlayer
  - SetSpawnTrackingStateDataForPlayer
  - UpdateVisibility
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T20:38:09.137347'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
