api:
  class: DB2Manager
  method: GetNumTalentsAtLevel
  signature: int32 DB2Manager::GetNumTalentsAtLevel(uint32 level, int playerClass)
documentation:
  brief: Returns the number of talents available to a player at a specified level
    for a given class.
  description: The GetNumTalentsAtLevel method retrieves the total count of talents
    that a player can allocate at a specific character level for a particular class.
    This is used primarily in talent point distribution logic within the TrinityCore
    framework. The method takes into account both the player's current level and their
    class to determine how many talent points they should have available for spending.
    It is typically called during character level-up events or when calculating available
    talent points for UI display purposes.
  parameters:
  - name: level
    description: The character level for which to retrieve the number of talents.
      Must be a valid level within the game's progression range (typically 1-80).
  - name: playerClass
    description: The class identifier of the player (e.g., WARRIOR = 1, PALADIN =
      2, etc.). This determines which talent tree and point allocation rules apply.
  returns: Returns an int32 representing the number of talents available to spend
    at the specified level for the given class. Returns 0 if invalid parameters are
    provided or no data is found for the specified combination.
  examples:
  - title: Get talent count for a level 10 Warrior
    code: 'int32 talentCount = sDB2Manager->GetNumTalentsAtLevel(10, CLASS_WARRIOR);

      // Returns the number of talents available at level 10 for Warriors'
    language: cpp
  - title: Dynamic talent point calculation
    code: "uint32 playerLevel = player->GetLevel();\nint playerClass = player->getClass();\n\
      int32 availableTalents = sDB2Manager->GetNumTalentsAtLevel(playerLevel, playerClass);\n\
      if (availableTalents > 0)\n{\n    // Update UI or perform talent point allocation\
      \ logic\n}"
    language: cpp
  notes: This method relies on internal DB2 data files that define talent progression
    per class and level. The implementation likely uses precomputed tables or lookup
    structures for performance. It is important to note that the returned value represents
    total available talents, not necessarily points currently unspent.
  warnings: Ensure that the playerClass parameter corresponds to valid TrinityCore
    class constants; invalid values may result in unexpected behavior or zero returns.
    This method should only be called with valid level values within the supported
    game range.
  related:
  - GetTalentInfo
  - GetNumTalentPointsAtLevel
  - GetTalentTreeInfo
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:52:27.483410'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
