api:
  class: ObjectMgr
  method: GetAllGameObjectData
  signature: const GameObjectDataContainer & ObjectMgr::GetAllGameObjectData() const
documentation:
  brief: Returns a constant reference to the container holding all game object data
    in the world.
  description: The GetAllGameObjectData method provides access to a read-only container
    that holds all registered GameObjectData entries within the TrinityCore instance.
    This container is typically used by the server to efficiently retrieve and manage
    information about every game object currently loaded or defined in the world database.
    The returned reference allows other systems to iterate through all game objects
    without requiring direct modification of their data. This method is commonly invoked
    during server initialization, map loading, or when performing operations that
    require global access to all game object definitions.
  parameters: []
  returns: A constant reference to the GameObjectDataContainer which contains all
    registered GameObjectData entries in the world. This allows for safe read-only
    access to all game object definitions without risk of modification.
  examples:
  - title: Iterating Through All Game Objects
    code: "const GameObjectDataContainer& gameObjects = ObjectMgr::Instance()->GetAllGameObjectData();\n\
      for (const auto& data : gameObjects)\n{\n    // Process each GameObjectData\
      \ entry\n    sLog->outString(\"Game object ID: %u, Entry: %u\", data.id, data.entry);\n\
      }"
    language: cpp
  - title: Finding Specific Game Object by Entry
    code: "const GameObjectDataContainer& gameObjects = ObjectMgr::Instance()->GetAllGameObjectData();\n\
      for (const auto& data : gameObjects)\n{\n    if (data.entry == 179503) // Example\
      \ entry ID\n    {\n        sLog->outString(\"Found game object at position:\
      \ %f, %f, %f\", data.x, data.y, data.z);\n        break;\n    }\n}"
    language: cpp
  notes: This method returns a constant reference to an internal container that is
    populated during server startup and map loading. The container should not be modified
    through this interface as it's meant for read-only access only. Performance considerations
    apply when iterating through large numbers of game objects, particularly in high-frequency
    operations.
  warnings: Modifying the returned container directly will result in undefined behavior
    since it's a constant reference to internal data structures. Avoid performing
    heavy operations within loops that iterate over this container as it may impact
    server performance during high-traffic periods.
  related:
  - GetGameObjectData
  - LoadGameObjectData
  - GetObjectData
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T10:09:12.947296'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
