api:
  class: BotLifecycleManager
  method: CreateBotLifecycle
  signature: std::shared_ptr<BotLifecycle> BotLifecycleManager::CreateBotLifecycle(int
    botGuid, std::shared_ptr<BotSession> session)
documentation:
  brief: Creates and returns a new bot lifecycle instance for the specified bot GUID
    and session.
  description: The CreateBotLifecycle method initializes a new BotLifecycle object
    associated with a specific bot GUID and session. This method is responsible for
    setting up the core infrastructure required for managing a bot's operational lifecycle
    within the TrinityCore framework. It ensures proper initialization of bot-specific
    resources, state tracking, and integration with the broader bot management system.
    The created lifecycle instance can then be used to control bot behavior, manage
    its actions, and handle its interactions with the game world. This method is typically
    invoked when a new bot needs to be activated or when an existing bot's lifecycle
    requires resetting.
  parameters:
  - name: botGuid
    description: The unique identifier (GUID) of the bot being created. This value
      must be a valid, non-zero GUID that uniquely identifies the bot within the game
      world.
  - name: session
    description: A shared pointer to the BotSession object representing the current
      session for this bot. The session contains contextual information about the
      bot's connection and state.
  returns: Returns a std::shared_ptr<BotLifecycle> pointing to the newly created bot
    lifecycle instance. In case of failure during creation, this method may return
    a null pointer, though such scenarios are typically handled internally by the
    system.
  examples:
  - title: Basic Bot Lifecycle Creation
    code: "int botGuid = 12345;\nstd::shared_ptr<BotSession> session = std::make_shared<BotSession>(playerGuid);\n\
      std::shared_ptr<BotLifecycle> lifecycle = botLifecycleManager->CreateBotLifecycle(botGuid,\
      \ session);\nif (lifecycle) {\n    // Bot lifecycle successfully created\n}"
    language: cpp
  - title: Creating Multiple Bot Lifecycles
    code: "std::vector<std::shared_ptr<BotLifecycle>> botLifecycles;\nfor (int i =\
      \ 0; i < 5; ++i) {\n    int botGuid = 1000 + i;\n    std::shared_ptr<BotSession>\
      \ session = std::make_shared<BotSession>(playerGuid);\n    auto lifecycle =\
      \ botLifecycleManager->CreateBotLifecycle(botGuid, session);\n    if (lifecycle)\
      \ {\n        botLifecycles.push_back(lifecycle);\n    }\n}\n// All lifecycles\
      \ are now active and managed"
    language: cpp
  notes: This method is part of the core bot management system in TrinityCore. The
    returned BotLifecycle object will automatically manage its own lifetime through
    shared_ptr semantics, ensuring proper cleanup when no longer referenced. Developers
    should ensure that the provided session is valid and properly initialized before
    calling this method to avoid unexpected behavior.
  warnings: Calling this method with an invalid or zero botGuid may result in undefined
    behavior or system errors. Ensure that all sessions passed to this method are
    fully initialized and contain valid data. Avoid creating multiple lifecycles for
    the same bot GUID without proper cleanup, as this could lead to resource leaks
    or conflicts.
  related:
  - GetBotLifecycle
  - DestroyBotLifecycle
  - UpdateBotLifecycle
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T01:50:39.662138'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
