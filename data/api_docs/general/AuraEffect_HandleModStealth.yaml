api:
  class: AuraEffect
  method: HandleModStealth
  signature: void AuraEffect::HandleModStealth(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Applies or removes stealth effect from the target based on aura application
    state
  description: The HandleModStealth method manages the stealth state of a unit when
    an aura is applied or removed. It adjusts the unit's visibility and combat state
    according to the stealth effect. This method is typically invoked during aura
    application or removal events, handling both the visual and gameplay mechanics
    associated with stealth. The method considers the aura application context and
    mode (apply/remove) to properly modify the target's stealth status.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. Contains information about which unit is affected and the
      aura's properties.
  - name: mode
    description: Mode flag indicating the operation type. Usually 0 for apply, 1 for
      remove, though exact values may vary based on implementation details.
  - name: apply
    description: Boolean flag determining whether to apply (true) or remove (false)
      the stealth effect from the target unit.
  returns: null
  examples:
  - title: Basic Stealth Aura Application
    code: "void ApplyStealthAura(Unit* target)\n{\n    AuraApplication* auraApp =\
      \ new AuraApplication(target, target, nullptr);\n    AuraEffect* stealthEffect\
      \ = new AuraEffect();\n    stealthEffect->HandleModStealth(auraApp, 0, true);\n\
      }"
    language: cpp
  - title: Removing Stealth Effect
    code: "void RemoveStealthAura(Unit* target)\n{\n    AuraApplication* auraApp =\
      \ new AuraApplication(target, target, nullptr);\n    AuraEffect* stealthEffect\
      \ = new AuraEffect();\n    stealthEffect->HandleModStealth(auraApp, 1, false);\n\
      }"
    language: cpp
  notes: This method is part of the aura handling system in TrinityCore. It modifies
    unit visibility flags and combat state. The implementation likely interacts with
    the unit's stealth detection systems and may trigger related events or callbacks.
  warnings: Improper use of this method without proper aura application context can
    lead to inconsistent stealth states. Ensure that the AuraApplication object is
    properly initialized before calling this method.
  related:
  - AuraEffect::HandleModStealth
  - AuraApplication::GetTarget
  - Unit::SetStealthed
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:20:39.837225'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
