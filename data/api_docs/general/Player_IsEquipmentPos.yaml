api:
  class: Player
  method: IsEquipmentPos
  signature: bool Player::IsEquipmentPos(uint8 bag, uint8 slot)
documentation:
  brief: Determines whether a given slot position represents an equipment slot for
    the player.
  description: The IsEquipmentPos method checks if a specified bag and slot combination
    corresponds to an equipment slot in the player's inventory. This method is commonly
    used in game mechanics to distinguish between equipped items and non-equipped
    items, such as bags or other inventory slots. It helps determine whether an item
    is currently equipped on the player's character, which is essential for various
    gameplay systems including combat, item management, and character progression.
    The method returns true if the slot represents an equipment slot, false otherwise.
  parameters:
  - name: bag
    description: The bag identifier to check. This parameter represents the bag number
      where the item is located, typically ranging from 0 to 11 (inclusive). A value
      of 0 indicates the main backpack, while values above 0 represent specific bags.
  - name: slot
    description: The slot identifier within the bag to check. This parameter represents
      the specific slot position in the bag, ranging from 0 to 36 (inclusive). The
      slot number corresponds to a specific item slot in the player's inventory.
  returns: Returns true if the specified bag and slot combination represents an equipment
    slot, false otherwise. This indicates that the item at that position is currently
    equipped on the player.
  examples:
  - title: Basic usage example
    code: "if (player->IsEquipmentPos(0, 1)) {\n    // The item in slot 1 of main\
      \ backpack is an equipment slot\n}"
    language: cpp
  - title: Advanced usage example
    code: "bool isEquipped = player->IsEquipmentPos(1, 5);\nif (isEquipped) {\n  \
      \  // Item in bag 1, slot 5 is equipped\n}"
    language: cpp
  notes: This method is typically used in conjunction with other inventory-related
    methods to determine item status. Performance considerations include checking
    only valid bag/slot combinations, as invalid combinations may result in undefined
    behavior or errors. This method is thread-safe and does not require synchronization.
  warnings: Care must be taken when using this method with invalid bag/slot combinations,
    as it may lead to undefined behavior. The method assumes valid input parameters;
    invalid inputs may cause crashes or incorrect results.
  related:
  - IsInventoryPos
  - IsBagPos
  - GetItemByPos
  - GetEquippedItem
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T15:51:31.268621'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
