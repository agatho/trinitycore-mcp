api:
  class: AuraEffect
  method: HandleAuraOverrideSpells
  signature: void AuraEffect::HandleAuraOverrideSpells(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Applies or removes spell override effects from an aura application.
  description: The HandleAuraOverrideSpells method manages the application and removal
    of spell override mechanics within the TrinityCore framework. This method is invoked
    during aura application or removal to modify how spells behave, typically by replacing
    one spell with another or altering spell properties. It interacts with the AuraApplication
    object to determine the context in which the override occurs, and uses the mode
    parameter to specify whether the effect should be applied or removed. The method
    is part of the core aura handling system and plays a role in implementing mechanics
    such as spell substitution, temporary spell modifications, or conditional spell
    behavior changes.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      the aura being applied or removed. This parameter is essential for determining
      which spells are affected and how they should be modified.
  - name: mode
    description: Byte value indicating the mode of operation, typically 0 for application
      and 1 for removal. The exact values may vary depending on the specific implementation
      but generally control whether effects are being added or removed from the target.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the spell override effects. This parameter directly controls the direction of
      the operation.
  returns: null
  examples:
  - title: Basic Spell Override Application
    code: "void ApplySpellOverride(AuraApplication* app, uint8 mode, bool apply) {\n\
      \    AuraEffect* effect = new AuraEffect();\n    effect->HandleAuraOverrideSpells(app,\
      \ mode, apply);\n}"
    language: cpp
  - title: Conditional Spell Override Handling
    code: "void HandleSpellOverrides(AuraApplication* app, bool isApplying) {\n  \
      \  uint8 mode = isApplying ? 0 : 1;\n    if (isApplying) {\n        // Apply\
      \ spell override\n        app->GetTarget()->ApplySpellOverride();\n    } else\
      \ {\n        // Remove spell override\n        app->GetTarget()->RemoveSpellOverride();\n\
      \    }\n    HandleAuraOverrideSpells(app, mode, isApplying);\n}"
    language: cpp
  notes: This method is typically called internally by the aura system and should
    not be invoked directly unless implementing custom aura effects. The implementation
    relies on the AuraApplication object to determine target-specific behavior and
    may involve complex interactions with spell systems and target state management.
  warnings: Improper handling of this method can lead to unexpected spell behavior
    or game mechanics disruption. Care must be taken when modifying spell overrides
    as they may affect combat balance, class abilities, or quest-related spell interactions.
  related:
  - AuraEffect::HandleAuraApply
  - AuraEffect::HandleAuraRemove
  - AuraApplication::GetTarget
  - SpellInfo::GetOverrideSpell
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T13:00:33.424143'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
