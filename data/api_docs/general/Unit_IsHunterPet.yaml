api:
  class: Unit
  method: IsHunterPet
  signature: bool Unit::IsHunterPet() const
documentation:
  brief: Determines whether the unit is a hunter pet.
  description: This method checks if the current unit is a hunter pet, specifically
    a pet controlled by a hunter player. It returns true if the unit is a hunter pet
    and false otherwise. The method is commonly used in game mechanics to distinguish
    between different types of pets, such as hunter pets versus other pet types like
    warlock pets or summoning pets. This functionality is essential for determining
    the type of pet being controlled by a player, especially when dealing with specific
    abilities or behaviors that are unique to hunter pets.
  parameters: []
  returns: Returns true if the unit is a hunter pet, false otherwise. The method will
    return false for all other types of pets including warlock pets, summoning pets,
    and player-controlled pets.
  examples:
  - title: Basic usage example
    code: "if (unit->IsHunterPet()) {\n    // Do something specific to hunter pets\n\
      }"
    language: cpp
  notes: This method relies on internal game mechanics and may be affected by changes
    in the TrinityCore codebase. It is recommended that developers verify this functionality
    in their specific version of TrinityCore, as behavior may vary between different
    patches or versions.
  warnings: This method should not be used to determine if a unit is a pet in general;
    it specifically checks for hunter pets only. Using this method inappropriately
    can lead to incorrect logic in game systems that rely on distinguishing between
    different pet types.
  related:
  - Unit::IsPet
  - Unit::IsWarlockPet
  - Unit::IsSummoningPet
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:05:59.141651'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
