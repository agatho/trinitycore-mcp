api:
  class: SmartGameObjectAI
  method: UpdateAI
  signature: void SmartGameObjectAI::UpdateAI(uint32 diff)
documentation:
  brief: Updates the smart game object AI behavior based on elapsed time and triggers
    associated scripts.
  description: The UpdateAI method is responsible for driving the artificial intelligence
    logic of smart game objects within the TrinityCore framework. It processes timed
    events, handles script execution, and manages the state transitions of the game
    object's AI. This method is called regularly by the core game loop with a time
    delta parameter that represents milliseconds since the last update. The method
    evaluates conditions, executes actions, and ensures proper timing for scripted
    behaviors. It serves as the primary update mechanism for smart game objects, enabling
    dynamic interactions based on in-game events or time-based triggers.
  parameters:
  - name: diff
    description: The time elapsed in milliseconds since the last call to UpdateAI.
      This parameter is used to determine how much time has passed and influences
      timing-sensitive AI behaviors such as delays, cooldowns, and periodic actions.
  returns: null
  examples:
  - title: Basic UpdateAI Usage
    code: "void GameObject::UpdateAI(uint32 diff)\n{\n    if (!IsInWorld())\n    \
      \    return;\n\n    SmartGameObjectAI::UpdateAI(diff);\n}"
    language: cpp
  - title: Custom AI Update with Delay Handling
    code: "void MySmartGameObjectAI::UpdateAI(uint32 diff)\n{\n    if (m_uiEventTimer\
      \ <= diff)\n    {\n        // Execute event logic\n        DoEventAction();\n\
      \        m_uiEventTimer = 5000; // Reset timer to 5 seconds\n    }\n    else\n\
      \    {\n        m_uiEventTimer -= diff;\n    }\n\n    SmartGameObjectAI::UpdateAI(diff);\n\
      }"
    language: cpp
  notes: This method is automatically called by the core game engine for all smart
    game objects. Developers should not override this method unless implementing custom
    AI logic that requires specific timing or event handling beyond what the base
    implementation provides. The diff parameter must be accurately passed to ensure
    proper timing of AI behaviors.
  warnings: Do not call this method directly from custom code unless you understand
    the implications. Incorrect handling of the diff parameter can cause timing issues
    in smart scripts. Avoid performing heavy computations within this method as it's
    called frequently during the game loop.
  related:
  - SmartGameObjectAI::Initialize
  - SmartGameObjectAI::OnReset
  - SmartGameObjectAI::DoAction
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:31:22.283512'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
