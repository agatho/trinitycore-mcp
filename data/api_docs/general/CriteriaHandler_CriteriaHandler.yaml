api:
  class: CriteriaHandler
  method: CriteriaHandler
  signature: void CriteriaHandler::CriteriaHandler(CriteriaHandler && right)
documentation:
  brief: Moves resources from another CriteriaHandler instance to this instance, leaving
    the source in a valid but unspecified state.
  description: This is the move constructor for the CriteriaHandler class. It transfers
    all managed resources from the right-hand side CriteriaHandler object to the current
    object. After the move operation, the source object will be left in a valid but
    unspecified state, meaning it can still be safely destroyed or assigned to, but
    its contents are not guaranteed to be in any particular condition. This is a standard
    C++ move semantics implementation designed to efficiently transfer ownership of
    dynamically allocated resources without unnecessary copying. In the context of
    TrinityCore's achievement and criteria system, this constructor would typically
    be used when transferring criteria data between objects during object construction
    or reassignment operations.
  parameters: []
  returns: null
  examples:
  - title: Basic Move Constructor Usage
    code: 'CriteriaHandler handler1;

      // ... populate handler1 with criteria data ...

      CriteriaHandler handler2 = std::move(handler1);

      // handler1 is now in a valid but unspecified state

      // handler2 contains all the moved resources'
    language: cpp
  - title: Move in Function Return Context
    code: "CriteriaHandler createHandler() {\n    CriteriaHandler handler;\n    //\
      \ ... initialize handler with criteria ...\n    return handler; // Move constructor\
      \ triggered during return\n}\n\nCriteriaHandler result = createHandler(); //\
      \ Move constructor used to assign returned object"
    language: cpp
  notes: This move constructor follows standard C++ move semantics. The source object
    after a move operation should not be used for operations that require valid data,
    though it remains safe to destroy. This implementation avoids deep copying of
    resources, making it more efficient than a copy constructor when transferring
    ownership is intended.
  warnings: Do not use the source object after moving its contents. While the object
    remains in a valid state, its internal data is unspecified and may lead to undefined
    behavior if accessed. Ensure that any pointers or references to moved resources
    are not used post-move.
  related:
  - CriteriaHandler::operator=
  - CriteriaHandler::CriteriaHandler(const CriteriaHandler&)
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T04:15:29.434488'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
