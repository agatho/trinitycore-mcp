api:
  class: BotMemoryManager
  method: GetSuspectedLeaks
  signature: std::vector<MemoryLeakEntry> BotMemoryManager::GetSuspectedLeaks() const
documentation:
  brief: Retrieves a list of suspected memory leaks detected by the bot memory manager.
  description: The GetSuspectedLeaks method returns a vector containing all memory
    leak entries that have been identified and tracked by the BotMemoryManager. This
    method is typically used during debugging or performance analysis to identify
    potential memory issues within bot-related allocations. The returned entries represent
    suspected leaks based on tracking mechanisms such as reference counting, allocation
    timestamps, or other heuristics implemented in the memory manager. The results
    are ordered by detection time or severity, depending on internal implementation
    details. This method does not modify any internal state and is safe to call multiple
    times.
  parameters: []
  returns: A std::vector<MemoryLeakEntry> containing all suspected memory leaks detected
    by the BotMemoryManager. Each entry represents a potential leak with associated
    metadata such as allocation address, size, timestamp, and possibly stack trace
    information.
  examples:
  - title: Basic Usage to Print Suspected Leaks
    code: "BotMemoryManager* manager = BotMemoryManager::Instance();\nstd::vector<MemoryLeakEntry>\
      \ leaks = manager->GetSuspectedLeaks();\nfor (const auto& leak : leaks) {\n\
      \    std::cout << \"Potential leak at address: \" << leak.address << \", size:\
      \ \" << leak.size << std::endl;\n}"
    language: cpp
  notes: This method performs a read-only operation on internal tracking data structures.
    It may involve locking mechanisms internally to ensure thread safety during access,
    especially if memory tracking is enabled in multi-threaded environments. The returned
    vector is a copy of the internal data and modifications to it do not affect the
    actual leak tracking.
  warnings: The method returns copies of internal entries, so any modification of
    the returned MemoryLeakEntry objects will not influence the original tracking
    state. Also, if memory leak detection is disabled or not initialized, this method
    may return an empty vector without indicating an error condition.
  related:
  - BotMemoryManager::AddLeakEntry
  - BotMemoryManager::ClearLeaks
  - BotMemoryManager::IsTrackingEnabled
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:06:50.533734'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
