api:
  class: Player
  method: _ApplyItemMods
  signature: void Player::_ApplyItemMods(Item * item, uint8 slot, bool apply, bool
    updateItemAuras)
documentation:
  brief: Applies or removes item mods from a player's attributes based on item slot
    and update status.
  description: This method manages the application or removal of item modifiers for
    a specific item slot, adjusting player attributes such as stats, resistances,
    and other gameplay-related bonuses. It is typically used during item equip/unequip
    operations to ensure proper attribute adjustments are made. The method handles
    both the direct modification of player attributes and updating associated item
    auras when specified. This function plays a crucial role in maintaining game balance
    and player character progression during item interactions.
  parameters:
  - name: item
    description: Pointer to the Item object whose mods will be applied or removed.
      Must not be null.
  - name: slot
    description: The inventory slot index where the item is located. Valid range is
      0-18, representing different equipment slots.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      item mods from player attributes.
  - name: updateItemAuras
    description: Boolean flag determining whether to update associated item auras.
      If true, item aura updates occur; if false, only attribute modifications happen.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      Item* item = new Item();

      player->_ApplyItemMods(item, 15, true, true);'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = new Player();

      Item* item = new Item();

      player->_ApplyItemMods(item, 10, false, false);

      // This removes mods without updating item auras'
    language: cpp
  notes: This method is called internally during item equip/unequip operations. Performance
    considerations include avoiding unnecessary aura updates when possible. Thread
    safety depends on the player object's internal synchronization mechanisms.
  warnings: Improper use of this method can lead to incorrect attribute modifications
    and game balance issues. Ensure that item slot values are valid before calling
    this function.
  related:
  - Player::AddItemToInventory
  - Player::RemoveItemFromInventory
  - Player::UpdateItemAuras
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T23:14:03.558092'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
