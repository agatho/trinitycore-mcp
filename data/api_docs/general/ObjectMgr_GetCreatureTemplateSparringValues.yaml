api:
  class: ObjectMgr
  method: GetCreatureTemplateSparringValues
  signature: const int * ObjectMgr::GetCreatureTemplateSparringValues(uint32 entry)
    const
documentation:
  brief: Retrieves sparring values associated with a creature template entry.
  description: The GetCreatureTemplateSparringValues method fetches an array of integer
    values that define sparring-related attributes for a specific creature template.
    These values are typically used in combat mechanics to determine how creatures
    interact during sparring scenarios, such as damage scaling, health modifiers,
    or other combat parameters. The returned pointer points to a static array of integers
    that should not be modified directly. This method is part of the ObjectMgr class
    which manages game object templates and their properties within TrinityCore.
  parameters: []
  returns: A const pointer to an array of integers representing sparring values for
    the creature template. Returns nullptr if no sparring data exists for the specified
    entry or if the entry is invalid.
  examples:
  - title: Retrieve and use sparring values for a creature
    code: "const int* sparringValues = sObjectMgr->GetCreatureTemplateSparringValues(12345);\n\
      if (sparringValues != nullptr)\n{\n    // Use the sparring values\n    int damageModifier\
      \ = sparringValues[0];\n    int healthMultiplier = sparringValues[1];\n    //\
      \ Process sparring data...\n}"
    language: cpp
  notes: The returned array is managed internally by ObjectMgr and should not be freed
    or modified. The size of the returned array is determined by the internal sparring
    configuration and may vary between different creature entries. This method performs
    a lookup in an internal data structure, so repeated calls for the same entry will
    have minimal performance impact.
  warnings: Do not modify the returned array as it points to internal static memory.
    Ensure that the entry parameter corresponds to a valid creature template ID; otherwise,
    the method may return nullptr and cause null pointer dereferences if not checked
    properly.
  related:
  - GetCreatureTemplate
  - GetCreatureTemplateSparringValues
  - GetObjectTemplate
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:52:16.540295'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
