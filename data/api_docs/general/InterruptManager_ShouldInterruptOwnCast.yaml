api:
  class: InterruptManager
  method: ShouldInterruptOwnCast
  signature: bool InterruptManager::ShouldInterruptOwnCast()
documentation:
  brief: Determines whether an ongoing cast should be interrupted by the same caster.
  description: The ShouldInterruptOwnCast method evaluates if a spell or ability currently
    being cast by a unit should be interrupted, specifically when the interruption
    is initiated by the same unit. This functionality is crucial in handling self-interrupting
    mechanics such as when a player casts a spell and then immediately takes an action
    that interrupts their own casting. The method typically checks internal state
    flags, spell properties, and game rules to make this determination. It's commonly
    used within the core interrupt management system of TrinityCore to ensure proper
    handling of self-interruptions without causing unintended behavior or exploits.
  parameters: []
  returns: Returns true if the current cast should be interrupted by its caster; otherwise
    returns false. This indicates whether the spell or ability in progress is eligible
    for self-interruption based on game logic and state conditions.
  examples:
  - title: Basic Usage in Spell Logic
    code: "if (interruptManager.ShouldInterruptOwnCast()) {\n    // Handle self-interrupt\
      \ logic here\n    caster->InterruptSpell(CURRENT_GENERIC_SPELL);\n}"
    language: cpp
  notes: This method is typically called during spell update cycles or when a unit
    attempts to perform actions that might interrupt their own casting. It's important
    for maintaining consistency in spell behavior and preventing exploits where players
    could indefinitely hold spells without interruption.
  warnings: null
  related:
  - InterruptManager::InterruptSpell
  - InterruptManager::IsInterruptible
  - Unit::InterruptSpell
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:23:38.813183'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
