api:
  class: MapManager
  method: IsValidMAP
  signature: bool MapManager::IsValidMAP(uint32 mapId)
documentation:
  brief: Validates whether a given map ID corresponds to a valid map in the game world.
  description: The IsValidMAP method checks if the specified map ID represents a valid
    map that exists within the TrinityCore database and is loaded into the game world.
    This validation ensures that map operations such as loading, navigation, or zone-based
    logic can safely proceed without encountering invalid or unloaded maps. The method
    typically performs a lookup in the internal map registry or database to confirm
    the existence of the map ID before returning a boolean result. It's commonly used
    during player movement, area trigger activation, or any system that requires verifying
    map integrity before performing operations.
  parameters: []
  returns: Returns true if the provided mapId corresponds to a valid, loaded map in
    the game world; otherwise returns false.
  examples:
  - title: Basic Map Validation
    code: "if (sMapMgr->IsValidMAP(0)) {\n    // Map ID 0 (Eastern Kingdoms) is valid\n\
      \    sLog->outString(\"Map 0 is valid\");\n} else {\n    sLog->outString(\"\
      Map 0 is invalid\");\n}"
    language: cpp
  - title: Using in Player Movement Validation
    code: "void HandlePlayerTeleport(Player* player, uint32 mapId) {\n    if (sMapMgr->IsValidMAP(mapId))\
      \ {\n        // Proceed with teleportation logic\n        player->TeleportTo(mapId,\
      \ 0.0f, 0.0f, 0.0f, 0.0f);\n    } else {\n        // Handle invalid map ID\n\
      \        player->SendNotification(\"Invalid destination map.\");\n    }\n}"
    language: cpp
  notes: This method performs a fast lookup in the loaded maps cache, making it efficient
    for frequent checks. It does not load maps on demand; it only validates already
    loaded or registered maps. The method is thread-safe when used with proper synchronization
    mechanisms.
  warnings: Do not rely solely on this validation for critical operations without
    additional error handling. Invalid map IDs may still be passed to other systems
    that could cause crashes or undefined behavior if not properly validated upstream.
  related:
  - MapManager::GetMap
  - MapManager::LoadMap
  - MapManager::IsMapLoaded
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T10:38:43.661286'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
