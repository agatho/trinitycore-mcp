api:
  class: QuestAcceptanceManager
  method: GetItemRewardPriority
  signature: float QuestAcceptanceManager::GetItemRewardPriority(const int * quest)
    const
documentation:
  brief: Calculates and returns the priority value for item rewards associated with
    a quest.
  description: The GetItemRewardPriority method computes a float-based priority score
    for item rewards within a specified quest. This score is typically used by the
    quest acceptance system to determine reward ordering or selection logic, particularly
    in scenarios where multiple item rewards are available. The method takes a pointer
    to an integer representing the quest ID and evaluates its associated item rewards
    to assign a priority value. This functionality supports dynamic quest reward handling
    and can influence player experience by controlling which items are prioritized
    during reward distribution.
  parameters:
  - name: quest
    description: A pointer to an integer representing the quest identifier (Quest
      ID). The value pointed to must be a valid quest ID present in the game's database.
  returns: Returns a float value that represents the calculated priority of item rewards
    for the specified quest. Higher values typically indicate higher priority items,
    though exact interpretation depends on internal logic and may vary based on quest
    type or reward configuration.
  examples:
  - title: Basic Usage Example
    code: 'int questId = 12345;

      float priority = questAcceptanceManager.GetItemRewardPriority(&questId);

      // ''priority'' now holds the computed reward priority for quest ID 12345'
    language: cpp
  - title: Using Priority in Reward Selection Logic
    code: "int questId = 67890;\nfloat priority = questAcceptanceManager.GetItemRewardPriority(&questId);\n\
      if (priority > 0.5f) {\n    // Process high-priority rewards\n    printf(\"\
      High priority reward detected for quest %d\\n\", questId);\n}"
    language: cpp
  notes: This method likely interacts with internal quest data structures and may
    depend on cached or precomputed values. It is recommended to ensure that the quest
    ID passed is valid before calling this method to avoid undefined behavior. The
    priority calculation might be influenced by factors such as item rarity, quest
    difficulty, or player level.
  warnings: Passing an invalid or non-existent quest ID may result in unpredictable
    behavior or incorrect priority values. Ensure that the quest exists in the database
    and that the pointer is not null before invoking this method.
  related:
  - GetQuestRewardPriority
  - GetItemRewardList
  - CalculateQuestRewardPriority
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:55:19.452083'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
