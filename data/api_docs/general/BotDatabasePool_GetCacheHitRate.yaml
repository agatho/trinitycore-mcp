api:
  class: BotDatabasePool
  method: GetCacheHitRate
  signature: double BotDatabasePool::GetCacheHitRate() const
documentation:
  brief: Calculates and returns the cache hit rate percentage for database queries
    within the bot database pool.
  description: The GetCacheHitRate method computes the ratio of successful cached
    database query lookups to the total number of database queries executed by the
    bot database pool. This metric is crucial for evaluating the efficiency of the
    caching mechanism used in TrinityCore's bot system, which helps reduce redundant
    database access and improve performance. The returned value represents a percentage
    indicating how often requested data was found in the cache rather than requiring
    a new database query. This method is typically used for monitoring and optimization
    purposes to ensure that the database caching strategy remains effective as bot
    activity increases.
  parameters: []
  returns: A double value representing the cache hit rate as a percentage (0.0 to
    100.0). A higher value indicates better cache performance, while a lower value
    suggests frequent cache misses requiring database hits.
  examples:
  - title: Basic Usage
    code: 'double hitRate = botDatabasePool->GetCacheHitRate();

      printf("Bot database cache hit rate: %.2f%%\n", hitRate);'
    language: cpp
  - title: Performance Monitoring
    code: "if (botDatabasePool->GetCacheHitRate() < 70.0) {\n    sLog->outInfo(LOG_FILTER_BOTS,\
      \ \"Warning: Low database cache hit rate detected (%.1f%%)\", botDatabasePool->GetCacheHitRate());\n\
      }"
    language: cpp
  notes: This method is thread-safe and can be called from any thread context. The
    cache hit rate calculation includes all database operations performed through
    the BotDatabasePool, including both read and write operations. The implementation
    tracks internal counters for hits and misses to compute this metric accurately.
  warnings: The returned value may fluctuate significantly during periods of high
    bot activity or when new data is frequently inserted/updated. For accurate long-term
    performance analysis, consider averaging multiple measurements over time rather
    than relying on single readings.
  related:
  - GetCacheMissRate
  - GetTotalQueryCount
  - GetCachedQueryCount
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T17:20:11.206387'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
