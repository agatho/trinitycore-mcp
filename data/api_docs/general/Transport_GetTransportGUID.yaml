api:
  class: Transport
  method: GetTransportGUID
  signature: int Transport::GetTransportGUID() const
documentation:
  brief: Returns the unique identifier (GUID) of the transport object
  description: The GetTransportGUID method retrieves the globally unique identifier
    assigned to this transport instance. In the context of TrinityCore's World of
    Warcraft emulation, transports are objects that move players between different
    locations, such as boats, zeppelins, or elevator platforms. This GUID is used
    internally by the server to uniquely identify and reference the transport across
    all systems, including movement tracking, passenger management, and database persistence.
    The method is read-only and does not modify any internal state of the transport
    object.
  parameters: []
  returns: An integer value representing the unique identifier (GUID) of this transport
    object. This GUID is typically a positive integer that uniquely identifies the
    transport within the server's memory space and database records.
  examples:
  - title: Basic Usage
    code: 'Transport* transport = ...; // Assume transport is initialized

      int guid = transport->GetTransportGUID();

      printf("Transport GUID: %d\n", guid);'
    language: cpp
  - title: Using GUID for Database Lookup
    code: "Transport* transport = ...;\nuint32 transportGuid = transport->GetTransportGUID();\n\
      // Use the GUID to query transport data from database\nif (sTransportMgr->GetTransportTemplate(transportGuid))\
      \ {\n    // Transport template found\n}"
    language: cpp
  notes: The returned GUID is assigned when the transport object is created and remains
    constant throughout its lifetime. This method is thread-safe as it only reads
    immutable data members. The GUID value should not be used for direct database
    operations without proper validation, as invalid or non-existent GUIDs may cause
    lookup failures.
  warnings: Ensure that the Transport pointer is valid before calling this method;
    dereferencing a null pointer will result in undefined behavior. While the GUID
    itself is stable, it's important to note that transport objects can be destroyed
    during server operation, so any stored references to GUIDs should account for
    potential object lifetime issues.
  related:
  - GetGUID
  - GetEntry
  - GetTransportInfo
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:39:55.923226'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
