api:
  class: CombatManager
  method: HasCombat
  signature: bool CombatManager::HasCombat() const
documentation:
  brief: Checks if the CombatManager has an active combat state.
  description: The HasCombat method determines whether the CombatManager instance
    currently has an active combat state. This method is typically used to verify
    if a unit or player is engaged in combat, which can affect various game mechanics
    such as movement restrictions, spell casting rules, and AI behavior. The method
    returns true if combat is active and false otherwise. This check is essential
    for implementing proper combat-related logic within the TrinityCore framework.
  parameters: []
  returns: Returns true if the CombatManager has an active combat state; otherwise
    returns false.
  examples:
  - title: Basic Combat State Check
    code: "if (combatManager.HasCombat()) {\n    // Player is currently in combat\n\
      \    // Implement combat-specific logic here\n}"
    language: cpp
  - title: Using in AI Decision Making
    code: "void UnitAI::UpdateAI(uint32 diff) {\n    if (!me->HasCombat()) {\n   \
      \     // Unit is not in combat, can perform non-combat actions\n        DoNonCombatBehavior();\n\
      \    } else {\n        // Unit is in combat, focus on combat behaviors\n   \
      \     DoCombatBehavior();\n    }\n}"
    language: cpp
  notes: This method performs a simple state check and has minimal performance overhead.
    It should be used frequently in AI logic and game state management without concern
    for performance impact.
  warnings: null
  related:
  - CombatManager::StartCombat
  - CombatManager::EndCombat
  - CombatManager::IsInCombat
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T08:53:16.408158'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
