api:
  class: Unit
  method: GetTotalAuraModifierByAffectMask
  signature: int32 Unit::GetTotalAuraModifierByAffectMask(int auraType, const SpellInfo
    * affectedSpell) const
documentation:
  brief: Calculates total aura modifier value for a specific aura type affecting a
    spell
  description: This method computes the sum of all aura modifiers of a specified type
    that are applied to a given spell. It is commonly used in World of Warcraft's
    TrinityCore framework to determine how much a particular aura affects a spell's
    properties, such as increasing damage or healing. The method considers all active
    auras on the unit that match the specified aura type and affected spell, returning
    the cumulative modifier value. This functionality is essential for calculating
    spell effects and determining the impact of various buffs and debuffs.
  parameters:
  - name: auraType
    description: The type of aura to calculate modifiers for. This corresponds to
      a specific aura effect type (e.g., SPELL_AURA_MODIFY_DAMAGE_DONE, SPELL_AURA_ADD_FLAT_SPELL_MODIFIER).
  - name: affectedSpell
    description: Pointer to the SpellInfo structure of the spell being affected. This
      determines which spell's modifiers are considered for calculation.
  returns: Returns an integer value representing the total modifier applied by all
    auras of the specified type to the given spell. A value of 0 indicates no modifier
    or that no matching auras exist on the unit.
  examples:
  - title: Basic usage example
    code: int32 damageModifier = unit->GetTotalAuraModifierByAffectMask(SPELL_AURA_MODIFY_DAMAGE_DONE,
      spellInfo);
    language: cpp
  - title: Advanced usage example with multiple auras
    code: 'int32 totalModifier = unit->GetTotalAuraModifierByAffectMask(SPELL_AURA_ADD_FLAT_SPELL_MODIFIER,
      spellInfo);

      // This would sum all flat spell modifiers applied to the given spell

      // across all active auras on the unit'
    language: cpp
  notes: This method is typically used in conjunction with other aura calculation
    methods for determining spell effects. Performance-wise, it involves iterating
    through all active auras on the unit, so it may be costly if used frequently.
    Thread safety depends on the underlying implementation of the unit's aura system.
  warnings: The method requires that the SpellInfo pointer is valid and not null.
    If the spellInfo is invalid or NULL, the method may return unexpected results
    or cause crashes. Also, this method does not account for negative modifiers unless
    they are explicitly included in the calculation.
  related:
  - GetTotalAuraModifier
  - GetAuraEffect
  - GetAuraModiferByType
  - GetSpellMod
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:37:50.916523'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
