api:
  class: InterruptManager
  method: GetInterruptRange
  signature: float InterruptManager::GetInterruptRange() const
documentation:
  brief: Returns the maximum range at which an interrupt can occur for the current
    interrupt manager instance.
  description: The GetInterruptRange method retrieves the maximum distance within
    which an interrupt effect can be triggered. This value is typically used in combat
    mechanics to determine whether a target is within range of an interrupting spell
    or ability. The returned float value represents the range in yards, and it's often
    tied to the caster's current state and abilities. This method does not perform
    any calculations at runtime; instead, it returns a precomputed or cached value
    that reflects the interrupt range configuration for this specific interrupt manager
    instance.
  parameters: []
  returns: A float value representing the maximum interrupt range in yards. This value
    is typically positive and defines how far away an enemy can be for an interrupt
    to successfully occur.
  examples:
  - title: Basic Usage
    code: "float range = interruptManager.GetInterruptRange();\nif (range > 0.0f)\n\
      {\n    // Use the range value for distance checks\n    std::cout << \"Interrupt\
      \ range: \" << range << \" yards\" << std::endl;\n}"
    language: cpp
  - title: Combat Range Validation
    code: "float interruptRange = interruptManager.GetInterruptRange();\nfloat targetDistance\
      \ = caster->GetDistance(target);\nif (targetDistance <= interruptRange)\n{\n\
      \    // Proceed with interrupt logic\n    interruptManager.AttemptInterrupt();\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with distance calculations to
    validate if an interrupt can be performed. The value returned may vary depending
    on the type of interrupt manager (e.g., spell-based vs. aura-based), and it's
    often influenced by the caster's current abilities or buffs.
  warnings: Ensure that the interrupt manager instance is properly initialized before
    calling this method, as accessing an uninitialized instance may lead to undefined
    behavior. The returned value should not be modified directly as it represents
    a configuration parameter.
  related:
  - SetInterruptRange
  - IsInterruptInRange
  - GetInterruptType
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:35:51.986894'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
