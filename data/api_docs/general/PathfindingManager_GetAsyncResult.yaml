api:
  class: PathfindingManager
  method: GetAsyncResult
  signature: PathResult PathfindingManager::GetAsyncResult(uint32 requestId)
documentation:
  brief: Retrieves the asynchronous pathfinding result for a specified request ID
  description: The GetAsyncResult method is used to retrieve the result of an asynchronous
    pathfinding operation that was previously initiated using the PathfindingManager.
    This method allows the caller to obtain the computed path data, including waypoints
    and path status, for a specific request identified by its unique request ID. The
    method typically returns immediately with the result if it has already been computed,
    or may block until the computation completes depending on the implementation details
    of the pathfinding system. In World of Warcraft's TrinityCore environment, this
    is commonly used for NPC movement calculations and player pathing logic where
    non-blocking operations are preferred.
  parameters: []
  returns: Returns a PathResult object containing the computed path data, waypoints,
    and status information for the requested pathfinding operation. The result may
    indicate success with valid waypoints, failure due to obstacles or invalid start/end
    points, or other pathfinding-specific error conditions.
  examples:
  - title: Basic usage of GetAsyncResult
    code: "PathResult result = pathfindingManager.GetAsyncResult(12345);\nif (result.IsSuccess())\
      \ {\n    // Process the computed waypoints\n    for (auto& waypoint : result.GetWaypoints())\
      \ {\n        std::cout << \"Waypoint: \" << waypoint.x << \", \" << waypoint.y\
      \ << \", \" << waypoint.z << std::endl;\n    }\n}"
    language: cpp
  notes: This method is typically used in conjunction with asynchronous pathfinding
    requests. The PathResult object returned should be checked for validity before
    accessing its contents. Implementation may involve thread synchronization to ensure
    safe access to cached results.
  warnings: Ensure that the requestId parameter corresponds to a valid and previously
    submitted pathfinding request, otherwise behavior is undefined. This method may
    block or return stale data if not used in conjunction with proper asynchronous
    request management.
  related:
  - CalculatePath
  - IsPathReady
  - SubmitAsyncPathRequest
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:42:57.074385'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
