api:
  class: InterruptManager
  method: GetAvailableInterrupts
  signature: int InterruptManager::GetAvailableInterrupts()
documentation:
  brief: Retrieves the total count of available interrupts managed by the InterruptManager
    instance.
  description: The GetAvailableInterrupts method returns an integer representing the
    number of interrupts currently available for use within the system. This method
    is typically used in the context of spell interruption handling, where various
    game events or effects can interrupt ongoing spells or abilities. The returned
    value indicates how many interrupt slots or mechanisms are ready to be utilized
    by the system. It's important to note that this count may vary dynamically based
    on the current state of the game world and active interrupts.
  parameters: []
  returns: An integer value representing the number of available interrupts managed
    by this InterruptManager instance. A return value of zero indicates no interrupts
    are currently available, while positive values indicate the count of available
    interrupt slots or mechanisms.
  examples:
  - title: Basic Usage Example
    code: "InterruptManager* interruptMgr = sObjectAccessor->GetInterruptManager();\n\
      int availableInterrupts = interruptMgr->GetAvailableInterrupts();\nif (availableInterrupts\
      \ > 0)\n{\n    // Proceed with interrupt handling logic\n    sLog->outString(\"\
      Available interrupts: %d\", availableInterrupts);\n}"
    language: cpp
  notes: This method is likely a read-only accessor that provides a snapshot of the
    current interrupt state. The implementation may involve thread-safe operations
    depending on how the InterruptManager is designed within TrinityCore's architecture.
  warnings: null
  related:
  - InterruptManager::AddInterrupt
  - InterruptManager::RemoveInterrupt
  - InterruptManager::HasAvailableInterrupts
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:37:13.635317'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
