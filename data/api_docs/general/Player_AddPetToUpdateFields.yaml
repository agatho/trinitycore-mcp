api:
  class: Player
  method: AddPetToUpdateFields
  signature: void Player::AddPetToUpdateFields(const int & pet, int slot, int flags)
documentation:
  brief: Adds a pet to the player's update fields for synchronization with clients.
  description: The AddPetToUpdateFields method is responsible for registering a pet
    with the player's update field system, ensuring that the pet's state is properly
    synchronized with all connected clients. This method typically gets called when
    a pet is summoned or added to the player's party/units list. It handles setting
    up the necessary update flags and slot information so that the pet appears correctly
    in the player's client view. The method operates within the TrinityCore framework's
    object update system, which manages what objects are sent to players for display
    and interaction.
  parameters:
  - name: pet
    description: Reference to the pet's unique identifier (GUID) that should be added
      to update fields. This parameter identifies which specific pet object is being
      registered.
  - name: slot
    description: The slot index where the pet should be placed in the player's update
      fields. This determines how the pet appears in relation to other units in the
      player's view.
  - name: flags
    description: Update flags that control how the pet data is synchronized with clients.
      These flags determine what aspects of the pet's state are sent to the client
      for rendering and interaction.
  returns: null
  examples:
  - title: Basic usage when summoning a pet
    code: 'Player* player = ...;

      ObjectGuid petGuid = ...; // GUID of summoned pet

      player->AddPetToUpdateFields(petGuid, 0, UPDATEFLAG_ALL);'
    language: cpp
  - title: Adding pet to specific update slot with custom flags
    code: 'Player* player = ...;

      ObjectGuid petGuid = ...; // GUID of pet

      player->AddPetToUpdateFields(petGuid, 3, UPDATEFLAG_TRANSPORT | UPDATEFLAG_HAS_POSITION);'
    language: cpp
  notes: This method is part of the internal update system and should typically be
    called automatically by the game engine when pets are summoned or added to a player's
    unit list. Developers should not normally need to call this directly unless implementing
    custom pet behavior or debugging update issues. The method likely interacts with
    the player's UpdateData system and may trigger additional updates to be sent to
    nearby clients.
  warnings: Calling this method manually without proper context may cause synchronization
    issues between server and client, potentially leading to visual glitches or incorrect
    pet behavior. Ensure that the pet GUID is valid and the slot index is within acceptable
    bounds before calling this method.
  related:
  - Player::RemovePetFromUpdateFields
  - Player::SetPet
  - Player::GetPet
  - Player::AddToVisibleList
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T19:57:03.710213'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
