api:
  class: ObstacleAvoidanceManager
  method: GetLookaheadTime
  signature: float ObstacleAvoidanceManager::GetLookaheadTime() const
documentation:
  brief: Returns the lookahead time value used for obstacle avoidance calculations
    in AI pathfinding.
  description: The GetLookaheadTime method retrieves the time horizon used by the
    ObstacleAvoidanceManager to predict and avoid obstacles in the agent's movement
    path. This value determines how far ahead the system looks when calculating potential
    collisions or path adjustments. The returned float represents a time duration
    in seconds, typically used in conjunction with velocity and position data to compute
    future positions of both the agent and surrounding obstacles. This method is part
    of the AI navigation system that helps units avoid static and dynamic obstacles
    during movement.
  parameters: []
  returns: A float value representing the lookahead time in seconds. This indicates
    how far ahead the obstacle avoidance system considers potential collisions or
    path changes when computing movement adjustments.
  examples:
  - title: Basic Usage
    code: 'float lookahead = manager.GetLookaheadTime();

      printf("Lookahead time: %.2f seconds\n", lookahead);'
    language: cpp
  - title: Integration with Movement Logic
    code: "if (manager.GetLookaheadTime() > 0.5f)\n{\n    // Adjust movement behavior\
      \ for longer lookahead\n    agent.SetSpeedMultiplier(0.8f);\n}"
    language: cpp
  notes: This method is typically called during AI update cycles to determine how
    far ahead the system should predict obstacle positions. The value returned may
    be dynamically adjusted based on environmental complexity or agent speed. This
    method is thread-safe as it only reads immutable configuration data.
  warnings: null
  related:
  - SetLookaheadTime
  - GetMaxSpeed
  - GetAvoidanceRadius
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:54:25.347350'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
