api:
  class: CreatureScript
  method: GetAI
  signature: CreatureAI * CreatureScript::GetAI(Creature * creature) const
documentation:
  brief: Retrieves the CreatureAI instance associated with a given creature.
  description: The GetAI method is used to obtain the CreatureAI instance that controls
    the behavior of a specific creature in the game world. This method is typically
    called during the creature's initialization or when AI-related operations are
    required. It serves as a bridge between the base Creature class and its specialized
    AI implementation, allowing developers to access and manipulate creature-specific
    AI logic. The returned pointer can be used to invoke AI methods such as UpdateAI,
    MoveInLineOfSight, or any custom AI behavior defined in the derived CreatureAI
    class.
  parameters: []
  returns: A pointer to the CreatureAI instance associated with the creature. Returns
    nullptr if no AI is assigned or if the creature is invalid.
  examples:
  - title: Basic usage to access creature AI
    code: "class MyCreatureScript : public CreatureScript\n{\npublic:\n    MyCreatureScript()\
      \ : CreatureScript(\"MyCreatureScript\") {}\n\n    void OnCreatureEnterCombat(Creature*\
      \ creature) override\n    {\n        if (CreatureAI* ai = creature->GetAI())\n\
      \        {\n            // Use the AI instance to perform actions\n        \
      \    ai->DoAction(1);\n        }\n    }\n};"
    language: cpp
  - title: Checking for valid AI before usage
    code: "void ProcessCreature(Creature* creature)\n{\n    CreatureAI* ai = creature->GetAI();\n\
      \    if (ai != nullptr)\n    {\n        // Safe to use the AI\n        ai->UpdateAI(100);\n\
      \    }\n    else\n    {\n        // Handle case where no AI is assigned\n  \
      \      sLog->outError(\"Creature %u has no AI assigned!\", creature->GetEntry());\n\
      \    }\n}"
    language: cpp
  notes: This method should only be called on valid creatures that have been properly
    initialized. The returned CreatureAI pointer is managed by the game engine and
    should not be deleted manually. In TrinityCore, AI instances are typically created
    via the Creature::SetAI method or through script registration.
  warnings: Calling GetAI on a creature that has not yet had its AI initialized may
    return nullptr. Always validate the return value before using it to prevent null
    pointer dereferences. Be cautious when calling this method from within AI update
    loops as it could lead to unexpected behavior if the AI is modified during execution.
  related:
  - Creature::SetAI
  - Creature::GetAI
  - CreatureScript::OnCreatureCreate
  - CreatureScript::OnCreatureUpdate
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T15:33:30.141736'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
