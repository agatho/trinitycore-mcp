api:
  class: Map
  method: IsUnderWater
  signature: bool Map::IsUnderWater(const PhaseShift & phaseShift, float x, float
    y, float z)
documentation:
  brief: Determines whether a given position is underwater in the current map
  description: This method checks if a specified coordinate (x, y, z) is located beneath
    the water surface within the current map. It utilizes the PhaseShift to determine
    the appropriate water level based on the current phase of the map. The function
    returns true if the position is below the water level, false otherwise. This functionality
    is essential for determining whether a player or object is in an underwater environment,
    which affects various game mechanics such as combat, movement, and visual effects.
  parameters:
  - name: phaseShift
    description: The phase shift that determines the current map's phase, including
      water level information. This parameter is crucial for accurate underwater detection.
  - name: x
    description: X coordinate of the position to check. Must be within map boundaries.
  - name: y
    description: Y coordinate of the position to check. Must be within map boundaries.
  - name: z
    description: Z coordinate of the position to check. Must be within map boundaries.
  returns: Returns true if the specified coordinates are below the water surface,
    false otherwise. This indicates whether the position is currently underwater.
  examples:
  - title: Basic usage example
    code: "if (map->IsUnderWater(phaseShift, x, y, z)) {\n    // Handle underwater\
      \ behavior\n}"
    language: cpp
  - title: Advanced usage with multiple checks
    code: "bool isUnderwater = map->IsUnderWater(phaseShift, playerX, playerY, playerZ);\n\
      if (isUnderwater) {\n    // Apply underwater effects\n    // Check for water\
      \ breathing ability\n}"
    language: cpp
  notes: This method relies on the PhaseShift to determine water level accurately.
    It should be used carefully in conjunction with other map-related functions to
    ensure correct positioning. Performance considerations include checking only necessary
    coordinates, as this function may be called frequently during movement calculations.
  warnings: This method requires valid coordinates and phaseShift information; invalid
    inputs can lead to incorrect results or exceptions. Be cautious when using this
    in high-frequency movement calculations as it may impact performance if not optimized
    properly.
  related:
  - Map::GetWaterLevel
  - Map::IsInWater
  - Map::GetAreaId
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T03:59:27.452115'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
