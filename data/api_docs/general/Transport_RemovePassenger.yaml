api:
  class: Transport
  method: RemovePassenger
  signature: Transport * Transport::RemovePassenger(int * passenger)
documentation:
  brief: Removes a passenger from the transport and returns a pointer to the transport
    object.
  description: The RemovePassenger method removes a specified passenger from the transport
    instance. It takes a pointer to an integer representing the passenger's identifier
    and handles the removal process internally. The method ensures that the passenger
    is properly detached from the transport, updating internal data structures accordingly.
    This operation is typically used during transport movement or when passengers
    disembark from vehicles such as boats, zeppelins, or other moving transports in
    World of Warcraft. The method returns a pointer to the Transport object, allowing
    for method chaining or further operations on the transport.
  parameters:
  - name: passenger
    description: A pointer to an integer representing the unique identifier (GUID)
      of the passenger to be removed from the transport.
  returns: Returns a pointer to the Transport object, allowing for method chaining.
    This enables subsequent operations on the same transport instance without requiring
    additional variable assignments.
  examples:
  - title: Basic Passenger Removal
    code: 'Transport* transport = ...; // Get reference to transport

      int passengerGuid = 12345;

      Transport* result = transport->RemovePassenger(&passengerGuid);

      // ''result'' now points to the same transport, potentially used for chaining'
    language: cpp
  - title: Removing Multiple Passengers
    code: "Transport* transport = ...;\nint passengers[] = {1001, 1002, 1003};\nfor\
      \ (int i = 0; i < 3; ++i)\n{\n    transport->RemovePassenger(&passengers[i]);\n\
      }\n// All specified passengers have been removed from the transport"
    language: cpp
  notes: This method modifies internal passenger tracking data structures. It is important
    to ensure that the passenger GUID passed in is valid and corresponds to an actual
    passenger currently aboard the transport. The method does not perform any validation
    on the GUID itself, so invalid or non-existent passengers may lead to undefined
    behavior.
  warnings: Passing a null pointer for the passenger parameter will likely cause a
    crash or undefined behavior. Always ensure that the integer pointed to by 'passenger'
    is initialized with a valid GUID before calling this method. Additionally, removing
    passengers while the transport is in motion might have unexpected effects on game
    state or passenger positioning.
  related:
  - AddPassenger
  - HasPassenger
  - GetPassengers
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T17:42:34.662444'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
