api:
  class: LanguageMgr
  method: IsLanguageExist
  signature: bool LanguageMgr::IsLanguageExist(uint32 languageId) const
documentation:
  brief: Checks whether a specified language ID exists in the game's language database.
  description: 'The IsLanguageExist method verifies if a given language identifier
    is valid and registered within the TrinityCore database. This function is commonly
    used to validate language settings for player characters, NPC dialogue, or localization
    features. It performs a lookup against internal language tables to ensure that
    the provided language ID corresponds to an actual supported language in the game.
    The method does not modify any data; it only performs a read-only check. Precondition:
    The languageId parameter must be a valid unsigned 32-bit integer representing
    a known language in the game''s localization system.'
  parameters: []
  returns: Returns true if the specified language ID exists in the language database,
    otherwise returns false. A return value of true indicates that the language is
    supported and can be used for character communication or localization purposes.
  examples:
  - title: Basic Usage to Validate Language ID
    code: "if (sLanguageMgr->IsLanguageExist(LANG_NEUTRAL)) {\n    // Proceed with\
      \ operations that require neutral language support\n    sLog->outString(\"Neutral\
      \ language is supported.\");\n}"
    language: cpp
  - title: Using in Player Language Validation
    code: "uint32 playerLanguage = 1; // Example language ID\nif (sLanguageMgr->IsLanguageExist(playerLanguage))\
      \ {\n    // Set player's language\n    player->SetPlayerLanguage(playerLanguage);\n\
      } else {\n    // Fallback to default language\n    player->SetPlayerLanguage(LANG_ENGLISH);\n\
      }"
    language: cpp
  notes: This method likely uses an internal lookup table or database query to verify
    language existence. It is thread-safe as it performs read-only operations on static
    data structures. Performance is generally fast since it's typically backed by
    a hash map or similar efficient data structure.
  warnings: Ensure that the language ID passed to this function is within the valid
    range of supported languages in TrinityCore. Passing invalid or out-of-range values
    may lead to incorrect results or unexpected behavior if not handled properly in
    calling code.
  related:
  - GetLanguageName
  - GetLanguageById
  - LoadLanguages
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T11:36:02.510101'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
