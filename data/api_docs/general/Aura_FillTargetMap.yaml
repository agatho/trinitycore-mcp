api:
  class: Aura
  method: FillTargetMap
  signature: void Aura::FillTargetMap(int & targets, Unit * caster)
documentation:
  brief: Populates a target map with affected units based on aura properties and caster
    information.
  description: The FillTargetMap method is responsible for determining which units
    are affected by an aura and populating a target map with those units. This method
    typically iterates through the aura's target requirements, evaluates them against
    the caster's context, and builds a list of valid targets. It plays a crucial role
    in the application of auras to targets, particularly in combat scenarios where
    damage over time effects, buffs, or debuffs are applied. The method uses internal
    aura data structures and caster information to determine eligibility and validity
    of targets.
  parameters:
  - name: targets
    description: Reference to an integer that will store the count of valid targets
      found for this aura.
  - name: caster
    description: Pointer to the Unit object that cast this aura. Used to determine
      target eligibility, faction relationships, and other caster-specific properties
      that affect targeting logic.
  returns: null
  examples:
  - title: Basic usage in aura application
    code: "void ApplyAuraToTargets(Aura* aura, Unit* caster)\n{\n    int targetCount\
      \ = 0;\n    aura->FillTargetMap(targetCount, caster);\n    // Process the targets\
      \ based on targetCount\n}"
    language: cpp
  - title: Using FillTargetMap with custom targeting logic
    code: "void CustomAuraHandler(Aura* aura, Unit* caster)\n{\n    int validTargets\
      \ = 0;\n    aura->FillTargetMap(validTargets, caster);\n    if (validTargets\
      \ > 0)\n    {\n        // Apply effects to targets\n        for (int i = 0;\
      \ i < validTargets; ++i)\n        {\n            // Process each target\n  \
      \      }\n    }\n}"
    language: cpp
  notes: This method is typically called internally during aura application or update
    cycles. It may perform complex calculations involving unit positioning, faction
    checks, and aura-specific targeting rules. The targets parameter is modified directly
    by this method to reflect the number of valid targets found.
  warnings: Ensure that the caster pointer is valid before calling this method, as
    passing a null pointer can lead to undefined behavior. This method modifies the
    targets parameter in place, so be aware of any existing values that might be overwritten.
  related:
  - Aura::ApplyAura
  - Aura::RemoveAura
  - Aura::GetTargetMap
  - Aura::IsPositive
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T13:57:13.578422'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
