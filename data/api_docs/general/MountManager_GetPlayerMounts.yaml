api:
  class: MountManager
  method: GetPlayerMounts
  signature: int MountManager::GetPlayerMounts(int * player) const
documentation:
  brief: Retrieves the list of mounts known by a player
  description: The GetPlayerMounts method fetches all mount entries associated with
    a specific player character. It returns an integer value representing the number
    of mounts found in the player's collection. This method is typically used within
    the context of player data management and mount-related game mechanics, such as
    displaying available mounts in a UI or checking if a player has acquired a particular
    mount. The method requires a valid player identifier to be passed as a parameter,
    and it operates on the player's current mount data stored in the database or in-memory
    cache.
  parameters:
  - name: player
    description: Pointer to an integer representing the unique identifier (GUID) of
      the player whose mounts are being retrieved. Must point to a valid player GUID
      value.
  returns: Returns an integer indicating the number of mounts found for the specified
    player. A return value of zero indicates that no mounts were found or the player
    does not exist. Negative values may indicate errors in data retrieval or invalid
    input parameters.
  examples:
  - title: Basic Usage Example
    code: "int playerId = 12345;\nint mountCount = mountManager.GetPlayerMounts(&playerId);\n\
      if (mountCount > 0) {\n    std::cout << \"Player has \" << mountCount << \"\
      \ mounts.\" << std::endl;\n} else if (mountCount == 0) {\n    std::cout << \"\
      Player has no mounts.\" << std::endl;\n}"
    language: cpp
  notes: This method assumes that the player GUID passed is valid and corresponds
    to an existing character in the database. The internal implementation likely involves
    querying a mount table or cache associated with the player's data. Performance
    may be affected if the mount data for large numbers of players is accessed frequently.
  warnings: Ensure that the player GUID provided is valid before calling this method,
    as passing an invalid or uninitialized value can lead to undefined behavior or
    crashes. This method should not be called from multiple threads without proper
    synchronization.
  related:
  - MountManager::AddPlayerMount
  - MountManager::RemovePlayerMount
  - MountManager::HasPlayerMount
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T10:15:47.935050'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
