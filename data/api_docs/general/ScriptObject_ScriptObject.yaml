api:
  class: ScriptObject
  method: ScriptObject
  signature: void ScriptObject::ScriptObject(ScriptObject && right)
documentation:
  brief: Moves a ScriptObject instance to another ScriptObject instance using move
    semantics.
  description: The ScriptObject constructor that accepts an rvalue reference (ScriptObject&&)
    is a move constructor. It transfers ownership of resources from the source ScriptObject
    to the newly constructed object, leaving the source in a valid but unspecified
    state. This is part of C++'s move semantics and is used to efficiently transfer
    resources without deep copying. In the context of TrinityCore's scripting system,
    this constructor allows for efficient construction of script objects when moving
    them between scopes or containers. The move constructor typically swaps internal
    pointers or handles rather than copying data, which improves performance during
    object creation and assignment operations.
  parameters: []
  returns: null
  examples:
  - title: Move Constructing a ScriptObject
    code: 'ScriptObject&& source = std::move(someExistingScriptObject);

      ScriptObject newObject(std::move(source)); // Move constructor usage'
    language: cpp
  - title: Using Move Constructor in Container
    code: 'std::vector<ScriptObject> scriptObjects;

      ScriptObject obj1;

      scriptObjects.push_back(std::move(obj1)); // Implicit move constructor call'
    language: cpp
  notes: This is a move constructor, not a copy constructor. After calling this constructor,
    the source object should not be used unless it's explicitly reset or reassigned.
    The move constructor is typically generated automatically by the compiler when
    no user-defined move constructor exists, but can be explicitly defined for custom
    behavior. In TrinityCore, this pattern is commonly used in script object management
    where objects are frequently moved between different containers or scopes.
  warnings: Using the source ScriptObject after a move operation results in undefined
    behavior. The moved-from object should not be accessed or used until it's reassigned
    or explicitly reset. Be cautious when using this constructor in performance-critical
    code paths where the move semantics might not provide expected benefits if objects
    are not properly managed.
  related:
  - ScriptObject::operator=
  - ScriptObject::~ScriptObject
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T03:11:09.320390'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
