api:
  class: Unit
  method: GetDisplayId
  signature: uint32 Unit::GetDisplayId() const
documentation:
  brief: Returns the display ID of the unit, which determines the visual appearance
    of the entity in the game world.
  description: The GetDisplayId method retrieves the unique display identifier that
    defines how a Unit appears visually in World of Warcraft. This display ID is used
    to determine the model, skin, and other visual aspects of the unit's representation.
    For player characters, this typically corresponds to the character's race, gender,
    and cosmetic appearance. For NPCs or creatures, it represents their visual model
    as defined by their entry in the creature template database. The method is commonly
    used for determining visual properties during gameplay mechanics such as combat,
    interaction, or when displaying unit information in UI elements.
  parameters: []
  returns: Returns a uint32 value representing the display ID of the unit. This value
    corresponds to the visual appearance of the unit in the game world and can be
    used to determine model, skin, or other visual properties. For players, this value
    is typically derived from their race, gender, and cosmetic settings. For NPCs,
    it reflects the creature's visual representation based on its entry in the database.
  examples:
  - title: Basic usage example
    code: 'uint32 displayId = unit->GetDisplayId();

      // Use displayId to determine visual appearance of unit'
    language: cpp
  - title: Advanced usage with conditional logic
    code: "Unit* target = player->GetSelectedUnit();\nuint32 displayId = target->GetDisplayId();\n\
      if (displayId == 14509)\n{\n    // This is a specific NPC model\n}\nelse\n{\n\
      \    // Different visual representation\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any thread. Performance
    considerations are minimal as it simply returns a stored value without complex
    computations. The display ID is typically set during initialization or when the
    unit's visual properties change, such as during a transformation or cosmetic update.
  warnings: Be cautious when using this method in conjunction with other visual-related
    functions, as changes to display ID may affect gameplay mechanics like combat
    visuals or UI representations. Also, ensure that the returned value is valid and
    not zero, as zero often indicates an invalid or uninitialized display ID.
  related:
  - GetNativeDisplayId
  - SetDisplayId
  - GetCreatureTemplate
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:14:02.725854'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
