api:
  class: Player
  method: ItemAddedQuestCheck
  signature: void Player::ItemAddedQuestCheck(uint32 entry, uint32 count, int boundItemFlagRequirement,
    bool * hadBoundItemObjective)
documentation:
  brief: Checks if a player has completed the required quest objectives for an item
    that was added to their inventory
  description: This method verifies whether a player has met the quest requirements
    associated with a specific item that was added to their inventory. It checks if
    the item's quest requirements have been satisfied, particularly focusing on bound
    items and their objectives. The method is typically used during quest completion
    events when items are added to a player's inventory to ensure proper quest progression.
    It handles both regular and bound items, ensuring that the player's quest progress
    is accurately tracked.
  parameters:
  - name: entry
    description: The entry ID of the item being checked for quest requirements. This
      represents the item's unique identifier in the game database.
  - name: count
    description: The quantity of items being added to the player's inventory. This
      indicates how many of the specific item were added.
  - name: boundItemFlagRequirement
    description: The flag requirement for bound items, indicating whether the item
      is bound to a quest or not. This parameter determines if the item should be
      checked against quest objectives.
  - name: hadBoundItemObjective
    description: Pointer to a boolean value that indicates whether the player has
      completed the bound item's quest objective. This value is set by the method
      to reflect the actual state of the quest completion.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      uint32 itemEntry = 12345;

      uint32 itemCount = 1;

      int boundItemFlag = 1;

      bool hadBoundItemObjective = false;


      player->ItemAddedQuestCheck(itemEntry, itemCount, boundItemFlag, &hadBoundItemObjective);'
    language: cpp
  - title: Advanced usage example
    code: "Player* player = new Player();\nuint32 itemEntry = 12345;\nuint32 itemCount\
      \ = 3;\nint boundItemFlag = 0;\nbool hadBoundItemObjective = false;\n\nplayer->ItemAddedQuestCheck(itemEntry,\
      \ itemCount, boundItemFlag, &hadBoundItemObjective);\nif (hadBoundItemObjective)\
      \ {\n    // Player has completed the quest requirements for this item\n}"
    language: cpp
  notes: This method is part of the internal quest tracking system and should be used
    carefully during quest completion events. It may not be directly called by developers
    but rather used in conjunction with other quest-related methods. The method does
    not return any value, as it operates through pointer parameters to update the
    state of quest completion.
  warnings: This method should only be used when items are added to a player's inventory
    during quest completion events. It may cause issues if used outside of proper
    context and can potentially lead to incorrect quest progression tracking if not
    handled properly.
  related:
  - Quest::GetQuestObjective
  - Player::ItemAddedToInventory
  - Quest::CheckQuestComplete
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T00:40:53.271573'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
