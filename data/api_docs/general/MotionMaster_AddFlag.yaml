api:
  class: MotionMaster
  method: AddFlag
  signature: void MotionMaster::AddFlag(const uint8 flag)
documentation:
  brief: Adds a specified motion flag to the MotionMaster's active flags.
  description: The AddFlag method is used to set a specific motion flag within the
    MotionMaster class, which controls various movement behaviors and states for AI-controlled
    creatures or units. This method modifies the internal state of the MotionMaster
    by incorporating the provided flag into its current set of active flags. The motion
    flags typically define how an entity should move, such as walking, running, flying,
    or being in a specific movement state like following or fleeing. This functionality
    is essential for managing complex AI behaviors and ensuring that units respond
    correctly to game events and conditions.
  parameters:
  - name: flag
    description: The motion flag value to be added to the MotionMaster's active flags.
      This is typically a constant representing a specific movement state or behavior
      (e.g., MOTION_FLAG_WALK, MOTION_FLAG_RUN). Valid values are defined by the MotionFlag
      enumeration in the TrinityCore codebase.
  returns: null
  examples:
  - title: Adding a Walk Flag to a Creature's MotionMaster
    code: 'Creature* creature = ...;

      MotionMaster* motionMaster = creature->GetMotionMaster();

      motionMaster->AddFlag(MOTION_FLAG_WALK);'
    language: cpp
  - title: Setting Multiple Motion Flags for Complex Movement Behavior
    code: 'Unit* unit = ...;

      MotionMaster* motionMaster = unit->GetMotionMaster();

      motionMaster->AddFlag(MOTION_FLAG_RUN);

      motionMaster->AddFlag(MOTION_FLAG_FLY);

      motionMaster->AddFlag(MOTION_FLAG_WALK);'
    language: cpp
  notes: This method directly modifies the internal flag state of the MotionMaster.
    It's important to understand that flags are typically combined using bitwise operations,
    so adding multiple flags will result in a cumulative effect. The MotionMaster
    maintains these flags to determine how movement should be handled during AI processing
    and pathfinding.
  warnings: Incorrectly setting motion flags can lead to unexpected behavior such
    as units not moving properly or getting stuck in certain states. It's crucial
    to use only valid flag constants defined in the MotionFlag enumeration to avoid
    undefined behavior.
  related:
  - RemoveFlag
  - HasFlag
  - ClearFlags
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:29:07.900584'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
