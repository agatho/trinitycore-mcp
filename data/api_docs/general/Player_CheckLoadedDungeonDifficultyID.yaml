api:
  class: Player
  method: CheckLoadedDungeonDifficultyID
  signature: int Player::CheckLoadedDungeonDifficultyID(int difficulty)
documentation:
  brief: Checks and returns the dungeon difficulty ID for the player's currently loaded
    dungeon
  description: The CheckLoadedDungeonDifficultyID method verifies the difficulty level
    of the dungeon that is currently loaded for the player. It compares the provided
    difficulty parameter against the player's active dungeon difficulty settings and
    returns the appropriate difficulty ID if valid. This method is typically used
    in dungeon-related gameplay mechanics to ensure proper difficulty handling and
    synchronization between client and server. The method may perform internal validation
    to confirm that the player is actually inside a dungeon instance before returning
    the difficulty value.
  parameters:
  - name: difficulty
    description: The difficulty level to check against the player's current dungeon
      instance. Valid values typically correspond to standard World of Warcraft dungeon
      difficulties (normal, heroic, mythic, etc.).
  returns: Returns an integer representing the valid dungeon difficulty ID if the
    provided difficulty matches the player's loaded dungeon settings. Returns -1 or
    0 if no valid dungeon is loaded or if the difficulty does not match the current
    instance.
  examples:
  - title: Check if player is in a heroic dungeon
    code: "Player* player = ...;\nint difficultyID = player->CheckLoadedDungeonDifficultyID(1);\n\
      if (difficultyID == 1) {\n    // Player is in a heroic dungeon\n}"
    language: cpp
  - title: Validate dungeon difficulty before granting rewards
    code: "Player* player = ...;\nint requestedDifficulty = player->GetDifficulty();\n\
      int actualDifficulty = player->CheckLoadedDungeonDifficultyID(requestedDifficulty);\n\
      if (actualDifficulty > 0) {\n    // Grant appropriate rewards based on actual\
      \ difficulty\n}"
    language: cpp
  notes: This method is primarily used in TrinityCore's dungeon management system
    to ensure that players receive appropriate content and rewards based on their
    current dungeon instance. The method may internally check the player's current
    map context and instance data before performing the difficulty validation.
  warnings: Care should be taken when using this method in scenarios where players
    might not be inside a dungeon instance, as it may return invalid values or cause
    unexpected behavior if not properly validated.
  related:
  - GetDifficulty
  - IsInDungeon
  - GetDungeonDifficultyID
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T19:52:46.509022'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
