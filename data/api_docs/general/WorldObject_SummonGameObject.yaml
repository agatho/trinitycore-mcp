api:
  class: WorldObject
  method: SummonGameObject
  signature: GameObject * WorldObject::SummonGameObject(uint32 entry, float x, float
    y, float z, float ang, const QuaternionData & rot, int respawnTime, GOSummonType
    summonType)
documentation:
  brief: Summons a game object at specified coordinates with given rotation and respawn
    time.
  description: This method creates and spawns a GameObject at the specified position
    with the given orientation and respawn time. The GameObject is created using the
    provided entry ID and will be summoned according to the specified summon type.
    The method returns a pointer to the newly created GameObject instance, which can
    be used for further manipulation or interaction within the game world.
  parameters:
  - name: entry
    description: The game object entry ID that defines what type of GameObject is
      being summoned
  - name: x
    description: X coordinate position where the GameObject will be spawned
  - name: y
    description: Y coordinate position where the GameObject will be spawned
  - name: z
    description: Z coordinate position where the GameObject will be spawned
  - name: ang
    description: Yaw angle (rotation around Z-axis) for the GameObject's orientation
  - name: rot
    description: QuaternionData representing the full rotation of the GameObject in
      3D space
  - name: respawnTime
    description: Respawn time in seconds for the GameObject, determines how long before
      it reappears
  - name: summonType
    description: Type of summon used to determine how the GameObject is summoned (e.g.,
      temporary or permanent)
  returns: Returns a pointer to the newly created GameObject instance, or nullptr
    if the operation fails.
  examples:
  - title: Basic GameObject Summon
    code: GameObject* go = this->SummonGameObject(12345, 100.0f, 200.0f, 300.0f, 0.0f,
      QuaternionData(0.0f, 0.0f, 0.0f, 1.0f), 60, GOSummonType::TEMPORARY);
    language: cpp
  - title: Advanced GameObject Summon with Rotation
    code: GameObject* go = this->SummonGameObject(12345, 100.0f, 200.0f, 300.0f, 1.57f,
      QuaternionData(0.0f, 0.0f, 0.707f, 0.707f), 120, GOSummonType::PERMANENT);
    language: cpp
  notes: The method requires valid coordinates and rotation data to function properly.
    The GameObject will be added to the world and can be accessed through the WorldObject's
    instance methods. Performance considerations include the use of respawn time which
    affects how often the GameObject reappears.
  warnings: This method may fail if the entry ID is invalid or if the coordinates
    are out of bounds. Be cautious when using temporary summon types as they will
    disappear after their respawn time expires.
  related:
  - SummonCreature
  - SummonGameObject
  - GetGameObject
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:33:11.980867'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
