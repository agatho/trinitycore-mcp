api:
  class: PathfindingManager
  method: GetNodeCost
  signature: float PathfindingManager::GetNodeCost(const int & from, const int & to,
    const PathRequest & request)
documentation:
  brief: Calculates and returns the movement cost between two pathfinding nodes based
    on the provided request parameters.
  description: The GetNodeCost method computes the traversal cost from one pathfinding
    node to another within the context of a specific path request. This cost typically
    represents factors such as distance, terrain difficulty, or obstacles that affect
    movement. The method uses internal pathfinding data structures and considers the
    current request's parameters to determine an accurate cost value for navigation
    algorithms. It is commonly used during A* pathfinding calculations to evaluate
    potential paths and select the most efficient route.
  parameters:
  - name: from
    description: The index or identifier of the starting node in the pathfinding graph
  - name: to
    description: The index or identifier of the destination node in the pathfinding
      graph
  - name: request
    description: A PathRequest object containing context-specific parameters such
      as unit type, movement flags, and environmental conditions that influence cost
      calculation
  returns: A float value representing the calculated movement cost between the two
    nodes. This value is typically non-negative and may be zero if no cost is associated
    with the transition.
  examples:
  - title: Basic Node Cost Calculation
    code: 'PathRequest request;

      request.movementFlags = MOVEFLAG_WALKING;

      request.unitType = UNIT_TYPE_PLAYER;

      float cost = pathfinder.GetNodeCost(10, 15, request);

      // Returns the cost to move from node 10 to node 15 under specified conditions'
    language: cpp
  - title: Using Node Cost in Pathfinding Logic
    code: "PathRequest request;\nrequest.movementFlags = MOVEFLAG_FLYING;\nrequest.unitType\
      \ = UNIT_TYPE_NPC;\nint startNode = 5;\nint endNode = 20;\nfloat cost = pathfinder.GetNodeCost(startNode,\
      \ endNode, request);\nif (cost >= 0.0f) {\n    // Proceed with path calculation\
      \ using this cost\n    std::cout << \"Movement cost: \" << cost << std::endl;\n\
      }"
    language: cpp
  notes: This method is typically called internally by the pathfinding system during
    A* or Dijkstra's algorithm execution. The returned cost values are used to weight
    edges in the graph, influencing which paths are considered optimal. Performance
    is optimized through caching mechanisms where applicable.
  warnings: Ensure that both 'from' and 'to' node indices are valid within the current
    pathfinding graph; invalid indices may lead to undefined behavior or incorrect
    results. The PathRequest must contain valid parameters relevant to the current
    navigation context.
  related:
  - GetNodePosition
  - CalculatePath
  - IsNodeValid
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T08:38:01.734319'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
