api:
  class: ChannelMgr
  method: ChannelMgr
  signature: void ChannelMgr::ChannelMgr(ChannelMgr && right)
documentation:
  brief: Moves a ChannelMgr object to another ChannelMgr object using move semantics.
  description: The ChannelMgr move constructor transfers ownership of resources from
    one ChannelMgr instance to another. This constructor is typically used when creating
    a new ChannelMgr object by moving an existing one, allowing for efficient resource
    transfer without deep copying. The source ChannelMgr object is left in a valid
    but unspecified state after the move operation. This behavior aligns with standard
    C++ move semantics and is commonly used in container classes and smart pointer
    implementations within TrinityCore's channel management system.
  parameters: []
  returns: null
  examples:
  - title: Move ChannelMgr to New Instance
    code: 'ChannelMgr sourceChannelMgr;

      // ... populate sourceChannelMgr ...

      ChannelMgr newChannelMgr = std::move(sourceChannelMgr); // Move constructor
      invoked'
    language: cpp
  notes: This move constructor is part of the C++ standard library's move semantics
    implementation. After a successful move, the original ChannelMgr object should
    not be used for operations that require valid state, as it will be left in a moved-from
    state. This constructor is typically invoked implicitly during assignments or
    when passing ChannelMgr objects by value.
  warnings: Using the moved-from ChannelMgr object after a move operation results
    in undefined behavior. Developers must ensure no further operations are performed
    on the source object after moving it to another instance.
  related:
  - ChannelMgr::ChannelMgr(const ChannelMgr&)
  - ChannelMgr& ChannelMgr::operator=(ChannelMgr&&)
  - ChannelMgr& ChannelMgr::operator=(const ChannelMgr&)
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T04:26:43.629226'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
