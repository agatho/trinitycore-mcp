api:
  class: Player
  method: UpdateGatherSkill
  signature: bool Player::UpdateGatherSkill(uint32 skillId, uint32 skillValue, uint32
    redLevel, uint32 multiplicator, const int * object)
documentation:
  brief: Updates the player's gathering skill based on provided parameters.
  description: The UpdateGatherSkill method is responsible for modifying a player's
    gathering skill level within the TrinityCore framework. This method typically
    gets invoked when a player successfully gathers resources such as herbs, ores,
    or other collectible items. It adjusts the skill value based on the provided parameters
    including the skill ID, current skill value, red level threshold, and a multiplicative
    factor. The method returns true if the skill update was successful, and false
    otherwise. This functionality is integral to the game's crafting and gathering
    mechanics, ensuring that players progress in their respective gathering professions.
  parameters:
  - name: skillId
    description: The unique identifier of the gathering skill being updated (e.g.,
      Herbalism, Mining, etc.).
  - name: skillValue
    description: The current value of the skill before the update. This determines
      how much the skill should progress.
  - name: redLevel
    description: The red level threshold that defines the maximum skill level before
      reaching the cap. Used to calculate progression.
  - name: multiplicator
    description: A multiplier value that affects how quickly the skill progresses.
      Higher values result in faster advancement.
  - name: object
    description: Pointer to an integer array or object representing additional context
      for the gathering action, such as resource type or quality.
  returns: Returns true if the skill update was successful and the player's skill
    level was adjusted accordingly. Returns false if the update failed due to invalid
    parameters or other internal errors.
  examples:
  - title: Basic usage of UpdateGatherSkill
    code: "Player* player = ...;\nuint32 skillId = SKILL_HERBALISM;\nuint32 skillValue\
      \ = player->GetSkillValue(skillId);\nuint32 redLevel = 375;\nuint32 multiplicator\
      \ = 1;\nint object[] = {0};\nbool success = player->UpdateGatherSkill(skillId,\
      \ skillValue, redLevel, multiplicator, object);\nif (success) {\n    // Skill\
      \ updated successfully\n}"
    language: cpp
  - title: Advanced usage with dynamic parameters
    code: "Player* player = ...;\nuint32 skillId = SKILL_MINING;\nuint32 skillValue\
      \ = player->GetSkillValue(skillId);\nuint32 redLevel = 450;\nuint32 multiplicator\
      \ = 2;\nint object[] = {1, 2, 3}; // Represents different ore types\nbool success\
      \ = player->UpdateGatherSkill(skillId, skillValue, redLevel, multiplicator,\
      \ object);\nif (success) {\n    ChatHandler(player->GetSession()).PSendSysMessage(\"\
      Mining skill updated.\");\n}"
    language: cpp
  notes: This method is part of the core gathering system and interacts with internal
    skill tracking mechanisms. It's typically called after a successful gather action,
    such as when a player collects a herb or mines an ore. The method may internally
    check for skill caps, progression thresholds, and other game rules to ensure valid
    updates.
  warnings: Incorrect usage of this method could lead to invalid skill values or unexpected
    behavior in the player's gathering profession. Ensure that all parameters are
    validated before calling the function, especially the skillId and object array
    contents.
  related:
  - GetSkillValue
  - AddSkillLevel
  - UpdateSkill
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T18:59:24.971265'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
