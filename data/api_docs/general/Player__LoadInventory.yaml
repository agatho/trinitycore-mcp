api:
  class: Player
  method: _LoadInventory
  signature: void Player::_LoadInventory(int result, int artifactsResult, int azeriteResult,
    int azeriteItemMilestonePowersResult, int azeriteItemUnlockedEssencesResult, int
    azeriteEmpoweredItemResult, uint32 timeDiff)
documentation:
  brief: Loads player inventory data including artifacts, azerite items, and related
    content.
  description: This method loads the player's inventory data including artifact progress,
    azerite item milestones, unlocked essences, and empowered items. It handles various
    data types related to player progression and content unlocks. The method is typically
    called during character loading or when updating player data after certain game
    events. It processes multiple data streams including artifact progress, azerite
    item data, and related milestone information.
  parameters:
  - name: result
    description: Main inventory result data including artifacts and general item data
  - name: artifactsResult
    description: Artifact progress data including artifact power and unlock information
  - name: azeriteResult
    description: Azerite item data including milestone powers and related content
  - name: azeriteItemMilestonePowersResult
    description: Azerite item milestone powers data for progression tracking
  - name: azeriteItemUnlockedEssencesResult
    description: Azerite item unlocked essences data for content unlocks
  - name: azeriteEmpoweredItemResult
    description: Azerite empowered item data including item empowerment information
  - name: timeDiff
    description: Time difference in milliseconds for processing updates
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->_LoadInventory(0, 1, 2, 3, 4, 5, 1000);

      // Loads inventory data for player'
    language: cpp
  notes: This method is part of the player's internal loading mechanism and should
    be called only during appropriate game events or character loading phases. The
    method handles multiple data streams and requires careful processing of different
    data types.
  warnings: This method should not be called directly by external code without proper
    context. It's designed for internal use during player loading processes and may
    cause data inconsistencies if called outside proper game mechanics.
  related:
  - Player::LoadInventory
  - Player::SaveInventory
  - Player::UpdateInventory
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T23:09:37.566621'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
