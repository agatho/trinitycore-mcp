api:
  class: ScriptMgr
  method: OnSceneStart
  signature: void ScriptMgr::OnSceneStart(Player * player, uint32 sceneInstanceID,
    const SceneTemplate * sceneTemplate)
documentation:
  brief: Invoked when a scene begins for a player, allowing scripts to respond to
    scene start events.
  description: The OnSceneStart method is a callback function within the ScriptMgr
    class that gets triggered whenever a scene starts for a player in TrinityCore.
    This method provides an opportunity for custom scripts or modules to execute logic
    when a scene begins, such as modifying player state, triggering events, or altering
    scene behavior. The method receives information about the player involved, the
    unique identifier of the scene instance, and a pointer to the scene template that
    defines the scene's properties. It is part of the broader scripting system that
    enables developers to extend game functionality through custom code without modifying
    core server files.
  parameters:
  - name: player
    description: A pointer to the Player object for whom the scene is starting. This
      parameter represents the specific player instance involved in the scene event.
  - name: sceneInstanceID
    description: The unique identifier (uint32) of the scene instance that has started.
      This ID can be used to track or reference the specific occurrence of a scene.
  - name: sceneTemplate
    description: A pointer to the SceneTemplate object that defines the properties
      and behavior of the scene being initiated. This template contains configuration
      data for how the scene should behave.
  returns: null
  examples:
  - title: Basic Scene Start Handler
    code: "class MySceneScript : public SceneScript\n{\npublic:\n    void OnSceneStart(Player*\
      \ player, uint32 sceneInstanceID, const SceneTemplate* sceneTemplate) override\n\
      \    {\n        // Log when a scene starts for the player\n        sLog->outString(\"\
      Scene %u started for player %s\", sceneInstanceID, player->GetName().c_str());\n\
      \    }\n};"
    language: cpp
  - title: Scene Start with Player State Modification
    code: "class MySceneScript : public SceneScript\n{\npublic:\n    void OnSceneStart(Player*\
      \ player, uint32 sceneInstanceID, const SceneTemplate* sceneTemplate) override\n\
      \    {\n        // Prevent the player from moving during the scene\n       \
      \ player->SetCanMove(false);\n        \n        // Set a custom flag to indicate\
      \ scene is active\n        player->SetFlag(PLAYER_FLAGS, PLAYER_FLAG_IN_PVP);\n\
      \    }\n};"
    language: cpp
  notes: This method is typically called from within the core scene handling system
    when a scene begins for a player. It's important to note that this method does
    not control whether the scene starts, but rather responds to it. The SceneTemplate
    pointer may be null in some edge cases, so checking for validity is recommended.
  warnings: Do not perform heavy computations or blocking operations within this method
    as it can affect performance. Be cautious when modifying player state directly,
    as improper handling could lead to unexpected behavior or client desynchronization.
  related:
  - OnSceneUpdate
  - OnSceneComplete
  - OnSceneCancel
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T22:05:39.457292'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
