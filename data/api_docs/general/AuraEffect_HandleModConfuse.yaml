api:
  class: AuraEffect
  method: HandleModConfuse
  signature: void AuraEffect::HandleModConfuse(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Applies or removes the confusion effect aura on a target.
  description: The HandleModConfuse method manages the application and removal of
    the confusion aura effect, which causes affected units to attack random targets
    within their vicinity. This method is invoked during aura application or removal
    events and controls the visual and behavioral changes associated with the confusion
    state. The effect typically makes the target lose control of its actions, causing
    it to attack nearby enemies or allies randomly. It operates as part of the TrinityCore's
    aura system and interacts with the unit's AI and combat behavior.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      how this aura is applied to a specific target.
  - name: mode
    description: The mode of application, typically indicating whether the effect
      is being applied (1) or removed (0).
  - name: apply
    description: Boolean flag indicating if the aura should be applied (true) or removed
      (false).
  returns: null
  examples:
  - title: Basic Usage in Aura Application
    code: "void MyAura::HandleModConfuse(const AuraApplication* aurApp, uint8 mode,\
      \ bool apply) const {\n    if (apply) {\n        // Apply confusion effect\n\
      \        Unit* target = aurApp->GetTarget();\n        target->SetFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_CONFUSED);\n    } else {\n        // Remove confusion effect\n \
      \       Unit* target = aurApp->GetTarget();\n        target->RemoveFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_CONFUSED);\n    }\n}"
    language: cpp
  notes: This method is part of the aura handling system and is typically called internally
    by TrinityCore's core when an aura is applied or removed. Developers should ensure
    that any custom implementations properly handle both application and removal states
    to maintain game balance and prevent unexpected behavior.
  warnings: Improper handling of the apply flag can lead to inconsistent behavior
    where confusion effects are not properly cleared, potentially causing units to
    remain in a confused state indefinitely or behave erratically after being removed.
  related:
  - AuraEffect::HandleModConfuse
  - AuraApplication::GetTarget
  - Unit::SetFlag
  - Unit::RemoveFlag
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:40:23.511870'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
