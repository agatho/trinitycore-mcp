api:
  class: ObjectMgr
  method: GetItemTemplate
  signature: const int * ObjectMgr::GetItemTemplate(uint32 entry) const
documentation:
  brief: Retrieves the item template data for a specified item entry ID
  description: The GetItemTemplate method fetches the complete item template information
    for a given item entry identifier from the game's database. This method is commonly
    used by the TrinityCore server to access item properties such as name, quality,
    stats, and other attributes when processing item-related operations like loot
    generation, inventory management, or item creation. The returned pointer points
    to an internal data structure that contains all template information for the requested
    item. If no item template exists for the given entry ID, the method may return
    a null pointer or a default template depending on implementation details.
  parameters: []
  returns: A const pointer to the item template data structure for the specified entry,
    or nullptr if no such item exists in the database
  examples:
  - title: Basic Usage Example
    code: "const ItemTemplate* itemTemplate = sObjectMgr->GetItemTemplate(12345);\n\
      if (itemTemplate)\n{\n    printf(\"Item Name: %s\\n\", itemTemplate->Name.c_str());\n\
      \    printf(\"Item Quality: %d\\n\", itemTemplate->Quality);\n}"
    language: cpp
  - title: Checking Item Existence
    code: "uint32 itemId = 98765;\nconst ItemTemplate* templateData = sObjectMgr->GetItemTemplate(itemId);\n\
      if (templateData != nullptr)\n{\n    // Item exists, proceed with operations\n\
      \    printf(\"Found item: %s\\n\", templateData->Name.c_str());\n}\nelse\n{\n\
      \    // Item does not exist in database\n    printf(\"Item with ID %u not found\\\
      n\", itemId);\n}"
    language: cpp
  notes: This method accesses internal server data structures and should be used carefully.
    The returned pointer is valid only as long as the item template cache remains
    intact, typically throughout the server's runtime. Consider caching frequently
    accessed templates to avoid repeated database lookups.
  warnings: Do not modify the returned ItemTemplate structure directly as it may cause
    inconsistencies in the server's internal state. Always validate that the returned
    pointer is not null before dereferencing it.
  related:
  - GetItemTemplate
  - GetItemPrototype
  - LoadItemTemplates
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T09:33:51.577917'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
