api:
  class: Item
  method: IsInBag
  signature: bool Item::IsInBag() const
documentation:
  brief: Determines whether the item is located inside a bag.
  description: The IsInBag method checks if the current item is stored within another
    item that serves as a container (such as a bag). This method is commonly used
    in game mechanics to determine the location of an item, particularly when evaluating
    inventory or bag contents. It returns true if the item is inside a bag and false
    otherwise. The method is essential for various gameplay scenarios including item
    management, quest progression, and player inventory checks.
  parameters: []
  returns: Returns true if the item is located inside a bag, false otherwise. This
    indicates whether the item's position within the game world is within a container
    rather than directly on the player's person or in a bag slot.
  examples:
  - title: Basic usage example
    code: "Item* item = player->GetItemByGuid(guid);\nif (item->IsInBag()) {\n   \
      \ // Item is inside a bag\n    printf(\"Item is in bag\\n\");\n} else {\n  \
      \  // Item is not in bag\n    printf(\"Item is not in bag\\n\");\n}"
    language: cpp
  notes: This method relies on the item's internal storage state and does not directly
    access the bag's inventory. It may be used in conjunction with other methods like
    GetBagSlot() to determine exact position within a container.
  warnings: This method should be used carefully when checking for items that are
    not in bags, as it only returns true if the item is inside a bag. It does not
    account for items stored in bank or mail.
  related:
  - Item::GetBagSlot
  - Item::IsInInventory
  - Item::IsEquipped
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T04:42:40.322584'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
