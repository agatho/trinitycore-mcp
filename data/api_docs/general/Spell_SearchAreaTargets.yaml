api:
  class: Spell
  method: SearchAreaTargets
  signature: void Spell::SearchAreaTargets(int & targets, const SpellEffectInfo &
    spellEffectInfo, float range, const int * position, WorldObject * referer, SpellTargetObjectTypes
    objectType, SpellTargetCheckTypes selectionType, const int * condList, Trinity::WorldObjectSpellAreaTargetSearchReason
    searchReason)
documentation:
  brief: Searches for area targets within specified range and conditions
  description: This method performs a targeted search for objects within a defined
    radius around a reference point, using specific spell effect parameters and target
    selection criteria. It is commonly used in spell mechanics to determine valid
    targets for area-of-effect spells, particularly when calculating damage or applying
    effects to multiple targets simultaneously. The method supports various object
    types and selection criteria, making it versatile for different spell applications.
  parameters:
  - name: targets
    description: Reference to an integer that will store the number of targets found
      by this search. This parameter is modified in-place.
  - name: spellEffectInfo
    description: The SpellEffectInfo structure containing details about the spell
      effect being applied, including target type and radius parameters.
  - name: range
    description: Float value representing the maximum distance from the reference
      point to search for targets. This defines the effective range of the area search.
  - name: position
    description: Pointer to an array of three integers representing X, Y, Z coordinates
      used as the center point for the area search. Null pointer indicates use of
      referer's position.
  - name: referer
    description: WorldObject pointer that serves as the reference point for the search.
      Used when position is null to determine the center of the area.
  - name: objectType
    description: SpellTargetObjectTypes enum value specifying what type of objects
      to search for, such as players, creatures, or gameobjects.
  - name: selectionType
    description: SpellTargetCheckTypes enum value defining how targets should be selected,
      including distance-based or line-of-sight criteria.
  - name: condList
    description: Pointer to an array of integers representing condition IDs that must
      be satisfied for a target to be considered valid. Null pointer indicates no
      conditions.
  - name: searchReason
    description: Trinity::WorldObjectSpellAreaTargetSearchReason enum value indicating
      why the search is being performed, such as for damage calculation or effect
      application.
  returns: null
  examples:
  - title: Basic area target search example
    code: 'int targets = 0;

      SpellEffectInfo spellEffectInfo;

      float range = 10.0f;

      WorldObject* referer = player;

      SpellTargetObjectTypes objectType = SPELL_TARGET_OBJECT_TYPE_PLAYER;

      SpellTargetCheckTypes selectionType = SPELL_TARGET_CHECK_TYPE_DISTANCE;

      Trinity::WorldObjectSpellAreaTargetSearchReason searchReason = TRINITY_WORLD_OBJECT_SPELL_AREA_TARGET_SEARCH_REASON_DAMAGE;

      Spell::SearchAreaTargets(targets, spellEffectInfo, range, nullptr, referer,
      objectType, selectionType, nullptr, searchReason);'
    language: cpp
  notes: This method is typically used during spell processing to find valid targets
    for area effects. It supports multiple target types and selection criteria, making
    it flexible for different spell mechanics. Performance considerations include
    the number of objects being searched and the complexity of conditions applied.
  warnings: Care should be taken when using null pointers for position or condList
    parameters, as incorrect handling may lead to undefined behavior or invalid searches.
    The method assumes that referer is valid and properly initialized.
  related:
  - Spell::SearchAreaTargets
  - Spell::CalculateDamage
  - Spell::Effect
  - Spell::Target
  - Spell::GetTarget
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:58:22.228013'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
