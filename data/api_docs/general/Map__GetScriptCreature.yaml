api:
  class: Map
  method: _GetScriptCreature
  signature: Creature * Map::_GetScriptCreature(Object * obj, bool isSource, const
    ScriptInfo * scriptInfo) const
documentation:
  brief: Retrieves a script-controlled creature from an object reference within the
    map.
  description: The _GetScriptCreature method is used internally by the TrinityCore
    scripting system to locate and return a Creature object that is associated with
    a given Object reference. This method is typically invoked during script execution
    when a script needs to interact with a specific creature on the map. It performs
    internal lookups based on the provided object reference, determining whether it
    represents a creature and returning the appropriate Creature pointer if found.
    The method may be used in conjunction with script information to ensure proper
    context handling for scripted events or interactions.
  parameters:
  - name: obj
    description: A pointer to an Object instance that may represent a creature or
      other game entity. This object is used as the basis for locating the corresponding
      Creature.
  - name: isSource
    description: Boolean flag indicating if the object is being treated as a source
      in a script context. This affects how the method processes and retrieves the
      creature reference.
  - name: scriptInfo
    description: Pointer to ScriptInfo structure containing metadata about the script
      that invoked this method. Used for contextual handling of script-based creature
      lookups.
  returns: Returns a pointer to a Creature object if a valid creature is found associated
    with the input object; otherwise returns nullptr if no matching creature exists
    or if the lookup fails.
  examples:
  - title: Basic usage in script context
    code: "Creature* target = map->_GetScriptCreature(sourceObject, true, &scriptInfo);\n\
      if (target)\n{\n    // Proceed with interaction using target creature\n    target->AI()->DoAction(ACTION_TRIGGER_EVENT);\n\
      }"
    language: cpp
  - title: Checking for valid creature before use
    code: "Creature* creature = map->_GetScriptCreature(eventObject, false, nullptr);\n\
      if (creature && creature->IsAlive())\n{\n    // Safe to perform actions on the\
      \ creature\n    creature->CastSpell(creature, SPELL_ENERGY_BURST, true);\n}\n\
      else\n{\n    // Handle invalid or dead creature case\n    sLog->outError(\"\
      Invalid creature reference in script event\");\n}"
    language: cpp
  notes: This method is intended for internal use within the TrinityCore scripting
    engine and should not typically be called directly from custom scripts. The method
    performs internal map lookups and may involve thread synchronization depending
    on the context in which it's invoked.
  warnings: Calling this method with invalid or null object pointers can lead to undefined
    behavior. Ensure that the input object is valid and represents a creature before
    invoking this method. This method should only be used within appropriate script
    execution contexts where the underlying map state is consistent.
  related:
  - _GetScriptGameObject
  - _GetScriptPlayer
  - GetCreature
  - GetObject
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T23:51:31.936036'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
