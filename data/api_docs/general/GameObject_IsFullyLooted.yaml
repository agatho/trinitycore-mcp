api:
  class: GameObject
  method: IsFullyLooted
  signature: bool GameObject::IsFullyLooted() const
documentation:
  brief: Determines whether a game object has been fully looted by players.
  description: This method checks if a GameObject has been completely looted, meaning
    all possible loot items have been extracted by players. It returns true when the
    object's loot has been fully consumed, and false otherwise. This is particularly
    important for objects like chests or containers that can be looted multiple times
    but only once per instance. The method is commonly used in game mechanics to prevent
    duplicate loot from being generated after an object has been looted.
  parameters: []
  returns: Returns true if the GameObject has been fully looted, false otherwise.
    This indicates that all possible loot items have been extracted by players and
    no further loot can be obtained from this object.
  examples:
  - title: Check if GameObject is fully looted
    code: "if (gameObject->IsFullyLooted()) {\n    // Do something\n}\nelse {\n  \
      \  // Do something else\n}"
    language: cpp
  notes: This method typically relies on internal tracking of loot state within the
    GameObject class. It may involve checking whether the object's loot has been marked
    as fully consumed, and could potentially involve multiple checks depending on
    how the loot system is implemented in TrinityCore.
  warnings: This method should not be used to determine if a GameObject can still
    be looted. Instead, it should be used to check if an object has already been looted
    completely, which may affect game mechanics related to loot generation or player
    interaction with objects.
  related:
  - GetLoot
  - IsLooted
  - LootState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T18:13:31.371352'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
