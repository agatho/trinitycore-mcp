api:
  class: EquipmentManager
  method: IsSetItem
  signature: bool EquipmentManager::IsSetItem(int * item)
documentation:
  brief: Checks if a given item is part of a set in the player's equipment.
  description: The IsSetItem method determines whether a specified item is currently
    equipped and belongs to a set bonus group. This functionality is essential for
    tracking set bonuses that provide additional effects when multiple items from
    the same set are worn. The method evaluates the item against the player's current
    equipment inventory to verify set membership. It returns true if the item is equipped
    and part of a set, false otherwise. This check is commonly used in conjunction
    with set bonus logic and item validation within the TrinityCore framework.
  parameters:
  - name: item
    description: Pointer to an integer representing the item's entry ID. The value
      should correspond to a valid item template ID from the game database.
  returns: Returns true if the specified item is equipped and belongs to a set bonus
    group; otherwise, returns false. This indicates whether the item contributes to
    any active set bonuses.
  examples:
  - title: Basic Set Item Check
    code: "if (equipmentManager->IsSetItem(&itemId)) {\n    // Item is part of a set\n\
      \    // Apply set bonus logic here\n}"
    language: cpp
  - title: Checking Multiple Items for Set Bonuses
    code: "int items[] = {12345, 67890, 54321};\nfor (int i = 0; i < 3; ++i) {\n \
      \   if (equipmentManager->IsSetItem(&items[i])) {\n        // Process set bonus\
      \ for this item\n        printf(\"Item %d is part of a set\\n\", items[i]);\n\
      \    }\n}"
    language: cpp
  notes: This method relies on the player's current equipment state and may not account
    for temporary item modifications or effects. The item ID passed must be valid
    and correspond to an existing item in the database. Performance is generally low
    as it involves checking against equipped items.
  warnings: Ensure that the item pointer is valid and points to a properly initialized
    integer value. Passing null or invalid pointers may lead to undefined behavior
    or crashes. This method does not validate whether the item is actually equipped,
    only if it belongs to a set group.
  related:
  - GetEquippedItems
  - IsEquippedItem
  - GetSetBonus
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T13:56:03.149969'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
