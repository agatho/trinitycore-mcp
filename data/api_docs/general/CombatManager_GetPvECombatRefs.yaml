api:
  class: CombatManager
  method: GetPvECombatRefs
  signature: const int & CombatManager::GetPvECombatRefs() const
documentation:
  brief: Returns a constant reference to the number of active PvE combat references
    in the CombatManager.
  description: The GetPvECombatRefs method retrieves the current count of active PvE
    (Player versus Environment) combat references managed by the CombatManager instance.
    This value represents how many ongoing PvE combat scenarios are being tracked,
    which is essential for managing combat state, resource allocation, and ensuring
    proper cleanup of combat-related data structures. The returned reference is constant,
    meaning it cannot be modified directly through this accessor, but provides a read-only
    view of the internal counter. This method is typically used in combat management
    systems to monitor active encounters and ensure proper synchronization of game
    state during PvE interactions.
  parameters: []
  returns: A constant reference to an integer representing the number of active PvE
    combat references. The value is non-negative and increases as new PvE combats
    are initiated, decreasing as they conclude.
  examples:
  - title: Basic Usage Example
    code: 'CombatManager* combatMgr = ...;

      const int& pveRefs = combatMgr->GetPvECombatRefs();

      std::cout << "Active PvE combats: " << pveRefs << std::endl;'
    language: cpp
  - title: Usage in Combat State Check
    code: "void CheckCombatState(CombatManager* mgr) {\n    const int& refs = mgr->GetPvECombatRefs();\n\
      \    if (refs > 0) {\n        // There are active PvE combats\n        std::cout\
      \ << \"Processing \" << refs << \" PvE encounters\" << std::endl;\n    } else\
      \ {\n        // No active PvE combats\n        std::cout << \"No active PvE\
      \ combat references\" << std::endl;\n    }\n}"
    language: cpp
  notes: This method provides a constant reference to an internal counter, so modifications
    to the returned value will not affect the actual combat reference count. The implementation
    likely uses atomic operations or thread-safe mechanisms to ensure consistency
    in multi-threaded environments where combat events may occur concurrently.
  warnings: Because this returns a const reference, attempting to modify the returned
    value through this interface will result in compilation errors. Additionally,
    the value should be considered volatile and may change between calls if other
    threads are modifying combat state.
  related:
  - GetPvPCombatRefs
  - AddPvECombatRef
  - RemovePvECombatRef
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T08:53:57.058113'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
