api:
  class: Player
  method: StartLoadingActionButtons
  signature: void Player::StartLoadingActionButtons(int && callback)
documentation:
  brief: Initiates the asynchronous loading of player action buttons from the database
  description: The StartLoadingActionButtons method begins the process of loading
    a player's action button configurations from the database. This is typically called
    during player login or when action button data needs to be refreshed. The method
    initiates an asynchronous operation that will eventually populate the player's
    action button data, which can then be accessed through other related methods.
    The callback parameter allows for specifying a function to be executed once the
    loading is complete, enabling proper handling of the loaded data. This method
    is part of TrinityCore's player data management system and ensures that action
    button configurations are properly synchronized with the database state.
  parameters:
  - name: callback
    description: An integer representing a callback identifier or function pointer
      that will be executed upon completion of the loading process. This parameter
      allows for asynchronous handling of the action button data loading operation.
  returns: void
  examples:
  - title: Basic usage during player login
    code: 'Player* player = new Player();

      player->StartLoadingActionButtons(1); // Using callback ID 1'
    language: cpp
  - title: Using with custom callback handler
    code: "class ActionButtonCallback {\npublic:\n    static void OnActionButtonLoadComplete(int\
      \ callbackId) {\n        // Handle completed action button loading\n       \
      \ sLog->outString(\"Action buttons loaded with callback %d\", callbackId);\n\
      \    }\n};\n\nPlayer* player = new Player();\nplayer->StartLoadingActionButtons(42);\
      \ // Using callback ID 42"
    language: cpp
  notes: This method is typically used internally by the TrinityCore framework during
    player session initialization. The actual database loading occurs asynchronously,
    so the action button data may not be immediately available after calling this
    method. Developers should ensure proper synchronization when accessing action
    button data after initiating this load operation.
  warnings: Calling this method without proper session management or database connection
    can lead to incomplete data loading. The callback mechanism should be properly
    implemented to handle completion events, as failure to do so may result in unhandled
    asynchronous operations.
  related:
  - GetActionButton
  - SetActionButton
  - SaveActionButtons
  - LoadActionButtons
metadata:
  confidence: 0.85
  generated_at: '2025-10-29T19:16:37.776265'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
