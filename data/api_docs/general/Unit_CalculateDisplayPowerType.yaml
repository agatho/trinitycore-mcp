api:
  class: Unit
  method: CalculateDisplayPowerType
  signature: int Unit::CalculateDisplayPowerType() const
documentation:
  brief: Calculates and returns the display power type for a unit.
  description: This method determines the display power type of a unit, which is used
    to identify how the unit's power should be displayed in the game UI. The return
    value represents the type of power (e.g., mana, rage, focus) that the unit uses
    for display purposes. This calculation is typically based on the unit's current
    power type and may involve checking various factors such as class, level, and
    special abilities. The method is commonly used in conjunction with other display-related
    functions to ensure proper power visualization in the game interface.
  parameters: []
  returns: Returns an integer representing the display power type. Possible values
    include 0 for mana, 1 for rage, 2 for focus, and other values depending on the
    unit's specific characteristics and game mechanics. The value is determined by
    internal calculations based on the unit's power type and may vary between different
    unit types.
  examples:
  - title: Basic usage example
    code: "int displayPowerType = unit->CalculateDisplayPowerType();\nif (displayPowerType\
      \ == 0)\n{\n    // Unit displays mana\n}\nelse if (displayPowerType == 1)\n\
      {\n    // Unit displays rage\n}\nelse if (displayPowerType == 2)\n{\n    //\
      \ Unit displays focus\n}"
    language: cpp
  notes: This method is typically used in the context of UI display calculations and
    may involve internal game mechanics that determine how power types are represented.
    The calculation may be influenced by class-specific power types, level-based power
    adjustments, or special abilities that modify power display behavior.
  warnings: Care should be taken when using this method in conjunction with other
    power-related functions, as incorrect usage can lead to improper UI display or
    game balance issues. The return value should be interpreted carefully based on
    the unit's actual power type and not just assumed.
  related:
  - Unit::GetPowerType
  - Unit::GetMaxPower
  - Unit::GetPower
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:22:03.133940'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
