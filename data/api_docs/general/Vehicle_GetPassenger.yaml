api:
  class: Vehicle
  method: GetPassenger
  signature: Unit * Vehicle::GetPassenger(int8 seatId) const
documentation:
  brief: Retrieves the Unit passenger located in the specified seat of the vehicle.
  description: The GetPassenger method retrieves a pointer to the Unit (player or
    creature) that is currently seated in the specified seat of the vehicle. This
    method is used primarily for vehicle-related gameplay mechanics, such as determining
    who is riding in which seat, managing passenger interactions, or handling vehicle-specific
    events. The method performs bounds checking on the seatId parameter and returns
    NULL if no passenger exists in the specified seat or if the seatId is invalid.
    It's important to note that this function does not validate whether the vehicle
    itself is currently active or valid; it simply retrieves the passenger from the
    specified seat.
  parameters:
  - name: seatId
    description: The identifier of the seat from which to retrieve the passenger.
      Seat IDs are typically integers starting from 0 and incrementing for each additional
      seat on the vehicle. Valid values depend on the vehicle's configuration, but
      generally range from 0 to the maximum number of seats minus one.
  returns: A pointer to the Unit object representing the passenger in the specified
    seat, or NULL if no passenger is seated in that location or if the seatId is invalid.
  examples:
  - title: Basic Usage
    code: "Unit* passenger = vehicle->GetPassenger(0);\nif (passenger)\n{\n    //\
      \ Passenger exists in seat 0\n    sLog->outString(\"Passenger in seat 0: %s\"\
      , passenger->GetName().c_str());\n}\nelse\n{\n    // No passenger in seat 0\n\
      \    sLog->outString(\"No passenger in seat 0\");\n}"
    language: cpp
  - title: Iterating Through All Seats
    code: "for (int8 i = 0; i < vehicle->GetMaxPassengers(); ++i)\n{\n    Unit* passenger\
      \ = vehicle->GetPassenger(i);\n    if (passenger)\n    {\n        sLog->outString(\"\
      Seat %d occupied by: %s\", i, passenger->GetName().c_str());\n    }\n    else\n\
      \    {\n        sLog->outString(\"Seat %d is empty\", i);\n    }\n}"
    language: cpp
  notes: The method assumes that the vehicle object is valid and properly initialized.
    The seatId parameter must be within the valid range of seats for the vehicle,
    otherwise the result will be NULL. This function does not perform any locking
    or thread safety checks internally, so callers should ensure thread safety if
    used in multi-threaded contexts.
  warnings: Do not assume that a non-NULL return value means the passenger is alive
    or valid; always verify the Unit's state before using it. Also, be aware that
    seat IDs may vary depending on vehicle type and configuration, so hardcoding seat
    numbers should be avoided where possible.
  related:
  - GetMaxPassengers
  - AddPassenger
  - RemovePassenger
  - HasPassenger
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:33:38.918215'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
