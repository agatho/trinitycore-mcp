api:
  class: SpellMgr
  method: operator=
  signature: SpellMgr & SpellMgr::operator=(SpellMgr && right)
documentation:
  brief: Moves the contents of another SpellMgr instance to this instance
  description: The operator= method performs a move assignment operation on the SpellMgr
    class, transferring all resources and data from the right-hand side SpellMgr object
    to the current object. This is a move operation that leaves the source object
    in a valid but unspecified state. The SpellMgr class manages spell-related data
    within TrinityCore, including spell definitions, effects, and related configurations.
    This method is typically used during object construction or reassignment when
    moving ownership of spell data between instances. The move assignment ensures
    efficient resource management by avoiding unnecessary copying of large data structures.
  parameters: []
  returns: A reference to the current SpellMgr object after the move assignment has
    been completed
  examples:
  - title: Basic Move Assignment Example
    code: 'SpellMgr&& sourceMgr = SpellMgr();

      SpellMgr targetMgr;

      targetMgr = std::move(sourceMgr); // Move contents from source to target'
    language: cpp
  - title: Move Assignment in Function Context
    code: "SpellMgr CreateSpellManager()\n{\n    SpellMgr mgr;\n    // ... populate\
      \ manager with spell data ...\n    return mgr; // Move semantics will be used\n\
      }\n\nvoid UseSpellManager()\n{\n    SpellMgr manager = CreateSpellManager();\
      \ // Uses move assignment\n}"
    language: cpp
  notes: This method implements move semantics which is crucial for performance in
    TrinityCore's spell management system. The source SpellMgr object should not be
    used after this operation as its state becomes undefined but valid. This operation
    is typically used internally by the engine during object lifecycle management
    and spell data initialization.
  warnings: After calling this operator, the right-hand side object should not be
    accessed or used as its contents have been moved. This can lead to undefined behavior
    if the moved-from object is subsequently used in any way that assumes it still
    contains valid spell data.
  related:
  - SpellMgr()
  - SpellMgr(SpellMgr&&)
  - ~SpellMgr()
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:04:30.205793'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
