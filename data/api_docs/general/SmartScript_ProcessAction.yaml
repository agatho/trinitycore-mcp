api:
  class: SmartScript
  method: ProcessAction
  signature: void SmartScript::ProcessAction(SmartScriptHolder & e, Unit * unit, uint32
    var0, uint32 var1, bool bvar, const SpellInfo * spell, GameObject * gob, int varString)
documentation:
  brief: Executes a smart script action based on the provided event and context parameters.
  description: The ProcessAction method is responsible for executing a specific AI
    action defined in a SmartScriptHolder within the TrinityCore framework. It takes
    various contextual parameters such as the unit triggering the action, spell information,
    game object references, and variable values to determine how the action should
    be processed. This method is typically invoked during AI event handling when an
    NPC or creature needs to perform a specific behavior based on its script configuration.
    The method handles different action types through internal dispatch logic, ensuring
    proper execution of actions like casting spells, summoning creatures, changing
    faction, or modifying unit states.
  parameters:
  - name: e
    description: Reference to the SmartScriptHolder containing the action definition
      and script context information
  - name: unit
    description: Pointer to the Unit object that triggered this action, can be nullptr
      if not applicable
  - name: var0
    description: First variable parameter used for various action-specific values
      (e.g., spell ID, creature entry, etc.)
  - name: var1
    description: Second variable parameter with context-dependent meaning based on
      the action type
  - name: bvar
    description: Boolean flag that may control conditional behavior or action modifiers
  - name: spell
    description: Pointer to SpellInfo structure defining the spell to be cast, can
      be nullptr if not applicable
  - name: gob
    description: Pointer to GameObject reference used in actions requiring game object
      context, can be nullptr
  - name: varString
    description: Integer value representing a string parameter or special flag used
      in text-based actions
  returns: null
  examples:
  - title: Basic action execution with unit context
    code: 'SmartScriptHolder holder;

      holder.action = SMART_ACTION_CAST_SPELL;

      holder.var0 = 12345;

      Unit* target = player;

      ProcessAction(holder, target, 0, 0, false, nullptr, nullptr, 0);'
    language: cpp
  - title: Executing spell casting with spell info and boolean flag
    code: 'SmartScriptHolder holder;

      holder.action = SMART_ACTION_CAST_SPELL;

      holder.var0 = 67890;

      holder.var1 = 1;

      Unit* caster = npc;

      SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(67890);

      ProcessAction(holder, caster, 0, 0, true, spellInfo, nullptr, 0);'
    language: cpp
  notes: This method is part of TrinityCore's SmartAI system and should only be called
    from within AI event processing contexts. The actual action execution depends
    on the SmartScriptHolder's action type field which determines how parameters are
    interpreted. Performance considerations include avoiding frequent calls to this
    method in tight loops as it may involve database lookups or complex AI logic.
  warnings: Do not call ProcessAction directly with invalid or uninitialized SmartScriptHolder
    objects, as this will likely cause crashes or undefined behavior. Ensure all pointers
    (unit, spell, gob) are valid before passing them to avoid null pointer dereferences.
  related:
  - SmartScript::ProcessEvent
  - SmartScript::GetActionType
  - SmartScript::ExecuteAction
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T21:23:49.017093'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
