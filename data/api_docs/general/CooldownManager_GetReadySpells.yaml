api:
  class: CooldownManager
  method: GetReadySpells
  signature: int CooldownManager::GetReadySpells(const int & spellIds) const
documentation:
  brief: Returns the count of spells that are currently ready for use, excluding those
    on cooldown.
  description: The GetReadySpells method calculates and returns the number of spells
    from a given list that are not currently on cooldown. This method is typically
    used to determine which spells can be cast immediately by a player or unit. It
    checks the internal cooldown state of each spell in the provided list and filters
    out those that are currently cooling down. The method operates on a const object,
    ensuring no modification to the cooldown manager's state occurs during execution.
  parameters:
  - name: spellIds
    description: A reference to an array or container of spell identifiers (IDs) to
      check for readiness. These IDs correspond to spells in the game's spell system.
  returns: An integer representing the count of spells from the input list that are
    currently ready for use. Returns zero if all spells are on cooldown or if the
    input list is empty.
  examples:
  - title: Basic Usage Example
    code: 'std::vector<int> spellList = {12345, 67890, 54321};

      int readyCount = cooldownManager.GetReadySpells(spellList);

      // readyCount will contain the number of spells from spellList that are not
      on cooldown'
    language: cpp
  notes: This method assumes that the input spellIds parameter is a valid collection
    of spell identifiers. The internal implementation likely uses a map or set for
    efficient lookup of cooldown states. Performance is optimized for small to moderate-sized
    spell lists.
  warnings: Ensure that the spell IDs provided are valid and registered in the game's
    spell system; invalid IDs may lead to unexpected behavior or errors. This method
    does not modify any state, but it relies on accurate internal cooldown tracking.
  related:
  - GetSpellCooldown
  - IsSpellOnCooldown
  - AddSpellCooldown
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T15:44:08.575889'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
