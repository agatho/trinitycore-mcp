api:
  class: SpellScript
  method: IsAfterTargetSelectionPhase
  signature: bool SpellScript::IsAfterTargetSelectionPhase() const
documentation:
  brief: Determines whether the spell script is executing after the target selection
    phase.
  description: The IsAfterTargetSelectionPhase method checks if the current execution
    phase of a spell script has passed the initial target selection stage. This is
    useful for conditional logic that should only execute once targets have been chosen
    and processed. The method returns true when the script is running in a phase subsequent
    to target selection, and false otherwise. In the context of TrinityCore's spell
    system, this allows developers to implement behaviors that depend on having valid
    target information before proceeding with effects or modifications.
  parameters: []
  returns: A boolean value indicating whether the spell script execution is currently
    after the target selection phase. Returns true if the current phase follows target
    selection; false otherwise.
  examples:
  - title: Basic usage in spell effect
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleEffect(SpellEffIndex\
      \ effIndex) override\n    {\n        if (IsAfterTargetSelectionPhase())\n  \
      \      {\n            // Perform actions that require valid targets\n      \
      \      Unit* target = GetHitUnit();\n            if (target)\n             \
      \   target->AddAura(12345, target);\n        }\n    }\n};"
    language: cpp
  notes: This method is typically used within spell scripts to ensure that target
    data is available before performing operations that depend on it. It's important
    to understand the execution phases of spells in TrinityCore when using this method.
  warnings: null
  related:
  - IsInTargetSelectionPhase
  - GetSpellInfo
  - GetEffectIndex
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T05:48:59.266436'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
