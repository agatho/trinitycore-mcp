api:
  class: Unit
  method: GetBoundingRadius
  signature: float Unit::GetBoundingRadius() const
documentation:
  brief: Returns the bounding radius of the unit, which determines the effective size
    for collision detection and interaction.
  description: The GetBoundingRadius method retrieves the bounding radius of a Unit
    object, which represents the physical size of the unit in terms of collision detection.
    This value is crucial for determining how close units can get to each other before
    collision occurs, and affects movement, combat, and interaction mechanics. The
    bounding radius is typically calculated based on the unit's model size and scale
    factors, and may vary depending on the unit type (player, creature, or vehicle).
    This method is essential for calculating distances between units and determining
    whether they are within interaction range.
  parameters: []
  returns: Returns a float value representing the bounding radius of the unit. This
    value typically corresponds to the physical size of the unit in world coordinates,
    usually measured in yards. A larger bounding radius indicates a larger unit that
    requires more space for collision detection, while smaller values indicate smaller
    units.
  examples:
  - title: Basic usage example
    code: float radius = unit->GetBoundingRadius();
    language: cpp
  - title: Using bounding radius in distance calculations
    code: "Unit* target = ...;\nfloat radius = target->GetBoundingRadius();\nfloat\
      \ distance = unit->GetDistance(target);\nif (distance <= radius + 1.0f) {\n\
      \    // Unit is within interaction range\n}"
    language: cpp
  notes: This method is commonly used in pathfinding and movement calculations, particularly
    for determining whether units are close enough to interact or attack each other.
    The bounding radius value may be influenced by scaling factors and model size
    adjustments, especially for creatures with different scales. Performance considerations
    include the fact that this method involves a simple lookup of stored values rather
    than complex calculations.
  warnings: This method should not be used as a direct replacement for distance calculations
    in combat scenarios, as it only provides the bounding radius and not the actual
    distance between units. Care should be taken when using this value in conjunction
    with other movement-related methods to avoid incorrect collision detection or
    interaction results.
  related:
  - GetDisplayId
  - GetScale
  - GetDistance
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:26:53.960337'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
