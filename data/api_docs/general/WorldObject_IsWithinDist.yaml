api:
  class: WorldObject
  method: IsWithinDist
  signature: bool WorldObject::IsWithinDist(const WorldObject * obj, float dist2compare,
    bool is3D, bool incOwnRadius, bool incTargetRadius) const
documentation:
  brief: Checks if another WorldObject is within a specified distance from this object.
  description: The IsWithinDist method determines whether a given WorldObject is within
    a certain distance of the calling object. This method supports both 2D and 3D
    distance calculations, and can optionally include the radii of both objects in
    the comparison. It's commonly used for determining if targets are in range for
    spells, abilities, or interactions. The method performs efficient distance checks
    using squared distances to avoid expensive square root operations where possible.
  parameters:
  - name: obj
    description: Pointer to the WorldObject to check distance against. Must not be
      null.
  - name: dist2compare
    description: The maximum allowed distance between the two objects. Should be a
      positive value representing the radius of the area to check.
  - name: is3D
    description: If true, calculates 3D distance including height differences. If
      false, only calculates 2D (X/Y) distance.
  - name: incOwnRadius
    description: If true, includes the radius of this object in the distance calculation.
      If false, only considers the position of this object.
  - name: incTargetRadius
    description: If true, includes the radius of the target object in the distance
      calculation. If false, only considers the position of the target object.
  returns: Returns true if the specified WorldObject is within the given distance,
    considering all parameters; otherwise returns false.
  examples:
  - title: Basic usage to check if a target is in range
    code: "if (player->IsWithinDist(target, 30.0f, true, true, true)) {\n    // Target\
      \ is within 30 yards in 3D space, including both radii\n    player->CastSpell(target,\
      \ SPELL_FIREBALL);\n}"
    language: cpp
  - title: 2D distance check without including radii
    code: "if (creature->IsWithinDist(player, 10.0f, false, false, false)) {\n   \
      \ // Check if player is within 10 yards horizontally\n    creature->Say(\"You're\
      \ close!\", LANG_UNIVERSAL);\n}"
    language: cpp
  notes: This method uses squared distances internally for performance optimization.
    When using large distance values, be aware that the squared value might exceed
    float precision limits. The method assumes valid WorldObject pointers and will
    likely crash or behave unpredictably if passed null pointers.
  warnings: Passing null pointers to the obj parameter will result in undefined behavior.
    Always validate object pointers before calling this method. Be cautious with very
    large distance values as they may cause floating-point overflow issues when squared.
  related:
  - IsWithinDistInMap
  - GetDistance
  - GetDistance2D
  - GetDistanceZ
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:16:43.766683'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
