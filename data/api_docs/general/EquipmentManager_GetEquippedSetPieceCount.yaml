api:
  class: EquipmentManager
  method: GetEquippedSetPieceCount
  signature: uint32 EquipmentManager::GetEquippedSetPieceCount(int * player, uint32
    setId)
documentation:
  brief: Returns the count of equipped items belonging to a specified set for the
    given player.
  description: The GetEquippedSetPieceCount method retrieves the number of items from
    a specific set that are currently equipped by the player. This functionality is
    crucial for determining set bonus eligibility and activation in World of Warcraft's
    item system. The method takes a pointer to a player object and a set identifier,
    then iterates through the player's equipment to count how many items belong to
    that particular set. It is commonly used in conjunction with set bonus calculations
    and UI displays showing set completion status.
  parameters:
  - name: player
    description: Pointer to the Player object whose equipped items are being evaluated.
      Must not be null for valid operation.
  - name: setId
    description: Unique identifier representing the item set to count. This corresponds
      to the SetId field in the ItemSet database table and determines which set's
      pieces are being counted.
  returns: Returns a uint32 value representing the number of items from the specified
    set that are currently equipped by the player. Returns 0 if no items from the
    set are equipped or if the input parameters are invalid.
  examples:
  - title: Basic Usage to Check Set Completion
    code: "Player* player = ...; // Assume player object is initialized\nuint32 setID\
      \ = 1234; // Example set ID\nuint32 equippedCount = player->GetEquipmentMgr()->GetEquippedSetPieceCount(player,\
      \ setID);\nif (equippedCount >= 4) {\n    // Apply 4-piece set bonus\n}"
    language: cpp
  - title: Using with Set Bonus Logic
    code: "void CheckAndApplySetBonus(Player* player, uint32 setId) {\n    uint32\
      \ count = player->GetEquipmentMgr()->GetEquippedSetPieceCount(player, setId);\n\
      \    switch (count) {\n        case 2:\n            // Apply 2-piece bonus\n\
      \            break;\n        case 4:\n            // Apply 4-piece bonus\n \
      \           break;\n        case 6:\n            // Apply 6-piece bonus\n  \
      \          break;\n        default:\n            // No set bonus active\n  \
      \          break;\n    }\n}"
    language: cpp
  notes: This method relies on the player's current equipment state and will reflect
    real-time changes as items are equipped or unequipped. The implementation likely
    caches set information for performance reasons, but may require synchronization
    if called from multiple threads. It assumes that item sets are properly defined
    in the database with correct SetId values.
  warnings: Ensure that the player pointer is valid before calling this method to
    avoid null pointer dereferences. The setId parameter should correspond to a valid
    set defined in the ItemSet table, otherwise the result will be 0 even if items
    are equipped. This method does not account for temporary enchantments or item
    modifications that might affect set identification.
  related:
  - GetEquippedItemBySlot
  - IsEquippedItem
  - GetPlayerEquipment
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:03:29.811654'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
