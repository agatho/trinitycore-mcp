api:
  class: Unit
  method: HasAuraState
  signature: bool Unit::HasAuraState(int flag, const SpellInfo * spellProto, const
    Unit * Caster) const
documentation:
  brief: Checks if a unit has a specific aura state flag.
  description: This method determines whether a unit possesses a particular aura state,
    which represents a specific condition or status that affects gameplay mechanics.
    The method evaluates the aura state based on the provided flag and optional spell
    information, considering the caster's influence if specified. It is commonly used
    in World of Warcraft to verify player or creature states during spell effects
    or combat situations.
  parameters:
  - name: flag
    description: The aura state flag to check for. This represents a specific condition
      or status that can be evaluated by the method.
  - name: spellProto
    description: Optional pointer to the SpellInfo structure representing the spell
      being checked. If null, the method evaluates the aura state without considering
      spell-specific effects.
  - name: Caster
    description: Optional pointer to the Unit that casted the spell. If provided,
      this affects how the aura state is evaluated, particularly for certain spell
      effects or conditions.
  returns: Returns true if the unit has the specified aura state flag, false otherwise.
  examples:
  - title: Basic usage example
    code: "if (player->HasAuraState(FLAG_AURA_STATE_0)) {\n    // Do something\n}\n"
    language: cpp
  - title: Advanced usage with spell info
    code: "if (player->HasAuraState(FLAG_AURA_STATE_1, spellInfo, caster)) {\n   \
      \ // Check specific spell aura state\n}\n"
    language: cpp
  notes: The method is typically used in conjunction with other aura-related methods
    to determine whether a unit meets certain conditions for spell effects or gameplay
    mechanics. It's important to note that the flag parameter must be properly defined
    according to the game's aura state constants.
  warnings: This method should not be used to check for general aura existence; it
    specifically checks for aura states, which are different from regular aura types.
    Misusing this method can lead to incorrect gameplay behavior or logic errors.
  related:
  - HasAura
  - GetAuraState
  - IsInAuraState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:24:57.859269'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
