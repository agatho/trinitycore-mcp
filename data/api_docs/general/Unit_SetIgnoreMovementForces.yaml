api:
  class: Unit
  method: SetIgnoreMovementForces
  signature: bool Unit::SetIgnoreMovementForces(bool ignore)
documentation:
  brief: Sets whether the unit should ignore movement forces such as knockback or
    pull effects.
  description: This method controls whether a Unit will be affected by movement forces
    like knockback, pull, or other movement mechanics that normally influence unit
    positioning. When set to true, the unit will ignore these forces and remain in
    its current position regardless of external influences. When false, the unit will
    react to such forces as normal. This is commonly used for controlling NPC behavior
    during certain encounters or events where movement should be prevented.
  parameters:
  - name: ignore
    description: If true, the unit will ignore all movement forces including knockback,
      pull, and similar mechanics. If false, the unit will respond to movement forces
      as normal.
  returns: Returns true if the setting was successfully applied, false otherwise.
    The method may return false if the operation fails due to internal constraints
    or invalid state.
  examples:
  - title: Basic Usage Example
    code: "Unit* target = GetTarget();\nbool result = target->SetIgnoreMovementForces(true);\n\
      if (result)\n{\n    // Movement forces are ignored\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "Unit* boss = GetBoss();\nbool result = boss->SetIgnoreMovementForces(false);\n\
      if (!result)\n{\n    // Handle error case\n}\nelse\n{\n    // Boss will now\
      \ react to movement forces\n}"
    language: cpp
  notes: This method is typically used during encounters where specific NPC behavior
    needs to be controlled. It's important to note that this setting only affects
    movement forces, not other mechanics like damage or status effects. The method
    may have performance implications if used frequently on many units.
  warnings: Care should be taken when using this method as it can affect gameplay
    balance and encounter difficulty. Setting this to true during critical moments
    may cause the unit to remain in an unexpected position, potentially leading to
    unintended consequences in combat or event progression.
  related:
  - SetMovementForce
  - GetIgnoreMovementForces
  - Unit::SetCanMove
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T01:12:20.354631'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
