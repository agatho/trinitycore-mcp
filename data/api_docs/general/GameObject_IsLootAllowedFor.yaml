api:
  class: GameObject
  method: IsLootAllowedFor
  signature: bool GameObject::IsLootAllowedFor(const int * player) const
documentation:
  brief: Determines whether a player is allowed to loot the game object.
  description: This method checks if a specific player is permitted to obtain loot
    from the GameObject. It evaluates the player's relationship with the object, including
    whether they are in the same group or raid as the object's owner, and whether
    the loot rules are satisfied. The method is commonly used in loot distribution
    systems to ensure proper access control for players.
  parameters:
  - name: player
    description: A pointer to the player object that is being checked for loot permission.
      This parameter must not be null, and should reference a valid Player object.
  returns: Returns true if the player is allowed to loot the GameObject, false otherwise.
    The method may return false if the player is not in the same group or raid as
    the object's owner, or if the loot rules are not satisfied.
  examples:
  - title: Basic usage example
    code: "if (gameobject->IsLootAllowedFor(player)) {\n    // Player can loot the\
      \ object\n    // Proceed with loot distribution\n}"
    language: cpp
  notes: This method is typically used in conjunction with other loot-related methods
    to determine whether a player should receive loot from a GameObject. It may be
    called during the loot distribution process, and its result depends on the object's
    owner's group or raid status.
  warnings: The method assumes that the player pointer is valid and not null. If the
    player pointer is null or invalid, the behavior of this method is undefined and
    could lead to crashes or errors.
  related:
  - IsLootAllowedFor
  - GetLootState
  - GetOwner
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T18:12:34.200017'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
