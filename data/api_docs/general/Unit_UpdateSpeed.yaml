api:
  class: Unit
  method: UpdateSpeed
  signature: void Unit::UpdateSpeed(UnitMoveType mtype)
documentation:
  brief: Updates the movement speed of the unit based on the specified movement type.
  description: The UpdateSpeed method recalculates and applies the movement speed
    for a Unit based on the provided movement type. This method is typically invoked
    when a unit's speed modifiers change, such as when entering or leaving water,
    applying buffs or debuffs, or changing movement states like walking, running,
    or flying. It ensures that the unit's actual movement speed reflects any applied
    modifiers and updates client-side movement data accordingly. The method does not
    directly modify speed values but rather recalculates them using existing internal
    speed factors and applies the result to maintain synchronization between server
    and client.
  parameters:
  - name: mtype
    description: The UnitMoveType enum value indicating which movement type's speed
      should be updated. Common values include MOVE_WALK, MOVE_RUN, MOVE_SWIM, MOVE_FLY,
      etc., depending on the current movement state of the unit.
  returns: null
  examples:
  - title: Update running speed after applying a haste buff
    code: 'Unit* player = ...;

      player->UpdateSpeed(MOVE_RUN);'
    language: cpp
  - title: Update all movement speeds when entering a new zone with different terrain
    code: 'Unit* unit = ...;

      unit->UpdateSpeed(MOVE_WALK);

      unit->UpdateSpeed(MOVE_RUN);

      unit->UpdateSpeed(MOVE_SWIM);'
    language: cpp
  notes: This method internally calls other internal speed calculation functions and
    may trigger client updates. It's important to call this method after modifying
    any speed-related modifiers or movement states to ensure synchronization with
    the client. The method is usually invoked automatically by the core when speed
    changes occur, but can be manually called for custom logic or debugging purposes.
  warnings: Calling UpdateSpeed with an invalid UnitMoveType may result in unexpected
    behavior or undefined results. Ensure that the movement type passed is valid and
    corresponds to a supported movement state of the unit. Avoid calling this method
    excessively in tight loops as it may cause performance issues due to client synchronization
    overhead.
  related:
  - GetSpeed
  - SetSpeed
  - UpdateMovementInfo
  - HasUnitState
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T16:16:53.636792'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
