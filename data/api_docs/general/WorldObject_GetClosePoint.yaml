api:
  class: WorldObject
  method: GetClosePoint
  signature: void WorldObject::GetClosePoint(float & x, float & y, float & z, float
    size, float distance2d, float relAngle) const
documentation:
  brief: Calculates and returns the closest point on the object's path to a given
    position.
  description: The GetClosePoint method calculates the closest point on the object's
    path to a specified position, taking into account the object's size, distance
    in 2D space, and relative angle. This method is commonly used for positioning
    calculations in World of Warcraft's TrinityCore framework, particularly when determining
    where an object should be placed relative to another object or target. It is essential
    for calculating proper positioning during movement, combat, or interaction scenarios.
  parameters:
  - name: x
    description: Reference to the X coordinate of the calculated point
  - name: y
    description: Reference to the Y coordinate of the calculated point
  - name: z
    description: Reference to the Z coordinate of the calculated point
  - name: size
    description: The size of the object being considered for positioning calculations
  - name: distance2d
    description: Distance in 2D space from the current position to the target point
  - name: relAngle
    description: Relative angle (in radians) from the object's facing direction to
      the target point
  returns: null
  examples:
  - title: Basic usage example
    code: 'float x, y, z;

      float size = 0.5f;

      float distance2d = 10.0f;

      float relAngle = 0.0f;

      WorldObject::GetClosePoint(x, y, z, size, distance2d, relAngle);

      '
    language: cpp
  - title: Advanced usage example with angle calculation
    code: 'float x, y, z;

      float size = 1.0f;

      float distance2d = 5.0f;

      float relAngle = M_PI_4;

      WorldObject::GetClosePoint(x, y, z, size, distance2d, relAngle);

      '
    language: cpp
  notes: This method is typically used in conjunction with other positioning methods
    to determine proper placement of objects within the game world. Performance considerations
    include the use of floating-point calculations and potential for precision errors
    when dealing with large distances or angles.
  warnings: Care must be taken when using this method as it can result in incorrect
    positioning if parameters are not properly set, especially regarding angle calculations
    and distance values. The method may produce unexpected results if the object's
    size is not accurately represented.
  related:
  - GetDistance
  - GetPosition
  - GetOrientation
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T00:35:50.639577'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
