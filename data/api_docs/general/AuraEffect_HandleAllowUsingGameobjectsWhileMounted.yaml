api:
  class: AuraEffect
  method: HandleAllowUsingGameobjectsWhileMounted
  signature: void AuraEffect::HandleAllowUsingGameobjectsWhileMounted(const AuraApplication
    * aurApp, uint8 mode, bool apply) const
documentation:
  brief: Toggles the ability for players to interact with game objects while mounted.
  description: This method handles the application or removal of an aura effect that
    allows players to use game objects (such as benches, anvils, or other interactable
    objects) while they are mounted. It is typically invoked during aura application
    or removal events within the TrinityCore framework. The method modifies the player's
    state to either permit or restrict interaction with game objects based on whether
    the aura is being applied or removed.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This contains information about the aura and its target.
  - name: mode
    description: The mode of operation for the aura effect, typically indicating how
      the effect should be processed (e.g., application, removal).
  - name: apply
    description: Boolean flag indicating whether the aura is being applied (true)
      or removed (false).
  returns: null
  examples:
  - title: Applying the aura effect to allow mounted interaction
    code: 'AuraEffect* effect = ...;

      AuraApplication* app = ...;

      effect->HandleAllowUsingGameobjectsWhileMounted(app, 0, true);'
    language: cpp
  - title: Removing the aura effect to disable mounted interaction
    code: 'AuraEffect* effect = ...;

      AuraApplication* app = ...;

      effect->HandleAllowUsingGameobjectsWhileMounted(app, 0, false);'
    language: cpp
  notes: This method is part of the aura handling system in TrinityCore and is usually
    called internally by the core engine when auras are applied or removed. Developers
    should not call this directly unless implementing custom aura logic.
  warnings: Incorrectly calling this method with invalid parameters may lead to unexpected
    behavior, such as players being unable to interact with game objects even when
    they should be able to.
  related:
  - AuraEffect::HandleApply
  - AuraEffect::HandleRemove
  - AuraApplication::GetTarget
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:38:45.572398'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
