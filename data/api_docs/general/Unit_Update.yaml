api:
  class: Unit
  method: Update
  signature: void Unit::Update(uint32 time)
documentation:
  brief: Updates the unit's state and performs necessary calculations based on elapsed
    time.
  description: The Unit::Update method is a core function responsible for maintaining
    the game state of a unit object. It processes various aspects such as movement,
    combat, AI behavior, and status effects over time. This method is typically called
    by the game loop at regular intervals to ensure that all units in the world are
    properly updated according to their current conditions and the passage of time.
    The implementation handles things like updating health, mana, threat lists, and
    triggering appropriate events or actions based on the unit's state.
  parameters: []
  returns: null
  examples:
  - title: Basic Update Call
    code: 'Unit* player = ...;

      player->Update(100); // Update player with 100ms elapsed time'
    language: cpp
  - title: Update in Game Loop Context
    code: "void GameWorld::Update(uint32 diff) {\n    for (auto& unit : m_units) {\n\
      \        if (unit)\n            unit->Update(diff);\n    }\n}"
    language: cpp
  notes: This method is called frequently by the core game loop and should be optimized
    for performance. It's important to note that this method handles internal state
    updates but does not directly handle network synchronization - that is managed
    separately by the packet system.
  warnings: Do not call this method directly from within combat or AI logic without
    understanding its side effects, as it may trigger additional actions that could
    cause recursion or unexpected behavior. Also, avoid calling Update with very large
    time values as it might cause issues with time-based calculations.
  related:
  - Unit::UpdateAI
  - Unit::UpdateMovement
  - Unit::UpdateStats
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T16:34:18.889679'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
