api:
  class: ForcedDespawnDelayEvent
  method: ForcedDespawnDelayEvent
  signature: void ForcedDespawnDelayEvent::ForcedDespawnDelayEvent(Creature & owner,
    int respawnTimer)
documentation:
  brief: Schedules a delayed forced despawn of a creature with a specified respawn
    timer.
  description: The ForcedDespawnDelayEvent method is used to schedule a delayed removal
    of a Creature object from the game world. This event typically occurs after a
    predetermined time interval, allowing for controlled creature disappearance and
    potential respawn based on the provided respawn timer. The method integrates with
    TrinityCore's event system to manage creature lifecycle events without immediate
    destruction. It ensures that creatures can be temporarily removed from the world
    while maintaining proper state management for respawn mechanics.
  parameters:
  - name: owner
    description: Reference to the Creature object that will be scheduled for forced
      despawn. This parameter identifies which creature instance will be affected
      by the event.
  - name: respawnTimer
    description: Integer value representing the respawn timer in milliseconds. This
      determines how long the creature will remain despawned before attempting to
      respawn.
  returns: null
  examples:
  - title: Basic Usage of ForcedDespawnDelayEvent
    code: 'Creature* creature = ...; // Get a reference to a creature

      int respawnTime = 30000; // 30 seconds

      creature->GetMap()->AddEvent(new ForcedDespawnDelayEvent(*creature, respawnTime),
      creature->GetMap()->GetTimerForNextEvent());'
    language: cpp
  - title: Using ForcedDespawnDelayEvent with Custom Respawn Logic
    code: "class MyCreatureAI : public CreatureAI\n{\npublic:\n    void OnJustDied()\
      \ override\n    {\n        // Schedule a delayed despawn with custom respawn\
      \ timer\n        if (Creature* creature = GetCreature())\n        {\n      \
      \      int respawnDelay = 60000; // 1 minute\n            creature->GetMap()->AddEvent(new\
      \ ForcedDespawnDelayEvent(*creature, respawnDelay), creature->GetMap()->GetTimerForNextEvent());\n\
      \        }\n    }\n};"
    language: cpp
  notes: This method relies on TrinityCore's event system for scheduling. The actual
    despawn and potential respawn behavior depends on the map's event handling mechanism
    and the creature's respawn settings. Developers should ensure that the owner creature
    remains valid throughout the event lifecycle to prevent undefined behavior.
  warnings: Improper use of this method may lead to dangling references or memory
    leaks if the creature is destroyed before the event executes. Always verify that
    the creature reference is still valid when the event fires, especially in asynchronous
    contexts.
  related:
  - Creature::Despawn
  - Creature::Respawn
  - Map::AddEvent
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T04:07:15.613394'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
