api:
  class: Map
  method: RemoveWorldObject
  signature: void Map::RemoveWorldObject(WorldObject * obj)
documentation:
  brief: Removes a WorldObject from the map's object registry and unlinks it from
    the world.
  description: The RemoveWorldObject method is responsible for removing a WorldObject
    from the map's internal tracking systems. This includes unlinking the object from
    the map's grid system, removing it from any associated containers (such as player
    or creature lists), and ensuring that the object is no longer considered part
    of the active world state on the map. The method typically handles cleanup operations
    necessary when an object is being destroyed or moved to a different map. It is
    generally called internally by the core engine during object destruction or relocation,
    but can also be invoked directly in specific scenarios where manual removal is
    required.
  parameters:
  - name: obj
    description: Pointer to the WorldObject instance that should be removed from the
      map. Must not be null. The object must be currently registered with the map
      for this operation to have any effect.
  returns: null
  examples:
  - title: Removing a Creature from a Map
    code: 'Creature* creature = ...; // Assume creature is already on the map

      map->RemoveWorldObject(creature);

      // The creature is now removed from the map''s tracking system'
    language: cpp
  - title: Removing a Player Object Before Deletion
    code: 'Player* player = ...; // Assume player is on the map

      player->RemoveFromWorld();

      map->RemoveWorldObject(player);

      // Ensures proper cleanup before player object destruction'
    language: cpp
  notes: This method does not delete the WorldObject itself, but rather removes it
    from the map's tracking. The caller is responsible for managing the object's lifetime.
    The operation may trigger internal events or callbacks related to object removal,
    especially if the object is a player or creature.
  warnings: Calling this method with a null pointer will likely result in undefined
    behavior or crash. Ensure that the object being removed was previously added to
    the map using AddWorldObject(). Calling this on an already-removed object may
    cause issues depending on implementation details.
  related:
  - AddWorldObject
  - GetWorldObject
  - IsLoaded
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:58:07.626323'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
