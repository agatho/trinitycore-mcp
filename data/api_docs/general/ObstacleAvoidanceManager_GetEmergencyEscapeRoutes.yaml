api:
  class: ObstacleAvoidanceManager
  method: GetEmergencyEscapeRoutes
  signature: int ObstacleAvoidanceManager::GetEmergencyEscapeRoutes()
documentation:
  brief: Calculates and returns the number of valid emergency escape routes available
    for an AI-controlled unit during obstacle avoidance.
  description: The GetEmergencyEscapeRoutes method determines how many viable escape
    paths are currently calculated for a unit that is in immediate danger or trapped
    by obstacles. This method is part of the ObstacleAvoidanceManager's core functionality
    and is typically invoked during pathfinding or movement updates when an AI unit
    needs to rapidly determine alternative routes to avoid collisions or dangerous
    situations. It evaluates the current environment, including nearby obstacles,
    terrain, and unit positioning, to compute possible escape directions. The returned
    integer represents the count of these calculated routes, which can be used by
    the AI system to make decisions about movement behavior during emergency scenarios.
  parameters: []
  returns: An integer representing the number of valid emergency escape routes calculated
    for the unit. A return value of 0 indicates no viable escape paths were found,
    while a positive integer indicates the count of available routes. Negative values
    are not expected but may indicate internal error states if such conditions occur.
  examples:
  - title: Basic Usage in AI Update Loop
    code: "void MyAIUnit::Update()\n{\n    int escapeRoutes = m_obstacleAvoidanceManager.GetEmergencyEscapeRoutes();\n\
      \    if (escapeRoutes > 0)\n    {\n        // Proceed with movement using one\
      \ of the calculated routes\n        MoveToSafeLocation();\n    }\n    else\n\
      \    {\n        // No safe routes available, consider alternative actions\n\
      \        HandleNoEscapeRoute();\n    }\n}"
    language: cpp
  notes: This method is performance-sensitive and should be called sparingly during
    high-frequency AI updates. The calculation may involve complex spatial queries
    and obstacle detection logic that can impact frame rate if invoked too frequently.
    It's recommended to cache the result when used in tight loops or multiple conditional
    checks.
  warnings: The method assumes that the ObstacleAvoidanceManager has been properly
    initialized with valid unit data and environment context. Calling this method
    without prior setup may lead to undefined behavior or incorrect results. Additionally,
    the returned route count does not guarantee that movement along those routes will
    be successful; it only indicates their theoretical existence.
  related:
  - GetObstacleAvoidanceStatus
  - CalculateEscapeRoutes
  - UpdateObstacleMap
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:54:52.690691'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
