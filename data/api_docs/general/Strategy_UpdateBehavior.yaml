api:
  class: Strategy
  method: UpdateBehavior
  signature: void Strategy::UpdateBehavior(BotAI * ai, uint32 diff)
documentation:
  brief: Updates the behavior of a bot AI based on elapsed time and current game state.
  description: The UpdateBehavior method is responsible for processing and updating
    the decision-making logic of a bot AI instance. It takes the elapsed time (diff)
    since the last update and uses it to determine what actions the bot should take
    next, such as moving, attacking, or using abilities. This method is typically
    called in a loop by the game engine to continuously drive AI behavior. The method
    operates on a BotAI object which contains all necessary state information for
    the bot's current actions and decisions.
  parameters:
  - name: ai
    description: Pointer to the BotAI instance whose behavior needs to be updated.
      This parameter must not be null and should point to a valid AI object that has
      been properly initialized.
  - name: diff
    description: The time elapsed (in milliseconds) since the last update call. This
      value is used to determine how much time has passed for timing-based behaviors,
      such as cooldowns or movement delays.
  returns: null
  examples:
  - title: Basic UpdateBehavior Call
    code: "void Update() {\n    uint32 diff = getMSTimeDiff(lastUpdate, getMSTime());\n\
      \    strategy->UpdateBehavior(ai, diff);\n    lastUpdate = getMSTime();\n}"
    language: cpp
  - title: Integration with BotAI Loop
    code: "void Bot::UpdateAI(uint32 diff) {\n    if (!ai)\n        return;\n    \n\
      \    strategy->UpdateBehavior(ai, diff);\n    \n    // Additional AI logic here\n\
      }"
    language: cpp
  notes: This method is typically invoked from within the main game loop or AI update
    cycle. It's important to ensure that the BotAI object passed in is valid and properly
    initialized before calling this method. The diff parameter should accurately reflect
    the time passed since the last call to avoid incorrect timing behavior.
  warnings: Passing a null pointer for 'ai' will likely result in a crash or undefined
    behavior. Ensure that all AI objects are properly constructed and initialized
    before calling UpdateBehavior. Also, be cautious with very large diff values which
    might cause unexpected behavior if not handled properly in the underlying strategy
    implementation.
  related:
  - Strategy::GetNextAction
  - BotAI::Update
  - Strategy::Evaluate
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T20:48:07.181135'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
