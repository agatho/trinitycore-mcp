api:
  class: GameObject
  method: HasLootRecipient
  signature: bool GameObject::HasLootRecipient() const
documentation:
  brief: Determines whether a game object has a loot recipient assigned to it.
  description: This method checks if a GameObject has been assigned a loot recipient,
    which typically occurs when a player has looted from the object or when the object's
    loot is being processed by a specific player. The method returns true if the GameObject
    has a valid loot recipient assigned, false otherwise. This is commonly used in
    game mechanics to determine whether a GameObject's loot should be considered as
    already claimed or whether it can still accept new loot recipients.
  parameters: []
  returns: Returns true if the GameObject has a loot recipient assigned, false otherwise.
    The method does not return null or error values as it is a simple boolean check.
  examples:
  - title: Basic usage example
    code: "if (gameObject->HasLootRecipient()) {\n    // Do something\n}\n"
    language: cpp
  - title: In loot processing context
    code: "GameObject* gameObject = ...;\nif (!gameObject->HasLootRecipient()) {\n\
      \    // Assign loot recipient to player\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other loot-related methods
    to determine the state of a GameObject's loot. It may be called during loot processing
    or when checking if a player can loot from a GameObject.
  warnings: This method does not check for the existence of loot itself, only whether
    a recipient has been assigned. Be careful when using this in conjunction with
    other loot methods to avoid confusion between loot state and recipient assignment.
  related:
  - GameObject::GetLootRecipient
  - GameObject::SetLootRecipient
  - GameObject::Loot
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T18:15:14.608968'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
