api:
  class: BattlePetManager
  method: GetActiveTeam
  signature: PetTeam BattlePetManager::GetActiveTeam(int * player) const
documentation:
  brief: Retrieves the active battle pet team for the specified player.
  description: The GetActiveTeam method retrieves the currently active battle pet
    team associated with a player. This method is typically used in the context of
    World of Warcraft's Battle Pet system, where players can manage multiple teams
    of pets. The returned PetTeam object contains information about the pets currently
    in use for battles. The method may optionally populate a provided integer pointer
    with the player's ID if the team belongs to a specific player. This functionality
    is essential for managing active battle pet configurations during gameplay and
    in battle scenarios.
  parameters:
  - name: player
    description: Optional pointer to an integer that will be populated with the player's
      ID if the active team belongs to a specific player. Can be NULL if the player
      ID is not needed.
  returns: A PetTeam object representing the currently active battle pet team for
    the player. The PetTeam contains information about the pets in the team, their
    levels, and other relevant battle properties.
  examples:
  - title: Basic usage to retrieve active team
    code: 'PetTeam team = battlePetManager->GetActiveTeam(nullptr);

      // Use team for battle operations'
    language: cpp
  - title: Retrieve active team and player ID
    code: "int playerId = 0;\nPetTeam team = battlePetManager->GetActiveTeam(&playerId);\n\
      if (playerId != 0) {\n    // Process team for specific player\n}"
    language: cpp
  notes: This method is likely part of a larger Battle Pet system implementation and
    may involve internal caching or state management. The returned PetTeam object
    should be treated as read-only for battle operations to maintain consistency.
  warnings: Ensure that the BattlePetManager instance is properly initialized before
    calling this method, as accessing an uninitialized manager could result in undefined
    behavior. The player pointer parameter should be checked for NULL before use.
  related:
  - SetActiveTeam
  - GetBattlePet
  - AddBattlePet
  - RemoveBattlePet
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:05:51.300857'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
