api:
  class: ObjectMgr
  method: GetCreatureBaseStats
  signature: const int * ObjectMgr::GetCreatureBaseStats(uint8 level, uint8 unitClass)
documentation:
  brief: Retrieves base statistics for a creature given its level and class.
  description: The GetCreatureBaseStats method returns a constant pointer to an array
    of integers representing the base statistics for a creature of the specified level
    and class. These statistics typically include health, mana, damage, and other
    fundamental combat attributes that define how a creature behaves in the game world.
    The returned array is indexed according to predefined offsets for different stat
    types, making it suitable for calculating creature stats dynamically based on
    their level and class. This method is commonly used during creature creation or
    when adjusting creature properties at runtime.
  parameters:
  - name: level
    description: The level of the creature, ranging from 1 to 255. Determines the
      base stat scaling for the creature.
  - name: unitClass
    description: The class of the creature (e.g., Warrior, Mage, Rogue). Used to determine
      which set of base stats to retrieve.
  returns: A constant pointer to an integer array containing base creature statistics.
    The array elements represent different stat types such as health, mana, damage,
    etc., depending on the internal structure of the stats table. Returns NULL if
    no data is found for the specified level and class.
  examples:
  - title: Retrieve base stats for a level 60 warrior
    code: "const int* stats = sObjectMgr->GetCreatureBaseStats(60, CLASS_WARRIOR);\n\
      if (stats != nullptr) {\n    uint32 health = stats[0];\n    uint32 mana = stats[1];\n\
      \    // Use the retrieved base stats\n}"
    language: cpp
  - title: Calculate creature stat scaling based on level
    code: "uint8 creatureLevel = 45;\nuint8 creatureClass = CLASS_MAGE;\nconst int*\
      \ baseStats = sObjectMgr->GetCreatureBaseStats(creatureLevel, creatureClass);\n\
      if (baseStats != nullptr) {\n    float scale = creatureLevel / 60.0f; // Example\
      \ scaling factor\n    uint32 scaledHealth = static_cast<uint32>(baseStats[0]\
      \ * scale);\n    // Apply scaling to other stats as needed\n}"
    language: cpp
  notes: The returned array is managed internally by the ObjectMgr and should not
    be modified or freed by the caller. The method performs bounds checking on level
    and class values, but invalid inputs may result in undefined behavior. This function
    is performance-critical during creature instantiation and should be called sparingly
    if possible.
  warnings: Do not modify the returned array directly as it points to internal static
    memory. Ensure that both level and unitClass parameters are valid before calling
    the method to avoid potential crashes or incorrect stat calculations.
  related:
  - GetCreatureTemplate
  - GetPlayerClassLevelInfo
  - GetCreatureModelInfo
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:01:16.076290'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
