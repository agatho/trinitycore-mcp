api:
  class: ManagerRegistry
  method: HasManager
  signature: bool ManagerRegistry::HasManager(const std::string & managerId) const
documentation:
  brief: Checks if a manager with the specified ID exists in the registry
  description: The HasManager method determines whether a manager with the given identifier
    is currently registered within the ManagerRegistry. This method is typically used
    to verify the existence of a specific manager before attempting to access or operate
    on it. The registry maintains a collection of managers identified by unique string
    identifiers, and this method provides a way to query that collection without throwing
    exceptions or performing unsafe operations. It's commonly used in systems where
    managers are dynamically created and destroyed during runtime, such as in game
    subsystems or module management.
  parameters: []
  returns: Returns true if a manager with the specified ID exists in the registry;
    otherwise returns false. This boolean value indicates the presence or absence
    of the requested manager without any side effects.
  examples:
  - title: Basic Usage
    code: "if (managerRegistry.HasManager(\"PlayerManager\")) {\n    // Manager exists,\
      \ safe to proceed\n    std::cout << \"Player manager is active\" << std::endl;\n\
      } else {\n    // Manager does not exist\n    std::cout << \"Player manager not\
      \ found\" << std::endl;\n}"
    language: cpp
  - title: Conditional Manager Access
    code: "std::string managerId = \"WorldSessionManager\";\nif (managerRegistry.HasManager(managerId))\
      \ {\n    // Safe to retrieve or use the manager\n    auto* manager = managerRegistry.GetManager(managerId);\n\
      \    manager->Update();\n} else {\n    // Handle missing manager case\n    LOG_ERROR(\"\
      world\", \"Required manager '{}' not found in registry\", managerId);\n}"
    language: cpp
  notes: This method performs a lookup operation which typically uses an internal
    map or hash table for O(1) average-case performance. The method is thread-safe
    if the underlying registry implementation supports concurrent access, but developers
    should verify this behavior in their specific context. It's recommended to cache
    the result of this check if the same manager will be accessed multiple times within
    a short timeframe.
  warnings: Be aware that checking for manager existence and then accessing it might
    introduce race conditions in multi-threaded environments. If thread safety is
    required, consider using atomic operations or locks around both the check and
    access operations. Also, ensure that the manager ID string passed to this method
    is properly formatted and valid for the registry's internal storage mechanism.
  related:
  - GetManager
  - RegisterManager
  - UnregisterManager
  - HasManager
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T10:55:10.755988'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
