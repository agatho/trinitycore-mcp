api:
  class: Item
  method: IsBag
  signature: bool Item::IsBag() const
documentation:
  brief: Determines whether the item is a container (bag) type.
  description: The IsBag() method checks if the current Item object represents a bag
    or container item in the game. This function returns true if the item is classified
    as a bag, meaning it can hold other items within its slots. The method is commonly
    used in inventory management systems to distinguish between regular items and
    container items that have specific slot configurations. It's particularly useful
    when iterating through player inventories or when processing item interactions
    where bag functionality needs to be considered.
  parameters: []
  returns: Returns true if the item is a bag type, false otherwise. This indicates
    whether the item has container properties and can hold other items in its slots.
  examples:
  - title: Basic usage example
    code: "Item* item = player->GetItemByPos(0, 0);\nif (item && item->IsBag()) {\n\
      \    // Item is a bag, proceed with bag-specific logic\n}"
    language: cpp
  - title: Inventory processing example
    code: "for (int i = 0; i < MAX_BAG_SLOT; ++i)\n{\n    Item* bag = player->GetItemByPos(0,\
      \ i);\n    if (bag && bag->IsBag())\n    {\n        // Process bag items\n \
      \       for (int j = 0; j < bag->GetBagSize(); ++j)\n        {\n           \
      \ Item* item = bag->GetItemByPos(j);\n            if (item)\n            {\n\
      \                // Handle item in bag\n            }\n        }\n    }\n}"
    language: cpp
  notes: This method is typically used in conjunction with other bag-related methods
    like GetBagSize() or GetSlot() to properly handle container items. The implementation
    relies on the item's class and subclass values, which are defined by the ItemTemplate
    structure. Performance considerations include checking this method only when necessary,
    as it involves a simple comparison operation.
  warnings: Be cautious when using this method with non-bag items, as it will return
    false for regular items. Also note that some items may be classified as bags even
    if they don't actually contain slots, so the method should be used in combination
    with other bag-related checks to ensure proper functionality.
  related:
  - Item::GetBagSize
  - Item::GetSlot
  - Item::IsContainer
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T04:45:42.597619'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
