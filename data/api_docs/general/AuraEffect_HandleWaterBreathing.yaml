api:
  class: AuraEffect
  method: HandleWaterBreathing
  signature: void AuraEffect::HandleWaterBreathing(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Handles the water breathing aura effect application or removal for a player.
  description: The HandleWaterBreathing method manages the application and removal
    of the water breathing aura effect on a player character. This aura allows the
    affected unit to breathe underwater without taking damage or being unable to move.
    The method is invoked during aura application or removal events, using the AuraApplication
    context to determine the appropriate behavior. It ensures that the player's swimming
    capabilities are correctly enabled or disabled based on whether the aura is being
    applied or removed.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object containing information about
      the aura being applied or removed. This parameter provides context for the aura
      state change and contains references to the caster, target, and aura properties.
  - name: mode
    description: The mode of operation indicating how the aura is being handled. This
      typically represents the application type (e.g., initial application, update,
      or removal) and may control specific behavior during the aura lifecycle.
  - name: apply
    description: Boolean flag indicating whether the aura is being applied (true)
      or removed (false). This determines the direction of the effect and how the
      player's underwater breathing capabilities should be modified.
  returns: null
  examples:
  - title: Basic usage in aura application
    code: "void Player::HandleWaterBreathing(const AuraApplication* aurApp, uint8\
      \ mode, bool apply) const {\n    if (apply) {\n        // Enable underwater\
      \ breathing\n        SetCanSwim(true);\n    } else {\n        // Disable underwater\
      \ breathing\n        SetCanSwim(false);\n    }\n}"
    language: cpp
  - title: Advanced usage with aura state checks
    code: "void Player::HandleWaterBreathing(const AuraApplication* aurApp, uint8\
      \ mode, bool apply) const {\n    if (!aurApp || !aurApp->GetTarget()) return;\n\
      \    \n    Unit* target = aurApp->GetTarget();\n    if (apply) {\n        //\
      \ Check if player is in water\n        if (target->IsInWater()) {\n        \
      \    target->SetCanSwim(true);\n        }\n    } else {\n        target->SetCanSwim(false);\n\
      \    }\n}"
    language: cpp
  notes: This method is part of the aura handling system in TrinityCore and is typically
    called internally by the core engine when an aura is applied or removed. The implementation
    should consider the player's current environment (underwater vs. on land) to properly
    enable or disable swimming capabilities.
  warnings: Care must be taken when modifying player swimming state, as incorrect
    implementation can lead to players being unable to move or interact with water
    zones properly. Ensure that all related aura effects are properly synchronized
    and that the player's movement state is updated accordingly.
  related:
  - AuraEffect::HandleAuraApply
  - AuraEffect::HandleAuraRemove
  - Unit::SetCanSwim
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T11:54:50.903340'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
