api:
  class: Player
  method: Satisfy
  signature: bool Player::Satisfy(const AccessRequirement * ar, uint32 target_map,
    TransferAbortParams * params, bool report)
documentation:
  brief: Checks if a player satisfies the access requirements for a given map and
    transfer
  description: The Satisfy method determines whether a player meets the necessary
    access requirements to enter a specific map or zone. It evaluates the provided
    AccessRequirement object against the player's current status, including level
    requirements, quest completion, and other game mechanics. This method is crucial
    for handling player transfers and ensuring that players can only enter zones they
    are qualified to access. The method returns true if all requirements are met,
    false otherwise, and optionally reports violations to the player.
  parameters:
  - name: ar
    description: Pointer to an AccessRequirement object containing the required conditions
      for map access, such as level requirements, quest prerequisites, or other game
      mechanics
  - name: target_map
    description: The map ID that the player is attempting to enter, used to determine
      if the access requirements are applicable to this specific zone
  - name: params
    description: Pointer to TransferAbortParams structure containing information about
      why a transfer was aborted, used when reporting violations to the player
  - name: report
    description: Boolean flag indicating whether to report access violations to the
      player if requirements are not met; true will send violation messages, false
      will only check requirements silently
  returns: Returns true if all access requirements are satisfied by the player, false
    otherwise. If report is set to true and requirements are not met, the method will
    return false but also send a message to the player explaining why they cannot
    enter the zone.
  examples:
  - title: Basic usage example
    code: "if (player->Satisfy(ar, target_map, params, true)) {\n    // Player can\
      \ enter\n} else {\n    // Player cannot enter, and violation is reported\n}"
    language: cpp
  - title: Advanced usage example
    code: "bool result = player->Satisfy(&accessReq, 1234, &transferParams, false);\n\
      if (!result) {\n    // Handle the case where player cannot enter without reporting\n\
      }"
    language: cpp
  notes: This method is typically used during player transfer operations and involves
    checking various game mechanics such as level requirements, quest completion status,
    and other access conditions. It may involve multiple checks depending on the AccessRequirement
    object provided.
  warnings: The method should not be called directly without proper context; it's
    usually invoked during transfer processes and requires careful handling of parameters
    to avoid incorrect results or player reports.
  related:
  - Player::GetSession
  - Player::GetMap
  - Player::IsInWorld
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T00:00:48.521029'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
