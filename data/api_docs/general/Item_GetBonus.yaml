api:
  class: Item
  method: GetBonus
  signature: const BonusData * Item::GetBonus() const
documentation:
  brief: Returns the bonus data associated with the item.
  description: The GetBonus method retrieves the bonus data structure that defines
    the item's bonuses, including stat modifiers and other attributes. This method
    is commonly used in item processing and evaluation to determine what effects an
    item has on a player's character. The returned bonus data typically contains information
    about item stats such as agility, strength, or intellect, and may also include
    additional effects like proc chances or spell modifiers. The method is essential
    for understanding how items contribute to character progression and performance.
  parameters: []
  returns: Returns a pointer to the BonusData structure which contains all bonus-related
    information for the item. This includes stat modifiers, spell effects, and other
    attributes that define how the item affects the player's character. The returned
    pointer may be null if no bonus data is associated with the item.
  examples:
  - title: Basic Usage Example
    code: "Item* item = player->GetItemByGuid(12345);\nconst BonusData* bonus = item->GetBonus();\n\
      if (bonus)\n{\n    // Process bonus data\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "Item* item = player->GetItemByGuid(12345);\nconst BonusData* bonus = item->GetBonus();\n\
      if (bonus && bonus->item_bonus)\n{\n    // Access specific bonus attributes\n\
      \    uint32 stat = bonus->item_bonus->stat;\n    uint32 value = bonus->item_bonus->value;\n\
      }\nelse\n{\n    // Handle no bonus case\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any thread. Performance
    considerations are minimal as the method simply returns a pointer to existing
    data structures. The returned pointer should be treated as const to avoid modifying
    data unintentionally.
  warnings: Be cautious when accessing bonus data, as it may not exist for all items.
    Always check for null before dereferencing to avoid crashes. This method does
    not validate the existence of bonus data, so developers must ensure proper handling
    of edge cases.
  related:
  - GetItemByGuid
  - GetItemTemplate
  - GetModifier
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T05:08:21.597941'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
