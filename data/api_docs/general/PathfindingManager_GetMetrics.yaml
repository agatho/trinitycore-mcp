api:
  class: PathfindingManager
  method: GetMetrics
  signature: const PathfindingMetrics & PathfindingManager::GetMetrics() const
documentation:
  brief: Retrieves the current pathfinding metrics for performance monitoring and
    debugging.
  description: The GetMetrics method returns a constant reference to the PathfindingMetrics
    structure that contains various statistics and performance data related to the
    pathfinding system. This includes information such as the number of path calculations
    performed, average calculation time, memory usage, and other diagnostic data.
    The returned metrics are updated in real-time as pathfinding operations occur,
    making this method useful for monitoring system performance, identifying bottlenecks,
    and debugging navigation issues within the game world. This data is particularly
    valuable for developers working on AI behavior, movement systems, or performance
    optimization of NPC pathfinding.
  parameters: []
  returns: A constant reference to a PathfindingMetrics object containing detailed
    statistics about pathfinding operations including calculation counts, timing data,
    and memory usage metrics.
  examples:
  - title: Basic Metrics Retrieval
    code: 'const PathfindingMetrics& metrics = pathfindingManager.GetMetrics();

      std::cout << "Path calculations: " << metrics.pathCalculations << std::endl;

      std::cout << "Average time (ms): " << metrics.averageCalculationTimeMs << std::endl;'
    language: cpp
  - title: Performance Monitoring
    code: "void MonitorPathfinding() {\n    const PathfindingMetrics& metrics = pathfindingManager.GetMetrics();\n\
      \    if (metrics.pathCalculations > 1000) {\n        LOG_INFO(\"ai\", \"High\
      \ pathfinding load detected: {} calculations\", metrics.pathCalculations);\n\
      \    }\n    if (metrics.averageCalculationTimeMs > 50.0f) {\n        LOG_WARN(\"\
      ai\", \"Slow pathfinding performance: {}ms average\", metrics.averageCalculationTimeMs);\n\
      \    }\n}"
    language: cpp
  notes: The returned reference points to internal data that is continuously updated.
    Modifications to the returned PathfindingMetrics object will affect the internal
    state. This method is thread-safe for read operations, but concurrent modifications
    should be avoided. The metrics are reset periodically or when specific conditions
    are met depending on implementation details.
  warnings: Do not modify the returned PathfindingMetrics reference as it directly
    references internal data. Accessing metrics from multiple threads simultaneously
    may lead to inconsistent readings if not properly synchronized. The metrics may
    contain stale data if accessed between updates, though this is typically handled
    internally by the system.
  related:
  - SetMetrics
  - ResetMetrics
  - UpdateMetrics
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T08:39:45.851002'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
