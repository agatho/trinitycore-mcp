api:
  class: WorldObject
  method: GetLiquidStatus
  signature: int WorldObject::GetLiquidStatus() const
documentation:
  brief: Returns the liquid status of the world object, indicating whether it is submerged,
    floating, or in contact with a liquid surface.
  description: The GetLiquidStatus method retrieves the current liquid state of a
    WorldObject, which is used to determine how the object interacts with water, lava,
    or other liquid environments in the game world. This status is essential for gameplay
    mechanics such as swimming, drowning, and collision detection with liquid surfaces.
    The returned value represents a bitmask or enumeration that describes the object's
    relationship to liquid bodies, including whether it is fully submerged, partially
    submerged, on the surface, or not interacting with any liquid. This method is
    commonly used by movement systems, physics calculations, and game logic that depends
    on an object's interaction with environmental liquids.
  parameters: []
  returns: 'Returns an integer value representing the liquid status of the WorldObject.
    Possible values typically include: 0 (no liquid contact), 1 (on liquid surface),
    2 (partially submerged), 3 (fully submerged). The exact meaning and range of these
    values may depend on internal TrinityCore implementation details.'
  examples:
  - title: Check if an object is in water
    code: "if (player->GetLiquidStatus() >= 2)\n{\n    // Object is at least partially\
      \ submerged\n    sWorld->SendWorldText(L\"You are in water!\");\n}"
    language: cpp
  - title: Use liquid status for movement logic
    code: "WorldObject* object = GetViewPoint();\nint liquidStatus = object->GetLiquidStatus();\n\
      if (liquidStatus == 3)\n{\n    // Fully submerged - apply swimming mechanics\n\
      \    object->SetSpeed(MOVE_RUN, 2.5f);\n}\nelse if (liquidStatus == 1)\n{\n\
      \    // On surface - normal movement speed\n    object->SetSpeed(MOVE_RUN, 7.0f);\n\
      }"
    language: cpp
  notes: This method relies on the object's current position and the liquid data stored
    in the map grid. It may return outdated information if called outside of a proper
    game update cycle. The implementation uses internal collision detection with liquid
    zones, so performance can be affected by complex terrain or high-density liquid
    objects.
  warnings: Do not assume that a non-zero return value always means the object is
    in water - it could also indicate contact with lava or other liquid types. Also,
    this method may not be thread-safe if called from outside the main game thread,
    as it accesses map data structures that are typically protected by locks.
  related:
  - GetTerrain
  - IsInWater
  - GetWaterWalk
  - SetLiquidStatus
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T22:03:32.378884'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
