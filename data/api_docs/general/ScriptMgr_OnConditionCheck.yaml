api:
  class: ScriptMgr
  method: OnConditionCheck
  signature: bool ScriptMgr::OnConditionCheck(const Condition * condition, ConditionSourceInfo
    & sourceInfo)
documentation:
  brief: Evaluates a condition and returns whether it passes or fails based on the
    provided source information.
  description: The OnConditionCheck method is a hook in TrinityCore's scripting system
    that allows custom scripts to override or modify the evaluation of game conditions.
    It is invoked whenever a condition needs to be checked during gameplay, such as
    when determining if a quest can be started, if a spell can be cast, or if an NPC
    dialogue should proceed. The method takes a pointer to a Condition object and
    a reference to ConditionSourceInfo which contains contextual data about where
    and how the condition is being evaluated. Script developers can implement custom
    logic here to extend or alter default behavior, providing flexibility for server
    customization and advanced quest mechanics.
  parameters:
  - name: condition
    description: Pointer to a Condition object that defines the condition to be checked.
      This object contains information about what type of condition it is (e.g., player
      level, item in inventory) and its parameters.
  - name: sourceInfo
    description: Reference to a ConditionSourceInfo object containing contextual data
      about where the condition check originates. This includes details like the source
      entity (player, NPC, etc.), the type of check being performed, and other relevant
      environmental information that may affect the condition's evaluation.
  returns: Returns true if the condition passes according to the script's logic or
    default behavior; false otherwise. If a custom script returns false, it overrides
    the standard condition evaluation, potentially preventing actions like quest progression
    or spell casting.
  examples:
  - title: Basic Condition Check Override
    code: "bool ScriptMgr::OnConditionCheck(const Condition* condition, ConditionSourceInfo&\
      \ sourceInfo)\n{\n    // Allow all conditions to pass for debugging purposes\n\
      \    return true;\n}"
    language: cpp
  - title: Custom Level Requirement Override
    code: "bool ScriptMgr::OnConditionCheck(const Condition* condition, ConditionSourceInfo&\
      \ sourceInfo)\n{\n    if (condition->SourceType == CONDITION_SOURCE_TYPE_QUEST_ACCEPT\
      \ && \n        condition->SourceGroup == 12345)\n    {\n        // Force a quest\
      \ to be available regardless of player level\n        return true;\n    }\n\
      \    return false; // Let default behavior handle other cases\n}"
    language: cpp
  notes: This method is part of TrinityCore's extensible scripting system and is typically
    called from internal game systems when evaluating conditions. It's important to
    note that returning true or false can have significant gameplay implications,
    so custom implementations should carefully consider the intended behavior. The
    ConditionSourceInfo object provides context that may be crucial for making accurate
    decisions.
  warnings: Improperly implemented condition checks can lead to unexpected gameplay
    behavior, including quest breaking, spell casting issues, or NPC dialogue failures.
    Always ensure that your override logic aligns with expected game mechanics and
    doesn't introduce exploits or inconsistencies.
  related:
  - OnConditionCheck
  - OnConditionCheck
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T22:53:31.896289'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
