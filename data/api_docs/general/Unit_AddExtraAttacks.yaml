api:
  class: Unit
  method: AddExtraAttacks
  signature: void Unit::AddExtraAttacks(uint32 count)
documentation:
  brief: Adds extra attacks to a unit's attack sequence
  description: The AddExtraAttacks method allows a unit to perform additional attacks
    beyond its normal attack sequence. This is commonly used in combat scenarios where
    a unit needs to execute multiple attacks per round, such as when a character has
    the ability to perform multiple attacks or when certain spells or abilities grant
    extra attacks. The method modifies the unit's attack behavior to include additional
    attack iterations, which can affect overall damage output and combat dynamics.
  parameters:
  - name: count
    description: The number of extra attacks to add to the unit's attack sequence.
      This parameter determines how many additional attacks will be executed during
      the unit's next attack cycle.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* player = GetPlayer();

      player->AddExtraAttacks(2);

      // This adds two extra attacks to the player''s next attack sequence'
    language: cpp
  - title: Advanced usage with combat mechanics
    code: "Unit* target = GetTarget();\nif (target && target->GetTypeId() == TYPEID_PLAYER)\n\
      {\n    target->AddExtraAttacks(1);\n}\n// Adds one extra attack to a player\
      \ target's attack sequence"
    language: cpp
  notes: 'Implementation details: This method likely modifies the unit''s attack speed
    or attack sequence logic to include additional attacks. Performance considerations:
    Adding extra attacks may impact combat timing and overall damage output, especially
    in high-level content where multiple attacks are common. Thread safety: The method
    should be safe to use in single-threaded contexts but may require synchronization
    in multi-threaded environments.'
  warnings: This method should not be used for modifying attack counts beyond what
    is intended by game mechanics. Using excessive extra attacks can lead to unbalanced
    combat outcomes and may cause performance issues in high-level content. Common
    mistakes include misunderstanding the parameter value or using it incorrectly
    in combat situations where extra attacks are not needed.
  related:
  - Unit::GetAttackTime
  - Unit::SetAttackTime
  - Unit::AddThreat
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:33:36.992272'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
