api:
  class: ObjectMgr
  method: InitializeQueriesData
  signature: void ObjectMgr::InitializeQueriesData(QueryDataGroup mask)
documentation:
  brief: Initializes database query data for the object manager based on a specified
    query data group mask.
  description: The InitializeQueriesData method prepares and loads database query
    data into memory for various game objects managed by the ObjectMgr class. It takes
    a QueryDataGroup mask parameter that determines which set of queries to initialize,
    allowing for selective loading of different types of data such as creatures, game
    objects, items, or quests. This method is typically called during server startup
    or when reloading specific data sets. The initialization process involves preparing
    SQL statements and caching query results for efficient access during gameplay
    operations.
  parameters:
  - name: mask
    description: A QueryDataGroup bitmask specifying which set of database queries
      to initialize. This parameter controls what type of game object data will be
      loaded and made available for use by the ObjectMgr.
  returns: null
  examples:
  - title: Initialize all query data
    code: ObjectMgr::instance()->InitializeQueriesData(QueryDataGroup::All);
    language: cpp
  - title: Initialize creature and game object queries only
    code: ObjectMgr::instance()->InitializeQueriesData(QueryDataGroup::Creatures |
      QueryDataGroup::GameObjects);
    language: cpp
  notes: This method should typically be called during server initialization or when
    reloading specific data categories. It is not thread-safe and should only be executed
    from the main thread. The method may cause performance overhead during execution
    as it loads and prepares database queries.
  warnings: Calling this method while game objects are actively being used may lead
    to inconsistent behavior or data corruption. Always ensure no active gameplay
    operations are occurring before calling this method. Improper use of the QueryDataGroup
    mask can result in missing critical data needed for proper server operation.
  related:
  - LoadGameObjectTemplates
  - LoadCreatureTemplates
  - LoadItemTemplates
  - LoadQuestTemplates
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T23:34:11.237711'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
