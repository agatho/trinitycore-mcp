api:
  class: Map
  method: DynamicObjectRelocation
  signature: void Map::DynamicObjectRelocation(int * go, float x, float y, float z,
    float orientation)
documentation:
  brief: Updates the position and orientation of a dynamic object on the map
  description: The DynamicObjectRelocation method is responsible for updating the
    spatial coordinates and orientation of a dynamic object within the game world.
    This method ensures that the object's position is accurately reflected in the
    server's world state, enabling proper collision detection, line-of-sight calculations,
    and client synchronization. It typically handles the relocation of temporary game
    objects such as area triggers, spell effects, or environmental elements that need
    to be moved during gameplay. The method likely performs internal map cell updates
    and notifies nearby players of the object's new position.
  parameters:
  - name: go
    description: Pointer to the dynamic object identifier (GUID) that needs relocation.
      This represents a unique handle to the specific game object being moved.
  - name: x
    description: The new X coordinate for the object's position in world space. Must
      be within valid map boundaries.
  - name: y
    description: The new Y coordinate for the object's position in world space. Must
      be within valid map boundaries.
  - name: z
    description: The new Z coordinate for the object's position in world space. Represents
      vertical positioning and height.
  - name: orientation
    description: The new orientation angle (in radians) of the object. Defines the
      direction the object is facing.
  returns: null
  examples:
  - title: Moving a spell effect to a new location
    code: DynamicObjectRelocation(&spellGuid, targetX, targetY, targetZ, newOrientation);
    language: cpp
  - title: Updating area trigger position during combat
    code: 'Map* map = player->GetMap();

      float newX = player->GetPositionX() + 5.0f;

      float newY = player->GetPositionY();

      map->DynamicObjectRelocation(&triggerGuid, newX, newY, player->GetPositionZ(),
      player->GetOrientation());'
    language: cpp
  notes: This method should only be called for dynamic objects that are already registered
    with the map. The object's GUID must be valid and correspond to an existing dynamic
    object. Internal map cell management is handled automatically by this method,
    including updating relevant spatial partitioning structures.
  warnings: Calling this method with an invalid or null object pointer can cause undefined
    behavior or crashes. Ensure that the coordinates provided are within valid map
    boundaries to prevent objects from being placed outside the world. This method
    may trigger client-side updates which could impact performance if called frequently
    on many objects simultaneously.
  related:
  - Map::AddDynamicObject
  - Map::RemoveDynamicObject
  - Map::GetDynamicObject
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T11:09:22.384083'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
