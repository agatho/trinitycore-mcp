api:
  class: SpatialGridManager
  method: DestroyGrid
  signature: void SpatialGridManager::DestroyGrid(uint32 mapId)
documentation:
  brief: Destroys a spatial grid for the specified map ID, cleaning up associated
    resources.
  description: The DestroyGrid method removes and deallocates all resources associated
    with a specific spatial grid for the given map ID. This operation is typically
    invoked when a map instance is being unloaded or destroyed to prevent memory leaks
    and ensure proper cleanup of grid-based spatial data structures. The method ensures
    that all entities, objects, and references within the grid are properly removed
    before the grid itself is deallocated from memory. It's an essential part of the
    spatial management system in TrinityCore's world simulation engine.
  parameters:
  - name: mapId
    description: The unique identifier of the map for which the spatial grid should
      be destroyed. This corresponds to the Map ID used internally by TrinityCore
      to identify different zones and instances.
  returns: null
  examples:
  - title: Destroy a specific map's grid
    code: 'SpatialGridManager* gridManager = sMapMgr->GetGridManager();

      gridManager->DestroyGrid(1); // Destroys the grid for Map ID 1 (e.g., Eastern
      Kingdoms)'
    language: cpp
  - title: Cleanup during map unload
    code: "void UnloadMap(uint32 mapId)\n{\n    SpatialGridManager* gridManager =\
      \ sMapMgr->GetGridManager();\n    if (gridManager)\n    {\n        gridManager->DestroyGrid(mapId);\n\
      \    }\n}"
    language: cpp
  notes: This method is typically called internally by the map manager when a map
    instance is being destroyed. It's crucial for maintaining memory efficiency and
    preventing resource leaks in large-scale world simulations. The destruction process
    may involve iterating through all grid cells and cleaning up associated objects,
    which can be computationally intensive for large maps.
  warnings: Calling this method on an already destroyed or non-existent grid may lead
    to undefined behavior. Ensure that no active references to the grid exist before
    calling this method. Also, be aware that this operation is not thread-safe and
    should only be called from the main game thread or within a synchronized context.
  related:
  - CreateGrid
  - GetGrid
  - LoadGrid
  - UpdateGrid
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T18:01:17.621517'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
