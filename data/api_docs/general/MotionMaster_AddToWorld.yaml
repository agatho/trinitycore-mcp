api:
  class: MotionMaster
  method: AddToWorld
  signature: void MotionMaster::AddToWorld()
documentation:
  brief: Adds the MotionMaster to the world, initializing its movement state and registering
    it with the game environment.
  description: The AddToWorld method is responsible for integrating a MotionMaster
    instance into the active game world. This method typically initializes the motion
    system's internal state, registers relevant callbacks or listeners, and ensures
    that the associated creature or object can properly participate in movement behaviors
    within the TrinityCore framework. It is commonly invoked during object creation
    or when transitioning an entity from an inactive to an active state in the game
    world. The method does not accept any parameters and performs no direct return
    operations, instead focusing on setting up the necessary infrastructure for movement
    handling.
  parameters: []
  returns: null
  examples:
  - title: Basic Usage During Object Initialization
    code: 'Creature* creature = new Creature();

      creature->GetMotionMaster()->AddToWorld();

      // The motion master is now initialized and ready to handle movement commands'
    language: cpp
  notes: This method should only be called after the associated GameObject or Creature
    has been properly constructed and configured. It is typically invoked internally
    by the core framework during object activation, but may also be manually triggered
    in custom implementations where manual control over object lifecycle is required.
  warnings: Calling AddToWorld on a MotionMaster that has already been added to the
    world may result in undefined behavior or redundant initialization steps. Ensure
    proper state management before invoking this method.
  related:
  - Clear
  - MoveTo
  - Update
  - AddMotion
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:45:28.716392'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
