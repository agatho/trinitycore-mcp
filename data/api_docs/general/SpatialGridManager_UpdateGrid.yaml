api:
  class: SpatialGridManager
  method: UpdateGrid
  signature: void SpatialGridManager::UpdateGrid(Map * map)
documentation:
  brief: Updates the spatial grid for the specified map, ensuring object positioning
    and visibility are correctly maintained.
  description: The UpdateGrid method is responsible for maintaining the spatial grid
    structure of a given map by updating the positions and visibility states of all
    objects within that map's grid system. This method ensures that players, creatures,
    and other game entities are properly placed in their respective grid cells and
    that their visibility ranges are correctly calculated and updated. It typically
    gets called during the map update cycle to synchronize object locations with the
    spatial grid structure, which is essential for efficient object management and
    performance optimization in TrinityCore's world simulation.
  parameters:
  - name: map
    description: Pointer to the Map object whose spatial grid needs to be updated.
      This parameter must not be null and should represent a valid map instance within
      the game world.
  returns: null
  examples:
  - title: Basic UpdateGrid Usage
    code: "void HandleMapUpdate(Map* map)\n{\n    if (map)\n    {\n        sSpatialGridManager->UpdateGrid(map);\n\
      \    }\n}"
    language: cpp
  - title: Updating Grid During World Update
    code: "void World::UpdateWorld()\n{\n    // ... other world update logic ...\n\
      \    for (auto& pair : m_maps)\n    {\n        Map* map = pair.second;\n   \
      \     if (map)\n        {\n            sSpatialGridManager->UpdateGrid(map);\n\
      \        }\n    }\n    // ... rest of world update logic ...\n}"
    language: cpp
  notes: This method is typically invoked as part of the regular world update cycle
    and should not be called directly from game logic without proper context. The
    spatial grid manager maintains internal state about object positions, so calling
    this method too frequently may cause unnecessary overhead. It's important to ensure
    that the map pointer passed in is valid and properly initialized.
  warnings: Never pass a null pointer to this method as it will likely result in a
    crash or undefined behavior. This method assumes that the map object is already
    fully initialized and contains valid data. Avoid calling this method during critical
    sections where grid consistency is important, as it may temporarily disrupt object
    positioning.
  related:
  - GetGrid
  - AddToWorld
  - RemoveFromWorld
  - MoveToGrid
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T18:00:52.024846'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
