api:
  class: Player
  method: IsGameMaster
  signature: bool Player::IsGameMaster() const
documentation:
  brief: Determines whether the player has Game Master privileges
  description: This method checks if the player currently possesses Game Master (GM)
    permissions within the game. It returns true if the player is a Game Master, indicating
    they have access to GM commands and features that regular players do not have.
    This functionality is essential for identifying administrative users who can perform
    special actions like teleporting, modifying game objects, or managing player accounts.
    The method relies on internal player flags and permissions stored in the player's
    character database records.
  parameters: []
  returns: Returns true if the player has Game Master privileges, false otherwise.
    This indicates that the player is either a GM or has been granted GM status through
    administrative means.
  examples:
  - title: Basic usage example
    code: "if (player->IsGameMaster()) {\n    // Player has GM privileges\n    //\
      \ Perform GM actions here\n}\nelse {\n    // Player does not have GM privileges\n\
      \    // Handle accordingly\n}"
    language: cpp
  notes: This method typically checks against internal player flags or roles stored
    in the database. It may involve checking against a specific permission level or
    flag value that is set when a player is granted GM status. Performance-wise, this
    check is very fast as it involves simple flag checking.
  warnings: Be cautious when using this method in conditional logic as it can affect
    gameplay balance if used incorrectly. Also, be aware that some Game Masters may
    not have their GM status immediately visible in the database until after login
    or refresh.
  related:
  - IsPlayer
  - HasGMFlag
  - GetPlayerLevel
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T15:50:31.100564'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
