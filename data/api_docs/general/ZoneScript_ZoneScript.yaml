api:
  class: ZoneScript
  method: ZoneScript
  signature: void ZoneScript::ZoneScript(ZoneScript && right)
documentation:
  brief: Moves a ZoneScript object to another ZoneScript object using move semantics.
  description: The ZoneScript move constructor transfers ownership of resources from
    one ZoneScript object to another. This is a fundamental C++ move semantics operation
    that allows efficient resource management by transferring internal data members
    rather than copying them. In the context of TrinityCore's scripting system, this
    constructor is typically used when assigning or returning ZoneScript objects from
    functions or when reassigning script instances. The move constructor ensures that
    the source object is left in a valid but unspecified state after the operation.
  parameters: []
  returns: null
  examples:
  - title: Moving a ZoneScript to another variable
    code: 'ZoneScript script1 = ZoneScript();

      ZoneScript script2 = std::move(script1); // Moves resources from script1 to
      script2

      // script1 is now in a valid but unspecified state'
    language: cpp
  - title: Returning a ZoneScript from a function using move semantics
    code: "ZoneScript createZoneScript() {\n    ZoneScript script;\n    // Initialize\
      \ script...\n    return script; // Move constructor invoked here\n}\n\nZoneScript\
      \ mainScript = createZoneScript(); // Move constructor used for assignment"
    language: cpp
  notes: This is a standard C++ move constructor. It's important to understand that
    after moving, the source object should not be used in a meaningful way as its
    state becomes undefined but valid. The ZoneScript class likely manages resources
    such as event handlers or internal data structures that are efficiently transferred
    during this operation.
  warnings: Do not use the source object after moving it. The moved-from object is
    left in a valid but unspecified state and should not be accessed unless explicitly
    reset or reassigned. This can lead to undefined behavior if the object's methods
    are called afterward.
  related:
  - ZoneScript::~ZoneScript
  - ZoneScript& ZoneScript::operator=(ZoneScript&&)
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T02:49:42.451874'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
