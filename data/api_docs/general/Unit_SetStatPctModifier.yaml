api:
  class: Unit
  method: SetStatPctModifier
  signature: void Unit::SetStatPctModifier(UnitMods unitMod, UnitModifierPctType modifierType,
    float val)
documentation:
  brief: Sets a percentage modifier for a specified unit mod.
  description: This method modifies the value of a specific unit modifier by applying
    a percentage adjustment. It is used to control how much a stat or attribute is
    modified in relation to its base value. The method accepts a unit mod type and
    a modifier type, allowing precise control over different aspects of unit behavior
    such as health, mana, or attack power. This functionality is essential for implementing
    game mechanics like buffs, debuffs, and stat modifications.
  parameters:
  - name: unitMod
    description: The unit mod type being modified, which defines the specific attribute
      or stat to be adjusted (e.g., health, mana, attack power).
  - name: modifierType
    description: The modifier type that determines how the percentage value is applied
      (e.g., flat or percentage modifier).
  - name: val
    description: The percentage value to apply to the specified unit mod, which can
      be positive or negative depending on whether it's a buff or debuff.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* target = new Unit;


      // Set health modifier to 20% increase

      target->SetStatPctModifier(UnitMods::UNIT_MOD_HEALTH, UnitModifierPctType::MODIFIER_PERCENTAGE,
      20.0f);


      // Set mana modifier to 15% decrease

      target->SetStatPctModifier(UnitMods::UNIT_MOD_MANA, UnitModifierPctType::MODIFIER_PERCENTAGE,
      -15.0f);'
    language: cpp
  notes: This method is typically used in conjunction with other stat modification
    methods and should be called carefully to avoid unintended side effects. It's
    important to understand that the modifier type affects how the percentage value
    is applied, and the unit mod determines which stat is being modified.
  warnings: Improper use of this method can lead to incorrect stat calculations or
    unexpected behavior in game mechanics. Care must be taken when applying negative
    values as they may cause unintended debuffs.
  related:
  - GetStatPctModifier
  - SetStatFlatModifier
  - GetStatFlatModifier
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T00:46:37.765333'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
