api:
  class: Player
  method: GetSelectedPlayer
  signature: Player * Player::GetSelectedPlayer() const
documentation:
  brief: Returns the currently selected player target from the player's selection.
  description: The GetSelectedPlayer method retrieves the Player object that represents
    the currently selected target in the player's selection. This method is commonly
    used in player-controlled actions where the player needs to access information
    about their current target, such as when performing attacks or casting spells.
    The method returns a pointer to the selected player object, which may be nullptr
    if no target is selected or if the target is not a player. This function is particularly
    useful for determining whether a player's target is a valid player entity in game
    mechanics.
  parameters: []
  returns: Returns a pointer to the Player object representing the currently selected
    target. If no target is selected or the target is not a player, this method returns
    nullptr. The returned pointer may be null and should be checked before use.
  examples:
  - title: Basic usage example
    code: "Player* target = player->GetSelectedPlayer();\nif (target != nullptr)\n\
      {\n    // Perform actions on the selected player\n    target->SendPacketToPlayer();\n\
      }"
    language: cpp
  - title: Advanced usage example
    code: "Player* target = player->GetSelectedPlayer();\nif (target != nullptr &&\
      \ target->IsAlive())\n{\n    // Perform attack action\n    player->Attack(target);\n\
      }\nelse\n{\n    // Handle invalid target\n    player->SendPacketToPlayer();\n\
      }"
    language: cpp
  notes: This method is part of the Player's selection system, which is essential
    for game mechanics involving player-controlled actions. The method may return
    nullptr if the player has no valid target selected or if the target is not a player
    object. Performance considerations include checking for null pointer before using
    the returned value.
  warnings: The returned pointer should always be checked for null before use to avoid
    potential crashes. This method does not guarantee that the selected target is
    a player object, only that it is a valid target in the selection system.
  related:
  - GetSelectedUnit
  - GetSelectedGameObject
  - GetTarget
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T16:26:56.462771'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
