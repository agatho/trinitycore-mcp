api:
  class: ObjectMgr
  method: GetQuestPOIData
  signature: const QuestPOIData * ObjectMgr::GetQuestPOIData(int32 questId)
documentation:
  brief: Retrieves the quest point of interest data associated with a specific quest
    ID.
  description: The GetQuestPOIData method fetches the QuestPOIData structure for a
    given quest identifier. This data typically contains information about quest-related
    locations, such as spawn points, objectives, and visual markers used in the game
    world. The returned pointer provides access to quest-specific point-of-interest
    data that may be utilized by the client or server for rendering quest markers,
    guiding players to quest givers, or managing interactive elements related to the
    quest. This method is commonly used when processing quest-related events or displaying
    quest information to players.
  parameters:
  - name: questId
    description: The unique identifier of the quest for which point-of-interest data
      is requested. Must be a valid quest ID present in the game's quest database.
  returns: A pointer to a const QuestPOIData structure containing quest-related point-of-interest
    information, or nullptr if no such data exists for the specified quest ID.
  examples:
  - title: Retrieve and use quest POI data
    code: "const QuestPOIData* poiData = sObjectMgr->GetQuestPOIData(12345);\nif (poiData)\n\
      {\n    // Process the quest POI data\n    for (uint8 i = 0; i < poiData->m_numPoints;\
      \ ++i)\n    {\n        // Access individual point data\n        printf(\"Point\
      \ %u: X=%f, Y=%f\\n\", i, poiData->m_points[i].x, poiData->m_points[i].y);\n\
      \    }\n}"
    language: cpp
  notes: The method performs a lookup in an internal data structure that maps quest
    IDs to their corresponding POI data. It is expected that the quest ID passed as
    parameter corresponds to a valid quest in the database. The returned pointer is
    managed by the ObjectMgr and should not be freed or modified directly.
  warnings: Do not assume that all quests have associated POI data; always check for
    nullptr before using the returned pointer. Accessing invalid memory through the
    returned pointer can cause crashes or undefined behavior.
  related:
  - GetQuestTemplate
  - GetQuestPOIDataByQuestId
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T09:17:22.744936'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
