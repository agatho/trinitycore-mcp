api:
  class: Player
  method: IsActionButtonDataValid
  signature: bool Player::IsActionButtonDataValid(uint8 button, uint64 action, uint8
    type) const
documentation:
  brief: Determines if a player's action button data is valid for the given button,
    action, and type.
  description: This method checks whether the specified action button data is valid
    for a player. It verifies that the button number, action value, and type are within
    acceptable ranges and properly configured. The method is commonly used in conjunction
    with action button handling to ensure proper operation of player actions, particularly
    during gameplay when players interact with their action bars. This check helps
    prevent invalid or corrupted data from being processed in game mechanics.
  parameters:
  - name: button
    description: The button number (0-11) representing which action bar slot is being
      checked.
  - name: action
    description: The action value that represents the specific action being performed,
      such as an ability or item.
  - name: type
    description: The type of action being performed (0-3), where 0 indicates a normal
      action, 1 indicates a pet action, 2 indicates a spell action, and 3 indicates
      a action bar type.
  returns: Returns true if the action button data is valid, false otherwise. This
    indicates whether the specified action button configuration is acceptable for
    processing.
  examples:
  - title: Basic usage example
    code: "if (player->IsActionButtonDataValid(0, 12345, 0)) {\n    // Action button\
      \ data is valid\n}"
    language: cpp
  - title: Advanced usage example
    code: "bool isValid = player->IsActionButtonDataValid(button, action, type);\n\
      if (isValid) {\n    // Process the action\n} else {\n    // Handle invalid data\n\
      }"
    language: cpp
  notes: This method is typically used internally by TrinityCore to validate action
    button configurations before processing them. It ensures that action bar data
    is consistent and avoids potential errors during gameplay. Performance considerations
    are minimal as this is a simple validation check.
  warnings: This method should not be used directly in most cases, as it's primarily
    intended for internal use by the game engine. Using it incorrectly may lead to
    invalid action handling or unexpected behavior.
  related:
  - Player::GetActionButton
  - Player::SetActionButton
  - Player::IsActionReady
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T15:57:58.335547'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
