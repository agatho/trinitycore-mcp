api:
  class: PhasingHandler
  method: SetInversed
  signature: void PhasingHandler::SetInversed(WorldObject * object, bool apply, bool
    updateVisibility)
documentation:
  brief: Sets the phasing inverse state for a specified world object, affecting its
    visibility and interaction within phased environments.
  description: The SetInversed method modifies the phasing behavior of a WorldObject
    by applying or removing an inverted phase state. When applied, this causes the
    object to be visible in areas where it would normally be hidden due to phasing
    rules, and vice versa. The method can optionally update the object's visibility
    immediately if the updateVisibility flag is set to true. This functionality is
    commonly used for temporary visibility changes during quests, events, or scripted
    interactions in World of Warcraft. The operation affects only the specified object
    and does not propagate to other objects in the same phase.
  parameters:
  - name: object
    description: Pointer to the WorldObject whose phasing inverse state will be modified.
      Must not be null.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the inverted phase state on the object.
  - name: updateVisibility
    description: Boolean flag determining whether to immediately update the visibility
      of the object after changing its phasing state. If true, the object's visibility
      will be recalculated and sent to nearby players.
  returns: null
  examples:
  - title: Apply Inverse Phasing to a Player
    code: 'Player* player = ...;

      PhasingHandler::SetInversed(player, true, true);'
    language: cpp
  - title: Remove Inverse Phasing with Immediate Visibility Update
    code: 'Creature* creature = ...;

      PhasingHandler::SetInversed(creature, false, true);'
    language: cpp
  notes: This method operates within the TrinityCore phasing system which manages
    object visibility based on player and object phase masks. The inverse phasing
    state is stored separately from normal phase states and does not interfere with
    standard phasing logic. When updateVisibility is true, the method triggers a full
    visibility recalculation for the object, which may cause performance overhead
    if used frequently.
  warnings: Using this method without proper validation of the WorldObject pointer
    can lead to crashes. Ensure that the object remains valid throughout the duration
    of the operation. Frequent calls with updateVisibility=true may impact server
    performance due to continuous visibility updates.
  related:
  - PhasingHandler::IsInversed
  - PhasingHandler::GetPhaseMaskForObject
  - PhasingHandler::UpdateVisibility
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:27:36.113972'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
