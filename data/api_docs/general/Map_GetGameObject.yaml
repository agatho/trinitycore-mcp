api:
  class: Map
  method: GetGameObject
  signature: GameObject * Map::GetGameObject(const int & guid)
documentation:
  brief: Retrieves a GameObject instance by its unique identifier from the map.
  description: The GetGameObject method retrieves a GameObject instance from the Map
    class using its unique identifier (GUID). This method is essential for accessing
    game objects within the World of Warcraft environment, allowing developers to
    interact with specific GameObjects such as doors, chests, or other interactive
    elements. The method returns a pointer to the GameObject object, which can be
    null if the GUID does not exist in the map's object list. It is commonly used
    in quest scripts, event handling, and game object interactions where precise identification
    of objects is required.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the GameObject to retrieve. This
      value must be a valid GUID that exists within the map's object list, otherwise
      the method will return nullptr.
  returns: Returns a pointer to the GameObject instance corresponding to the provided
    GUID. If no such GameObject exists in the map, the method returns nullptr. The
    returned pointer can be used to access GameObject properties and methods, including
    its position, display ID, and interaction behavior.
  examples:
  - title: Basic GameObject Retrieval
    code: "GameObject* go = map->GetGameObject(guid);\nif (go)\n{\n    // Use the\
      \ GameObject\n    go->SetGoState(GO_STATE_READY);\n}"
    language: cpp
  - title: GameObject Interaction with Quest Script
    code: "GameObject* go = map->GetGameObject(guid);\nif (go && go->GetGOInfo()->ScriptName\
      \ == \"quest_giver\")\n{\n    // Perform action on GameObject\n    go->SetGoState(GO_STATE_ACTIVE);\n\
      }"
    language: cpp
  notes: This method is thread-safe when used within the context of a map's object
    list. Performance considerations include that this method requires O(n) time complexity
    to search through the map's GameObject list, where n is the number of GameObjects
    in the map. Developers should ensure that GUID values are valid before calling
    this method to avoid null pointer dereferences.
  warnings: The method may return nullptr if the GUID does not exist in the map's
    object list, which can lead to runtime errors if not properly handled. Care must
    be taken when using the returned pointer as it could be invalid if the GameObject
    has been removed from the map during gameplay.
  related:
  - GetCreature
  - GetPlayer
  - GetObjectByGuid
  - GetGameObjectByGUID
  - GetMap
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T04:19:58.382977'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
