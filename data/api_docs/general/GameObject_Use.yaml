api:
  class: GameObject
  method: Use
  signature: void GameObject::Use(Unit * user, bool ignoreCastInProgress)
documentation:
  brief: Activates a game object's use behavior, triggering its interaction with a
    unit.
  description: The Use method activates a GameObject's interaction with a Unit, typically
    causing the object to perform its associated actions such as opening or closing,
    or initiating quest-related events. This method is commonly used when a player
    or NPC interacts with a game object, and it handles the activation of the object's
    script or event system. The method can optionally ignore castInProgress status,
    allowing for more control over execution timing. It is part of the core GameObject
    interaction mechanics in TrinityCore.
  parameters:
  - name: user
    description: The Unit (player or NPC) that triggers the use of this GameObject.
      This parameter determines which entity initiates the interaction and can affect
      the outcome of the object's behavior.
  - name: ignoreCastInProgress
    description: When set to true, allows the GameObject to be used even if a cast
      is already in progress. This parameter is useful for bypassing certain game
      mechanics that prevent usage during active casting, such as when a player is
      casting a spell and wants to interact with an object.
  returns: null
  examples:
  - title: Basic GameObject Use Example
    code: 'GameObject* go = new GameObject();

      Unit* player = new Unit();

      go->Use(player);

      '
    language: cpp
  - title: Advanced GameObject Use with Cast Ignoring
    code: 'GameObject* go = new GameObject();

      Unit* player = new Unit();

      go->Use(player, true);

      '
    language: cpp
  notes: The method is typically called internally by the game engine when a player
    interacts with a GameObject. It may trigger events or scripts depending on how
    the object is defined in the database. Performance considerations include potential
    delays if multiple objects are used simultaneously, especially during active casting.
  warnings: Improper use of this method can lead to unexpected behavior or errors
    if the GameObject's script isn't properly configured. Care should be taken when
    ignoring castInProgress status, as it may cause conflicts with other game mechanics
    such as spell casting or movement.
  related:
  - GameObject::GetGOInfo
  - GameObject::SetGOInfo
  - GameObject::Update
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T02:18:45.549908'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
