api:
  class: Aura
  method: IsPermanent
  signature: bool Aura::IsPermanent() const
documentation:
  brief: Determines whether the aura has a permanent duration.
  description: The IsPermanent method checks if the aura's duration is set to permanent,
    meaning it will not expire naturally. This is typically used for auras that should
    persist for the entire duration of the affected unit's existence or until manually
    removed. Permanent auras are often associated with passive effects, racial abilities,
    or special game mechanics that don't have a time-based expiration. The method
    returns true if the aura is permanent and false otherwise.
  parameters: []
  returns: Returns true if the aura has a permanent duration; otherwise returns false.
  examples:
  - title: Check if an aura is permanent
    code: "if (aura->IsPermanent()) {\n    // Handle permanent aura logic\n    printf(\"\
      This aura will not expire naturally\\n\");\n}"
    language: cpp
  - title: Use in conditional aura application logic
    code: "Aura* aura = player->GetAura(12345);\nif (aura && !aura->IsPermanent())\
      \ {\n    // Apply temporary aura logic\n    aura->SetDuration(30000); // Set\
      \ 30 second duration\n} else if (aura && aura->IsPermanent()) {\n    // Handle\
      \ permanent aura case\n    SendSystemMessage(\"This effect is permanent and\
      \ cannot be removed by time.\");\n}"
    language: cpp
  notes: This method is commonly used in spell handling and aura management systems
    to determine how an aura should behave with respect to expiration. Permanent auras
    are often created with specific spell attributes or aura flags that indicate their
    permanent nature.
  warnings: null
  related:
  - Aura::GetDuration
  - Aura::SetDuration
  - Aura::IsExpired
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:11:36.369599'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
