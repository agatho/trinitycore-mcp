api:
  class: ScriptMgr
  method: CreateAuraScripts
  signature: void ScriptMgr::CreateAuraScripts(uint32 spellId, int & scriptVector,
    Aura * invoker) const
documentation:
  brief: Creates and initializes aura scripts for a specified spell ID, associating
    them with an invoker aura.
  description: The CreateAuraScripts method is responsible for instantiating and setting
    up aura script objects that are associated with a given spell ID. This method
    is typically invoked during the initialization or application of auras in the
    TrinityCore framework. It takes a spell identifier, a reference to a script vector
    index, and an invoker aura object as parameters. The method ensures that appropriate
    aura scripts are created and linked to the spell's effects, enabling custom behavior
    for spells with scripted auras. This process is crucial for implementing custom
    spell mechanics, debuffs, buffs, or any other effects that require script-based
    logic in World of Warcraft emulation.
  parameters:
  - name: spellId
    description: The unique identifier of the spell for which aura scripts are to
      be created. This ID corresponds to entries in the Spell.dbc file and determines
      which scripts are loaded.
  - name: scriptVector
    description: A reference to an integer that represents the index or position within
      a script vector where the newly created aura script should be stored. This allows
      for proper management of multiple aura scripts per spell.
  - name: invoker
    description: A pointer to the Aura object that is invoking this method. This parameter
      provides context about which aura is triggering the creation of scripts, allowing
      for proper initialization and linking of script components.
  returns: null
  examples:
  - title: Basic Usage in Spell Script Context
    code: "void MySpellScript::OnApply(AuraEffect const* aurEff, AuraEffectHandleModes\
      \ mode)\n{\n    ScriptMgr::Instance()->CreateAuraScripts(12345, scriptVector,\
      \ this);\n}"
    language: cpp
  - title: Integration with Custom Aura Handler
    code: "class MyCustomAuraScript : public AuraScript\n{\npublic:\n    void HandleAuraApply()\n\
      \    {\n        int scriptIndex = 0;\n        ScriptMgr::Instance()->CreateAuraScripts(98765,\
      \ scriptIndex, GetAura());\n    }\n};"
    language: cpp
  notes: This method is part of the core aura management system in TrinityCore and
    should only be called during appropriate aura lifecycle events such as application
    or removal. The scriptVector parameter must be properly initialized before calling
    this method to avoid undefined behavior. The invoker aura object must not be null
    when passed to this function.
  warnings: Incorrect usage of the scriptVector index can lead to memory corruption
    or invalid script references. Always ensure that the spell ID exists in the database
    and has corresponding aura scripts defined. Failure to properly initialize the
    invoker aura may result in runtime errors during script execution.
  related:
  - GetAuraScript
  - LoadSpellScripts
  - CreateSpellScripts
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T20:39:03.967022'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
