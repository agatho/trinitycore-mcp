api:
  class: ObjectMgr
  method: GetCreatureQuestRelationMapHACK
  signature: QuestRelations * ObjectMgr::GetCreatureQuestRelationMapHACK()
documentation:
  brief: Returns a pointer to the internal map of creature quest relations used for
    quest tracking in the game world.
  description: The GetCreatureQuestRelationMapHACK method provides access to an internal
    data structure that maps creatures to their associated quests. This mapping is
    essential for determining which quests are available from specific NPCs and how
    quest progression is tracked when players interact with creatures. The returned
    pointer points to a global or static map object that contains all creature-quest
    relationships defined in the game's database. This method is typically used by
    the core system to quickly resolve quest data during player interactions with
    NPCs, such as when checking if a creature has a quest available or determining
    the correct quest state for a given NPC. The HACK suffix suggests this may be
    a temporary or workaround implementation that could potentially be replaced in
    future versions of TrinityCore.
  parameters: []
  returns: A pointer to a QuestRelations object which represents the internal mapping
    of creature IDs to their associated quest IDs. The returned pointer is never null
    but may point to an empty map if no creature-quest relations have been loaded
    from the database.
  examples:
  - title: Accessing Creature Quest Relations
    code: "QuestRelations* creatureQuestMap = sObjectMgr->GetCreatureQuestRelationMapHACK();\n\
      if (creatureQuestMap)\n{\n    // Iterate through all creature-quest relations\n\
      \    for (auto& pair : *creatureQuestMap)\n    {\n        uint32 creatureId\
      \ = pair.first;\n        std::vector<uint32>& questIds = pair.second;\n    \
      \    // Process each quest associated with the creature\n        for (uint32\
      \ questId : questIds)\n        {\n            // Handle quest logic here\n \
      \       }\n    }\n}"
    language: cpp
  notes: This method returns a direct pointer to an internal data structure, so modifications
    to the returned map should be handled carefully. The map is populated during server
    startup from database entries and typically remains static during runtime. Be
    aware that this method may not be thread-safe for write operations if the underlying
    map structure is modified elsewhere in the codebase.
  warnings: Since this is a HACK implementation, it might be deprecated or replaced
    in future versions of TrinityCore. Avoid relying on this method for long-term
    development as it could change or disappear entirely. Also, modifying the returned
    map directly may cause unexpected behavior if other systems depend on the integrity
    of the creature-quest relation data.
  related:
  - GetQuestTemplate
  - GetCreatureTemplate
  - GetQuestForCreature
  - GetQuestForItem
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:55:34.432625'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
