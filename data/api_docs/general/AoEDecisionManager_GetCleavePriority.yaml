api:
  class: AoEDecisionManager
  method: GetCleavePriority
  signature: float AoEDecisionManager::GetCleavePriority() const
documentation:
  brief: Calculates and returns the priority value for performing a cleave attack
    in an AoE context.
  description: The GetCleavePriority method evaluates various factors such as target
    positioning, enemy density, and combat state to determine the optimal priority
    for executing a cleave ability. This method is typically used by AI decision-making
    systems within TrinityCore's creature AI framework to dynamically decide when
    and how aggressively to use area-of-effect attacks. The returned float value represents
    a normalized priority score between 0.0 (lowest priority) and 1.0 (highest priority),
    where values above a certain threshold may trigger the cleave action. The method
    considers factors like proximity of multiple targets, threat levels, and available
    mana or resource constraints to compute this priority.
  parameters: []
  returns: A float value between 0.0 and 1.0 representing the calculated cleave attack
    priority. Values closer to 1.0 indicate higher priority for executing a cleave
    ability, while values near 0.0 suggest that cleaving is not recommended at this
    time.
  examples:
  - title: Basic Usage in AI Decision Logic
    code: "if (aiDecisionManager->GetCleavePriority() > 0.7f)\n{\n    // Execute cleave\
      \ attack\n    unit->CastSpell(target, CLEAVE_SPELL_ID, true);\n}"
    language: cpp
  - title: Using Priority to Determine Attack Strategy
    code: "float priority = aiDecisionManager->GetCleavePriority();\nif (priority\
      \ > 0.8f)\n{\n    // High priority - use cleave immediately\n    DoCleaveAttack();\n\
      }\nelse if (priority > 0.5f)\n{\n    // Medium priority - consider other actions\n\
      \    if (CanUseOtherAbility())\n        UseAlternativeAbility();\n    else\n\
      \        WaitAndReevaluate();\n}\nelse\n{\n    // Low priority - avoid cleave\
      \ for now\n    MoveToBetter Position();\n}"
    language: cpp
  notes: This method is part of the AoE decision-making system and relies on internal
    AI state tracking. The priority calculation may vary based on creature type, level,
    and specific AI behavior configuration. It's recommended to cache this value if
    used multiple times within a single decision cycle to avoid redundant computations.
  warnings: The returned priority value is context-dependent and should not be interpreted
    as an absolute measure. Always validate the current combat state before acting
    on the returned value. Using cleave attacks in inappropriate situations (e.g.,
    when no enemies are close) may result in inefficient resource usage or unexpected
    behavior.
  related:
  - GetAOEPriority
  - GetTargetCount
  - IsCleaveAvailable
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:42:31.844642'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
