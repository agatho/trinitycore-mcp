api:
  class: AuraScript
  method: SetCharges
  signature: void AuraScript::SetCharges(int charges)
documentation:
  brief: Sets the charge count of an aura script instance.
  description: The SetCharges method updates the number of charges remaining on an
    aura. This is commonly used in conjunction with aura applications that have a
    limited number of uses before expiring. The method directly modifies the internal
    charge counter of the aura, which affects how many times the aura's effects can
    be triggered. This functionality is crucial for implementing auras like 'Focused
    Mind' or 'Sunder Armor' where the effect depletes after a certain number of applications.
  parameters:
  - name: charges
    description: The new charge count to assign to the aura. Must be a non-negative
      integer value. A value of zero will effectively remove the aura's charges, while
      negative values are typically clamped or handled by the core system.
  returns: null
  examples:
  - title: Setting Aura Charges to 3
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnApply(AuraEffect\
      \ const* aurEff, AuraEffectHandleModes mode) override\n    {\n        SetCharges(3);\n\
      \    }\n};"
    language: cpp
  - title: Updating Charges Based on Player Level
    code: "class LevelBasedAuraScript : public AuraScript\n{\npublic:\n    void OnApply(AuraEffect\
      \ const* aurEff, AuraEffectHandleModes mode) override\n    {\n        uint8\
      \ level = GetTarget()->GetLevel();\n        SetCharges(level / 5);\n    }\n\
      };"
    language: cpp
  notes: This method modifies the aura's internal state directly. It should be used
    carefully during aura application or update events to ensure proper synchronization
    with the game world state. The core system may automatically handle charge depletion
    when certain conditions are met, so manual setting of charges might override those
    behaviors.
  warnings: Setting charges to zero will not immediately remove the aura from the
    target; it simply sets the counter to zero. If the aura has a duration or is tied
    to other mechanics, it may persist even after all charges are consumed unless
    explicitly removed by other means.
  related:
  - GetCharges
  - AddCharges
  - ModCharges
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:09:48.320830'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
