api:
  class: Player
  method: GetWeaponProficiency
  signature: uint32 Player::GetWeaponProficiency() const
documentation:
  brief: Returns the weapon proficiency mask for the player.
  description: This method retrieves the weapon proficiency bitmask that indicates
    which weapon types the player is proficient in. The returned value represents
    a combination of bits corresponding to different weapon categories, such as swords,
    axes, bows, etc. This is used primarily for determining what weapons a player
    can wield without penalty and for game mechanics related to weapon skill progression.
    The method does not take any parameters and returns a uint32 value representing
    the current weapon proficiency state.
  parameters: []
  returns: The return value represents a uint32 bitmask indicating the player's weapon
    proficiencies. Each bit corresponds to a specific weapon type, with 1 representing
    proficiency in that weapon category. For example, if the returned value is 0x00000001,
    it means the player has proficiency in one-handed swords. The value can be 0 for
    no proficiencies or any combination of bits representing multiple weapon types.
  examples:
  - title: Basic Usage Example
    code: "uint32 prof = player->GetWeaponProficiency();\nif (prof & 0x00000001)\n\
      {\n    // Player has proficiency in one-handed swords\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "uint32 prof = player->GetWeaponProficiency();\nuint32 sword_prof = 0x00000001;\n\
      uint32 axe_prof = 0x00000004;\nif (prof & sword_prof)\n{\n    // Player has\
      \ proficiency in one-handed swords\n}\nif (prof & axe_prof)\n{\n    // Player\
      \ has proficiency in one-handed axes\n}"
    language: cpp
  notes: This method is typically used in conjunction with other weapon-related methods
    to determine if a player can wield specific weapons. It's important to note that
    this method returns the current state of weapon proficiencies, which may change
    during gameplay as the player gains skill levels or learns new weapon skills.
    The method is thread-safe and does not modify any internal state.
  warnings: This method should not be used for determining whether a player can use
    specific weapons without checking against their class restrictions. It only returns
    weapon proficiency information, not whether they can actually wield those weapons
    based on class requirements or other factors.
  related:
  - GetWeaponSkill
  - GetTrainerSkillLine
  - GetSkillValue
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:11:32.647026'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
