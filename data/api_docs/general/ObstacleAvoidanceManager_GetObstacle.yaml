api:
  class: ObstacleAvoidanceManager
  method: GetObstacle
  signature: ObstacleInfo * ObstacleAvoidanceManager::GetObstacle(int guid)
documentation:
  brief: Retrieves obstacle information for a specified GUID from the obstacle avoidance
    manager.
  description: The GetObstacle method retrieves a pointer to an ObstacleInfo structure
    associated with a given global unique identifier (GUID). This method is typically
    used in pathfinding and obstacle avoidance systems within TrinityCore's AI framework.
    It allows the system to query specific obstacles by their GUID, which can be useful
    for dynamic path adjustments or obstacle-specific behavior logic. The method performs
    a lookup in an internal data structure that maps GUIDs to obstacle information.
    If no obstacle exists with the specified GUID, the method returns a null pointer.
  parameters:
  - name: guid
    description: The global unique identifier of the obstacle to retrieve. This value
      uniquely identifies an obstacle within the game world and is typically used
      in pathfinding calculations.
  returns: A pointer to an ObstacleInfo structure if an obstacle with the specified
    GUID exists, or nullptr if no such obstacle is found. The returned pointer should
    be checked for null before use to prevent dereferencing invalid memory.
  examples:
  - title: Basic obstacle retrieval
    code: "ObstacleInfo* obstacle = obstacleAvoidanceManager->GetObstacle(12345);\n\
      if (obstacle != nullptr)\n{\n    // Use the obstacle information\n    printf(\"\
      Obstacle type: %d\\n\", obstacle->type);\n}"
    language: cpp
  - title: Safe obstacle access with null check
    code: "uint32_t obstacleGuid = 98765;\nObstacleInfo* obstacle = obstacleAvoidanceManager->GetObstacle(obstacleGuid);\n\
      if (obstacle && obstacle->IsValid())\n{\n    // Process valid obstacle\n   \
      \ float distance = obstacle->GetDistanceToPlayer();\n    if (distance < 10.0f)\n\
      \    {\n        // Handle close obstacle\n    }\n}"
    language: cpp
  notes: This method assumes that the ObstacleAvoidanceManager has been properly initialized
    and populated with obstacle data. The returned ObstacleInfo pointer is only valid
    while the obstacle remains in the manager's internal collection. If obstacles
    are removed or modified externally, the pointer may become invalid.
  warnings: Always check the return value for null before dereferencing the pointer
    to avoid segmentation faults. Be aware that the obstacle information might be
    stale if accessed after modifications to the underlying obstacle data structure.
  related:
  - AddObstacle
  - RemoveObstacle
  - UpdateObstacle
  - GetAllObstacles
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:53:45.416107'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
