api:
  class: Unit
  method: GetMaxNegativeAuraModifierByMiscValue
  signature: int32 Unit::GetMaxNegativeAuraModifierByMiscValue(int auraType, int32
    misc_value) const
documentation:
  brief: Returns the maximum negative aura modifier value for a given aura type and
    misc value.
  description: This method retrieves the highest negative modifier value from all
    applied auras of a specified type that use a particular misc value. It is commonly
    used in World of Warcraft mechanics to determine the strength of debuffs or negative
    effects applied to units. The method evaluates the aura's modifier values and
    returns the most significant negative value found, which can be useful for calculating
    damage reduction, stat penalties, or other gameplay effects. This function is
    typically used during combat calculations or when assessing unit status.
  parameters:
  - name: auraType
    description: The aura type to evaluate (e.g., SPELL_AURA_MOD_DECREASE_SPEED, SPELL_AURA_MOD_Spell_DAMAGE,
      etc.). Valid values are defined by the TrinityCore aura system.
  - name: misc_value
    description: The misc value associated with the aura being evaluated. This typically
      represents a specific attribute or parameter of the aura (e.g., 0 for speed
      reduction, 1 for damage reduction, etc.).
  returns: Returns an int32 representing the maximum negative modifier value found
    for the specified aura type and misc value. If no matching negative aura is found,
    it returns 0.
  examples:
  - title: Basic usage example
    code: int32 maxModifier = unit->GetMaxNegativeAuraModifierByMiscValue(SPELL_AURA_MOD_DECREASE_SPEED,
      0);
    language: cpp
  - title: Advanced usage example
    code: int32 maxModifier = unit->GetMaxNegativeAuraModifierByMiscValue(SPELL_AURA_MOD_Spell_DAMAGE,
      1);
    language: cpp
  notes: This method is part of the core aura evaluation system and should be used
    carefully during combat calculations. It may be affected by various factors including
    buffs, debuffs, and other game mechanics that influence aura application.
  warnings: This method does not account for all possible aura types or modifiers;
    it only evaluates a specific subset of aura types. Be cautious when using this
    in combination with other methods to avoid incorrect results.
  related:
  - GetMaxPositiveAuraModifierByMiscValue
  - GetAuraTypeModifier
  - GetAura
  - GetAuraEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T13:03:04.903520'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
