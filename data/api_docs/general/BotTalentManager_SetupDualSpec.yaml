api:
  class: BotTalentManager
  method: SetupDualSpec
  signature: bool BotTalentManager::SetupDualSpec(Player * bot, uint8 spec1, uint8
    spec2, uint32 level)
documentation:
  brief: Initializes dual specialization setup for a bot player
  description: Configures a bot player with two distinct talent specializations at
    the specified level. This method sets up the necessary talent points and specialization
    data for the bot, allowing it to switch between different talent builds during
    gameplay. The method handles the internal state management required for dual specialization
    functionality within the TrinityCore framework.
  parameters:
  - name: bot
    description: Pointer to the Player object representing the bot that will have
      dual specialization configured
  - name: spec1
    description: First specialization ID (0 for first spec, 1 for second spec) to
      be set up for the bot
  - name: spec2
    description: Second specialization ID (0 for first spec, 1 for second spec) to
      be set up for the bot
  - name: level
    description: The level at which the bot should have its dual specializations configured,
      determining how many talent points are allocated
  returns: Returns true if the dual specialization setup was successfully completed
    for the bot, false otherwise. The method may return false if the bot is invalid,
    the specified level is out of range, or if there are internal errors during configuration.
  examples:
  - title: Basic Dual Spec Setup
    code: "Player* myBot = ...; // Bot player object\nbool success = botTalentManager->SetupDualSpec(myBot,\
      \ 0, 1, 60);\nif (success) {\n    // Dual specialization configured successfully\n\
      }"
    language: cpp
  - title: Setup with Error Handling
    code: "Player* bot = GetBotPlayer();\nif (!bot) {\n    return false;\n}\n\nuint8\
      \ primarySpec = 0;\nuint8 secondarySpec = 1;\nuint32 botLevel = bot->getLevel();\n\
      \nbool result = botTalentManager->SetupDualSpec(bot, primarySpec, secondarySpec,\
      \ botLevel);\nif (!result) {\n    // Handle setup failure\n    sLog->outError(\"\
      Failed to setup dual spec for bot %s\", bot->GetName().c_str());\n}"
    language: cpp
  notes: This method assumes that the bot player object is valid and properly initialized.
    The method internally manages talent point allocation and specialization state
    changes. It's recommended to call this method after the bot has been fully created
    and before any gameplay begins.
  warnings: Calling this method on an invalid player pointer will likely cause undefined
    behavior or crashes. Ensure that the bot player object is valid and in a proper
    state before invoking this method. The level parameter should be within valid
    game level ranges (typically 1-60 for most expansions).
  related:
  - GetTalentSpec
  - SetTalentSpec
  - ResetTalents
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T16:47:45.600658'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
