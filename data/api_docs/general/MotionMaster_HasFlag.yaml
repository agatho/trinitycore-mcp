api:
  class: MotionMaster
  method: HasFlag
  signature: bool MotionMaster::HasFlag(const uint8 flag) const
documentation:
  brief: Checks if a specific motion flag is set within the MotionMaster instance.
  description: The HasFlag method determines whether a particular motion flag is currently
    active or set within the MotionMaster object. This functionality is typically
    used in the context of AI-driven creature movement and behavior management, where
    different flags represent various states or modes of motion such as walking, running,
    flying, or being idle. The method performs a bitwise check against the internal
    flag state to return true if the specified flag is present, and false otherwise.
    It's commonly employed during pathfinding, movement state transitions, and AI
    decision-making processes within TrinityCore's creature AI system.
  parameters: []
  returns: Returns true if the specified motion flag is currently set in the MotionMaster;
    otherwise returns false.
  examples:
  - title: Check if creature is moving
    code: "if (creature->GetMotionMaster()->HasFlag(MOTIONFLAG_MOVING))\n{\n    //\
      \ Creature is currently in motion\n    // Perform movement-related logic here\n\
      }"
    language: cpp
  - title: Conditional behavior based on motion state
    code: "if (unit->GetMotionMaster()->HasFlag(MOTIONFLAG_WALKING))\n{\n    // Handle\
      \ walking-specific behavior\n    unit->SetSpeed(MOVE_WALK, 2.5f);\n}\nelse if\
      \ (unit->GetMotionMaster()->HasFlag(MOTIONFLAG_FLYING))\n{\n    // Handle flying-specific\
      \ behavior\n    unit->SetSpeed(MOVE_FLIGHT, 5.0f);\n}"
    language: cpp
  notes: This method operates on internal motion flags that are managed by the MotionMaster
    class and its associated movement generators. The flag values are typically defined
    as bitmasks, so multiple flags can be checked simultaneously using bitwise operations.
    The implementation assumes thread-safe access to the internal flag state, though
    direct manipulation of these flags outside of the MotionMaster's control is discouraged.
  warnings: The method does not validate the input flag value, so passing an invalid
    or undefined flag may produce unexpected results. Developers should ensure that
    only predefined motion flags are used when calling this method to avoid incorrect
    behavior in movement logic.
  related:
  - MotionMaster::AddFlag
  - MotionMaster::ClearFlag
  - MotionMaster::HasMovementFlag
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T23:43:08.588218'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
