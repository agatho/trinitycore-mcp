api:
  class: Player
  method: _LoadPlayerData
  signature: void Player::_LoadPlayerData(int elementsResult, int flagsResult)
documentation:
  brief: Loads player data from database result sets
  description: This method initializes player data by processing database result sets
    containing character information. It handles loading of various player attributes
    including stats, skills, and inventory items. The method is typically called during
    player login process to populate the player's internal data structures with saved
    values from the database. This ensures that players retain their character state
    across sessions, including level, experience points, and equipped items.
  parameters:
  - name: elementsResult
    description: Database result set containing player elements data such as stats,
      skills, and attributes
  - name: flagsResult
    description: Database result set containing player flags data including character
      flags and state information
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->_LoadPlayerData(elementsResult, flagsResult);

      // Player data loaded from database'
    language: cpp
  notes: This method should only be called during player initialization. It's important
    to ensure that database result sets are properly prepared before calling this
    method. The method may perform multiple database queries internally and could
    impact performance if not used carefully.
  warnings: Calling this method without proper database result set preparation can
    cause crashes or data corruption. This method should not be called during active
    gameplay sessions as it may interfere with existing player state.
  related:
  - Player::LoadFromDB
  - Player::SaveToDB
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T23:07:38.801392'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
