api:
  class: Unit
  method: IsAlive
  signature: bool Unit::IsAlive() const
documentation:
  brief: Checks if the unit is currently alive and not dead.
  description: The IsAlive method determines whether a Unit object is in a live state,
    meaning it has not been killed or is not currently in a dead state. This method
    is commonly used in game logic to evaluate the current status of creatures, players,
    or NPCs. It typically returns true for units that are alive and false for those
    that are dead or have been killed. The method can be particularly useful when
    implementing AI behaviors or checking unit status during combat situations.
  parameters: []
  returns: Returns true if the unit is alive, false otherwise. This indicates whether
    the unit has not been killed or is not currently in a dead state.
  examples:
  - title: Basic usage example
    code: "if (unit->IsAlive()) {\n    // Unit is alive, proceed with logic\n}\n"
    language: cpp
  - title: Combat AI example
    code: "if (!unit->IsAlive()) {\n    // Unit is dead, handle accordingly\n    //\
      \ This could be used in AI behavior logic\n}\n"
    language: cpp
  notes: This method may internally check the unit's health status or use a flag-based
    approach to determine if it is alive. It's important to note that this method
    might not always reflect the actual current state of the unit in all scenarios,
    particularly when dealing with complex game mechanics involving death states or
    special effects.
  warnings: This method should not be used as the sole indicator for determining whether
    a unit is dead, especially in complex scenarios involving multiple death states
    or special effects. It's recommended to also check other related methods such
    as Unit::IsDead() or Unit::HasAura() for more accurate results.
  related:
  - Unit::IsDead
  - Unit::HasAura
  - Unit::GetHealth
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:14:58.885968'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
