api:
  class: ScriptMgr
  method: CanCreateCreatureAI
  signature: bool ScriptMgr::CanCreateCreatureAI(uint32 scriptId) const
documentation:
  brief: Determines whether a creature AI can be created for the specified script
    ID.
  description: The CanCreateCreatureAI method checks if a valid CreatureAI can be
    instantiated for a given script ID. This method is typically used during creature
    creation or AI initialization to verify that the associated script is properly
    registered and supported within the TrinityCore framework. It ensures that attempting
    to create an AI for a nonexistent or invalid script ID will be prevented, maintaining
    system stability and preventing runtime errors. The method acts as a validation
    layer before AI instantiation occurs.
  parameters: []
  returns: Returns true if a CreatureAI can be created for the specified script ID;
    otherwise returns false. A return value of false typically indicates that the
    script ID is invalid or not registered with the AI system.
  examples:
  - title: Basic Usage Check
    code: "if (sScriptMgr->CanCreateCreatureAI(12345)) {\n    // Proceed with creating\
      \ creature AI\n    Creature* creature = ...;\n    creature->SetAI(new SomeCreatureAI(creature));\n\
      } else {\n    // Handle invalid script ID case\n    sLog->outError(\"Invalid\
      \ script ID %u for creature AI creation\", 12345);\n}"
    language: cpp
  notes: This method is primarily used internally by the TrinityCore core to validate
    AI script IDs before attempting instantiation. It's recommended to use this check
    when implementing custom AI logic or when dealing with dynamic script assignments
    to avoid runtime failures.
  warnings: null
  related:
  - GetCreatureAI
  - CreateCreatureAI
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T20:39:50.504045'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
