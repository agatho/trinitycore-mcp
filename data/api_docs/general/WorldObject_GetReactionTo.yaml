api:
  class: WorldObject
  method: GetReactionTo
  signature: int WorldObject::GetReactionTo(const WorldObject * target) const
documentation:
  brief: Determines the faction reaction level of this object towards a specified
    target object.
  description: The GetReactionTo method evaluates and returns the faction reaction
    level between the calling WorldObject and the provided target WorldObject. This
    reaction level is typically used by AI systems to determine behavior such as whether
    an NPC should attack, flee, or remain neutral towards another creature or player.
    The returned value represents a specific reaction type defined by the game's faction
    system, which can be hostile, friendly, neutral, or other predefined states. This
    method considers faction relationships, reputation levels, and any special flags
    or modifiers that may affect the interaction between the two objects.
  parameters: []
  returns: 'An integer representing the faction reaction level towards the target
    object. Possible values include: -1 (Hostile), 0 (Neutral), 1 (Friendly). The
    exact numerical mapping may vary based on internal faction definitions and reputation
    modifiers.'
  examples:
  - title: Checking Reaction Between Two Creatures
    code: "Creature* attacker = ...;\nCreature* target = ...;\nint reaction = attacker->GetReactionTo(target);\n\
      if (reaction < 0)\n{\n    // Target is hostile\n    attacker->AI()->AttackStart(target);\n\
      }"
    language: cpp
  - title: Using Reaction to Determine AI Behavior
    code: "Unit* unit = ...;\nWorldObject* target = ...;\nint reaction = unit->GetReactionTo(target);\n\
      switch (reaction)\n{\n    case -1: // Hostile\n        unit->CastSpell(target,\
      \ SPELL_AGRO, true);\n        break;\n    case 0:  // Neutral\n        unit->GetMotionMaster()->MoveIdle();\n\
      \        break;\n    case 1:  // Friendly\n        unit->GetMotionMaster()->MoveFollow(target,\
      \ 0.5f);\n        break;\n}"
    language: cpp
  notes: This method performs faction-based calculations and may involve reputation
    checks. It is commonly used in AI decision-making processes for NPC behavior.
    The reaction value returned can be influenced by temporary buffs, debuffs, or
    special flags that alter faction relationships.
  warnings: The return value should not be directly compared against arbitrary numbers
    without understanding the faction system's internal mapping. Always verify that
    the target object is valid before calling this method to avoid unexpected behavior.
  related:
  - GetFaction
  - SetFaction
  - IsHostileTo
  - IsFriendlyTo
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:45:13.040003'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
