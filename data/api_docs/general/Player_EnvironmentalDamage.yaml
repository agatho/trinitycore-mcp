api:
  class: Player
  method: EnvironmentalDamage
  signature: uint32 Player::EnvironmentalDamage(EnviromentalDamage type, uint32 damage)
documentation:
  brief: Calculates and applies environmental damage to the player based on damage
    type
  description: The EnvironmentalDamage method processes environmental damage types
    such as fire, frost, nature, or physical damage, and applies the calculated damage
    to the player's health. This method is used primarily for handling environmental
    damage events like lava, frost, or other environmental hazards in World of Warcraft.
    It returns the actual amount of damage dealt after applying relevant modifiers
    and calculations. The method is typically invoked when a player encounters environmental
    hazards during gameplay.
  parameters:
  - name: type
    description: The environmental damage type enum specifying the type of damage
      to be applied (fire, frost, nature, etc.). Valid values are defined by the EnviromentalDamage
      enum.
  - name: damage
    description: The base damage amount to be applied to the player. This value is
      modified by various factors including player resistance, armor, and other game
      mechanics.
  returns: Returns the actual amount of damage dealt to the player after applying
    all relevant modifiers and calculations. The return value represents the final
    health change caused by environmental damage.
  examples:
  - title: Basic Environmental Damage Application
    code: 'uint32 damage = player->EnvironmentalDamage(ENVIRONMENTAL_DAMAGE_FIRE,
      100);

      // damage will be the actual amount after applying resistances and modifiers'
    language: cpp
  - title: Environmental Damage with Player Resistance
    code: 'uint32 damage = player->EnvironmentalDamage(ENVIRONMENTAL_DAMAGE_FROST,
      150);

      // damage reflects final value after applying frost resistance and other modifiers'
    language: cpp
  notes: The method may be called from various environmental event handlers within
    TrinityCore. It's important to note that the actual damage calculation involves
    multiple factors including player resistance, armor, and game mechanics such as
    spell penetration. This method is thread-safe when used correctly.
  warnings: This method should not be used in situations where the player is not in
    a valid state for damage application. Also, calling this method with invalid damage
    types may lead to undefined behavior or errors. Avoid using this method during
    combat or when player is already dead.
  related:
  - Player::TakeDamage
  - Player::GetHealth
  - Player::GetMaxHealth
  - Player::ModifyHealth
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T00:51:51.756689'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
