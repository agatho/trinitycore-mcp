api:
  class: TerrainMgr
  method: GetZoneId
  signature: uint32 TerrainMgr::GetZoneId(const PhaseShift & phaseShift, const int
    & loc)
documentation:
  brief: Retrieves the zone identifier associated with a given phase shift and location.
  description: The GetZoneId method is used to determine the zone ID for a specific
    phase shift and location within the game world. This functionality is essential
    for managing zone-based content, such as quests, events, and area triggers that
    are dependent on player phase or location. The method takes into account both
    the current phase of the player (via PhaseShift) and the specific coordinates
    or reference point (loc) to accurately return the corresponding zone identifier.
    It is commonly used in game logic where zone-specific behaviors need to be evaluated
    based on the player's current phase and position.
  parameters:
  - name: phaseShift
    description: The PhaseShift object representing the current phase state of the
      player or entity. This includes information about which phases are active, including
      any phase masks or phase groups that affect visibility or interaction with world
      objects.
  - name: loc
    description: An integer value representing a location identifier or coordinate
      reference within the game world. The exact meaning of this parameter depends
      on the context in which the method is called, but it typically refers to a specific
      point or area within the terrain system.
  returns: A uint32 value representing the zone ID associated with the provided phase
    shift and location. If no valid zone can be determined for the given parameters,
    the method may return zero or an undefined value depending on implementation details.
  examples:
  - title: Basic Usage Example
    code: "uint32 zoneId = TerrainMgr::Instance()->GetZoneId(player->GetPhaseShift(),\
      \ player->GetPosition().x);\nif (zoneId != 0)\n{\n    // Proceed with zone-specific\
      \ logic\n    sLog->outString(\"Player is in zone: %u\", zoneId);\n}"
    language: cpp
  - title: Advanced Usage with Phase Mask Check
    code: "PhaseShift phase = player->GetPhaseShift();\nuint32 loc = static_cast<int>(player->GetPosition().y);\n\
      uint32 zoneId = TerrainMgr::Instance()->GetZoneId(phase, loc);\nif (zoneId !=\
      \ 0 && phase.HasPhase(1234)) // Check if specific phase is active\n{\n    //\
      \ Zone-specific behavior for phase 1234\n    sLog->outString(\"Player in zone\
      \ %u during phase 1234\", zoneId);\n}"
    language: cpp
  notes: This method likely interacts with internal zone data structures and may perform
    lookups against cached or precomputed zone information. It is recommended to cache
    the result if the same zone ID is needed multiple times during a single update
    cycle for performance reasons.
  warnings: Ensure that both phaseShift and loc parameters are valid before calling
    this method, as invalid inputs might lead to incorrect zone IDs or undefined behavior.
    The method may not be thread-safe if used outside of the main game thread context.
  related:
  - GetAreaId
  - GetZoneName
  - IsInZone
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T05:28:43.526947'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
