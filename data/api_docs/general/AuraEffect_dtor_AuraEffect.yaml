api:
  class: AuraEffect
  method: ~AuraEffect
  signature: void AuraEffect::~AuraEffect()
documentation:
  brief: Destroys an AuraEffect instance and releases all associated resources.
  description: The destructor for the AuraEffect class is responsible for cleaning
    up all resources allocated during the lifetime of the aura effect. This includes
    releasing references to spell effects, removing any active modifications to the
    target's stats or state, and ensuring proper cleanup of internal data structures.
    In the context of World of Warcraft's TrinityCore, aura effects are temporary
    buffs or debuffs applied to units through spells, and their destruction typically
    occurs when the aura expires, is removed manually, or when the target unit is
    destroyed. The destructor ensures that no memory leaks occur and that all game
    state changes caused by the aura are properly reverted.
  parameters: []
  returns: null
  examples:
  - title: Automatic destruction of AuraEffect
    code: "void SomeFunction()\n{\n    AuraEffect* aura = new AuraEffect(spellInfo,\
      \ level, caster, target);\n    // ... use aura ...\n    delete aura; // Triggers\
      \ ~AuraEffect()\n}"
    language: cpp
  notes: The destructor is automatically invoked when an AuraEffect object goes out
    of scope or is explicitly deleted. It's important to note that the destruction
    process may involve calling other cleanup methods and notifying subsystems about
    the removal of the aura effect, which can have performance implications if many
    auras are removed simultaneously.
  warnings: Developers should not manually invoke this destructor unless they are
    certain about the object's lifecycle. Since this is a destructor, it should never
    be called directly on an already destroyed object, as doing so would lead to undefined
    behavior.
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T17:25:20.597027'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
