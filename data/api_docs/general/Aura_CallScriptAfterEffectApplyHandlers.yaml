api:
  class: Aura
  method: CallScriptAfterEffectApplyHandlers
  signature: void Aura::CallScriptAfterEffectApplyHandlers(const AuraEffect * aurEff,
    const AuraApplication * aurApp, AuraEffectHandleModes mode)
documentation:
  brief: Calls all script handlers after an aura effect is applied to a unit.
  description: The CallScriptAfterEffectApplyHandlers method invokes all registered
    script handlers that are designed to execute after an aura effect has been applied
    to a target unit. This method is typically called internally by the TrinityCore
    framework during the aura application process, specifically following the successful
    application of an aura effect. It allows custom scripts (such as those defined
    in SpellScript or AuraScript) to perform additional logic, modifications, or side
    effects once the aura effect has been fully applied to the target. The method
    takes into account the specific aura effect, its application context, and the
    mode in which it was applied to ensure proper execution of any associated script
    handlers.
  parameters:
  - name: aurEff
    description: Pointer to the AuraEffect that has been applied. This parameter provides
      access to the effect's properties, such as the spell ID, effect type, and modifier
      values.
  - name: aurApp
    description: Pointer to the AuraApplication object representing the application
      of the aura to a target. It contains information about the target unit and the
      state of the aura application.
  - name: mode
    description: The mode in which the aura effect was applied, indicating how the
      effect was handled (e.g., APPLY, REMOVE, CHANGE). This determines which script
      handlers should be executed.
  returns: null
  examples:
  - title: Basic usage within a custom aura script
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void Register()\
      \ override\n    {\n        OnEffectApply += AuraEffectApplyFn(MyAuraScript::HandleEffectApply,\
      \ EFFECT_0, SPELL_AURA_DUMMY);\n    }\n\n    void HandleEffectApply(AuraEffect\
      \ const* aurEff, AuraApplication const* aurApp, AuraEffectHandleModes mode)\n\
      \    {\n        // Custom logic before calling base handler\n        CallScriptAfterEffectApplyHandlers(aurEff,\
      \ aurApp, mode);\n        // Custom logic after script handlers are called\n\
      \    }\n};"
    language: cpp
  notes: This method is part of the internal aura handling mechanism in TrinityCore
    and should not be called directly from outside the core framework unless you're
    extending or modifying aura behavior. It ensures that all registered script handlers
    are executed in the correct order after an effect has been applied.
  warnings: null
  related:
  - CallScriptBeforeEffectApplyHandlers
  - CallScriptOnEffectApply
  - Aura::ApplyEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:14:29.258474'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
