api:
  class: AuraEffect
  method: HandleModChargeRecoveryRate
  signature: void AuraEffect::HandleModChargeRecoveryRate(const AuraApplication *
    aurApp, uint8 mode, bool apply) const
documentation:
  brief: Modifies the rate at which aura charges recover for the affected unit.
  description: The HandleModChargeRecoveryRate method adjusts how quickly charges
    associated with an aura are replenished over time. This is commonly used in abilities
    that have limited uses per minute or hour, such as certain warrior stances or
    rogue poisons. The method is invoked during aura application or removal and modifies
    the recovery rate based on the applied modifier. It affects the internal charge
    recovery timer of the aura effect, influencing when the next charge will become
    available to the unit.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. Contains information about the aura's state and target.
  - name: mode
    description: The mode of operation, typically indicating whether this is an application
      (1) or removal (0) of the aura effect.
  - name: apply
    description: Boolean flag indicating if the effect should be applied (true) or
      removed (false).
  returns: null
  examples:
  - title: Applying a Charge Recovery Rate Modifier
    code: "void ApplyChargeRecoveryAura(Unit* target)\n{\n    AuraEffect* auraEffect\
      \ = new AuraEffect();\n    AuraApplication aurApp(target, nullptr, nullptr);\n\
      \    auraEffect->HandleModChargeRecoveryRate(&aurApp, 1, true);\n}"
    language: cpp
  notes: This method is part of the aura handling system and is typically called internally
    by the TrinityCore framework when applying or removing aura effects. The actual
    charge recovery rate modification is usually handled through internal timers and
    may be influenced by other factors such as spell modifiers or player state.
  warnings: Improper usage of this method can lead to incorrect charge behavior, which
    might break gameplay mechanics like cooldowns or limited-use abilities. Ensure
    that the modifier values are within expected ranges to avoid unintended consequences.
  related:
  - AuraEffect::HandleApply
  - AuraEffect::HandleRemove
  - AuraEffect::GetModifier
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:41:47.096469'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
