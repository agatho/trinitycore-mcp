api:
  class: SpellMgr
  method: GetSpellInfo
  signature: const SpellInfo * SpellMgr::GetSpellInfo(uint32 spellId, Difficulty difficulty)
    const
documentation:
  brief: Retrieves spell information data for a specified spell ID and difficulty
    level.
  description: The GetSpellInfo method retrieves the SpellInfo structure containing
    all relevant data for a given spell ID, taking into account the specified difficulty
    level. This method is commonly used to access spell properties such as effects,
    durations, ranges, and other mechanics. The returned SpellInfo pointer is const,
    meaning it should not be modified directly. If the spell ID or difficulty level
    is invalid, the method may return nullptr. This function is essential for spell
    handling, validation, and execution logic within TrinityCore's spell system.
  parameters:
  - name: spellId
    description: The unique identifier of the spell to retrieve information for. Must
      be a valid spell ID registered in the spell database.
  - name: difficulty
    description: The difficulty level for which to retrieve spell data. This affects
      how spell properties are adjusted based on game difficulty settings (e.g., normal,
      heroic, mythic).
  returns: A const pointer to the SpellInfo structure containing all spell data for
    the specified ID and difficulty. Returns nullptr if the spell ID is invalid or
    not found for the given difficulty.
  examples:
  - title: Basic Usage
    code: "const SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(12345, DIFFICULTY_NORMAL);\n\
      if (spellInfo)\n{\n    // Use spellInfo to access spell data\n    uint32 spellDuration\
      \ = spellInfo->DurationEntry->Id;\n}"
    language: cpp
  - title: Checking Spell Validity
    code: "uint32 spellId = 98765;\nconst SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(spellId,\
      \ DIFFICULTY_HEROIC);\nif (!spellInfo)\n{\n    // Handle invalid spell ID\n\
      \    sLog->outError(\"Invalid spell ID: %u\", spellId);\n}\nelse\n{\n    //\
      \ Proceed with spell logic\n    sLog->outString(\"Spell '%s' loaded successfully.\"\
      , spellInfo->SpellName[0]);\n}"
    language: cpp
  notes: This method performs a lookup in the internal spell database, which is typically
    pre-loaded at server startup. The SpellInfo structures are shared across threads
    and should not be modified. Performance considerations include caching frequently
    accessed spell data to avoid repeated lookups.
  warnings: Always check for null return values before using the SpellInfo pointer.
    Modifying SpellInfo data directly can cause instability or unexpected behavior
    in spell mechanics. Be aware that different difficulty levels may alter spell
    properties like damage, duration, or effects.
  related:
  - GetSpellInfo(uint32 spellId)
  - IsSpellValid
  - GetSpellDifficultyID
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:17:38.871218'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
