api:
  class: Aura
  method: operator=
  signature: Aura & Aura::operator=(Aura && param0)
documentation:
  brief: Moves an aura object to another, transferring ownership of its resources
  description: The move assignment operator for the Aura class transfers all resources
    from the source aura to the current aura. This operation is typically used when
    moving an aura object from one location to another without copying its data. The
    source aura becomes invalid after the move operation and should not be used. In
    the context of TrinityCore's World of Warcraft emulation, this method is essential
    for efficient memory management when handling temporary or transient auras that
    need to be transferred between different systems or containers.
  parameters: []
  returns: A reference to the current Aura object after the move operation has completed
  examples:
  - title: Moving an Aura to Another Variable
    code: 'Aura&& sourceAura = std::move(someAura);

      Aura targetAura;

      targetAura = std::move(sourceAura); // sourceAura is now invalid'
    language: cpp
  - title: Using Move Assignment in Container Operations
    code: 'std::vector<Aura> auraList;

      Aura newAura;

      // ... populate newAura ...

      auraList.push_back(std::move(newAura)); // Efficiently transfers ownership'
    language: cpp
  notes: This operator is typically used in performance-critical code paths where
    avoiding unnecessary copies is important. The move operation should be preferred
    over copy operations when the source aura is no longer needed after assignment.
    In TrinityCore, this is particularly relevant for managing temporary auras during
    spell casting or effect application.
  warnings: After calling this operator, the source aura object becomes invalid and
    any attempt to use it may result in undefined behavior. Ensure that all references
    to the moved-from aura are not used afterward. This is especially important when
    dealing with aura pointers or references that might still point to the old object
    location.
  related:
  - Aura::Aura
  - Aura::operator=
  - Aura::operator==
  - Aura::operator!=
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T13:44:47.161261'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
