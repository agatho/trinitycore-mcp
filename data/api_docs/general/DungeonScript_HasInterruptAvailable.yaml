api:
  class: DungeonScript
  method: HasInterruptAvailable
  signature: bool DungeonScript::HasInterruptAvailable(int * player) const
documentation:
  brief: Checks if a player has an available interrupt ability in the dungeon context.
  description: The HasInterruptAvailable method determines whether a specified player
    character possesses an active interrupt ability that can be used within the current
    dungeon scenario. This functionality is typically utilized in scripted dungeon
    events where specific player actions or abilities need to be validated before
    proceeding with scripted sequences. The method evaluates the player's current
    state, including cooldowns and available abilities, to return a boolean result
    indicating interrupt readiness. It serves as a validation mechanism for dungeon
    scripts that require player interaction through interrupts.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID) within the dungeon context. This parameter identifies which specific
      player's interrupt availability is being checked.
  returns: Returns true if the specified player has an available interrupt ability;
    otherwise, returns false. The method does not distinguish between different types
    of interrupts but simply confirms general interrupt capability.
  examples:
  - title: Basic Usage in Dungeon Script
    code: "if (dungeonScript->HasInterruptAvailable(&playerGUID)) {\n    // Proceed\
      \ with interrupt-based event\n    HandleInterruptEvent(playerGUID);\n} else\
      \ {\n    // Player cannot interrupt, continue normal execution\n    ContinueDungeonProgress();\n\
      }"
    language: cpp
  - title: Conditional Interrupt Handling
    code: "void DungeonScript::OnPlayerEnter(Player* player) {\n    if (HasInterruptAvailable(&player->GetGUID().GetCounter()))\
      \ {\n        player->AddDelayedEvent(5000, [this, player]() {\n            if\
      \ (HasInterruptAvailable(&player->GetGUID().GetCounter())) {\n             \
      \   // Execute interruptable action\n                ProcessInterruptibleAction(player);\n\
      \            }\n        });\n    }\n}"
    language: cpp
  notes: This method is primarily used in dungeon event handling and scripted encounters.
    It relies on the internal state management of player abilities and may be affected
    by cooldowns or temporary status effects. The player parameter should represent
    a valid GUID to ensure proper evaluation.
  warnings: Ensure that the player pointer points to a valid, active player object
    before calling this method. Calling with an invalid or null player reference could
    lead to undefined behavior or crashes in the script execution environment.
  related:
  - GetPlayerInterruptCooldown
  - IsInterruptible
  - CanUseInterrupt
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T14:11:04.202799'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
