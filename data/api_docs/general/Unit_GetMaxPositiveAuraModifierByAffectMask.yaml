api:
  class: Unit
  method: GetMaxPositiveAuraModifierByAffectMask
  signature: int32 Unit::GetMaxPositiveAuraModifierByAffectMask(int auraType, const
    SpellInfo * affectedSpell) const
documentation:
  brief: Returns the maximum positive aura modifier value for a specific aura type
    affecting the unit.
  description: This method retrieves the highest positive modifier value from all
    active auras of a specified type that affect the unit. It is commonly used in
    spell mechanics to determine the strength of buffs or the effectiveness of certain
    effects. The method considers only positive modifiers and ignores negative ones,
    making it useful for calculating bonus values in various gameplay scenarios such
    as stat increases, damage boosts, or healing multipliers. This function is typically
    called during spell processing or when evaluating aura effects.
  parameters:
  - name: auraType
    description: The type of aura to evaluate. This parameter specifies which aura
      type to check for positive modifiers (e.g., SPELL_AURA_MOD_STAT, SPELL_AURA_MOD_ATTACK_POWER).
  - name: affectedSpell
    description: Pointer to the spell that is being affected. This allows the method
      to filter auras based on the specific spell being evaluated, ensuring accurate
      results when multiple spells may affect the same aura type.
  returns: Returns an integer value representing the maximum positive modifier from
    all applicable auras of the specified type. If no such positive modifiers exist,
    it returns 0. Negative values are ignored and not returned.
  examples:
  - title: Basic Usage Example
    code: int32 maxModifier = unit->GetMaxPositiveAuraModifierByAffectMask(SPELL_AURA_MOD_STAT,
      spellInfo);
    language: cpp
  - title: Advanced Usage Example
    code: 'int32 maxModifier = unit->GetMaxPositiveAuraModifierByAffectMask(SPELL_AURA_MOD_ATTACK_POWER,
      nullptr); // Using nullptr for affectedSpell

      '
    language: cpp
  notes: This method is part of the core aura system in TrinityCore and should be
    used carefully during spell processing. It only considers positive modifiers and
    ignores negative ones, which can affect performance if used incorrectly. The method
    may return 0 if no matching auras are found or if all auras have negative modifiers.
  warnings: This method does not account for negative modifiers, so care must be taken
    when using it in contexts where negative effects matter. Also, the method might
    return 0 even when there are active auras present if they are all negative.
  related:
  - GetMaxNegativeAuraModifierByAffectMask
  - GetAuraType
  - GetAura
  - GetMaxPositiveAuraModifier
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T13:01:57.690109'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
