api:
  class: Totem
  method: Update
  signature: void Totem::Update(int diff)
documentation:
  brief: Updates the totem's state and handles its behavior during each game tick.
  description: The Update method is responsible for managing the internal state of
    a Totem object during each game update cycle. It processes the totem's duration,
    handles any active effects or spells, and ensures proper cleanup when the totem
    expires. This method is typically called by the game loop at regular intervals,
    with the 'diff' parameter indicating the time elapsed since the last update. The
    method manages the totem's lifecycle, including checking for expiration, updating
    visual effects, and removing the totem from the world when its duration ends.
  parameters:
  - name: diff
    description: The time interval (in milliseconds) elapsed since the last update
      call. This value is used to determine how much time has passed and whether the
      totem's duration should be reduced accordingly.
  returns: null
  examples:
  - title: Basic Update Call
    code: "void GameWorld::UpdateTotems(int diff)\n{\n    for (auto& totem : m_totems)\n\
      \    {\n        totem->Update(diff);\n    }\n}"
    language: cpp
  - title: Custom Totem Update Logic
    code: "void CustomTotem::Update(int diff)\n{\n    // Call base class update\n\
      \    Totem::Update(diff);\n    \n    // Additional custom logic for this specific\
      \ totem type\n    if (m_spellAura && m_spellAura->GetDuration() > 0)\n    {\n\
      \        m_spellAura->UpdateAuraDuration(diff);\n    }\n}"
    language: cpp
  notes: This method is typically invoked by the core game loop and should not be
    called directly from outside the update system. The 'diff' parameter represents
    real-world time elapsed, so performance considerations should be taken into account
    when implementing custom logic within this method.
  warnings: Do not modify the totem's duration or state in ways that could cause race
    conditions or inconsistent behavior. Ensure all updates are thread-safe if accessed
    from multiple threads.
  related:
  - Totem::GetDuration
  - Totem::SetDuration
  - Totem::IsExpired
  - Totem::Remove
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T20:30:05.037755'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
