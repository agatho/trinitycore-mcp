api:
  class: KitingManager
  method: GetOptimalKitingDistance
  signature: float KitingManager::GetOptimalKitingDistance(Unit * target)
documentation:
  brief: Calculates and returns the optimal kiting distance for the current unit relative
    to a target.
  description: The GetOptimalKitingDistance method computes the ideal distance at
    which a unit should maintain while kiting an enemy target. This distance is determined
    based on factors such as the unit's attack range, movement speed, and the target's
    capabilities. The method is typically used in AI logic to determine when to move
    closer or farther from a target during combat. It assumes that the KitingManager
    has been properly initialized with a valid target and that the unit's combat state
    is active. The returned value represents a distance in yards.
  parameters: []
  returns: A float value representing the optimal kiting distance in yards. This value
    indicates how far the unit should stay from its target to maximize damage output
    while minimizing incoming threat or damage risk.
  examples:
  - title: Basic Usage
    code: "float optimalDistance = kitingManager->GetOptimalKitingDistance(targetUnit);\n\
      if (optimalDistance > 0)\n{\n    // Use the calculated distance for movement\
      \ logic\n    player->MoveTowards(targetUnit, optimalDistance);\n}"
    language: cpp
  - title: Integration with AI Decision Making
    code: "float distance = kitingManager->GetOptimalKitingDistance(target);\nif (player->GetDistance(target)\
      \ < distance)\n{\n    // Move away from target\n    player->MoveAwayFrom(target,\
      \ 1.0f);\n}\nelse if (player->GetDistance(target) > distance)\n{\n    // Move\
      \ closer to target\n    player->MoveTowards(target, 1.0f);\n}"
    language: cpp
  notes: This method relies on internal AI state and assumes that the KitingManager
    is properly configured with a valid target unit. The calculation may vary based
    on the unit's class, weapon type, and current combat stance. Performance-wise,
    this method should be called sparingly during active combat to avoid unnecessary
    overhead.
  warnings: Ensure that the target unit passed to the method is not null or invalid,
    as this could lead to undefined behavior. The returned distance value may be zero
    if no valid kiting calculation can be performed, which should be handled gracefully
    by calling code.
  related:
  - SetTarget
  - GetKitingDistance
  - IsKiting
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:01:41.794814'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
