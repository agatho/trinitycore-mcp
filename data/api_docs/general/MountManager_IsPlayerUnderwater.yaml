api:
  class: MountManager
  method: IsPlayerUnderwater
  signature: bool MountManager::IsPlayerUnderwater(int * player) const
documentation:
  brief: Checks if a player is currently underwater in the game world
  description: The IsPlayerUnderwater method determines whether a specified player
    character is currently positioned beneath the water surface. This functionality
    is essential for various game mechanics such as mount behavior, spell effects,
    and player state management. The method evaluates the player's current position
    relative to the water level in their current map zone and returns true if the
    player is submerged, false otherwise. It is commonly used by systems that need
    to modify behavior based on environmental conditions.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID). This parameter must point to a valid player GUID value within the game
      world.
  returns: Returns true if the specified player is currently underwater, false if
    they are above or at the water surface. The method will return false if the player
    pointer is invalid or NULL.
  examples:
  - title: Basic usage to check if a player is underwater
    code: "int playerId = 12345;\nbool isUnderwater = mountManager.IsPlayerUnderwater(&playerId);\n\
      if (isUnderwater) {\n    // Handle underwater behavior\n    printf(\"Player\
      \ is currently underwater\\n\");\n} else {\n    // Handle normal surface behavior\n\
      \    printf(\"Player is above water\\n\");\n}"
    language: cpp
  - title: Using with player object to determine mount behavior
    code: "Player* player = ObjectAccessor::FindPlayer(ObjectGuid(HighGuid::Player,\
      \ playerId));\nif (player) {\n    int guid = player->GetGUID().GetCounter();\n\
      \    if (mountManager.IsPlayerUnderwater(&guid)) {\n        // Disable underwater\
      \ mounts or apply swimming mechanics\n        player->SetCanFly(false);\n  \
      \  } else {\n        // Allow normal mount usage\n        player->SetCanFly(true);\n\
      \    }\n}"
    language: cpp
  notes: This method relies on accurate positioning data and water level information
    from the game world. The implementation may cache results for performance reasons,
    so frequent calls might not reflect real-time changes. Ensure that the player
    GUID passed is valid and corresponds to an active player in the current session.
  warnings: Passing a NULL pointer or invalid player GUID will result in undefined
    behavior. Always validate the player reference before calling this method. The
    underwater detection may not account for all special water zones (like deep ocean
    areas) and might be affected by map-specific water level implementations.
  related:
  - IsPlayerOnGround
  - GetPlayerPosition
  - IsPlayerInWater
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:12:48.044700'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
