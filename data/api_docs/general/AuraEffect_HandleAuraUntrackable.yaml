api:
  class: AuraEffect
  method: HandleAuraUntrackable
  signature: void AuraEffect::HandleAuraUntrackable(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Applies or removes the untrackable aura effect, making the target immune
    to tracking by enemies.
  description: The HandleAuraUntrackable method manages the application and removal
    of the untrackable aura effect on a target. When applied, this aura makes the
    affected unit immune to being tracked by enemy players or creatures, preventing
    them from being detected through tracking abilities or spells. The method is invoked
    during aura application or removal events and handles the necessary updates to
    the target's state and visibility flags. This functionality is commonly used for
    stealth-based abilities, invisibility effects, or special game mechanics that
    require a unit to remain undetectable by enemy tracking systems.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura application
      context. Contains information about which unit is affected and the aura's properties.
  - name: mode
    description: The mode of aura application, typically indicating whether this is
      an initial application or a periodic update. Values are usually 0 for initial
      application, 1 for periodic updates, etc.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the aura effect. When true, the untrackable state is enabled; when false, it's
      disabled.
  returns: null
  examples:
  - title: Applying Untrackable Aura
    code: "void ApplyUntrackableAura(Unit* target)\n{\n    if (Aura* aura = target->GetAura(12345))\
      \ // Assuming aura ID 12345 is untrackable\n    {\n        aura->ApplyEffect(this,\
      \ 0, true);\n    }\n}"
    language: cpp
  - title: Handling Aura Application/Removal
    code: "void HandleAuraUntrackable(const AuraApplication* aurApp, uint8 mode, bool\
      \ apply) const\n{\n    if (!aurApp || !aurApp->GetTarget())\n        return;\n\
      \n    Unit* target = aurApp->GetTarget();\n    if (apply)\n    {\n        target->SetFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_NOT_SELECTABLE);\n        target->SetFlag(UNIT_FIELD_FLAGS_2, UNIT_FLAG2_UNTRACKABLE);\n\
      \    }\n    else\n    {\n        target->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);\n\
      \        target->RemoveFlag(UNIT_FIELD_FLAGS_2, UNIT_FLAG2_UNTRACKABLE);\n \
      \   }\n}"
    language: cpp
  notes: This method is part of the aura handling system and is typically called internally
    by TrinityCore's aura management framework. The untrackable flag affects how the
    unit interacts with enemy AI and tracking systems, but does not prevent all forms
    of detection such as line-of-sight or direct visual detection.
  warnings: Improper use of this method may result in unintended behavior where units
    become permanently untrackable or lose tracking functionality. Ensure that the
    aura application context is valid before calling this method to avoid potential
    crashes or undefined behavior.
  related:
  - AuraEffect::HandleAuraApply
  - AuraEffect::HandleAuraRemove
  - Unit::SetFlag
  - Unit::RemoveFlag
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:57:54.137512'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
