api:
  class: Vehicle
  method: IsControllableVehicle
  signature: bool Vehicle::IsControllableVehicle() const
documentation:
  brief: Determines whether the vehicle is controllable by a player.
  description: This method checks if the vehicle instance is currently controllable,
    meaning it can be operated by a player character. It evaluates various internal
    flags and states to determine if the vehicle is in a mode where player input can
    affect its movement or actions. The check typically involves verifying that the
    vehicle has an active passenger who is a valid player, and that the vehicle's
    control state allows for player interaction. This method is commonly used in game
    logic to enable or disable vehicle controls based on the current state of the
    vehicle and its passengers.
  parameters: []
  returns: Returns true if the vehicle is controllable by a player; otherwise returns
    false. A return value of false typically indicates that the vehicle is either
    not currently occupied by a player, is in a non-controllable state (such as being
    destroyed or disabled), or is in a state where player control is temporarily suspended.
  examples:
  - title: Basic Vehicle Control Check
    code: "if (vehicle->IsControllableVehicle()) {\n    // Enable vehicle controls\n\
      \    player->SetCanMove(true);\n} else {\n    // Disable vehicle controls\n\
      \    player->SetCanMove(false);\n}"
    language: cpp
  - title: Using in Vehicle Update Logic
    code: "void VehicleUpdate(Vehicle* veh) {\n    if (veh->IsControllableVehicle())\
      \ {\n        // Process player input for vehicle movement\n        veh->ProcessPlayerInput();\n\
      \    } else {\n        // Handle non-controllable state\n        veh->StopMovement();\n\
      \    }\n}"
    language: cpp
  notes: This method relies on internal vehicle state tracking and passenger validation.
    It may return false during critical vehicle states such as destruction, loading,
    or when the passenger is in an invalid state (e.g., dead, mounted on another creature).
    The implementation likely checks for valid player passengers and ensures that
    the vehicle's control mode allows for player interaction.
  warnings: Do not assume that a vehicle being controllable means it is currently
    moving or responding to input. The method only indicates whether control is possible,
    not whether it is actively being used. Also, be aware that this check may return
    false even if a player is present on the vehicle if the vehicle is in a state
    where control is temporarily disabled.
  related:
  - GetVehicleInfo
  - HasPassenger
  - IsVehicleInUse
  - SetControllable
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:29:53.885564'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
