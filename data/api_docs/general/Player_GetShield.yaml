api:
  class: Player
  method: GetShield
  signature: Item * Player::GetShield(bool useable) const
documentation:
  brief: Returns the shield item currently equipped on the player
  description: The GetShield method retrieves the shield item that is currently equipped
    on the player's off-hand slot. This method is commonly used in combat scenarios
    to determine if a player has a shield equipped, which affects their defense mechanics
    and can influence certain abilities or spells. The method returns a pointer to
    an Item object representing the shield, or nullptr if no shield is equipped. The
    useable parameter allows developers to specify whether they want to check if the
    shield is usable (i.e., not disabled) or simply retrieve the item regardless of
    its usability status.
  parameters:
  - name: useable
    description: A boolean flag indicating whether to check if the shield is usable.
      If true, the method will return nullptr if the shield is not usable; if false,
      it will return the shield item even if it's disabled.
  returns: Returns a pointer to an Item object representing the shield equipped on
    the player's off-hand slot. If no shield is equipped or the shield is not usable
    (when useable=true), returns nullptr. The returned item can be used for various
    checks such as determining if a player has a shield equipped, checking its stats,
    or verifying its usability.
  examples:
  - title: Basic Usage Example
    code: "Item* shield = player->GetShield(false);\nif (shield != nullptr)\n{\n \
      \   // Player has a shield equipped\n    // Do something with the shield\n}"
    language: cpp
  - title: Checking Usability
    code: "Item* shield = player->GetShield(true);\nif (shield != nullptr && shield->IsUsable())\n\
      {\n    // Player has a usable shield equipped\n    // Proceed with combat logic\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with other player-related methods
    such as GetItemBySlot() or GetInventorySlot(). It's important to note that the
    returned item may be nullptr if no shield is equipped, and the useable parameter
    affects whether the method returns a usable shield or not. Performance-wise, this
    method should be used carefully in combat situations where frequent checks are
    performed.
  warnings: This method can return nullptr if no shield is equipped, which might lead
    to null pointer dereferences if not handled properly. Always check for nullptr
    before accessing shield properties. Also, the useable parameter may cause unexpected
    behavior if not understood correctly, as it affects whether the returned item
    is usable or not.
  related:
  - GetItemBySlot
  - GetInventorySlot
  - GetShieldBlock
  - IsEquipped
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:25:39.940695'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
