api:
  class: Unit
  method: ModifyPower
  signature: int32 Unit::ModifyPower(int power, int32 val, bool withPowerUpdate)
documentation:
  brief: Modifies the power value of a unit by adding or subtracting a specified amount.
  description: The ModifyPower method adjusts the current power (such as mana, rage,
    energy, or focus) of a Unit object by the specified amount. It allows for both
    positive and negative adjustments to the power value, with optional updates to
    the power bar display. This method is commonly used in game mechanics to handle
    resource changes during spell effects, abilities, or other gameplay events. The
    method can be used to increase or decrease power values depending on the input
    parameters.
  parameters:
  - name: power
    description: The type of power to modify (e.g., mana, rage, energy, focus). This
      parameter defines which power type is affected.
  - name: val
    description: The amount by which to modify the power value. Positive values increase
      power, negative values decrease it.
  - name: withPowerUpdate
    description: If true, updates the power bar display; if false, only modifies the
      internal power value without updating the visual representation.
  returns: Returns the new power value after modification. If the modification results
    in a negative value, it may return zero or be clamped depending on game mechanics.
  examples:
  - title: Basic Power Modification Example
    code: 'Unit* target = GetTarget();

      int32 newPower = target->ModifyPower(PowerType::POWER_MANA, 50);

      // This increases mana by 50 points'
    language: cpp
  - title: Advanced Power Modification with Update
    code: 'Unit* player = GetPlayer();

      int32 newPower = player->ModifyPower(PowerType::POWER_MANA, -100, true);

      // This decreases mana by 100 points and updates the power bar'
    language: cpp
  notes: This method is typically used in conjunction with other power-related methods
    like ModifyPower or GetPower. It's important to note that modifying power values
    may trigger updates to the power bar display depending on the 'withPowerUpdate'
    parameter. Performance considerations include potential for multiple calls during
    spell effects or ability usage.
  warnings: Be cautious when using negative values, as they can cause the power to
    go below zero and may result in unexpected behavior if not handled properly. Also,
    ensure that the power type matches the unit's current power type to avoid incorrect
    modifications.
  related:
  - GetPower
  - SetPower
  - ModifyPower
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:56:08.678735'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
