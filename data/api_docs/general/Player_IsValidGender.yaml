api:
  class: Player
  method: IsValidGender
  signature: bool Player::IsValidGender(uint8 Gender)
documentation:
  brief: Checks whether the specified gender is valid for player character creation.
  description: The IsValidGender method validates whether a given gender value is
    acceptable for use in player character creation within World of Warcraft. This
    method ensures that only valid gender values (0-2) are accepted, where 0 represents
    male, 1 represents female, and 2 represents none or unspecified gender. The function
    serves as a validation check to prevent invalid gender selections during character
    creation or when modifying player attributes. It is commonly used in conjunction
    with other gender-related methods to ensure proper game mechanics and data integrity.
  parameters:
  - name: Gender
    description: The gender value to validate, where 0 represents male, 1 represents
      female, and 2 represents none or unspecified gender. Values outside this range
      will be considered invalid.
  returns: Returns true if the specified gender is valid (0-2), false otherwise. This
    indicates whether the gender value can be used for character creation or attribute
    modification in the game.
  examples:
  - title: Basic Usage Example
    code: "Player* player = new Player();\nuint8 gender = 1;\nbool isValid = player->IsValidGender(gender);\n\
      if (isValid)\n{\n    // Proceed with character creation\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "Player* player = new Player();\nuint8 gender = 2;\nbool isValid = player->IsValidGender(gender);\n\
      if (isValid)\n{\n    // Gender is valid, proceed with character creation\n}\n\
      else\n{\n    // Invalid gender, handle error case\n}"
    language: cpp
  notes: This method is typically used during character creation process to validate
    gender selection. It's important to note that this function does not check for
    other validity conditions such as race or class restrictions; it only validates
    the gender itself.
  warnings: This method should not be used for checking gender in contexts where the
    player's actual gender needs to be determined, as it only validates against predefined
    values and does not account for real-world gender variations. Also, ensure that
    the parameter passed is within the valid range of 0-2 to avoid unexpected behavior.
  related:
  - Player::GetGender
  - Player::SetGender
  - Player::IsValidRace
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T15:36:44.039340'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
