api:
  class: LazyManagerFactory
  method: GetAuctionManager
  signature: AuctionManager * LazyManagerFactory::GetAuctionManager()
documentation:
  brief: Returns the singleton AuctionManager instance used for managing auction house
    operations in the game world.
  description: The GetAuctionManager method retrieves the global AuctionManager singleton
    instance that handles all auction house related functionality within the TrinityCore
    server. This includes managing item listings, bid processing, auction timeouts,
    and communication with the database for persistent auction data. The method ensures
    thread-safe access to the auction system and is typically called by other subsystems
    that need to interact with the auction house mechanics. The returned pointer is
    guaranteed to be valid during normal operation, but should not be stored long-term
    as the manager may be destroyed during server shutdown or reset operations.
  parameters: []
  returns: A pointer to the singleton AuctionManager instance. Returns nullptr if
    the manager has not been initialized or if the system is in an invalid state during
    shutdown.
  examples:
  - title: Basic Usage
    code: "AuctionManager* auctionMgr = LazyManagerFactory::GetAuctionManager();\n\
      if (auctionMgr)\n{\n    // Use the auction manager to perform operations\n \
      \   auctionMgr->Update();\n}"
    language: cpp
  - title: Checking Auction Status
    code: "AuctionManager* auctionMgr = LazyManagerFactory::GetAuctionManager();\n\
      if (auctionMgr && auctionMgr->IsAuctionHouseEnabled())\n{\n    uint32 activeAuctions\
      \ = auctionMgr->GetActiveAuctionCount();\n    // Process active auctions\n}"
    language: cpp
  notes: This method follows the lazy initialization pattern, meaning the AuctionManager
    instance is created only when first requested. The returned pointer should be
    used with caution as it's a singleton and may be subject to changes in server
    state during runtime. This method is thread-safe for concurrent access.
  warnings: Do not assume the returned pointer will remain valid indefinitely; it
    may become invalid during server shutdown or reset operations. Avoid storing references
    to the AuctionManager instance long-term as it may be destroyed and recreated
    during server maintenance.
  related:
  - GetInstance
  - Initialize
  - Shutdown
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T11:35:34.249412'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
