api:
  class: TotemAI
  method: UpdateAI
  signature: void TotemAI::UpdateAI(int diff)
documentation:
  brief: Updates the totem's AI behavior based on elapsed time and game state conditions.
  description: The UpdateAI method is responsible for managing the artificial intelligence
    behavior of totems within the TrinityCore framework. This method is called periodically
    by the game engine to allow totems to perform actions such as targeting enemies,
    casting spells, or updating their status. It processes the time difference (diff)
    passed from the game loop to determine how much time has elapsed since the last
    update, which is used for timing-based behaviors like spell cooldowns or periodic
    effects. The method ensures that totems respond appropriately to changes in their
    environment and maintain proper gameplay mechanics such as maintaining aggro,
    performing attacks, or handling destruction events.
  parameters:
  - name: diff
    description: The time difference in milliseconds since the last update call. This
      value is used to calculate timing-based behaviors like spell cooldowns, periodic
      effects, and AI decision-making intervals.
  returns: null
  examples:
  - title: Basic AI Update Call
    code: "void SomeTotem::Update()\n{\n    // Called from the main game loop with\
      \ time difference\n    m_totemAI->UpdateAI(diff);\n}"
    language: cpp
  - title: Custom Totem AI Logic Integration
    code: "void CustomTotemAI::UpdateAI(int diff)\n{\n    // Base class update first\n\
      \    TotemAI::UpdateAI(diff);\n    \n    // Custom logic for specific totem\
      \ behavior\n    if (m_spellCooldown <= 0)\n    {\n        CastSpell();\n   \
      \     m_spellCooldown = 5000; // 5 second cooldown\n    }\n    else\n    {\n\
      \        m_spellCooldown -= diff;\n    }\n}"
    language: cpp
  notes: This method is typically invoked from the main game loop and should not be
    called directly by other systems unless specifically required. The 'diff' parameter
    represents real-world time elapsed, so it's important to handle variable frame
    rates properly in AI calculations. The method may perform multiple checks including
    target validation, spell casting, and destruction handling.
  warnings: Do not modify the diff parameter as it represents actual game time. Incorrect
    handling of timing can lead to inconsistent behavior such as spells being cast
    too frequently or too infrequently. Avoid performing heavy computations within
    this method as it's called frequently during gameplay.
  related:
  - TotemAI::InitTotem
  - TotemAI::EnterCombat
  - TotemAI::DoCastSpell
  - TotemAI::IsAlive
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T20:26:21.474508'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
