api:
  class: ScriptMgr
  method: OnPlayerTextEmote
  signature: void ScriptMgr::OnPlayerTextEmote(Player * player, uint32 textEmote,
    uint32 emoteNum, int guid)
documentation:
  brief: Invoked when a player sends a text emote to the world.
  description: The OnPlayerTextEmote method is a hook in TrinityCore's scripting system
    that gets called whenever a player uses a text emote, such as 'lol' or 'wave',
    in the game world. This method allows custom scripts to intercept and modify the
    behavior of text emotes before they are processed. It provides access to the player
    who initiated the emote, the type of emote being sent, and additional metadata
    about the emote. The method is part of the general scripting interface and can
    be used for logging, modifying emote effects, or implementing custom game mechanics
    related to player communication.
  parameters:
  - name: player
    description: Pointer to the Player object who initiated the text emote. This parameter
      represents the player sending the emote and provides access to all player-related
      data and functions.
  - name: textEmote
    description: The ID of the text emote being sent. This value corresponds to predefined
      emote types in the game's database, such as 1 for 'wave', 2 for 'hello', etc.
  - name: emoteNum
    description: The number associated with the emote, which may represent a specific
      variant or counter of the emote. This value can be used to track how many times
      an emote has been performed or to distinguish between different versions of
      the same emote.
  - name: guid
    description: The global unique identifier (GUID) of the player who sent the emote.
      This is a unique numeric ID assigned by the server to identify the specific
      player instance in the game world.
  returns: null
  examples:
  - title: Basic Logging of Text Emotes
    code: "void OnPlayerTextEmote(Player* player, uint32 textEmote, uint32 emoteNum,\
      \ int guid)\n{\n    sLog->outString(\"Player %s sent text emote %u\", player->GetName().c_str(),\
      \ textEmote);\n}"
    language: cpp
  - title: Preventing Specific Emotes
    code: "void OnPlayerTextEmote(Player* player, uint32 textEmote, uint32 emoteNum,\
      \ int guid)\n{\n    if (textEmote == 1) // wave emote\n    {\n        player->SendNotification(\"\
      You cannot wave right now!\");\n        // Prevent further processing by not\
      \ calling base handler\n    }\n}"
    language: cpp
  notes: This method is called during the text emote handling process, so any modifications
    to the player's state or emote data should be done carefully. The method is part
    of TrinityCore's hook system and must be implemented in a script that is properly
    registered with the ScriptMgr.
  warnings: Modifying the behavior of this method can affect gameplay mechanics related
    to player communication. Be cautious when preventing or altering emotes, as it
    may impact user experience or game balance. Avoid performing heavy operations
    in this method as it may block the main thread.
  related:
  - OnPlayerEmote
  - OnPlayerTextEmoteComplete
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T22:11:33.809743'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
