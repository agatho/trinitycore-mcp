api:
  class: InterruptRotationManager
  method: GetNextInRotation
  signature: int InterruptRotationManager::GetNextInRotation() const
documentation:
  brief: Retrieves the next interrupt ability index from the rotation sequence for
    use in combat.
  description: The GetNextInRotation method returns the index of the next interrupt
    ability that should be executed according to the defined rotation order. This
    method is typically used within AI systems or spell casting logic to determine
    which interrupt spell or ability should be cast next in a sequence. The returned
    value represents an internal index into an array or list of interrupt abilities,
    and it may cycle back to zero when reaching the end of the rotation. The method
    does not modify any state and is purely a getter function that provides sequential
    access to interrupt abilities.
  parameters: []
  returns: An integer representing the index of the next interrupt ability in the
    rotation sequence. Returns 0 if no valid interrupt abilities exist or if the rotation
    has been exhausted. The value corresponds to an array index, so valid return values
    are typically >= 0 and < total number of interrupt abilities.
  examples:
  - title: Basic Usage in AI Logic
    code: "class MyAI\n{\npublic:\n    void ExecuteInterrupt()\n    {\n        int\
      \ nextIndex = m_interruptRotationManager.GetNextInRotation();\n        if (nextIndex\
      \ >= 0)\n        {\n            // Cast the interrupt ability at index nextIndex\n\
      \            CastInterruptAbility(nextIndex);\n        }\n    }\n};"
    language: cpp
  - title: Looping Through Rotation Sequence
    code: "class InterruptHandler\n{\npublic:\n    void ProcessRotation()\n    {\n\
      \        for (int i = 0; i < m_totalInterrupts; ++i)\n        {\n          \
      \  int nextIndex = m_interruptRotationManager.GetNextInRotation();\n       \
      \     if (nextIndex >= 0)\n            {\n                ExecuteInterrupt(nextIndex);\n\
      \            }\n        }\n    }\n};"
    language: cpp
  notes: This method is designed to be thread-safe and should not cause race conditions
    in multi-threaded environments. It's recommended that the rotation manager maintains
    internal state tracking to ensure sequential access. The return value does not
    indicate whether the interrupt ability at that index is currently available or
    ready to cast; it only provides the next logical position in the sequence.
  warnings: Be cautious when using this method without checking for valid indices,
    as negative values may indicate an error condition or empty rotation. Ensure that
    the underlying interrupt rotation data structure is properly initialized before
    calling this method to avoid undefined behavior.
  related:
  - GetNextInRotation
  - ResetRotation
  - GetCurrentInterruptIndex
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:21:39.139745'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
