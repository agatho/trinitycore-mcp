api:
  class: Creature
  method: GetAggroRange
  signature: float Creature::GetAggroRange(const int * target) const
documentation:
  brief: Returns the aggro range of the creature, determining the distance at which
    it will detect and engage targets.
  description: The GetAggroRange method retrieves the maximum distance at which a
    creature will automatically detect and begin attacking a target. This value is
    crucial for understanding how creatures react to player proximity and determines
    the boundaries of their aggressive behavior. The method returns a float value
    representing the distance in yards, with default values typically ranging from
    5 to 40 yards depending on the creature's type and AI settings. This functionality
    is essential for game mechanics involving NPC behavior, combat triggers, and AI
    decision-making processes.
  parameters:
  - name: target
    description: Pointer to the target object (player or creature) that the aggro
      range is being calculated for. The parameter is optional and can be NULL, in
      which case the method returns default aggro range values.
  returns: Returns a float value representing the distance in yards at which the creature
    will begin to aggro targets. Values typically range from 5 to 40 yards depending
    on creature type and AI settings, with 0 indicating no aggro behavior or invalid
    input.
  examples:
  - title: Basic usage example
    code: 'float range = creature->GetAggroRange(NULL);

      // Returns the default aggro range for the creature'
    language: cpp
  - title: Advanced usage example
    code: "Player* target = player->GetMap()->GetPlayers().begin()->second;\nfloat\
      \ range = creature->GetAggroRange(target);\n// Calculates aggro range based\
      \ on specific target\nif (range > 0)\n{\n    // Use range for combat calculations\n\
      }"
    language: cpp
  notes: 'Implementation details: This method is typically used in conjunction with
    AI behavior and combat systems. The value returned may vary based on creature''s
    AI type, difficulty settings, and game mechanics. Performance considerations include
    checking the target''s distance and movement to determine aggro range accurately.'
  warnings: The method may return zero or negative values if the target is invalid
    or if the creature has no aggro behavior. Care must be taken when using this method
    in combat calculations as incorrect values can lead to unexpected behavior or
    game mechanics issues.
  related:
  - GetAggroRange
  - GetDistance
  - GetThreat
  - GetAI
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T19:24:08.117651'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
