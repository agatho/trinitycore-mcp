api:
  class: SmartScript
  method: RecalcTimer
  signature: void SmartScript::RecalcTimer(SmartScriptHolder & e, uint32 min, uint32
    max)
documentation:
  brief: Recalculates the timer for a SmartScript event based on provided minimum
    and maximum values.
  description: The RecalcTimer method updates the internal timer of a SmartScript
    event holder by recalculating its next execution time using the specified minimum
    and maximum delay values. This method is typically used during AI script execution
    to adjust timing between scripted actions, allowing for dynamic behavior such
    as random delays or conditional timing. The recalculation ensures that the next
    trigger of the event will occur within the defined range, making it useful for
    creating more natural and varied AI behaviors in World of Warcraft NPCs. The method
    modifies the event's internal timer state directly without returning any value.
  parameters:
  - name: e
    description: Reference to a SmartScriptHolder object that contains the event data
      and current timer state to be recalculated.
  - name: min
    description: Minimum delay in milliseconds for the next timer trigger. Must be
      a non-negative integer value.
  - name: max
    description: Maximum delay in milliseconds for the next timer trigger. Must be
      a non-negative integer value, and should be greater than or equal to min.
  returns: null
  examples:
  - title: Basic Timer Recalculation
    code: 'SmartScriptHolder event;

      uint32 minDelay = 1000;

      uint32 maxDelay = 3000;

      smartScript.RecalcTimer(event, minDelay, maxDelay);'
    language: cpp
  - title: Dynamic Delay Based on NPC State
    code: "SmartScriptHolder event;\nuint32 baseMin = 500;\nuint32 baseMax = 1500;\n\
      if (npc->GetHealthPct() < 30)\n{\n    baseMin *= 2; // Double the delay when\
      \ low health\n    baseMax *= 2;\n}\nsmartScript.RecalcTimer(event, baseMin,\
      \ baseMax);"
    language: cpp
  notes: This method directly modifies the internal timer state of the provided SmartScriptHolder.
    It should only be called when the event is in an active or scheduled state to
    ensure proper behavior. The min and max values are used to generate a random delay
    within that range for the next execution.
  warnings: Ensure that max is not less than min, as this could lead to undefined
    behavior. Also, calling RecalcTimer on an inactive or uninitialized event holder
    may cause unexpected results or crashes.
  related:
  - SmartScript::StartTimer
  - SmartScript::GetTimer
  - SmartScript::ResetTimer
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T21:21:09.344274'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
