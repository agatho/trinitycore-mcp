api:
  class: Vehicle
  method: operator=
  signature: Vehicle & Vehicle::operator=(Vehicle && right)
documentation:
  brief: Moves a vehicle object to another vehicle object using move assignment.
  description: The operator= method performs a move assignment of a Vehicle object,
    transferring ownership of resources from the right-hand side (rvalue) Vehicle
    object to the left-hand side (lvalue) Vehicle object. This operation is typically
    used in scenarios where temporary or newly created Vehicle objects need to be
    efficiently transferred into existing Vehicle instances without unnecessary copying.
    The method ensures that the source Vehicle is left in a valid but unspecified
    state after the move. In the context of TrinityCore's World of Warcraft emulation,
    this would commonly be used when managing vehicle entities during creature spawning,
    despawning, or when vehicles are reassigned to different passengers.
  parameters: []
  returns: A reference to the left-hand side Vehicle object (the destination) after
    the move assignment has been completed. This allows for chaining of assignment
    operations.
  examples:
  - title: Basic Move Assignment
    code: 'Vehicle vehicle1;

      Vehicle vehicle2 = std::move(vehicle1); // Uses operator=

      // vehicle1 is now in a valid but unspecified state

      // vehicle2 contains the moved resources'
    language: cpp
  - title: Move Assignment in Container
    code: 'std::vector<Vehicle> vehicles;

      vehicles.emplace_back(); // Creates a Vehicle object

      Vehicle newVehicle = std::move(vehicles.back()); // Move-assigns to newVehicle

      vehicles.pop_back(); // Destroys the moved-from object'
    language: cpp
  notes: This method is part of the C++ move semantics standard and should be implemented
    as a move assignment operator. It's important to ensure that the Vehicle class
    properly handles resource cleanup in the moved-from state, typically by setting
    internal pointers to null or invalid states. The move assignment operation is
    generally more efficient than copy assignment since it avoids deep copying of
    data.
  warnings: Be cautious when using move assignment on objects that are still referenced
    elsewhere; after a move, the source object's state becomes undefined and should
    not be used until reassigned. Also, ensure that any resources managed by the Vehicle
    class (such as memory allocations or references to game objects) are properly
    transferred and cleaned up.
  related:
  - Vehicle::Vehicle(Vehicle &&)
  - Vehicle::operator=
  - Vehicle::~Vehicle
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T17:31:50.532921'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
