api:
  class: LFGMgr
  method: GetRandomDungeonReward
  signature: const LfgReward * LFGMgr::GetRandomDungeonReward(uint32 dungeon, uint8
    level)
documentation:
  brief: Retrieves the reward data for a random dungeon based on the specified dungeon
    ID and player level.
  description: The GetRandomDungeonReward method fetches the LfgReward structure associated
    with a specific random dungeon and player level. This function is used within
    the LFG (Looking For Group) system to determine what rewards a player should receive
    upon completing a random dungeon. The method takes into account both the dungeon
    identifier and the player's level to return the appropriate reward data, which
    typically includes experience points, gold, and potential item rewards. It serves
    as a lookup mechanism for reward distribution in the LFG subsystem.
  parameters:
  - name: dungeon
    description: The unique identifier of the random dungeon for which to retrieve
      the reward data. This value corresponds to the dungeon ID used internally by
      TrinityCore's LFG system.
  - name: level
    description: The player's level, used to determine the appropriate reward tier.
      Rewards may vary based on player level to ensure proper scaling.
  returns: A pointer to a const LfgReward structure containing the reward information
    for the specified dungeon and level. Returns nullptr if no matching reward data
    is found for the given parameters.
  examples:
  - title: Retrieve Reward Data for a Random Dungeon
    code: "const LfgReward* reward = sLFGMgr->GetRandomDungeonReward(1234, 80);\n\
      if (reward)\n{\n    // Process the reward data\n    printf(\"Reward ID: %u,\
      \ XP: %u\\n\", reward->m_RewardID, reward->m_XPReward);\n}"
    language: cpp
  - title: Handle Null Return When Reward Not Found
    code: "const LfgReward* reward = sLFGMgr->GetRandomDungeonReward(9999, 70);\n\
      if (!reward)\n{\n    // Fallback or error handling\n    printf(\"No reward data\
      \ found for dungeon ID 9999\\n\");\n}\nelse\n{\n    // Use the reward data\n\
      }"
    language: cpp
  notes: This method is part of the LFG system and relies on internal reward tables
    that must be properly configured in the database. The dungeon ID should correspond
    to valid random dungeon entries in the LFG dungeon table. Performance-wise, this
    function performs a lookup operation which is generally fast but depends on the
    size of the reward data structures.
  warnings: Ensure that the dungeon ID and level parameters are valid before calling
    this method, as invalid inputs may result in nullptr returns. Be aware that reward
    data might not exist for all combinations of dungeon IDs and levels, particularly
    for newer or custom dungeons.
  related:
  - LFGMgr::GetDungeonReward
  - LFGMgr::GetLfgReward
  - LFGMgr::IsRandomDungeon
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T11:45:31.040847'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
