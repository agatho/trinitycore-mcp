api:
  class: ProfessionManager
  method: HasMaterialsForRecipe
  signature: bool ProfessionManager::HasMaterialsForRecipe(int * player, const RecipeInfo
    & recipe) const
documentation:
  brief: Checks if a player has all required materials to craft a specific recipe
  description: The HasMaterialsForRecipe method determines whether a given player
    possesses all necessary items and resources required to craft a specified recipe.
    This method is typically used during recipe validation before attempting to process
    a crafting attempt. It evaluates the player's inventory, bank, and any other accessible
    containers for the presence of required materials and their quantities. The method
    considers both item IDs and required amounts as defined in the RecipeInfo structure.
    If any material is missing or insufficient, the method returns false, preventing
    the crafting operation from proceeding.
  parameters:
  - name: player
    description: Pointer to the player object for whom materials are being checked.
      This parameter represents the player instance that will be evaluated against
      the recipe requirements.
  - name: recipe
    description: Reference to a RecipeInfo structure containing details about the
      recipe, including required materials and their quantities. This structure defines
      what items must be present in the player's inventory for crafting to be possible.
  returns: Returns true if all required materials are present in sufficient quantities
    for the player to craft the recipe; otherwise returns false.
  examples:
  - title: Basic Usage
    code: "Player* player = ...;\nRecipeInfo recipe = ...;\nbool canCraft = sProfessionManager->HasMaterialsForRecipe(player,\
      \ recipe);\nif (canCraft)\n{\n    // Proceed with crafting\n}"
    language: cpp
  - title: Integration with Crafting System
    code: "void HandleCraftingCommand(Player* player, uint32 recipeId)\n{\n    if\
      \ (RecipeInfo* recipe = sSpellMgr->GetRecipeInfo(recipeId))\n    {\n       \
      \ if (sProfessionManager->HasMaterialsForRecipe(player, *recipe))\n        {\n\
      \            // Start crafting process\n            player->CastSpell(player,\
      \ recipe->CraftSpellId, true);\n        }\n        else\n        {\n       \
      \     player->SendNotification(\"You do not have all required materials.\");\n\
      \        }\n    }\n}"
    language: cpp
  notes: This method performs inventory checks across multiple container types including
    backpack, bank, and any other accessible bags. It does not modify the player's
    inventory or trigger any crafting actions; it only evaluates current state. The
    method may be called frequently during crafting operations, so performance optimization
    is important for large inventories.
  warnings: This method assumes that the RecipeInfo structure contains valid material
    requirements. If the recipe has invalid or missing material data, results may
    be unpredictable. Additionally, this check does not account for temporary modifiers
    or buffs that might affect material availability in some game mechanics.
  related:
  - CanPlayerCraftRecipe
  - GetRequiredMaterialsForRecipe
  - RemoveCraftingMaterials
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:59:14.684642'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
