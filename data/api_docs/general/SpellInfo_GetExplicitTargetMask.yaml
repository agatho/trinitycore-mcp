api:
  class: SpellInfo
  method: GetExplicitTargetMask
  signature: uint32 SpellInfo::GetExplicitTargetMask() const
documentation:
  brief: Returns the explicit target mask for a spell, determining which targets are
    explicitly specified in the spell's configuration.
  description: This method retrieves the explicit target mask associated with a SpellInfo
    object, which defines the specific target types that are explicitly set for the
    spell. The target mask is used to determine which targets are allowed or required
    for the spell's effects, such as targeting a specific type of unit or area. This
    information is crucial for spell validation and target selection logic within
    the TrinityCore framework, particularly when determining whether a spell can be
    cast on certain target types based on its configuration. The method does not require
    any parameters and returns a uint32 value representing the mask.
  parameters: []
  returns: Returns a uint32 value representing the explicit target mask for the spell.
    This mask indicates which target types are explicitly specified in the spell's
    configuration, such as target type 1 (self), target type 2 (enemy), target type
    3 (friend), etc. The value can be used to determine valid targets for spell casting
    and validation.
  examples:
  - title: Basic usage example
    code: "SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(12345);\nuint32 targetMask\
      \ = spellInfo->GetExplicitTargetMask();\nif (targetMask & TARGET_FLAG_UNIT_ENEMY)\n\
      {\n    // Spell can target enemy units\n}"
    language: cpp
  notes: This method is typically used in conjunction with other spell-related functions
    to validate target selection and ensure that spells are cast correctly according
    to their configuration. It should be noted that the returned value represents
    a bitmask, where each bit corresponds to a specific target type. Performance considerations
    are minimal as this is a simple getter function.
  warnings: The method does not perform any validation or checks on the returned mask
    value; developers should ensure proper handling of the bitmask when using it in
    spell validation logic. Incorrect handling of target masks can lead to invalid
    spell targeting behavior.
  related:
  - GetSpellInfo
  - GetTargetMask
  - IsSpellValid
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T14:08:30.019119'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
