api:
  class: LineOfSightManager
  method: IsWithinViewingAngle
  signature: bool LineOfSightManager::IsWithinViewingAngle(Unit * target, float maxAngle)
documentation:
  brief: Determines whether a target unit is within the viewing angle of the LineOfSightManager's
    owner.
  description: The IsWithinViewingAngle method evaluates if a specified target unit
    lies within the angular field of view of the LineOfSightManager's owner, typically
    used to determine if an NPC or player can visually perceive another unit. This
    check is crucial for AI behavior, combat targeting, and visibility mechanics in
    World of Warcraft. The method performs a directional comparison between the owner's
    facing direction and the vector pointing toward the target, using a maximum allowed
    angle to define the viewing cone. It returns true if the target is within this
    angular range, false otherwise. This function is commonly used in pathfinding,
    threat management, and NPC awareness systems.
  parameters:
  - name: target
    description: Pointer to the Unit object that is being checked for visibility.
      Must not be null.
  - name: maxAngle
    description: The maximum angle in radians that defines the viewing cone. Values
      should typically be between 0 and M_PI (3.14159) for a full hemisphere, or smaller
      for more restrictive viewing angles.
  returns: Returns true if the target unit is within the specified angular viewing
    range of the LineOfSightManager's owner; otherwise returns false.
  examples:
  - title: Basic Usage in AI Decision Making
    code: "if (lineOfSightManager.IsWithinViewingAngle(targetUnit, M_PI / 2)) {\n\
      \    // Target is within 90-degree viewing angle\n    DoAttack();\n}"
    language: cpp
  - title: Checking for Field of View in Combat
    code: "float viewAngle = M_PI / 4; // 45 degrees\nif (lineOfSightManager.IsWithinViewingAngle(enemy,\
      \ viewAngle)) {\n    // Enemy is within 45-degree field of view\n    if (meleeRange\
      \ <= GetDistanceTo(enemy)) {\n        MoveTowards(enemy);\n    }\n}"
    language: cpp
  notes: This method relies on the LineOfSightManager's internal state and the facing
    direction of its owner. The maxAngle parameter should be provided in radians,
    not degrees. The method does not account for obstacles or line-of-sight blocking;
    it only evaluates angular relationships.
  warnings: Ensure that the target pointer is valid before calling this method to
    avoid undefined behavior. Be cautious when using large angle values as they may
    include units that are actually behind the owner, depending on implementation
    details of the LineOfSightManager.
  related:
  - GetViewingAngle
  - IsInFront
  - IsInBack
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T11:00:23.445780'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
