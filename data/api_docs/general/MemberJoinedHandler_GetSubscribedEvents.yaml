api:
  class: MemberJoinedHandler
  method: GetSubscribedEvents
  signature: int MemberJoinedHandler::GetSubscribedEvents() const
documentation:
  brief: Returns the bitmask of events this handler is subscribed to
  description: The GetSubscribedEvents method returns an integer bitmask representing
    the events that this MemberJoinedHandler instance is registered to handle. In
    TrinityCore's event system, handlers subscribe to specific events by returning
    a bitmask of event types they wish to process. This method is typically called
    during event registration or dispatch to determine which handlers should be notified
    when a particular event occurs. The returned value is used internally by the core
    framework to route events to appropriate listeners.
  parameters: []
  returns: An integer bitmask where each bit represents a specific event type that
    this handler subscribes to. The exact bit values are defined by the TrinityCore
    event system constants, typically found in event definitions or handler registration
    interfaces.
  examples:
  - title: Basic Usage
    code: "class MyEventHandler : public MemberJoinedHandler {\npublic:\n    int GetSubscribedEvents()\
      \ const override {\n        return EVENT_MEMBER_JOINED | EVENT_GUILD_UPDATE;\n\
      \    }\n};"
    language: cpp
  - title: Event Subscription Check
    code: "MemberJoinedHandler* handler = new MyEventHandler();\nint subscribedEvents\
      \ = handler->GetSubscribedEvents();\nif (subscribedEvents & EVENT_MEMBER_JOINED)\
      \ {\n    // This handler will receive member joined events\n}"
    language: cpp
  notes: This method is expected to be overridden by derived classes to return their
    specific event subscriptions. The bitmask values should align with the core event
    system's defined constants. This method is called frequently during event processing,
    so implementations should be lightweight and efficient.
  warnings: Ensure that all bits set in the returned mask correspond to valid event
    types defined in the TrinityCore framework. Incorrect bitmasks may result in handlers
    not receiving events or unexpected behavior during event dispatch.
  related:
  - HandleEvent
  - RegisterHandler
  - UnregisterHandler
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:32:40.480681'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
