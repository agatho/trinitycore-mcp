api:
  class: SpellMgr
  method: IsSpellValid
  signature: bool SpellMgr::IsSpellValid(const SpellInfo * spellInfo, Player * player,
    bool msg)
documentation:
  brief: Validates whether a spell is correctly defined and usable within the TrinityCore
    framework.
  description: The IsSpellValid method checks if a given SpellInfo structure is properly
    initialized and conforms to the expected spell definitions in TrinityCore. It
    verifies various internal consistency checks such as spell effects, targets, and
    other spell attributes. When called with a player context, it also ensures that
    the spell can be used by that specific player according to game rules and restrictions.
    This method is typically used during spell loading, validation, or runtime usage
    checks to prevent invalid spells from being executed.
  parameters:
  - name: spellInfo
    description: Pointer to the SpellInfo structure representing the spell to validate.
      Must not be null.
  - name: player
    description: Optional pointer to the Player object for context-based validation.
      Can be null if only general spell validation is required.
  - name: msg
    description: Boolean flag indicating whether validation errors should be logged
      to the console or chat system. If true, error messages will be displayed.
  returns: Returns true if the spell is valid and can be used; false otherwise. A
    return value of false indicates that the spell has invalid attributes or cannot
    be used under current conditions.
  examples:
  - title: Basic Spell Validation
    code: "SpellInfo* spell = sSpellMgr->GetSpellInfo(12345);\nif (spell && sSpellMgr->IsSpellValid(spell,\
      \ nullptr, true)) {\n    // Spell is valid\n} else {\n    // Spell is invalid\
      \ or could not be validated\n}"
    language: cpp
  - title: Player-Specific Spell Validation
    code: "Player* player = ...;\nSpellInfo* spell = sSpellMgr->GetSpellInfo(12345);\n\
      if (spell && sSpellMgr->IsSpellValid(spell, player, false)) {\n    // Spell\
      \ is valid for this player\n} else {\n    // Spell is invalid or not usable\
      \ by this player\n}"
    language: cpp
  notes: This method performs multiple checks including spell effect validation, target
    type verification, and attribute consistency. It's commonly used during server
    startup to validate loaded spells, and also during runtime when a spell is cast
    to ensure it hasn't been corrupted or misconfigured.
  warnings: Passing null for spellInfo will likely result in undefined behavior or
    crashes. Always verify that the SpellInfo pointer is valid before calling this
    method. The msg parameter controls whether errors are logged, so setting it to
    true may flood logs with validation messages during development.
  related:
  - GetSpellInfo
  - IsSpellKnown
  - CanSpellBeCast
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:07:33.944115'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
