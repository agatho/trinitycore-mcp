api:
  class: BotLifecycleManager
  method: GetBotLifecycle
  signature: std::shared_ptr<BotLifecycle> BotLifecycleManager::GetBotLifecycle(int
    botGuid) const
documentation:
  brief: Retrieves a shared pointer to the bot lifecycle instance associated with
    the specified bot GUID.
  description: The GetBotLifecycle method retrieves a std::shared_ptr to a BotLifecycle
    object corresponding to the provided bot GUID. This method is used within the
    TrinityCore bot system to access and manage the lifecycle state of individual
    bots. The returned shared pointer allows for safe management of the bot's lifecycle
    resources, ensuring proper reference counting and automatic cleanup when no longer
    needed. The method assumes that a valid bot with the specified GUID exists in
    the system's bot registry. If the bot GUID does not correspond to an existing
    bot, the behavior is undefined and may result in a null pointer or exception depending
    on implementation details.
  parameters:
  - name: botGuid
    description: The unique identifier (GUID) of the bot for which to retrieve the
      lifecycle instance. This should be a valid bot GUID that has been registered
      with the system.
  returns: A std::shared_ptr to the BotLifecycle object associated with the specified
    bot GUID. Returns a valid shared pointer if the bot exists, otherwise behavior
    is undefined and may result in null pointer dereference or exception.
  examples:
  - title: Basic Usage
    code: "int botGuid = 12345;\nstd::shared_ptr<BotLifecycle> lifecycle = botLifecycleManager->GetBotLifecycle(botGuid);\n\
      if (lifecycle) {\n    // Use the lifecycle object\n    lifecycle->Update();\n\
      }"
    language: cpp
  - title: Error Handling
    code: "int botGuid = 99999;\nstd::shared_ptr<BotLifecycle> lifecycle = botLifecycleManager->GetBotLifecycle(botGuid);\n\
      if (!lifecycle) {\n    // Handle case where bot does not exist\n    sLog->outError(\"\
      Failed to retrieve lifecycle for bot %d\", botGuid);\n} else {\n    // Proceed\
      \ with using the lifecycle\n    lifecycle->Process();\n}"
    language: cpp
  notes: The method returns a shared pointer, so the caller should be aware of reference
    counting implications. The underlying BotLifecycle object is managed by the system
    and should not be manually deleted. This method is typically used internally by
    bot management systems to access per-bot state information.
  warnings: Calling this method with an invalid or unregistered bot GUID may lead
    to undefined behavior, including potential crashes or null pointer exceptions.
    Always ensure that the bot GUID corresponds to a valid registered bot before calling
    this method.
  related:
  - RegisterBot
  - UnregisterBot
  - GetAllBotLifecycles
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:13:39.162010'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
