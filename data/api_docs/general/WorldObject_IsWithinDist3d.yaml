api:
  class: WorldObject
  method: IsWithinDist3d
  signature: bool WorldObject::IsWithinDist3d(const Position * pos, float dist) const
documentation:
  brief: Determines whether a WorldObject is within a specified 3D distance from a
    given position.
  description: The IsWithinDist3d method checks if the calling WorldObject is within
    a specified 3D distance (Euclidean distance) from another Position object. This
    method is commonly used in game mechanics to determine proximity between entities
    such as players, creatures, or game objects for interactions like spell targeting,
    quest triggers, or AI behavior. The calculation considers the full 3D space including
    x, y, and z coordinates. It performs a fast distance check without requiring additional
    computations like square root operations, making it efficient for frequent use
    in performance-critical code paths.
  parameters:
  - name: pos
    description: A pointer to a Position object representing the target location in
      3D space (x, y, z coordinates). Must not be null.
  - name: dist
    description: The maximum allowed 3D distance (in game units) from the WorldObject's
      current position to the target Position. Must be a positive value.
  returns: Returns true if the WorldObject is within the specified 3D distance of
    the provided Position; otherwise returns false.
  examples:
  - title: Basic usage for checking proximity to a player
    code: "if (creature->IsWithinDist3d(&playerPos, 10.0f)) {\n    // Creature is\
      \ within 10 units of the player\n    creature->Say(\"Hello, player!\", LANG_UNIVERSAL);\n\
      }"
    language: cpp
  - title: Using with spell targeting logic
    code: "if (caster->IsWithinDist3d(&targetPos, spellInfo->GetMaxRange())) {\n \
      \   // Target is within spell range\n    caster->CastSpell(target, spellId,\
      \ true);\n} else {\n    // Target out of range\n    caster->SendSpellFailed(client,\
      \ spellId, SPELL_FAILED_OUT_OF_RANGE);\n}"
    language: cpp
  notes: This method uses an optimized distance calculation that avoids expensive
    square root operations by comparing squared distances. It's suitable for frequent
    checks in game loops and AI routines where performance is critical. The method
    does not account for collision detection or line-of-sight, only straight-line
    Euclidean distance.
  warnings: Ensure the provided Position pointer is valid and not null to avoid undefined
    behavior. Be cautious when using large distance values as they may impact performance
    if used in tight loops without proper optimization.
  related:
  - IsWithinDist2d
  - IsWithinDist
  - GetDistance
  - GetPosition
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:14:15.572904'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
