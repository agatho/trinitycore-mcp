api:
  class: BehaviorManager
  method: Update
  signature: void BehaviorManager::Update(uint32 diff)
documentation:
  brief: Updates the behavior manager's internal state and processes AI behaviors
    for all managed entities.
  description: The BehaviorManager::Update method is responsible for advancing the
    AI state of all behaviors managed by this behavior manager instance. It typically
    runs on every game tick and handles time-based updates, decision making, and execution
    of AI actions. This method processes the delta time (diff) provided to ensure
    behaviors are updated consistently with the game's frame rate. The update loop
    may include pathfinding calculations, target selection, spell casting logic, or
    other behavior-specific operations depending on the type of AI being managed.
    It is a core part of the TrinityCore's AI system and should be called regularly
    by the game loop.
  parameters:
  - name: diff
    description: The time elapsed in milliseconds since the last update call. This
      value is used to determine how much time has passed for behavior calculations,
      such as movement interpolation, cooldowns, or timed actions.
  returns: null
  examples:
  - title: Basic Update Call
    code: "void GameLoop()\n{\n    uint32 diff = sWorld->GetLastTickTime();\n    behaviorManager->Update(diff);\n\
      }"
    language: cpp
  - title: Update with Custom Timing
    code: "class MyAIManager\n{\npublic:\n    void Update(uint32 diff)\n    {\n  \
      \      // Perform custom AI logic\n        behaviorManager->Update(diff);\n\
      \        // Additional per-frame logic\n    }\n};"
    language: cpp
  notes: This method is typically called from the main game loop or a dedicated AI
    thread. It should not be called directly from within other AI update routines
    to avoid potential recursion or race conditions. The diff parameter must represent
    actual elapsed time and should not be zero or negative.
  warnings: Avoid calling this method from multiple threads simultaneously without
    proper synchronization. Calling Update with incorrect diff values (e.g., zero
    or negative) may cause unexpected behavior in time-sensitive AI actions like cooldowns
    or movement timing.
  related:
  - BehaviorManager::AddBehavior
  - BehaviorManager::RemoveBehavior
  - BehaviorManager::GetBehaviors
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T01:59:55.641614'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
