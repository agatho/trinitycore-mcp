api:
  class: Player
  method: HandleBaseModFlatValue
  signature: void Player::HandleBaseModFlatValue(int modGroup, float amount, bool
    apply)
documentation:
  brief: Applies or removes a flat modifier value to/from a base attribute of the
    player.
  description: This method handles the application or removal of flat modifiers to
    base attributes such as health, mana, or other stats. It is used internally by
    the TrinityCore system to manage various game mechanics including stat modifications,
    buffs, and debuffs. The method operates on specific modifier groups that define
    which attribute is affected, and can either add or remove a value depending on
    the apply parameter. This functionality is crucial for maintaining proper gameplay
    balance and ensuring accurate stat calculations during gameplay events.
  parameters:
  - name: modGroup
    description: The modifier group identifier that specifies which base attribute
      to modify. Valid values include various stat types like health, mana, strength,
      agility, etc., depending on the implementation.
  - name: amount
    description: The flat value amount to be applied or removed from the specified
      base attribute. This can be positive or negative depending on whether the modifier
      is being added or removed.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the modifier from the base attribute.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Player* player = new Player();

      player->HandleBaseModFlatValue(1, 50.0f, true); // Apply 50 flat modifier to
      health

      player->HandleBaseModFlatValue(1, 50.0f, false); // Remove 50 flat modifier
      from health'
    language: cpp
  notes: This method is typically used in conjunction with other stat-related methods
    and may be called during various gameplay events such as buff/debuff application
    or removal. It's important to note that this method does not directly update the
    player's actual stats but rather modifies the base values which are then recalculated
    by the system.
  warnings: Improper use of this method can lead to incorrect stat calculations and
    may cause game balance issues. The modGroup parameter must be properly defined
    to avoid unintended side effects, and the amount should be carefully considered
    to ensure proper gameplay mechanics.
  related:
  - HandleBaseModPercentValue
  - HandleBaseModTotalValue
  - GetUInt32Value
  - SetUInt32Value
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T00:46:24.573920'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
