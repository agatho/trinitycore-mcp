api:
  class: ScriptMgr
  method: GetAreaTriggerAI
  signature: AreaTriggerAI * ScriptMgr::GetAreaTriggerAI(AreaTrigger * areaTrigger)
documentation:
  brief: Retrieves the AI instance associated with a specific area trigger.
  description: The GetAreaTriggerAI method is used to obtain the AreaTriggerAI instance
    that is linked to a given AreaTrigger object. This allows developers to access
    and manipulate the behavior and logic of area triggers within the TrinityCore
    framework. The method serves as a lookup mechanism to retrieve AI implementations
    that have been registered for specific area triggers, enabling custom scripting
    and game mechanics. It's commonly used in custom scripts or modules where developers
    need to interact with or modify the behavior of area triggers at runtime.
  parameters:
  - name: areaTrigger
    description: A pointer to the AreaTrigger object for which to retrieve the associated
      AI instance. This parameter must be a valid, non-null pointer to an existing
      AreaTrigger.
  returns: Returns a pointer to the AreaTriggerAI instance associated with the provided
    area trigger. If no AI is registered or the area trigger is invalid, this method
    may return nullptr.
  examples:
  - title: Basic Usage Example
    code: "AreaTriggerAI* ai = ScriptMgr::GetAreaTriggerAI(areaTrigger);\nif (ai)\n\
      {\n    // Use the AI instance to perform custom logic\n    ai->OnTrigger();\n\
      }"
    language: cpp
  - title: Checking for Valid AI Before Usage
    code: "AreaTrigger* trigger = ...; // Some area trigger\nAreaTriggerAI* ai = ScriptMgr::GetAreaTriggerAI(trigger);\n\
      if (ai != nullptr)\n{\n    // Safe to use the AI instance\n    ai->UpdateAI(diff);\n\
      }\nelse\n{\n    // Handle case where no AI is attached\n    sLog->outDebug(LOG_FILTER_GENERAL,\
      \ \"No AI found for area trigger %u\", trigger->GetEntry());\n}"
    language: cpp
  notes: This method relies on internal registration mechanisms within the ScriptMgr
    to map AreaTrigger objects to their respective AI implementations. Developers
    should ensure that any custom AreaTriggerAI instances are properly registered
    before attempting to retrieve them using this method. The returned pointer is
    valid only as long as the area trigger and its associated AI remain in scope.
  warnings: Never assume that the returned pointer will be non-null; always check
    for nullptr before dereferencing. Using an invalid or null pointer can lead to
    crashes or undefined behavior. Additionally, modifying or deleting the AreaTriggerAI
    instance directly without proper synchronization may cause instability in the
    game world.
  related:
  - GetAreaTriggerScript
  - RegisterAreaTriggerAI
  - CreateAreaTriggerAI
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:51:46.269791'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
