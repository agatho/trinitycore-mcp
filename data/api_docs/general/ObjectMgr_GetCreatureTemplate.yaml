api:
  class: ObjectMgr
  method: GetCreatureTemplate
  signature: const int * ObjectMgr::GetCreatureTemplate(uint32 entry) const
documentation:
  brief: Retrieves the creature template data for a specified entry ID
  description: The GetCreatureTemplate method fetches the creature template information
    associated with a given entry ID from the game's internal database. This method
    is commonly used by AI scripts, quest systems, and other game mechanics that need
    to access predefined creature properties such as health, damage, loot tables,
    and behavior patterns. The returned data structure contains all static attributes
    of a creature type that are defined in the creature_template table of the TrinityCore
    database. This method performs a lookup in an internal cache or database and returns
    a pointer to the template data, which should be treated as read-only.
  parameters: []
  returns: A const int* pointer to the creature template data structure for the specified
    entry ID. Returns nullptr if no creature template exists with the given entry
    ID.
  examples:
  - title: Basic Usage Example
    code: "const int* creatureTemplate = sObjectMgr->GetCreatureTemplate(12345);\n\
      if (creatureTemplate != nullptr) {\n    // Use creatureTemplate data\n    printf(\"\
      Creature found with entry %d\\n\", 12345);\n} else {\n    printf(\"No creature\
      \ template found for entry %d\\n\", 12345);\n}"
    language: cpp
  - title: Using Template Data in AI Script
    code: "Creature* creature = ...;\nconst int* templateData = sObjectMgr->GetCreatureTemplate(creature->GetEntry());\n\
      if (templateData != nullptr) {\n    // Access creature properties like health,\
      \ speed, etc.\n    uint32 maxHealth = templateData[CREATURE_TEMPLATE_FIELD_MAXHEALTH];\n\
      \    float speed = templateData[CREATURE_TEMPLATE_FIELD_SPEED];\n}"
    language: cpp
  notes: This method accesses internal game data structures and should be used carefully
    in performance-critical code paths. The returned pointer is valid only as long
    as the ObjectMgr instance remains active and the template data has not been modified
    or unloaded. This method may involve database lookups or cache operations depending
    on implementation details.
  warnings: Do not modify the returned data structure as it represents read-only template
    data. Accessing invalid entry IDs will return nullptr, which must be checked to
    avoid null pointer dereferences. The method signature indicates a return type
    of const int*, but this is likely a placeholder or simplified representation;
    actual implementation would probably return a struct or class reference.
  related:
  - GetCreatureTemplate
  - GetGameObjectTemplate
  - GetItemTemplate
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:53:33.657782'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
