api:
  class: InstanceScript
  method: OnGameObjectCreate
  signature: void InstanceScript::OnGameObjectCreate(GameObject * go)
documentation:
  brief: Called when a GameObject is created within the instance, allowing scripts
    to perform custom actions or store references.
  description: The OnGameObjectCreate method is a virtual callback function in the
    InstanceScript class that is invoked whenever a GameObject is successfully created
    and added to the instance. This method provides an opportunity for custom instance
    logic to be executed when game objects become available, such as storing pointers
    to specific GameObjects for later use, setting initial states, or triggering events
    based on object creation. It is part of the instance scripting system in TrinityCore
    and allows developers to extend or modify behavior of GameObjects within a specific
    dungeon or raid instance. The method is called during the initialization phase
    of the instance when objects are spawned, and it's important that any logic here
    does not block or cause long-running operations as it may affect performance.
  parameters:
  - name: go
    description: Pointer to the GameObject that was created. This represents the actual
      game object instance in the world, which can be used to query properties, set
      states, or perform actions on it.
  returns: null
  examples:
  - title: Storing a reference to a specific GameObject
    code: "void ExampleInstanceScript::OnGameObjectCreate(GameObject* go)\n{\n   \
      \ if (go->GetEntry() == GO_TEMPLE_DOOR)\n    {\n        templeDoor = go;\n \
      \   }\n}"
    language: cpp
  - title: Setting initial state on a GameObject upon creation
    code: "void ExampleInstanceScript::OnGameObjectCreate(GameObject* go)\n{\n   \
      \ if (go->GetEntry() == GO_SECRET_CHEST)\n    {\n        go->SetGoState(GO_STATE_READY);\n\
      \        go->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);\n    }\n}"
    language: cpp
  notes: This method is called for all GameObjects created in the instance. It's important
    to check the entry or GUID of the GameObject before performing operations to avoid
    unintended behavior. The GameObject pointer passed in will be valid for the lifetime
    of the instance unless explicitly removed or destroyed.
  warnings: Avoid performing heavy computations or blocking operations within this
    method as it may impact instance loading performance. Also, ensure that you're
    not modifying GameObjects in a way that could cause race conditions if multiple
    threads are involved.
  related:
  - OnObjectRemove
  - OnCreatureCreate
  - OnInstanceLoad
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T00:11:12.043275'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
