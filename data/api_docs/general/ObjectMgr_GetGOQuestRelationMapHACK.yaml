api:
  class: ObjectMgr
  method: GetGOQuestRelationMapHACK
  signature: QuestRelations * ObjectMgr::GetGOQuestRelationMapHACK()
documentation:
  brief: Returns a pointer to the game object quest relation map used for managing
    quest interactions with game objects.
  description: The GetGOQuestRelationMapHACK method retrieves a pointer to the internal
    QuestRelations map that stores associations between game objects and quests. This
    data structure is crucial for determining which quests are triggered or completed
    by interacting with specific game objects such as quest givers, chests, or other
    interactive elements. The method provides direct access to this mapping for use
    in quest handling systems, though the 'HACK' suffix suggests it may be a temporary
    or workaround implementation. This map is typically populated during server startup
    from database entries and should not be modified directly during runtime without
    proper synchronization.
  parameters: []
  returns: A pointer to the QuestRelations map which contains mappings of game object
    IDs to quest IDs, allowing lookup of which quests are associated with specific
    game objects. Returns nullptr if the map has not been initialized or loaded yet.
  examples:
  - title: Accessing Quest Relations for a Game Object
    code: "QuestRelations* goQuestMap = sObjectMgr->GetGOQuestRelationMapHACK();\n\
      if (goQuestMap)\n{\n    uint32 goId = 17654; // Example game object ID\n   \
      \ auto questRange = goQuestMap->equal_range(goId);\n    for (auto itr = questRange.first;\
      \ itr != questRange.second; ++itr)\n    {\n        uint32 questId = itr->second;\n\
      \        // Process quest associated with this game object\n        sLog->outString(\"\
      GameObject %u is related to Quest %u\", goId, questId);\n    }\n}"
    language: cpp
  notes: This method provides direct access to internal data structures. Modifying
    the returned map directly can lead to inconsistent state and should be avoided
    unless absolutely necessary. The 'HACK' in the name indicates this might be a
    temporary solution that could change in future versions. The returned pointer
    is valid only as long as the ObjectMgr instance remains alive and the quest relation
    data has been loaded.
  warnings: Direct modification of the returned QuestRelations map can cause undefined
    behavior or server instability. This method should only be used for read-only
    access to the quest relation mappings. Be aware that the underlying data structure
    may not be thread-safe, so access should be synchronized if used from multiple
    threads.
  related:
  - GetGOQuestRelationMap
  - LoadGameObjectQuestRelations
  - AddGOQuestRelation
  - RemoveGOQuestRelation
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:45:31.378648'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
