api:
  class: Aura
  method: GetEffectMask
  signature: uint32 Aura::GetEffectMask() const
documentation:
  brief: Returns a bitmask representing which effects of the aura are currently active.
  description: The GetEffectMask method retrieves a 32-bit bitmask that indicates
    which of the aura's effects (or slots) are currently active and applied to the
    target. Each bit in the mask corresponds to a specific effect index, allowing
    systems to quickly determine which effects are active without iterating through
    all effects individually. This is particularly useful for checking conditional
    logic or determining the state of an aura's application during combat or gameplay
    events. The returned value can be used with bitwise operations to test for specific
    effect states.
  parameters: []
  returns: A uint32 bitmask where each bit represents the active state of a corresponding
    aura effect. Bit 0 corresponds to effect 0, bit 1 to effect 1, and so on up to
    bit 31. If a bit is set (1), the corresponding effect is active; if unset (0),
    it is not active.
  examples:
  - title: Check if a specific aura effect is active
    code: "Aura* aura = unit->GetAura(12345);\nif (aura)\n{\n    uint32 mask = aura->GetEffectMask();\n\
      \    if (mask & (1 << 2)) // Check if effect 2 is active\n    {\n        //\
      \ Effect 2 is currently active\n    }\n}"
    language: cpp
  - title: Iterate through all active aura effects
    code: "Aura* aura = unit->GetAura(12345);\nif (aura)\n{\n    uint32 mask = aura->GetEffectMask();\n\
      \    for (int i = 0; i < 32; ++i)\n    {\n        if (mask & (1 << i))\n   \
      \     {\n            // Process active effect at index i\n        }\n    }\n\
      }"
    language: cpp
  notes: This method is typically used for performance optimization to avoid expensive
    iteration over all aura effects. The bitmask is updated whenever an aura's effect
    state changes, such as when effects are applied or removed. The maximum number
    of effects supported by this system is 32, which aligns with the size of a uint32.
  warnings: null
  related:
  - GetEffect
  - HasEffect
  - AddEffect
  - RemoveEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:19:02.061809'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
