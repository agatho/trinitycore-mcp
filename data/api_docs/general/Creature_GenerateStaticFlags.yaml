api:
  class: Creature
  method: GenerateStaticFlags
  signature: CreatureStaticFlagsHolder Creature::GenerateStaticFlags(const CreatureDifficulty
    * creatureDifficulty, int spawnId, int difficultyId) const
documentation:
  brief: Generates static flags for a creature based on difficulty and spawn ID
  description: The GenerateStaticFlags method constructs and returns a CreatureStaticFlagsHolder
    object that encapsulates various static configuration flags for a creature instance.
    These flags determine how the creature behaves in different game contexts, such
    as whether it's a boss, if it should be considered for loot distribution, or if
    it has special AI behavior. The method takes into account the creature's difficulty
    settings and spawn identifier to properly configure these flags. This is typically
    used during creature initialization and spawning processes within the TrinityCore
    framework.
  parameters:
  - name: creatureDifficulty
    description: Pointer to the CreatureDifficulty structure that defines the creature's
      difficulty-specific properties and behaviors
  - name: spawnId
    description: Integer identifier representing the specific spawn instance of the
      creature, used for distinguishing between multiple instances of the same creature
      type
  - name: difficultyId
    description: Integer identifier specifying the game difficulty level (normal,
      heroic, mythic, etc.) that affects creature properties and flags
  returns: A CreatureStaticFlagsHolder object containing all relevant static flags
    for the creature instance, which can be used to configure behavior, AI, and game
    mechanics
  examples:
  - title: Basic usage in creature spawning
    code: 'Creature* creature = ...;

      CreatureDifficulty* difficulty = ...;

      int spawnId = 12345;

      int difficultyId = 1;


      CreatureStaticFlagsHolder flags = creature->GenerateStaticFlags(difficulty,
      spawnId, difficultyId);

      // Use flags to initialize creature properties'
    language: cpp
  - title: Using generated flags for AI configuration
    code: "Creature* creature = ...;\nCreatureDifficulty* difficulty = GetCreatureDifficulty(creature->GetEntry(),\
      \ DUNGEON_DIFFICULTY_NORMAL);\nint spawnId = creature->GetSpawnId();\nint difficultyId\
      \ = creature->GetMap()->GetDifficulty();\n\nCreatureStaticFlagsHolder flags\
      \ = creature->GenerateStaticFlags(difficulty, spawnId, difficultyId);\nif (flags.HasFlag(CREATURE_STATIC_FLAG_BOSS))\
      \ {\n    creature->SetAIType(AI_TYPE_BOSS);\n}\n// Apply other flag-based configurations"
    language: cpp
  notes: This method is typically called during creature creation and initialization.
    The returned CreatureStaticFlagsHolder may contain flags that affect combat behavior,
    loot distribution, quest tracking, and AI decision making. Developers should ensure
    that the provided difficulty settings are valid before calling this method.
  warnings: Calling this method with invalid or null parameters (especially creatureDifficulty)
    can lead to undefined behavior. The spawnId and difficultyId must be valid identifiers
    for the current map context. Incorrect flag configurations may cause creatures
    to behave unexpectedly in combat or quest scenarios.
  related:
  - GetCreatureDifficulty
  - GetSpawnId
  - GetMap
  - SetAIType
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T16:55:28.785252'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
