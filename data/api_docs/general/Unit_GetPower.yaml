api:
  class: Unit
  method: GetPower
  signature: int32 Unit::GetPower(int power) const
documentation:
  brief: Returns the current power value of the specified power type for the unit.
  description: The GetPower method retrieves the current power value associated with
    a specific power type for a given Unit. This method is commonly used in World
    of Warcraft TrinityCore to access various power types such as mana, rage, focus,
    energy, and others. The method returns an integer representing the current power
    value, which can be used for calculations or comparisons in game logic. It's important
    to note that this method does not modify or update the power value; it simply
    returns the current state of the power type. This functionality is essential for
    implementing game mechanics such as mana cost calculations, energy management,
    and power system interactions.
  parameters: []
  returns: Returns an integer representing the current power value for the specified
    power type. The value can be zero or positive, depending on the unit's state and
    the power type being accessed. Negative values are not expected but may occur
    in special cases.
  examples:
  - title: Basic usage example
    code: "int32 mana = unit->GetPower(PowerType::POWER_MANA);\nif (mana > 0)\n{\n\
      \    // Use mana for spell casting\n}"
    language: cpp
  - title: Advanced usage with power type checking
    code: "Unit* target = unit->GetVictim();\nint32 energy = target->GetPower(PowerType::POWER_ENERGY);\n\
      if (energy >= 10)\n{\n    // Perform energy-based action\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any context within the
    TrinityCore framework. Performance considerations are minimal as it simply accesses
    stored values without complex computations. The method does not cache or store
    power values; it always returns the current state of the unit's power.
  warnings: Be cautious when using this method with different power types, as incorrect
    usage can lead to invalid power values or unexpected behavior in game mechanics.
    Ensure that the power type parameter matches the expected power type for the unit
    being queried.
  related:
  - GetMaxPower
  - SetPower
  - GetPowerType
  - GetPowerValue
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:49:07.142780'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
