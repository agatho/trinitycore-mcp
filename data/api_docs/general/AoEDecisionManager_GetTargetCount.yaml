api:
  class: AoEDecisionManager
  method: GetTargetCount
  signature: uint32 AoEDecisionManager::GetTargetCount(float range) const
documentation:
  brief: Calculates and returns the number of valid targets within the specified range
    for area-of-effect spell decisions.
  description: The GetTargetCount method determines how many eligible targets exist
    within a given range, typically used by AI decision-making systems to evaluate
    the effectiveness of area-of-effect spells or abilities. This method is commonly
    employed in TrinityCore's AI framework to assist creatures or NPCs in making tactical
    decisions based on target density and proximity. The implementation likely considers
    factors such as line-of-sight, target validity (e.g., alive players or creatures),
    and faction relationships. It serves as a core utility for AoE spell selection
    logic, helping determine whether an area effect should be cast based on the number
    of nearby enemies or allies within range.
  parameters: []
  returns: Returns a uint32 value representing the count of valid targets found within
    the specified range. A return value of zero indicates no eligible targets were
    found within range, while higher values indicate increasing numbers of viable
    targets for area-of-effect consideration.
  examples:
  - title: Basic usage to check target count for AoE spell
    code: "uint32 targetCount = decisionManager.GetTargetCount(10.0f);\nif (targetCount\
      \ >= 3)\n{\n    // Cast area-of-effect spell\n    caster->CastSpell(target,\
      \ SPELL_AOE_DAMAGE, true);\n}"
    language: cpp
  - title: Using target count to decide between single-target and AoE spells
    code: "float aoeRange = 8.0f;\nuint32 targetCount = decisionManager.GetTargetCount(aoeRange);\n\
      if (targetCount >= 2)\n{\n    // Prefer AoE spell\n    caster->CastSpell(target,\
      \ SPELL_AOE_CHAIN_LIGHTNING, true);\n}\nelse\n{\n    // Use single-target spell\n\
      \    caster->CastSpell(target, SPELL_SINGLE_TARGET_SHOCK, true);\n}"
    language: cpp
  notes: This method likely performs a spatial query to identify targets within range,
    which may involve collision detection and faction checks. Performance can be impacted
    by the number of potential targets in the area, especially in crowded zones or
    during large-scale encounters. The method is typically called during AI decision-making
    cycles and should not be used for real-time calculations without considering performance
    implications.
  warnings: The range parameter must be a positive value; negative values may produce
    undefined behavior. This method assumes that all targets within range are valid
    candidates for the spell or ability being evaluated, so it's important to ensure
    proper target filtering occurs before calling this method. In high-frequency AI
    decision scenarios, repeated calls to this method could impact performance if
    not properly optimized.
  related:
  - GetTargetsInArea
  - IsTargetInRange
  - GetNearbyTargets
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:41:00.246397'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
