api:
  class: Player
  method: AutoUnequipOffhandIfNeed
  signature: void Player::AutoUnequipOffhandIfNeed(bool force)
documentation:
  brief: Automatically unequips the off-hand item if the player's main-hand weapon
    is changed or removed.
  description: This method ensures that when a player's main-hand weapon is changed
    or removed, the off-hand item is automatically unequipped if it is no longer valid
    due to the new weapon being incompatible with the off-hand slot. The method is
    typically called during weapon switching operations to maintain proper equipment
    state and prevent invalid combinations. It may also be invoked when force is set
    to true, which overrides normal conditions and forces unequipping regardless of
    weapon compatibility.
  parameters:
  - name: force
    description: When set to true, forces the off-hand item to be unequipped regardless
      of whether it's compatible with the current main-hand weapon. When false, only
      unequips if the main-hand weapon is incompatible with the off-hand item.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->AutoUnequipOffhandIfNeed(false);'
    language: cpp
  - title: Forced unequipping example
    code: 'Player* player = new Player();

      player->AutoUnequipOffhandIfNeed(true);

      // This will unequip the off-hand item even if it''s still valid with the current
      main-hand weapon'
    language: cpp
  notes: 'Implementation details: This method typically involves checking the player''s
    equipment state and ensuring that any off-hand items are properly removed from
    the inventory when a main-hand weapon changes. Performance considerations: The
    method may involve multiple checks and updates to ensure proper inventory management,
    especially in scenarios where multiple players are being processed simultaneously.'
  warnings: This method should not be called directly during combat or when the player
    is actively engaged in combat, as it may cause unexpected behavior or errors in
    equipment state. Also, calling this method with force=true can lead to unintended
    removal of items if not properly handled.
  related:
  - Player::SetWeapon
  - Player::UnequipItem
  - Player::EquipItem
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T01:09:01.567990'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
