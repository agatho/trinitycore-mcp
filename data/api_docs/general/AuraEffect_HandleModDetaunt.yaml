api:
  class: AuraEffect
  method: HandleModDetaunt
  signature: void AuraEffect::HandleModDetaunt(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Modifies the detaining effect of an aura application.
  description: The HandleModDetaunt method is responsible for applying or removing
    a detaining effect associated with an aura application. This typically affects
    how targets are prevented from moving or performing certain actions, such as being
    rooted or stunned. The method operates based on the provided aura application
    context and the mode of operation (apply or remove). It integrates with the core
    aura system to manage combat mechanics related to movement restriction.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that represents the aura being
      applied or removed. This contains information about the aura's state and target.
  - name: mode
    description: The mode of operation for the aura effect, typically indicating whether
      the effect is being applied (1) or removed (0). Values are usually 0 or 1, though
      other values may be used depending on internal implementation.
  - name: apply
    description: Boolean flag indicating if the detaining effect should be applied
      (true) or removed (false). This directly controls the behavior of the aura's
      detaining mechanics.
  returns: null
  examples:
  - title: Applying a Detaining Aura
    code: 'AuraApplication* app = new AuraApplication();

      HandleModDetaunt(app, 1, true);

      // Applies the detaining effect to the target.'
    language: cpp
  - title: Removing a Detaining Aura
    code: 'AuraApplication* app = GetAuraApplication();

      HandleModDetaunt(app, 0, false);

      // Removes the detaining effect from the target.'
    language: cpp
  notes: This method is part of the internal aura handling system in TrinityCore.
    It interacts with the core game mechanics to enforce movement restrictions during
    combat. Developers should ensure that the AuraApplication object passed is valid
    and properly initialized before calling this method.
  warnings: Incorrect usage of the mode or apply parameters can lead to unexpected
    behavior, such as applying effects when they shouldn't be active or failing to
    remove them properly. Ensure that all aura applications are correctly managed
    to avoid memory leaks or invalid state transitions.
  related:
  - AuraEffect::HandleApply
  - AuraEffect::HandleRemove
  - AuraApplication::GetAura
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:38:48.219281'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
