api:
  class: Creature
  method: UpdateEntry
  signature: bool Creature::UpdateEntry(uint32 entry, const CreatureData * data, bool
    updateLevel)
documentation:
  brief: Updates the creature's entry ID and associated data, optionally updating
    its level.
  description: The UpdateEntry method modifies a creature's entry identifier to a
    new value, typically used when transforming or replacing a creature with another
    type. It can also update the creature's level if specified. This method is commonly
    used during quest events, creature transformations, or when changing a creature's
    type in the game world. The method requires valid data for the new entry and handles
    necessary internal updates to maintain consistency within the TrinityCore framework.
  parameters:
  - name: entry
    description: The new creature entry ID to update the creature to. Must correspond
      to a valid creature template in the database.
  - name: data
    description: Pointer to the CreatureData structure containing the new creature's
      data, including position, equipment, and other properties.
  - name: updateLevel
    description: Boolean flag indicating whether to update the creature's level based
      on the new entry's template data. If true, the creature's level will be adjusted
      to match the new entry's default level.
  returns: Returns true if the entry was successfully updated and all internal state
    changes were applied correctly; otherwise returns false if the update failed due
    to invalid parameters or missing data.
  examples:
  - title: Basic creature entry update
    code: "Creature* creature = ...;\nCreatureData const* data = sObjectMgr->GetCreatureData(12345);\n\
      if (creature && data)\n{\n    bool success = creature->UpdateEntry(54321, data,\
      \ true);\n    if (success)\n        sLog->outString(\"Creature entry updated\
      \ successfully.\");\n}"
    language: cpp
  - title: Updating creature without level change
    code: "Creature* creature = ...;\nCreatureData const* data = sObjectMgr->GetCreatureData(67890);\n\
      if (creature && data)\n{\n    bool success = creature->UpdateEntry(98765, data,\
      \ false);\n    if (success)\n        sLog->outString(\"Creature entry updated\
      \ without level change.\");\n}"
    language: cpp
  notes: This method performs internal state synchronization and may trigger updates
    to the creature's AI behavior, loot tables, and other systems that depend on the
    creature's entry ID. It should not be called during critical sections of code
    where race conditions might occur.
  warnings: Calling this method with an invalid or non-existent entry ID can lead
    to undefined behavior or crashes. Always validate the data pointer and ensure
    the new entry exists in the database before calling UpdateEntry.
  related:
  - GetEntry
  - SetEntry
  - UpdateStats
  - LoadFromDB
metadata:
  confidence: 0.92
  generated_at: '2025-10-29T20:26:01.264131'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
