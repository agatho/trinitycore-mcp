api:
  class: GatheringManager
  method: GetDetectedNodeCount
  signature: uint32 GatheringManager::GetDetectedNodeCount() const
documentation:
  brief: Returns the total count of gathering nodes detected by the manager.
  description: The GetDetectedNodeCount method retrieves the number of gathering nodes
    (such as herbs, ores, or treasures) that have been identified and tracked by the
    GatheringManager instance. This count is typically used to determine how many
    resources are available for harvesting within a specific area or context. The
    method does not perform any detection itself; it simply returns the current count
    of previously detected nodes. It is commonly used in game logic to update UI elements,
    trigger events, or manage resource availability during player interactions with
    the world.
  parameters: []
  returns: A uint32 value representing the total number of gathering nodes currently
    detected and tracked by this GatheringManager instance. Returns zero if no nodes
    have been detected.
  examples:
  - title: Basic Usage to Check Node Count
    code: "GatheringManager* manager = player->GetGatheringManager();\nuint32 nodeCount\
      \ = manager->GetDetectedNodeCount();\nif (nodeCount > 0)\n{\n    // Proceed\
      \ with gathering logic\n    sLog->outString(\"Detected %u gathering nodes.\"\
      , nodeCount);\n}"
    language: cpp
  - title: Using Node Count for UI Updates
    code: "void UpdateGatheringUI(Player* player)\n{\n    GatheringManager* manager\
      \ = player->GetGatheringManager();\n    uint32 count = manager->GetDetectedNodeCount();\n\
      \    \n    // Update the UI element that shows available resources\n    if (count\
      \ > 0)\n    {\n        uiElement->SetText(\"Available Resources: \" + std::to_string(count));\n\
      \    }\n    else\n    {\n        uiElement->SetText(\"No resources detected.\"\
      );\n    }\n}"
    language: cpp
  notes: This method is a read-only accessor and does not modify any internal state.
    It's safe to call from multiple threads as long as the underlying GatheringManager
    instance is thread-safe. The returned count may change dynamically if new nodes
    are detected or existing ones are harvested.
  warnings: Ensure that the GatheringManager instance is properly initialized before
    calling this method, otherwise unexpected behavior may occur. This method should
    not be used to determine whether a player can gather resources; instead, use appropriate
    validation methods that check for valid player proximity and resource availability.
  related:
  - GetDetectedNodes
  - DetectNode
  - ClearDetectedNodes
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T13:30:20.580104'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
