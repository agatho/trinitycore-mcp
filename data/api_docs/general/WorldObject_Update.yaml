api:
  class: WorldObject
  method: Update
  signature: void WorldObject::Update(uint32 diff)
documentation:
  brief: Updates the WorldObject's internal state and handles time-based operations
    such as movement, animations, and AI behavior.
  description: The Update method is a core function in the TrinityCore framework that
    processes time-based updates for WorldObject instances. It is called regularly
    by the game loop to maintain object state, handle movement calculations, process
    AI behaviors, and manage various time-sensitive operations. This method typically
    updates the object's position, orientation, animation states, and other dynamic
    properties based on the elapsed time since the last update. The diff parameter
    represents the milliseconds elapsed since the last update cycle, which is crucial
    for consistent and smooth gameplay mechanics across different system performance
    levels.
  parameters: []
  returns: null
  examples:
  - title: Basic Update Call
    code: 'WorldObject* object = ...;

      object->Update(50); // Update with 50ms elapsed time'
    language: cpp
  - title: Update in Game Loop Context
    code: "void GameLoop()\n{\n    uint32 diff = sWorld->GetLastTickTime();\n    for\
      \ (auto& object : WorldManager::GetInstance()->GetAllObjects())\n    {\n   \
      \     object->Update(diff);\n    }\n}"
    language: cpp
  notes: This method is typically invoked from the main game loop and should not be
    called directly by most game code. The implementation handles various internal
    state management including movement interpolation, AI decision making, and event
    processing. Performance considerations include ensuring that update logic remains
    efficient to maintain smooth gameplay at 60 FPS.
  warnings: Calling Update manually outside of the intended game loop context can
    lead to inconsistent object states or unexpected behavior. The method assumes
    valid time deltas and should not be called with negative values or extremely large
    values which could cause overflow issues.
  related:
  - GetMap
  - GetPosition
  - SetPosition
  - UpdateObject
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T16:10:08.621572'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
