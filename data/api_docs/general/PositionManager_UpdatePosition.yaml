api:
  class: PositionManager
  method: UpdatePosition
  signature: MovementResult PositionManager::UpdatePosition(const MovementContext
    & context)
documentation:
  brief: Updates the position of a unit based on the provided movement context and
    returns the result of the operation.
  description: The UpdatePosition method in the PositionManager class is responsible
    for processing and applying positional changes to a game unit. It takes a MovementContext
    object that contains all necessary information about the movement request, such
    as target coordinates, movement type, and associated unit data. The method evaluates
    the movement request against current game state and world constraints, then returns
    a MovementResult indicating success or failure of the position update. This method
    is typically invoked during movement handling in TrinityCore's core systems to
    ensure units move according to game rules and physics.
  parameters: []
  returns: A MovementResult enum value indicating whether the position update was
    successful, failed due to collision, or encountered other issues during processing.
    Possible values include SUCCESS, FAILED, COLLISION, and others depending on implementation
    details.
  examples:
  - title: Basic Position Update
    code: "MovementContext context;\ncontext.unit = playerUnit;\ncontext.targetX =\
      \ 100.0f;\ncontext.targetY = 200.0f;\ncontext.targetZ = 50.0f;\n\nPositionManager\
      \ posManager;\nMovementResult result = posManager.UpdatePosition(context);\n\
      if (result == MovementResult::SUCCESS) {\n    // Position updated successfully\n\
      }"
    language: cpp
  notes: This method is part of TrinityCore's movement system and should only be called
    when a unit's position needs to be updated. It performs collision detection and
    terrain validation internally, so developers should not call it directly for simple
    coordinate changes without proper context setup.
  warnings: Calling this method without properly initializing the MovementContext
    can lead to undefined behavior or crashes. Ensure all required fields in MovementContext
    are populated before invoking UpdatePosition.
  related:
  - GetPosition
  - SetPosition
  - ValidateMovement
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T20:49:13.618950'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
