api:
  class: BotTalentManager
  method: GetAllLoadouts
  signature: int BotTalentManager::GetAllLoadouts(uint8 cls, uint8 specId) const
documentation:
  brief: Retrieves all available talent loadouts for a specified class and specialization.
  description: The GetAllLoadouts method retrieves a list or count of all predefined
    talent loadouts that are available for a given class and specialization in the
    TrinityCore framework. This method is typically used by bot systems or automated
    talent management tools to fetch valid talent configurations for AI-controlled
    characters. It allows for dynamic loading and application of different talent
    builds based on class and spec. The returned value usually represents either the
    number of loadouts found or an identifier for accessing them, depending on implementation
    details. This functionality supports the customization and optimization of bot
    behavior through various talent strategies.
  parameters: []
  returns: An integer representing the total count of available loadouts for the specified
    class and specialization, or a unique identifier if the method returns a handle
    to a collection instead of a count. Returns -1 on error or if no loadouts are
    found for the given parameters.
  examples:
  - title: Retrieve Loadout Count for Mage
    code: "int loadoutCount = botTalentManager->GetAllLoadouts(CLASS_MAGE, SPEC_MAGE_FROST);\n\
      if (loadoutCount > 0)\n{\n    // Proceed with applying or iterating through\
      \ loadouts\n    std::cout << \"Found \" << loadoutCount << \" loadouts for Frost\
      \ Mage.\" << std::endl;\n}"
    language: cpp
  notes: This method likely interacts with internal data structures that store predefined
    talent trees and their associated loadouts. It may be optimized to cache results
    or precompute valid combinations for performance reasons in high-frequency bot
    operations.
  warnings: Ensure that the class and specId parameters are valid values corresponding
    to existing classes and specializations within TrinityCore's framework; invalid
    inputs could lead to undefined behavior or incorrect return values.
  related:
  - GetTalentLoadout
  - ApplyLoadout
  - GetAvailableSpecs
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T01:35:24.318360'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
