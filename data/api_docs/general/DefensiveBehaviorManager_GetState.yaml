api:
  class: DefensiveBehaviorManager
  method: GetState
  signature: const DefensiveState & DefensiveBehaviorManager::GetState() const
documentation:
  brief: Retrieves the current defensive state of the behavior manager
  description: The GetState method returns a constant reference to the current DefensiveState
    object managed by the DefensiveBehaviorManager. This state represents the active
    defensive behavior configuration for the associated unit, including flags and
    settings that determine how the unit should respond to threats. The returned state
    is immutable and reflects the exact defensive configuration at the time of the
    call. This method is typically used by AI systems to make decisions about defensive
    actions, such as when to enter or exit defensive stances, or to determine the
    appropriate response to incoming attacks.
  parameters: []
  returns: A constant reference to the current DefensiveState object, representing
    the active defensive configuration of the behavior manager. The state contains
    information about defensive behaviors, threat responses, and other defensive settings
    that control how the unit behaves in combat situations.
  examples:
  - title: Basic usage to check defensive state
    code: "DefensiveBehaviorManager* behaviorMgr = unit->GetAI()->GetDefensiveBehaviorManager();\n\
      const DefensiveState& state = behaviorMgr->GetState();\nif (state.IsInDefensiveStance())\
      \ {\n    // Unit is currently in defensive stance\n}"
    language: cpp
  - title: Using defensive state to determine AI behavior
    code: "DefensiveBehaviorManager* behaviorMgr = unit->GetAI()->GetDefensiveBehaviorManager();\n\
      const DefensiveState& state = behaviorMgr->GetState();\nif (state.GetThreatLevel()\
      \ >= THREAT_HIGH) {\n    // Execute high threat defensive actions\n    unit->CastSpell(unit,\
      \ SPELL_DEFENSIVE_STANCE, true);\n} else if (state.GetThreatLevel() <= THREAT_LOW)\
      \ {\n    // Return to normal behavior\n    unit->RemoveAura(SPELL_DEFENSIVE_STANCE);\n\
      }"
    language: cpp
  notes: The returned DefensiveState reference is valid only until the next call to
    a modifying method on the DefensiveBehaviorManager. This method does not perform
    any locking or synchronization internally, so concurrent access from multiple
    threads should be handled by the caller. The defensive state may change at any
    time during combat based on incoming threats or AI decisions.
  warnings: Do not modify the returned DefensiveState reference as it is const. Modifications
    should be made through appropriate setter methods or behavior manager interfaces.
    Accessing this method during critical AI processing phases could lead to inconsistent
    behavior if the state changes between calls.
  related:
  - SetState
  - UpdateState
  - GetDefensiveBehaviorManager
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:18:56.723582'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
