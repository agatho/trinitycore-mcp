api:
  class: WorldObject
  method: GetDebugInfo
  signature: std::string WorldObject::GetDebugInfo() const
documentation:
  brief: Returns formatted debug information string containing object type, GUID,
    and position data for WorldObject instances
  description: The GetDebugInfo method generates a comprehensive debug string that
    includes essential identifying information about a WorldObject instance. This
    includes the object's type name, its unique global identifier (GUID), and its
    current world position coordinates (x, y, z). The method is primarily used for
    debugging purposes during development and testing phases to quickly identify and
    inspect WorldObject instances in the game world. It provides a standardized format
    that helps developers and administrators quickly understand an object's basic
    properties without requiring multiple individual getter calls. The returned string
    is formatted for readability and can be directly logged or displayed in debug
    consoles.
  parameters: []
  returns: 'A std::string containing formatted debug information including object
    type, GUID, and position coordinates in the format: "ObjectType[GUID]: (x, y,
    z)"'
  examples:
  - title: Basic Debug Information Retrieval
    code: 'WorldObject* obj = ...; // some WorldObject instance

      std::string debugInfo = obj->GetDebugInfo();

      TC_LOG_DEBUG(LOG_FILTER_GENERAL, "Object debug info: %s", debugInfo.c_str());'
    language: cpp
  - title: Using Debug Info in Game Master Commands
    code: "void HandleDebugInfoCommand(ChatHandler* handler)\n{\n    Player* player\
      \ = handler->GetPlayer();\n    WorldObject* target = player->GetSelectedUnit();\n\
      \    if (target)\n    {\n        std::string debugInfo = target->GetDebugInfo();\n\
      \        handler->PSendSysMessage(\"Selected object info: %s\", debugInfo.c_str());\n\
      \    }\n}"
    language: cpp
  notes: This method is intended for debugging and development purposes only. The
    returned string format may change between different TrinityCore versions. The
    method performs minimal computation and is safe to call in performance-critical
    code paths, though it should not be called excessively in production environments.
    The position data returned reflects the object's current world coordinates at
    the time of the method call.
  warnings: The debug information includes internal identifiers that may be useful
    for debugging but could potentially expose internal game state to players if improperly
    exposed in public interfaces. Avoid logging or displaying this information in
    production builds without proper access controls.
  related:
  - GetGUID
  - GetPosition
  - GetTypeId
  - GetName
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:20:08.150462'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
