api:
  class: Player
  method: SetDataFlagCharacter
  signature: void Player::SetDataFlagCharacter(uint32 dataFlagId, bool on)
documentation:
  brief: Sets a character data flag to either enabled or disabled state.
  description: This method allows developers to control specific character data flags
    within the TrinityCore framework, enabling or disabling various game mechanics
    such as achievements, quest tracking, or player behavior flags. The method operates
    on a uint32 dataFlagId parameter that represents a unique identifier for the flag
    being modified, and accepts a boolean 'on' parameter indicating whether the flag
    should be enabled (true) or disabled (false). This functionality is essential
    for managing character-specific game states and can be used in conjunction with
    other player-related methods to modify player behavior.
  parameters:
  - name: dataFlagId
    description: A unique identifier representing the specific data flag to be modified.
      This typically corresponds to predefined flags within the TrinityCore system,
      such as those related to achievements, quest tracking, or player behavior.
  - name: 'on'
    description: Boolean value indicating whether the flag should be enabled (true)
      or disabled (false). When true, the flag is activated; when false, it is deactivated.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = GetPlayer();

      player->SetDataFlagCharacter(12345, true);'
    language: cpp
  - title: Advanced usage example
    code: "Player* player = GetPlayer();\nif (player->HasDataFlagCharacter(12345))\
      \ {\n  player->SetDataFlagCharacter(12345, false);\n}\nelse {\n  player->SetDataFlagCharacter(12345,\
      \ true);\n}"
    language: cpp
  notes: The method directly modifies the character's data flag state in memory and
    may require synchronization with database operations depending on how the flags
    are implemented. Performance considerations include potential overhead when modifying
    multiple flags in sequence. This method is thread-safe as long as the player object
    itself is properly synchronized.
  warnings: Improper use of this method can lead to incorrect game behavior or unexpected
    results, especially if flag values are not properly validated. Care should be
    taken to ensure that dataFlagId values correspond to valid flags within the system,
    as invalid values may cause undefined behavior or database corruption.
  related:
  - GetDataFlagCharacter
  - HasDataFlagCharacter
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T15:12:27.725161'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
