api:
  class: WorldObject
  method: GetNearPosition
  signature: Position WorldObject::GetNearPosition(float dist, float angle)
documentation:
  brief: Calculates and returns a Position located at a specified distance and angle
    from the WorldObject's current location.
  description: The GetNearPosition method computes a new Position that is positioned
    at a given distance and angular offset from the calling WorldObject's current
    location. This method is commonly used in game mechanics for positioning NPCs,
    calculating spell effects, or determining movement targets. The calculation takes
    into account the object's facing direction and uses trigonometric functions to
    determine the final coordinates. The resulting Position can be used for various
    purposes such as spawning creatures, casting spells, or moving objects within
    the game world.
  parameters: []
  returns: Returns a Position object representing the calculated location at the specified
    distance and angle from the WorldObject's current position.
  examples:
  - title: Basic Usage for NPC Movement
    code: 'Position targetPos = creature->GetNearPosition(5.0f, 0.0f);

      // Move creature 5 yards directly in front

      creature->GetMotionMaster()->MovePoint(0, targetPos);'
    language: cpp
  - title: Creating a Circular Formation of NPCs
    code: "float radius = 3.0f;\nfloat angleStep = M_PI / 4.0f; // 45 degrees\nfor\
      \ (int i = 0; i < 8; ++i)\n{\n    float angle = i * angleStep;\n    Position\
      \ spawnPos = npc->GetNearPosition(radius, angle);\n    // Spawn NPC at calculated\
      \ position\n}"
    language: cpp
  notes: This method internally uses the WorldObject's current orientation and position
    to calculate the new coordinates. The distance parameter is interpreted as a straight-line
    distance from the object's center point. For accurate positioning in 3D space,
    consider using GetNearPosition with appropriate Z-coordinate calculations if elevation
    changes are required.
  warnings: Be aware that this method does not check for obstacles or terrain validity
    at the calculated position. If you need to ensure the resulting position is walkable
    or valid for spawning objects, additional validation should be performed using
    methods like IsInLineOfSight() or checking terrain height.
  related:
  - GetPosition
  - GetOrientation
  - GetDistance
  - MovePosition
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:53:11.956342'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
