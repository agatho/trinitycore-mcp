api:
  class: ResourceManager
  method: GetSpellResourceEfficiency
  signature: float ResourceManager::GetSpellResourceEfficiency(uint32 spellId)
documentation:
  brief: Calculates and returns the resource efficiency ratio for a specified spell.
  description: The GetSpellResourceEfficiency method computes the efficiency of a
    spell in terms of resource consumption versus effectiveness. This value is typically
    used to evaluate how well a spell utilizes mana, rage, energy, or other resources
    relative to its damage or healing output. The method retrieves pre-defined efficiency
    values from internal spell data tables and returns a float representing this ratio.
    It is commonly used in performance analysis, talent calculations, and resource
    management systems within the TrinityCore framework.
  parameters: []
  returns: Returns a floating-point value representing the resource efficiency of
    the spell. A higher value indicates better efficiency, meaning the spell provides
    more benefit per unit of resource consumed. Values are typically normalized between
    0 and 1, where 1.0 represents perfect efficiency.
  examples:
  - title: Basic Usage
    code: "float efficiency = resourceManager->GetSpellResourceEfficiency(12345);\n\
      if (efficiency > 0.8f)\n{\n    // Spell is highly efficient\n}"
    language: cpp
  - title: Efficiency Analysis for Talent Optimization
    code: "uint32 spellId = 98765;\nfloat efficiency = resourceManager->GetSpellResourceEfficiency(spellId);\n\
      if (efficiency < 0.5f)\n{\n    // Consider alternative spells for better resource\
      \ usage\n    sLog->outString(\"Low efficiency spell detected: %u\", spellId);\n\
      }"
    language: cpp
  notes: This method relies on internal spell data tables that must be properly initialized.
    The returned value is cached and may not reflect real-time changes to spell properties
    unless the cache is invalidated. The efficiency calculation considers base spell
    properties, not dynamic modifiers or buffs.
  warnings: The method assumes that the provided spell ID exists in the game database.
    Invalid spell IDs may return unexpected or default values. Be cautious when using
    this method in performance-critical code paths as it may involve table lookups.
  related:
  - GetSpellInfo
  - GetSpellResourceCost
  - CalculateSpellEffectiveness
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:14:25.530464'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
