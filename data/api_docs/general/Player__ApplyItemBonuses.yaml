api:
  class: Player
  method: _ApplyItemBonuses
  signature: void Player::_ApplyItemBonuses(Item * item, uint8 slot, bool apply)
documentation:
  brief: Applies item bonuses to a player's attributes based on item slot and bonus
    type.
  description: This method applies item bonuses to the player's attributes, modifying
    their stats based on the item being equipped or removed. It handles both positive
    and negative bonuses depending on the apply parameter, affecting various attributes
    like attack power, critical strike rating, and others. The method is typically
    called during item equip/unequip events to ensure proper stat application. This
    function directly modifies player's stat values and should be used carefully during
    item modifications.
  parameters:
  - name: item
    description: Pointer to the Item object whose bonuses are being applied. Must
      not be null.
  - name: slot
    description: The inventory slot where the item is located, determining which bonuses
      are applied. Valid range is 0-18 (inclusive).
  - name: apply
    description: Boolean flag indicating whether to apply or remove bonuses. True
      applies bonuses, false removes them.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      Item* item = new Item();

      player->_ApplyItemBonuses(item, 15, true);'
    language: cpp
  - title: Advanced usage example
    code: '// Apply bonuses when item is equipped

      Player* player = GetPlayer();

      Item* item = GetItem();

      uint8 slot = 15;

      bool apply = true;

      player->_ApplyItemBonuses(item, slot, apply);

      // Remove bonuses when item is unequipped

      apply = false;

      player->_ApplyItemBonuses(item, slot, apply);'
    language: cpp
  notes: Implementation details include handling of item bonus types and their effects
    on player stats. Performance considerations involve avoiding unnecessary calls
    during item updates. Thread safety is ensured through proper synchronization mechanisms
    in the core.
  warnings: This method should not be called directly without proper context, as it
    may cause stat inconsistencies if used incorrectly. Common mistake includes applying
    bonuses to non-existent items or using invalid slot values.
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:14:25.049704'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
