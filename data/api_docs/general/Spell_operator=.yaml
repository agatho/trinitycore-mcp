api:
  class: Spell
  method: operator=
  signature: Spell & Spell::operator=(const Spell & right)
documentation:
  brief: Assigns the state and data of one Spell object to another Spell object
  description: The operator= method performs a deep copy of all member variables from
    the right-hand Spell object to the left-hand Spell object. This assignment operator
    ensures that both objects are independent copies, with no shared references to
    internal data structures. In the context of TrinityCore's spell system, this is
    commonly used when duplicating spell instances for effects like stacking, chaining,
    or creating temporary spell states during combat. The method handles proper memory
    management and ensures all spell-related data including targets, casters, and
    spell parameters are correctly transferred.
  parameters:
  - name: right
    description: The source Spell object whose state will be copied to the current
      Spell object
  returns: A reference to the current Spell object (this) after the assignment has
    been completed, enabling chained assignments
  examples:
  - title: Basic spell assignment
    code: 'Spell* spell1 = new Spell(caster, spellInfo);

      Spell* spell2 = new Spell();

      *spell2 = *spell1; // Assigns all data from spell1 to spell2

      // Both objects now have identical state but are separate instances'
    language: cpp
  - title: Chained assignment example
    code: 'Spell* spellA = new Spell(caster, spellInfo);

      Spell* spellB = new Spell();

      Spell* spellC = new Spell();

      *spellC = *spellB = *spellA; // Chained assignment

      // All three objects now contain the same spell data'
    language: cpp
  notes: This operator performs a deep copy of all internal spell data structures,
    which may involve significant memory allocation and copying operations. It's important
    to note that this operation does not validate the spell state or reinitialize
    any runtime components - it simply copies the raw data. The method is typically
    used in spell handling code where multiple instances of the same spell need to
    be created with identical properties.
  warnings: When using this operator, be aware that it creates a complete copy of
    all internal spell data structures. If the Spell object contains large or complex
    data members (such as target lists or effect parameters), this operation may have
    performance implications. Additionally, this method does not perform any validation
    on the source spell state, so copying an invalid or partially initialized Spell
    object will result in copying invalid data.
  related:
  - Spell::Spell()
  - Spell::~Spell()
  - Spell::Clone()
  - Spell::Initialize()
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:48:30.747240'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
