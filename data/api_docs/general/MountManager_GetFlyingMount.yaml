api:
  class: MountManager
  method: GetFlyingMount
  signature: const MountInfo * MountManager::GetFlyingMount(int * player) const
documentation:
  brief: Retrieves the flying mount information for the specified player.
  description: The GetFlyingMount method retrieves the mount information associated
    with a player's currently active flying mount. This method is typically used in
    the context of World of Warcraft's TrinityCore server implementation to determine
    which mount a player is currently using for flight. The returned MountInfo structure
    contains details about the mount such as its ID, display ID, and other relevant
    properties. The method assumes that the player has an active flying mount; if
    no flying mount is equipped or available, it may return a null pointer or invalid
    data depending on implementation. This functionality is essential for handling
    player movement mechanics, especially in scenarios involving flight paths, mount
    management, or custom game logic requiring knowledge of a player's current flying
    capability.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID). This parameter is used to locate and retrieve the specific player's
      flying mount information from internal data structures.
  returns: A pointer to a const MountInfo structure containing details about the player's
    flying mount. Returns nullptr if no valid flying mount is found for the specified
    player, or if the player does not exist.
  examples:
  - title: Basic Usage Example
    code: "int playerId = 12345;\nconst MountInfo* flyingMount = mountManager.GetFlyingMount(&playerId);\n\
      if (flyingMount != nullptr) {\n    // Use the flying mount information\n   \
      \ printf(\"Player is using flying mount ID: %d\\n\", flyingMount->id);\n} else\
      \ {\n    printf(\"Player has no active flying mount.\\n\");\n}"
    language: cpp
  - title: Advanced Usage with Error Handling
    code: "int playerId = 12345;\nconst MountInfo* mount = mountManager.GetFlyingMount(&playerId);\n\
      if (mount && mount->id > 0) {\n    // Validate that the mount is actually usable\n\
      \    if (mount->displayId > 0) {\n        printf(\"Flying mount display ID:\
      \ %d\\n\", mount->displayId);\n    }\n} else {\n    // Handle case where player\
      \ has no flying mount or invalid data\n    printf(\"No valid flying mount found\
      \ for player %d.\\n\", playerId);\n}"
    language: cpp
  notes: This method relies on internal player state tracking and assumes that the
    player object is properly initialized and registered within the server's system.
    Performance-wise, this method should be relatively fast as it accesses precomputed
    data structures, but frequent calls without caching may impact performance in
    high-traffic scenarios.
  warnings: Ensure that the player GUID passed to this method is valid and corresponds
    to an actual logged-in player; otherwise, the behavior is undefined. Also note
    that this method does not validate whether the mount is currently usable or available
    for flight - it only retrieves stored information.
  related:
  - GetMount
  - SetFlyingMount
  - HasFlyingMount
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T10:18:39.988691'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
