api:
  class: UpdateResult
  method: UpdateResult
  signature: void UpdateResult::UpdateResult(const size_t updated_, const size_t recent_,
    const size_t archived_)
documentation:
  brief: Initializes the UpdateResult object with updated, recent, and archived counts.
  description: The UpdateResult constructor initializes an object that tracks statistics
    related to data updates within the TrinityCore system. It accepts three size_t
    parameters representing the number of items that were updated, recently processed,
    and archived respectively. This class is typically used in database synchronization
    or data processing workflows where tracking the state of records is important
    for maintaining consistency and performance. The method does not perform any validation
    on the input values, so it's the caller's responsibility to ensure meaningful
    values are passed.
  parameters:
  - name: updated_
    description: The count of items that were successfully updated in the data source
  - name: recent_
    description: The count of items that were recently processed or added to the data
      source
  - name: archived_
    description: The count of items that were archived or moved to a historical state
  returns: null
  examples:
  - title: Basic Initialization
    code: UpdateResult result(150, 25, 75);
    language: cpp
  - title: Usage in Data Processing Context
    code: "void ProcessDatabaseUpdates() {\n    size_t updated = 0;\n    size_t recent\
      \ = 0;\n    size_t archived = 0;\n    // ... perform database operations ...\n\
      \    UpdateResult stats(updated, recent, archived);\n    // Use stats for logging\
      \ or reporting\n}"
    language: cpp
  notes: This constructor is typically used internally by TrinityCore's database management
    systems. The values passed to this constructor are stored as member variables
    and can be accessed via corresponding getter methods if available. It's important
    to note that this is a constructor, not a method, so it should be called during
    object instantiation rather than as a function call.
  warnings: Ensure that the parameters represent valid counts (non-negative values)
    as negative numbers may cause unexpected behavior in downstream processing logic.
    The class assumes all inputs are meaningful and does not perform any validation
    checks.
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T02:54:15.300767'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
