api:
  class: ThreatManager
  method: GetCurrentVictim
  signature: Unit * ThreatManager::GetCurrentVictim()
documentation:
  brief: Returns the current target unit that the mob is attacking.
  description: The GetCurrentVictim method retrieves the Unit* pointer to the currently
    active target that a creature or NPC is attacking. This represents the primary
    target in the threat list, which is typically the player or pet that has the highest
    threat level on the creature's aggro list. The method is commonly used in AI scripts
    and combat logic to determine which unit should be targeted for attack or spell
    casting. It provides access to the current target without modifying the threat
    list, making it useful for checking the current state of the creature's engagement.
  parameters: []
  returns: Returns a pointer to the Unit object that is currently being attacked by
    this creature, or nullptr if no valid target exists. The returned Unit may be
    a player, pet, or other unit depending on the creature's current threat situation.
  examples:
  - title: Basic usage example
    code: "Unit* target = pCreature->GetThreatManager()->GetCurrentVictim();\nif (target)\n\
      {\n    // Use target for attack or spell casting\n}"
    language: cpp
  - title: Advanced usage with threat checking
    code: "Unit* target = pCreature->GetThreatManager()->GetCurrentVictim();\nif (target\
      \ && target->IsAlive())\n{\n    // Perform attack or spell casting on active\
      \ target\n    pCreature->AI()->AttackStart(target);\n}"
    language: cpp
  notes: This method is part of the ThreatManager class and should be used carefully
    in AI scripts. The returned pointer may become invalid if the target dies or leaves
    combat, so proper checks should be performed before using it. This method does
    not modify the threat list but simply retrieves the current victim.
  warnings: Be cautious when using this method as it can return nullptr if no valid
    target exists. Always check for null before using the returned pointer to avoid
    crashes. The method may also return a stale pointer if the target has been removed
    from the threat list.
  related:
  - GetThreatList
  - AddThreat
  - RemoveThreat
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:12:22.217114'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
