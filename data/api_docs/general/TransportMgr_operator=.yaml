api:
  class: TransportMgr
  method: operator=
  signature: TransportMgr & TransportMgr::operator=(TransportMgr && param0)
documentation:
  brief: Moves a TransportMgr object by transferring ownership of its resources to
    another TransportMgr instance.
  description: The operator= method performs a move assignment operation on a TransportMgr
    object, transferring all owned resources from the source object to the target
    object. This is typically used when assigning one TransportMgr instance to another,
    allowing efficient resource management by avoiding unnecessary copying. The method
    ensures that the source object is left in a valid but unspecified state after
    the move operation. In the context of TrinityCore's transport system, this operation
    might be used when replacing or updating transport entities such as boats or elevators
    within the game world.
  parameters: []
  returns: A reference to the TransportMgr object that received the moved resources,
    enabling chained assignment operations.
  examples:
  - title: Basic Move Assignment
    code: 'TransportMgr sourceTransport;

      // ... populate sourceTransport ...

      TransportMgr targetTransport = std::move(sourceTransport); // Uses move constructor

      // Or alternatively:

      targetTransport = std::move(sourceTransport); // Uses move assignment operator'
    language: cpp
  - title: Move Assignment in Transport Management Context
    code: "void UpdateTransport(TransportMgr& currentTransport, TransportMgr&& newTransport)\
      \ {\n    currentTransport = std::move(newTransport);\n    // newTransport is\
      \ now in a valid but unspecified state\n}"
    language: cpp
  notes: This method is part of the C++ move semantics implementation and should only
    be called on rvalue references or explicitly moved objects. The source object
    after a move operation should not be used for further operations unless it's explicitly
    reset or reassigned.
  warnings: Attempting to use the source object after a move assignment may result
    in undefined behavior. Ensure that any pointers or references to the moved object
    are invalidated or updated accordingly.
  related:
  - TransportMgr::TransportMgr(TransportMgr&&)
  - TransportMgr::operator=(const TransportMgr&)
  - TransportMgr::TransportMgr(const TransportMgr&)
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T20:11:23.784851'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
