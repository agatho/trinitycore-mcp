api:
  class: BotThreatManager
  method: IsInThreatEmergency
  signature: bool BotThreatManager::IsInThreatEmergency() const
documentation:
  brief: Determines whether the bot is currently in a threat emergency state.
  description: The IsInThreatEmergency method checks if the bot's current threat level
    has reached a critical threshold that triggers an emergency response behavior.
    This typically occurs when the bot's aggro level exceeds a predefined limit, indicating
    that the bot is at risk of being attacked or killed by nearby enemies. The method
    evaluates the bot's threat status against internal emergency conditions and returns
    true if the emergency state is active. This functionality is crucial for bots
    to make tactical decisions such as fleeing, seeking assistance, or activating
    defensive mechanisms.
  parameters: []
  returns: Returns true if the bot is currently in a threat emergency state, indicating
    that its threat level has exceeded critical thresholds and emergency behavior
    should be activated. Returns false if the bot's threat level is within normal
    bounds and no emergency response is required.
  examples:
  - title: Basic Emergency Check
    code: "if (botThreatManager->IsInThreatEmergency()) {\n    // Execute emergency\
      \ escape behavior\n    bot->SetBehavior(BotBehavior::ESCAPE);\n}"
    language: cpp
  - title: Emergency State Monitoring
    code: "void BotAI::UpdateEmergencyState() {\n    if (threatManager->IsInThreatEmergency())\
      \ {\n        // Log emergency event\n        sLog->outString(\"Bot %u entered\
      \ threat emergency state\", bot->GetGUID().GetCounter());\n        // Trigger\
      \ emergency cooldown or special ability\n        bot->ActivateEmergencyAbility();\n\
      \    }\n}"
    language: cpp
  notes: This method likely relies on internal threat calculations and may be affected
    by the bot's current target, nearby enemies, and combat stance. The emergency
    threshold is probably configurable through bot settings or difficulty levels.
    The method should be called frequently during combat updates to ensure timely
    response to changing threat conditions.
  warnings: This method may not be thread-safe if called from different threads simultaneously.
    Ensure that threat calculations are properly synchronized when accessing this
    method in multi-threaded environments. The emergency state might persist even
    after the immediate threat has been resolved, so proper cleanup or reset logic
    should be implemented.
  related:
  - GetThreatLevel
  - SetThreatEmergency
  - ResetThreatState
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T16:39:48.010478'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
