api:
  class: StrategyFactory
  method: CreatePvEStrategies
  signature: int StrategyFactory::CreatePvEStrategies()
documentation:
  brief: Creates and initializes all PvE combat strategies for AI-controlled units
  description: The CreatePvEStrategies method is responsible for setting up and configuring
    all PvE (Player versus Environment) combat strategies within the TrinityCore AI
    system. This method typically initializes strategy objects that define how AI-controlled
    creatures should behave during encounters with players in PvE scenarios. It handles
    the creation of various strategy types such as melee combat, ranged attacks, spell
    casting, and defensive behaviors. The method ensures that each AI unit has appropriate
    strategies based on its creature type, level, and encounter context. This is a
    core part of the TrinityCore's AI framework that enables intelligent NPC behavior
    in world encounters.
  parameters: []
  returns: Returns an integer value representing the number of PvE strategies successfully
    created and initialized. A return value of 0 typically indicates no strategies
    were created, while positive values indicate successful creation of that many
    strategy objects.
  examples:
  - title: Basic Usage
    code: "StrategyFactory factory;\nint strategyCount = factory.CreatePvEStrategies();\n\
      if (strategyCount > 0) {\n    // Successfully created PvE strategies\n    printf(\"\
      Created %d PvE strategies\\n\", strategyCount);\n}"
    language: cpp
  - title: Strategy Validation
    code: "StrategyFactory factory;\nint result = factory.CreatePvEStrategies();\n\
      if (result < 0) {\n    // Handle error case\n    printf(\"Failed to create PvE\
      \ strategies\\n\");\n} else if (result == 0) {\n    // No strategies created,\
      \ may be expected for certain creature types\n    printf(\"No PvE strategies\
      \ created\\n\");\n} else {\n    // Successfully created strategies\n    printf(\"\
      Successfully created %d PvE strategies\\n\", result);\n}"
    language: cpp
  notes: This method is typically called during AI initialization or when loading
    creature data. The actual strategy creation may depend on the creature's AI type,
    level, and available abilities. Developers should be aware that this method may
    have performance implications if called frequently or with large numbers of creatures.
    The method likely interacts with internal strategy registries and may cache strategy
    objects for reuse.
  warnings: This method should not be called during active combat scenarios as it
    may interfere with existing AI behavior. Ensure proper synchronization if called
    from multiple threads. The return value should always be checked to verify successful
    strategy creation, especially in production environments where strategy failures
    could lead to unexpected AI behavior.
  related:
  - CreatePvPStrategies
  - CreateDefaultStrategies
  - GetStrategyByName
  - RegisterStrategy
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T20:46:47.594669'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
