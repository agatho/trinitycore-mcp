api:
  class: Unit
  method: IsScriptOverriden
  signature: AuraEffect * Unit::IsScriptOverriden(const SpellInfo * spell, int32 script)
    const
documentation:
  brief: Checks if a spell's script override is active and returns the corresponding
    AuraEffect.
  description: This method determines whether a specific spell's script override is
    currently active on the unit, returning the associated AuraEffect if it exists.
    It is commonly used in World of Warcraft's TrinityCore framework to manage spell
    effects that are overridden by custom scripts or modifications. The method evaluates
    the provided SpellInfo structure and checks if the specified script ID has an
    active override in the unit's aura system. This functionality is essential for
    implementing custom spell behaviors, such as overriding default spell mechanics
    or applying special effects based on script conditions.
  parameters:
  - name: spell
    description: Pointer to the SpellInfo structure defining the spell being checked.
      This parameter must not be null and should represent a valid spell definition
      within the game's spell system.
  - name: script
    description: Integer identifier representing the specific script override being
      evaluated. This value typically corresponds to a predefined script ID used in
      the game's scripting system, and must be within valid range for the spell's
      override mechanism.
  returns: Returns a pointer to the AuraEffect object that represents the active override
    if one exists, or nullptr if no such override is found. The returned AuraEffect
    may contain information about the override's duration, application, or other relevant
    properties depending on how the script override is implemented.
  examples:
  - title: Basic usage example
    code: "if (AuraEffect* ae = unit->IsScriptOverriden(spellInfo, 12345)) {\n   \
      \ // Script override is active\n    // Do something with the aura effect\n}\n\
      else {\n    // No override found\n}"
    language: cpp
  - title: Advanced usage example
    code: "AuraEffect* ae = unit->IsScriptOverriden(spellInfo, 12345);\nif (ae &&\
      \ ae->GetModifierType() == SPELL_AURA_MOD_IGNORE_COMBAT\n    && ae->GetAmount()\
      \ > 0) {\n    // Check for specific override type and value\n    // Apply custom\
      \ logic based on the override\n}\nelse {\n    // Handle default behavior or\
      \ no override\n}"
    language: cpp
  notes: The method is typically used in conjunction with other spell-related methods
    to determine whether a script override is active. It may be called frequently
    during spell processing, so performance considerations should be taken into account
    when implementing custom logic around this method. Thread safety depends on the
    specific implementation of the unit's aura system and should be verified if used
    in multi-threaded contexts.
  warnings: This method requires that both the SpellInfo pointer and script ID are
    valid and properly initialized. Using invalid pointers or non-existent script
    IDs may lead to undefined behavior or crashes. Additionally, this method does
    not guarantee that the returned AuraEffect is fully initialized; developers should
    verify the effect's validity before using it.
  related:
  - IsScriptOverriden
  - GetAura
  - GetSpellInfo
  - GetAuraEffect
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T11:56:14.028208'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
