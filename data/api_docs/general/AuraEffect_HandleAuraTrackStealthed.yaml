api:
  class: AuraEffect
  method: HandleAuraTrackStealthed
  signature: void AuraEffect::HandleAuraTrackStealthed(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Handles the application or removal of stealth tracking aura effect on a target.
  description: The HandleAuraTrackStealthed method manages the behavior when a stealth
    tracking aura is applied or removed from a target. This method is typically invoked
    during aura application or removal events to update the target's stealth detection
    state. It ensures that units affected by this aura are properly tracked for stealth
    status changes, which may affect visibility, combat interactions, or other gameplay
    mechanics related to stealth detection. The method operates based on the provided
    aura application context and the mode of operation (apply or remove).
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This contains information about the aura's state, target,
      and other contextual data.
  - name: mode
    description: The mode of operation for the aura effect. Typically indicates whether
      the aura is being applied (1) or removed (0).
  - name: apply
    description: Boolean flag indicating if the aura is being applied (true) or removed
      (false). This determines the behavior within the method.
  returns: null
  examples:
  - title: Applying Stealth Tracking Aura
    code: 'AuraEffect* effect = new AuraEffect();

      AuraApplication* app = new AuraApplication();

      effect->HandleAuraTrackStealthed(app, 1, true); // Apply aura'
    language: cpp
  - title: Removing Stealth Tracking Aura
    code: 'AuraEffect* effect = new AuraEffect();

      AuraApplication* app = new AuraApplication();

      effect->HandleAuraTrackStealthed(app, 0, false); // Remove aura'
    language: cpp
  notes: This method is part of the internal aura handling system in TrinityCore and
    should not be directly called by external code unless implementing custom aura
    effects. The method relies on proper initialization of the AuraApplication object
    to function correctly.
  warnings: Incorrect usage of the mode parameter may lead to unexpected behavior
    in stealth detection systems. Ensure that the aura application context is valid
    before calling this method.
  related:
  - AuraEffect::HandleAuraApply
  - AuraEffect::HandleAuraRemove
  - AuraApplication::GetTarget
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:58:49.441361'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
