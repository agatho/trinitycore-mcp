api:
  class: SpellMgr
  method: GetSpellChainNode
  signature: const SpellChainNode * SpellMgr::GetSpellChainNode(uint32 spell_id) const
documentation:
  brief: Retrieves the spell chain node data for a given spell ID from the spell manager's
    internal database.
  description: The GetSpellChainNode method fetches the SpellChainNode structure associated
    with a specific spell identifier. This structure typically contains information
    about spell relationships, such as which spells are part of a chain or how they
    connect to other spells in the game's spell system. The method accesses an internal
    lookup table maintained by the SpellMgr class and returns a pointer to the corresponding
    node if found. If no matching spell chain node exists for the provided ID, it
    returns a null pointer. This functionality is crucial for handling spell interactions,
    such as determining whether one spell leads to another in a combo or sequence.
  parameters: []
  returns: A const pointer to a SpellChainNode object if a valid spell chain node
    exists for the given spell_id; otherwise, returns nullptr.
  examples:
  - title: Basic Usage
    code: "const SpellChainNode* node = sSpellMgr->GetSpellChainNode(12345);\nif (node\
      \ != nullptr) {\n    // Process the spell chain node data\n    printf(\"Spell\
      \ %u is part of a chain with %u links\\n\", 12345, node->next); \n} else {\n\
      \    printf(\"No chain information found for spell %u\\n\", 12345);\n}"
    language: cpp
  - title: Checking Spell Chain Relationships
    code: "uint32 spellId = 80000; // Example spell\nconst SpellChainNode* chainNode\
      \ = sSpellMgr->GetSpellChainNode(spellId);\nif (chainNode != nullptr && chainNode->prev\
      \ != 0) {\n    printf(\"Spell %u is chained from spell %u\\n\", spellId, chainNode->prev);\n\
      } else {\n    printf(\"Spell %u has no previous spell in the chain\\n\", spellId);\n\
      }"
    language: cpp
  notes: This method performs a lookup operation using an internal map or hash table,
    so performance is generally O(1) on average. The SpellChainNode structure may
    contain additional fields beyond just previous/next spell IDs, such as cost modifiers
    or effect changes. Ensure that the spell_id passed is valid and corresponds to
    an actual registered spell in the game's database.
  warnings: Do not assume that a non-null return value means the spell is active or
    usable; it only indicates that chain data exists for that spell ID. Also, be cautious
    about using this method during spell loading phases where internal structures
    might not yet be fully initialized.
  related:
  - GetSpellInfo
  - IsSpellInChain
  - GetSpellChainFirst
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:19:20.466022'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
