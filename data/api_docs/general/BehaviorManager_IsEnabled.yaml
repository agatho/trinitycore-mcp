api:
  class: BehaviorManager
  method: IsEnabled
  signature: bool BehaviorManager::IsEnabled() const
documentation:
  brief: Checks whether the behavior manager is currently enabled.
  description: The IsEnabled method determines if the BehaviorManager instance is
    active and functional within the game system. This flag typically controls whether
    AI behaviors, scripts, or other managed systems are allowed to execute. The method
    performs a simple state check and returns true if the manager is enabled, false
    otherwise. This functionality is commonly used in TrinityCore's AI framework to
    control the execution flow of various NPC behaviors and scripted events.
  parameters: []
  returns: Returns true if the BehaviorManager is currently enabled and operational;
    returns false if it is disabled or inactive.
  examples:
  - title: Basic Usage
    code: "if (behaviorManager.IsEnabled()) {\n    // Execute behavior logic\n   \
      \ behaviorManager.Update();\n}"
    language: cpp
  - title: Conditional Behavior Execution
    code: "void UpdateAI() {\n    if (!behaviorManager.IsEnabled()) {\n        return;\n\
      \    }\n    // Proceed with AI updates only when enabled\n    behaviorManager.ExecuteBehaviors();\n\
      }"
    language: cpp
  notes: This method is typically used in performance-critical code paths where checking
    the manager's state avoids unnecessary processing. The internal state of the BehaviorManager
    may be modified by other systems, such as during server startup/shutdown or configuration
    changes.
  warnings: null
  related:
  - BehaviorManager::Enable
  - BehaviorManager::Disable
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T17:37:58.385940'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
