api:
  class: Item
  method: GetSocketColor
  signature: uint32 Item::GetSocketColor(uint32 index) const
documentation:
  brief: Returns the color of the socket at the specified index.
  description: This method retrieves the color of a socket on an item, which is used
    for determining socket bonuses and gem compatibility. The method returns the socket
    color as a uint32 value representing the color type (e.g., 0 for Red, 1 for Blue,
    2 for Yellow). It is commonly used in conjunction with other socket-related methods
    to determine the socket bonus effects and validate gem insertion. This method
    does not modify any data; it simply reads the socket color from the item's socket
    information.
  parameters: []
  returns: Returns a uint32 value representing the socket color type. The value corresponds
    to the color enum (0 = Red, 1 = Blue, 2 = Yellow). If the index is invalid or
    the socket does not exist, it returns 0.
  examples:
  - title: Basic usage example
    code: "Item* item = player->GetItemByPos(ITEM_SLOT_HEAD);\nuint32 socketColor\
      \ = item->GetSocketColor(0);\nif (socketColor == 0)\n{\n    // Red socket\n}"
    language: cpp
  notes: This method is part of the socket system in TrinityCore and relies on internal
    item data structure. It should be used carefully when checking for valid socket
    indices, as invalid indices may lead to unexpected results.
  warnings: This method assumes that the item has sockets; if an item does not have
    sockets or the index exceeds the number of sockets, it will return 0. Be cautious
    when using this method with items that may not have sockets, such as non-socketed
    items.
  related:
  - GetSocketBonus
  - GetGem
  - GetSocket
  - GetEnchantment
  - GetItemTemplate
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T04:51:40.484681'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
