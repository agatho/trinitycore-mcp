api:
  class: BehaviorManager
  method: IsBusy
  signature: bool BehaviorManager::IsBusy() const
documentation:
  brief: Checks if the behavior manager is currently executing any active behaviors
    or tasks.
  description: The IsBusy method determines whether the BehaviorManager is currently
    engaged in processing active behaviors, such as movement, casting spells, or performing
    other AI-driven actions. This method is commonly used to prevent concurrent operations
    that might conflict with ongoing behavior execution. It typically returns true
    when there are pending or active behaviors in the manager's queue, and false otherwise.
    The check is usually performed before initiating new behaviors to ensure proper
    state management and avoid race conditions or conflicting actions.
  parameters: []
  returns: Returns true if the BehaviorManager is currently executing one or more
    behaviors; returns false if no behaviors are active or pending.
  examples:
  - title: Basic usage to prevent concurrent behavior execution
    code: "if (!behaviorManager.IsBusy()) {\n    behaviorManager.AddBehavior(new AttackBehavior(target));\n\
      }"
    language: cpp
  - title: Using IsBusy in a loop to wait for behavior completion
    code: "while (behaviorManager.IsBusy()) {\n    // Wait for current behavior to\
      \ complete\n    std::this_thread::sleep_for(std::chrono::milliseconds(10));\n\
      }\nbehaviorManager.AddBehavior(new MoveToPositionBehavior(destination));"
    language: cpp
  notes: This method is typically implemented using atomic flags or thread-safe state
    tracking to ensure accurate results in multi-threaded environments. It's important
    to note that IsBusy may return false even if a behavior has been scheduled but
    not yet started, depending on the internal implementation details of the BehaviorManager.
  warnings: Avoid relying on IsBusy for critical game logic decisions as it might
    return false during brief transitions between behaviors. Always consider using
    additional synchronization mechanisms when implementing complex behavior chaining
    or state management.
  related:
  - AddBehavior
  - RemoveBehavior
  - ExecuteBehaviors
  - IsIdle
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:38:26.591646'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
