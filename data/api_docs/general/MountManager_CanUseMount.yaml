api:
  class: MountManager
  method: CanUseMount
  signature: bool MountManager::CanUseMount(int * player, const MountInfo & mount)
    const
documentation:
  brief: Determines whether a player can use a specified mount based on their current
    state and mount requirements.
  description: The CanUseMount method evaluates if a given player is eligible to use
    a specific mount. It checks various conditions such as player level, zone restrictions,
    mount availability, and any applicable debuffs or status effects that might prevent
    mounting. This function is crucial for maintaining game balance and ensuring players
    can only use mounts under appropriate circumstances. The method takes into account
    both the player's character state and the properties of the mount being requested.
  parameters:
  - name: player
    description: Pointer to the player object that is attempting to use the mount.
      This parameter represents the character instance performing the action.
  - name: mount
    description: Reference to a MountInfo structure containing details about the mount
      being checked for usability, including required level, zone restrictions, and
      other conditions.
  returns: Returns true if the player can use the specified mount under current conditions;
    otherwise returns false. This indicates whether the mount usage would be allowed
    given all relevant game state checks.
  examples:
  - title: Basic Mount Usage Check
    code: "Player* player = ...;\nMountInfo mount = GetMountById(12345);\nif (mountManager.CanUseMount(player,\
      \ mount)) {\n    // Allow player to mount\n    player->Mount(mount);\n} else\
      \ {\n    // Inform player they cannot use the mount\n    player->SendSystemMessage(\"\
      You cannot use this mount at this time.\");\n}"
    language: cpp
  - title: Checking Mount Eligibility Before Displaying in UI
    code: "void UpdateMountList(Player* player) {\n    for (auto& mount : availableMounts)\
      \ {\n        if (mountManager.CanUseMount(player, mount)) {\n            //\
      \ Add to list of usable mounts\n            usableMounts.push_back(mount);\n\
      \        }\n    }\n}"
    language: cpp
  notes: This method likely performs several checks including player level requirements,
    zone-specific restrictions, and status effects that prevent mounting. It may also
    consider faction-specific mount availability and other game mechanics like being
    in combat or underwater. The implementation might cache certain results for performance
    reasons.
  warnings: Be cautious when using this method in high-frequency scenarios as it may
    involve multiple checks and could impact performance if called excessively. Ensure
    the player object is valid before calling to avoid crashes.
  related:
  - MountManager::CanUseMount
  - Player::Mount
  - Player::Unmount
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:22:19.482552'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
