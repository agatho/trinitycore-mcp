api:
  class: QuestAcceptanceManager
  method: GetZonePriority
  signature: float QuestAcceptanceManager::GetZonePriority(const int * quest) const
documentation:
  brief: Calculates and returns the priority value for a specified quest based on
    zone-related factors.
  description: The GetZonePriority method determines the relative importance or urgency
    of a given quest within the context of the player's current zone. This value is
    typically used by the quest acceptance system to prioritize which quests should
    be presented to players first, based on their location and the quest's associated
    zone data. The method takes a pointer to a quest ID and evaluates various zone-specific
    criteria such as zone level range, quest availability, and proximity to quest
    givers to compute a floating-point priority score. A higher return value generally
    indicates a more relevant or urgent quest for the player's current location.
  parameters:
  - name: quest
    description: A pointer to an integer representing the quest ID. The method dereferences
      this pointer to obtain the actual quest identifier for processing.
  returns: Returns a float value that represents the calculated zone priority of the
    specified quest. Higher values indicate higher priority, with typical ranges being
    between 0.0 (lowest priority) and 1.0 (highest priority). The exact scale and
    calculation logic depend on internal TrinityCore quest management and zone configuration
    data.
  examples:
  - title: Basic usage to check a quest's zone priority
    code: "int questId = 12345;\nfloat priority = manager.GetZonePriority(&questId);\n\
      if (priority > 0.7f) {\n    // Quest is highly relevant for current zone\n \
      \   printf(\"High priority quest: %.2f\\n\", priority);\n}"
    language: cpp
  notes: This method relies on internal quest and zone data structures maintained
    by TrinityCore's core systems. It may involve database lookups or cached computations
    depending on how the QuestAcceptanceManager is implemented. The returned value
    should not be used as a definitive indicator of quest eligibility, but rather
    as a heuristic for prioritization.
  warnings: Ensure that the quest ID passed to this method is valid and corresponds
    to an existing quest in the database; otherwise, behavior may be undefined or
    result in incorrect priority calculations. This method assumes that the player's
    current zone context has been properly initialized before calling.
  related:
  - GetQuestPriority
  - IsQuestValidForZone
  - GetPlayerZoneId
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:52:35.859650'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
