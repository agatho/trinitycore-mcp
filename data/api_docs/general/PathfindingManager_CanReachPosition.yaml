api:
  class: PathfindingManager
  method: CanReachPosition
  signature: bool PathfindingManager::CanReachPosition(const int & pos, float tolerance)
documentation:
  brief: Determines whether a given position is reachable within the navigation mesh.
  description: The CanReachPosition method checks if a specified position can be reached
    by an AI agent or unit using the pathfinding system. It evaluates the navigability
    of the target location based on the current navigation mesh data and any defined
    movement constraints. This method is commonly used in AI decision-making processes
    to determine valid movement targets before attempting to pathfind. The tolerance
    parameter allows for a small margin of error when evaluating reachability, which
    can be useful for handling minor discrepancies in position calculations or dynamic
    obstacles.
  parameters:
  - name: pos
    description: The target position to check for reachability. This is typically
      represented as an integer identifier or coordinate value that uniquely identifies
      a location within the game world's navigation mesh.
  - name: tolerance
    description: A floating-point value representing the acceptable margin of error
      when determining reachability. Higher tolerance values allow for more lenient
      checks, potentially accepting positions that are slightly outside the strict
      navigable boundaries.
  returns: Returns true if the specified position is reachable within the navigation
    mesh considering the given tolerance, false otherwise. The method will return
    false if the position is outside the valid navigation area or blocked by obstacles
    that cannot be bypassed.
  examples:
  - title: Basic Reachability Check
    code: "if (pathfindingManager->CanReachPosition(targetPosition, 0.5f)) {\n   \
      \ // Proceed with movement to target position\n    unit->MoveTo(targetPosition);\n\
      } else {\n    // Target is not reachable, consider alternative actions\n   \
      \ unit->SetTarget(nullptr);\n}"
    language: cpp
  - title: Advanced Reachability with Dynamic Tolerance
    code: "float tolerance = unit->GetSpeed() * 0.1f; // Adjust tolerance based on\
      \ movement speed\nif (pathfindingManager->CanReachPosition(targetPosition, tolerance))\
      \ {\n    // Execute pathfinding and movement\n    Movement::MoveSplineInit init(unit);\n\
      \    init.MoveTo(targetPosition);\n    init.SetWalk(false);\n    init.Launch();\n\
      }"
    language: cpp
  notes: This method relies on the underlying navigation mesh data being properly
    initialized and updated. Performance may be impacted by complex terrain or high-density
    obstacle configurations. The method does not account for dynamic changes in the
    environment that occur after the check is performed, so it should be used in conjunction
    with real-time pathfinding when necessary.
  warnings: The tolerance parameter should be carefully chosen to balance between
    false positives and negatives. Using excessively high tolerance values may result
    in attempting to move to positions that are actually unreachable. Additionally,
    this method assumes the navigation mesh is up-to-date; stale mesh data can lead
    to incorrect results.
  related:
  - FindPath
  - IsInLineOfSight
  - GetNearestWaypoint
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:44:17.379207'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
