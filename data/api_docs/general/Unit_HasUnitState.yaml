api:
  class: Unit
  method: HasUnitState
  signature: bool Unit::HasUnitState(const uint32 f) const
documentation:
  brief: Checks if a unit has specific unit state flags.
  description: This method determines whether a Unit object possesses certain state
    flags, which represent various conditions or states that the unit can be in. It
    is commonly used to check for movement states, combat status, or other special
    conditions. The method returns true if any of the specified flags are set, false
    otherwise. This functionality is essential for determining unit behavior and status
    during gameplay mechanics such as movement, combat, and spell effects.
  parameters: []
  returns: Returns true if the unit has any of the specified state flags set, false
    otherwise. The method checks against a bitmask of unit states that can include
    movement states, combat states, or other special conditions.
  examples:
  - title: Basic usage example
    code: "if (unit->HasUnitState(UNIT_STATE_STUNNED)) {\n    // Do something\n}\n"
    language: cpp
  notes: The method uses bitwise operations to check if any of the specified flags
    are set. It is important to note that this method does not modify the unit's state;
    it only checks whether a given flag is currently active.
  warnings: This method should be used carefully when checking for multiple states,
    as it may lead to performance issues if used excessively in tight loops. Also,
    ensure that the flags being checked are valid and properly defined within the
    context of TrinityCore's unit state system.
  related:
  - HasUnitState
  - SetUnitState
  - ClearUnitState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:16:14.685962'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
