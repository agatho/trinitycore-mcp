api:
  class: AuraEffect
  method: HandleForceMoveForward
  signature: void AuraEffect::HandleForceMoveForward(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Applies or removes a force movement effect that pushes the target forward.
  description: The HandleForceMoveForward method is responsible for managing the application
    and removal of a force movement aura effect that pushes the affected unit forward
    in the direction they are facing. This method is typically invoked during aura
    application or removal events, and it modifies the target's movement behavior
    by applying a forward motion force. The effect can be used for various game mechanics
    such as knockback effects, pull effects, or forced movement abilities. It interacts
    with the target's movement system to ensure proper execution of the forced movement.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      the aura being applied or removed. This parameter provides context for the aura
      effect and its application state.
  - name: mode
    description: The mode of operation, typically indicating whether the effect is
      being applied (1) or removed (0). This value determines how the force movement
      is handled during the aura lifecycle.
  - name: apply
    description: Boolean flag indicating if the effect should be applied (true) or
      removed (false). When true, the target is forced forward; when false, any active
      force movement is stopped.
  returns: null
  examples:
  - title: Basic usage of HandleForceMoveForward
    code: "void ApplyForceMovement(AuraEffect* auraEffect, AuraApplication* aurApp,\
      \ uint8 mode, bool apply)\n{\n    auraEffect->HandleForceMoveForward(aurApp,\
      \ mode, apply);\n}"
    language: cpp
  - title: Using HandleForceMoveForward in a custom spell handler
    code: "void SpellHandler::HandleKnockbackSpell(Spell* spell)\n{\n    Unit* target\
      \ = spell->GetHitTarget();\n    if (!target)\n        return;\n\n    AuraEffect*\
      \ auraEffect = target->GetAuraEffect(SPELL_AURA_FORCE_MOVE_FORWARD, 0);\n  \
      \  if (auraEffect)\n    {\n        AuraApplication* aurApp = target->GetAuraApplication(spell->GetSpellInfo()->Id);\n\
      \        auraEffect->HandleForceMoveForward(aurApp, 1, true);\n    }\n}"
    language: cpp
  notes: This method directly manipulates the movement state of the affected unit.
    It should only be called from within aura application/removal handlers to ensure
    proper synchronization with the game's movement system. The actual force movement
    implementation may vary depending on the specific aura type and its configuration.
  warnings: Improper usage of this method can lead to unexpected movement behavior
    or client-server desynchronization. Ensure that the aura application context is
    valid before calling this method, and always verify that the target unit exists
    and is in a valid state for movement modification.
  related:
  - AuraEffect::HandlePeriodicDummy
  - AuraEffect::HandleApplyOrRemove
  - Unit::SetForceMoveForward
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:49:16.118661'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
