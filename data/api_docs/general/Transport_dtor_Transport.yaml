api:
  class: Transport
  method: ~Transport
  signature: void Transport::~Transport()
documentation:
  brief: Destroys a Transport object and cleans up its resources.
  description: The Transport destructor is called when a Transport object goes out
    of scope or is explicitly deleted. It performs necessary cleanup operations such
    as removing the transport from the game world, notifying associated passengers
    (players or creatures) that they are no longer on the transport, and freeing any
    memory allocated for the transport's data structures. This method ensures proper
    resource management and prevents memory leaks in the TrinityCore server environment.
  parameters: []
  returns: null
  examples:
  - title: Automatic destruction of Transport object
    code: "void SomeFunction()\n{\n    Transport* transport = new Transport();\n \
      \   // ... use transport ...\n    delete transport; // Destructor called here\n\
      }"
    language: cpp
  - title: Transport object going out of scope
    code: "Transport* CreateAndUseTransport()\n{\n    Transport transport;\n    //\
      \ ... perform operations with transport ...\n    return &transport; // Warning:\
      \ returning reference to local object\n}"
    language: cpp
  notes: The destructor is automatically invoked by the C++ runtime when an object
    is destroyed. It's important to note that Transport objects should not be destroyed
    manually if they are managed by the server's object pooling or container systems,
    as this can lead to undefined behavior.
  warnings: Never manually delete a Transport object if it's managed by the server's
    internal systems. Also, avoid returning references or pointers to local Transport
    objects from functions, as this will result in dangling pointers when the destructor
    is called.
  related:
  - Transport::Transport
  - Transport::Update
  - Transport::AddPassenger
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:23:13.910375'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
