api:
  class: Player
  method: StoreNewItemInBestSlots
  signature: bool Player::StoreNewItemInBestSlots(uint32 itemId, uint32 amount, int
    context)
documentation:
  brief: Stores a new item in the best available slots for the player.
  description: This method attempts to store a newly created item with the specified
    item ID and amount into the player's inventory, using the most efficient slot
    allocation possible. It considers all available slots including bags, backpack,
    and equipped items, and will automatically distribute the item across multiple
    slots if necessary. The method returns true upon successful storage or false if
    the item cannot be stored due to inventory constraints or other issues. This method
    is commonly used in game mechanics where players receive items through quests,
    loot, or other in-game events.
  parameters:
  - name: itemId
    description: The unique identifier of the item to be stored. This must correspond
      to a valid item in the game database.
  - name: amount
    description: The quantity of items to be stored. This value must be greater than
      zero, representing the number of items being added to inventory.
  - name: context
    description: The context for item storage. This parameter determines how the item
      is handled during storage and may affect the outcome of the method.
  returns: Returns true if the item was successfully stored in an available slot,
    or false if the item could not be stored due to inventory constraints or other
    issues.
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      bool result = player->StoreNewItemInBestSlots(12345, 1, 0);'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = new Player();

      uint32 itemId = 12345;

      uint32 amount = 10;

      int context = 1;

      bool result = player->StoreNewItemInBestSlots(itemId, amount, context);'
    language: cpp
  notes: This method is part of the core inventory management system in TrinityCore.
    It automatically handles item distribution across multiple slots and may trigger
    internal notifications for the player when items are successfully stored. Performance
    considerations include potential delays due to inventory checks and slot allocation
    logic.
  warnings: The method may fail silently if the item cannot be stored due to inventory
    constraints, which could lead to unexplained missing items in game mechanics.
    Developers should ensure that item IDs correspond to valid items in the database
    before calling this method.
  related:
  - Player::AddItem
  - Player::StoreItem
  - Player::ItemChanged
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:25:45.718092'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
