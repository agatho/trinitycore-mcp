api:
  class: Player
  method: ModifySkillBonus
  signature: void Player::ModifySkillBonus(uint32 skillid, int32 val, bool talent)
documentation:
  brief: Modifies skill bonus for a player's specified skill.
  description: This method adjusts the skill bonus value for a given skill ID, allowing
    developers to modify the skill's base value or add talent-based bonuses. It is
    commonly used in conjunction with skill-related operations to adjust player skill
    levels and provide custom skill modifications. The method supports both regular
    skill bonuses and talent-based bonuses, making it useful for implementing custom
    skill systems or modifying existing ones.
  parameters:
  - name: skillid
    description: The unique identifier of the skill to modify, typically corresponding
      to a specific skill in the game database.
  - name: val
    description: The value to add or subtract from the skill bonus. Positive values
      increase the skill bonus, negative values decrease it.
  - name: talent
    description: Boolean flag indicating whether the modification is applied as a
      talent-based bonus (true) or regular skill bonus (false).
  returns: null
  examples:
  - title: Basic Skill Bonus Modification
    code: 'Player* player = GetPlayer();

      player->ModifySkillBonus(129, 50, false);

      // Adds 50 to the first aid skill bonus'
    language: cpp
  - title: Talent-Based Skill Bonus Modification
    code: 'Player* player = GetPlayer();

      player->ModifySkillBonus(129, 25, true);

      // Adds 25 to the first aid skill bonus as a talent bonus'
    language: cpp
  notes: The method is typically used in conjunction with other skill-related methods
    such as GetSkillValue or SetSkillValue to fully control skill modifications. It
    does not directly affect skill levels but rather modifies the bonus value associated
    with a skill. Performance considerations include potential for multiple calls
    during player initialization, so it should be used carefully in loops.
  warnings: Improper use of this method can lead to incorrect skill values and may
    cause issues with skill progression or talent trees. Care must be taken when applying
    negative values to avoid unintended consequences in skill calculations.
  related:
  - GetSkillValue
  - SetSkillValue
  - ModifySkillValue
  - AddSkill
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T00:32:36.269391'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
