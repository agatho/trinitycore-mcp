api:
  class: WorldObject
  method: IsValidAssistTarget
  signature: bool WorldObject::IsValidAssistTarget(const WorldObject * target, const
    SpellInfo * bySpell) const
documentation:
  brief: Determines whether a target object is valid for assistance based on spell
    and object properties.
  description: The IsValidAssistTarget method evaluates whether a given WorldObject
    can be considered a valid target for assistance in the context of a spell or ability.
    This method checks various conditions such as faction neutrality, creature type,
    and target eligibility to ensure that the target is appropriate for the spell's
    intended use. It is commonly used during spell casting to validate assist targets,
    particularly for spells that require a specific class of target (e.g., friendly
    units, enemies, or specific creature types). The method considers both the target's
    properties and the spell's requirements to determine validity.
  parameters:
  - name: target
    description: A pointer to the WorldObject that is being evaluated as a potential
      assist target. Must not be null.
  - name: bySpell
    description: A pointer to the SpellInfo structure representing the spell or ability
      that is requesting the target validation. Can be null if checking general validity
      without spell context.
  returns: Returns true if the target object is valid for assistance according to
    the rules defined by the spell and object properties, false otherwise.
  examples:
  - title: Basic usage in spell targeting
    code: "if (caster->IsValidAssistTarget(target, spellInfo)) {\n    // Proceed with\
      \ spell casting or assist logic\n}"
    language: cpp
  - title: Checking target validity for a specific spell
    code: "SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(12345);\nif (IsValidAssistTarget(target,\
      \ spellInfo)) {\n    // Target is valid for spell 12345\n}"
    language: cpp
  notes: This method is typically used in the context of spell targeting and assist
    logic. It may perform checks related to faction, creature type, and target state
    (e.g., alive or dead). The implementation may vary depending on the specific spell
    and object types involved.
  warnings: Ensure that both target and bySpell parameters are valid pointers before
    calling this method to avoid undefined behavior. The method assumes proper initialization
    of WorldObject and SpellInfo structures.
  related:
  - WorldObject::IsHostileTo
  - WorldObject::IsFriendlyTo
  - WorldObject::IsInMap
  - WorldObject::GetTypeId
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T21:18:40.949136'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
