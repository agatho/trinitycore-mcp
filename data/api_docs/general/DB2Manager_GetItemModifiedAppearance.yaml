api:
  class: DB2Manager
  method: GetItemModifiedAppearance
  signature: const ItemModifiedAppearanceEntry * DB2Manager::GetItemModifiedAppearance(uint32
    itemId, uint32 appearanceModId) const
documentation:
  brief: Retrieves the item modified appearance entry for a given item ID and appearance
    modifier ID.
  description: The GetItemModifiedAppearance method fetches an ItemModifiedAppearanceEntry
    from the database using the provided item ID and appearance modifier ID. This
    entry contains data related to how an item's visual appearance is modified, such
    as cosmetic changes or customizations that alter its look without changing its
    core properties. The method is typically used in World of Warcraft client-server
    interactions where item visuals need to be dynamically adjusted based on player
    choices or game events. It performs a lookup within the DB2 database files managed
    by TrinityCore's DB2Manager class.
  parameters:
  - name: itemId
    description: The unique identifier of the item for which to retrieve the modified
      appearance data.
  - name: appearanceModId
    description: The modifier ID that defines how the item's appearance is altered,
      such as color variations or style changes.
  returns: A pointer to an ItemModifiedAppearanceEntry structure containing the appearance
    modification data for the specified item and modifier. Returns nullptr if no matching
    entry exists in the database.
  examples:
  - title: Basic Usage Example
    code: "const ItemModifiedAppearanceEntry* entry = sDB2Manager->GetItemModifiedAppearance(12345,\
      \ 67890);\nif (entry)\n{\n    // Use the appearance data\n    printf(\"Appearance\
      \ ID: %u\\n\", entry->ID);\n}"
    language: cpp
  - title: Checking for Valid Entry Before Use
    code: "uint32 itemId = 12345;\nuint32 appearanceModId = 67890;\nconst ItemModifiedAppearanceEntry*\
      \ entry = sDB2Manager->GetItemModifiedAppearance(itemId, appearanceModId);\n\
      \nif (entry != nullptr)\n{\n    // Process valid appearance data\n    std::cout\
      \ << \"Found modified appearance for item \" << itemId << std::endl;\n}\nelse\n\
      {\n    // Handle missing or invalid entry\n    std::cout << \"No modified appearance\
      \ found for item \" << itemId << std::endl;\n}"
    language: cpp
  notes: This method relies on the internal DB2 database cache managed by DB2Manager.
    Ensure that the required DB2 files are properly loaded before calling this function.
    The method is thread-safe as long as the underlying DB2 data structures are not
    modified during access.
  warnings: Do not assume that a non-null return value means the appearance modification
    is valid or usable in all contexts. Always validate the returned data against
    expected values and game logic requirements. Also, be aware that incorrect item
    or modifier IDs may lead to unexpected behavior or null returns.
  related:
  - GetItemEntry
  - GetItemVisualEntry
  - GetModifiedAppearanceMap
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:58:52.591593'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
