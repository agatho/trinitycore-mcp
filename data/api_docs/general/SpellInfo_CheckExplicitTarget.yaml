api:
  class: SpellInfo
  method: CheckExplicitTarget
  signature: SpellCastResult SpellInfo::CheckExplicitTarget(const WorldObject * caster,
    const WorldObject * target, const Item * itemTarget) const
documentation:
  brief: Checks if a spell can target a specific object, considering caster and item
    constraints.
  description: This method evaluates whether a spell can be cast on a given target
    object, taking into account the caster's requirements and any item targets that
    may be involved. It performs validation checks to ensure the spell's targeting
    rules are properly enforced, including checking for valid target types, distance
    restrictions, and other game mechanics constraints. The method is commonly used
    during spell casting to determine if a spell can proceed with its target selection.
  parameters:
  - name: caster
    description: The object that is casting the spell, typically a player or creature.
      This parameter determines the caster's capabilities and restrictions for spell
      targeting.
  - name: target
    description: The target object that the spell is attempting to cast on. This could
      be a player, creature, or game object depending on the spell's requirements.
  - name: itemTarget
    description: Optional item that may be involved in the spell casting process.
      This parameter allows for special handling of items that might affect spell
      targeting, such as those requiring specific item types or conditions.
  returns: Returns a SpellCastResult indicating whether the spell can target the specified
    object. Possible values include SPELL_CAST_OK, SPELL_FAILED, and other error codes
    depending on validation outcomes. The result provides detailed information about
    why a spell might fail to cast on the target.
  examples:
  - title: Basic spell targeting check
    code: SpellCastResult result = spellInfo->CheckExplicitTarget(caster, target,
      itemTarget);
    language: cpp
  - title: Using with specific spell targets
    code: "if (result == SPELL_CAST_OK)\n    {\n        // Proceed with spell casting\n\
      \    }\nelse\n    {\n        // Handle error condition\n    }"
    language: cpp
  notes: This method is typically used internally by the TrinityCore system during
    spell execution to validate target selection. Performance considerations include
    checking for valid targets and ensuring proper handling of item constraints. Thread
    safety depends on the context in which it's called, but generally should be safe
    within single-threaded contexts.
  warnings: The method may return different SpellCastResult values depending on the
    specific spell being checked. Care must be taken to properly interpret results,
    as some values may indicate temporary or permanent failures. Common mistakes include
    not checking for valid target types or ignoring item constraints that could affect
    spell casting.
  related:
  - SpellInfo::CheckTarget
  - SpellInfo::IsSpellValid
  - SpellInfo::HasEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:39:42.122513'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
