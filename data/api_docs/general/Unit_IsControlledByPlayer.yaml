api:
  class: Unit
  method: IsControlledByPlayer
  signature: bool Unit::IsControlledByPlayer() const
documentation:
  brief: Determines whether the unit is controlled by a player.
  description: This method checks if the current Unit object is under player control,
    meaning it is either a player character or an NPC that is currently being controlled
    by a player. The method returns true when the unit's controller is a player, and
    false otherwise. This functionality is crucial for determining player-controlled
    units in World of Warcraft's game mechanics, particularly when dealing with pet
    systems, mind control effects, and player-controlled NPCs.
  parameters: []
  returns: Returns true if the unit is controlled by a player, false otherwise. The
    method will return false for units controlled by AI or other non-player entities.
  examples:
  - title: Basic usage example
    code: "if (unit->IsControlledByPlayer()) {\n    // Unit is controlled by a player\n\
      \    // Do something specific to player-controlled units\n}"
    language: cpp
  - title: Checking control status in a combat situation
    code: "Unit* target = GetTarget();\nif (target && target->IsControlledByPlayer())\
      \ {\n    // Target is controlled by player, so we can perform actions\n    //\
      \ that are specific to player-controlled units\n}"
    language: cpp
  notes: This method is primarily used in conjunction with other control-related functions.
    It's important to note that this method will return false for units that are controlled
    by AI or other non-player entities, even if they are in combat. Performance-wise,
    this method is lightweight and should not cause any noticeable overhead.
  warnings: This method does not distinguish between player-controlled pets and player-controlled
    NPCs; it simply checks whether the unit has a player controller. Be cautious when
    using this method in scenarios where you need to differentiate between player-controlled
    pets and player-controlled NPCs, as they may behave differently in various contexts.
  related:
  - Unit::GetController
  - Unit::GetOwner
  - Unit::IsPlayer
  - Unit::IsCreature
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:11:42.718645'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
