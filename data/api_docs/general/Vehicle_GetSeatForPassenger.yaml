api:
  class: Vehicle
  method: GetSeatForPassenger
  signature: const VehicleSeatEntry * Vehicle::GetSeatForPassenger(const Unit * passenger)
    const
documentation:
  brief: Retrieves the vehicle seat entry for a specified passenger unit.
  description: The GetSeatForPassenger method is used to determine which vehicle seat
    a given passenger unit is occupying within a vehicle. This method is essential
    for managing passenger positioning and seat-specific behaviors in vehicle-based
    gameplay mechanics such as mounts, vehicles, and transport systems. It returns
    a pointer to the VehicleSeatEntry structure that defines the properties of the
    seat occupied by the specified passenger. The method performs a lookup based on
    the passenger's GUID or internal tracking within the vehicle's passenger list.
  parameters: []
  returns: A pointer to the VehicleSeatEntry structure representing the seat occupied
    by the specified passenger, or nullptr if the passenger is not found in any seat
    of the vehicle.
  examples:
  - title: Basic Usage to Check Passenger Seat
    code: "const VehicleSeatEntry* seat = vehicle->GetSeatForPassenger(player);\n\
      if (seat != nullptr)\n{\n    // Passenger is seated, use seat properties\n \
      \   uint8 seatId = seat->ID;\n    // Perform actions based on seat configuration\n\
      }"
    language: cpp
  - title: Using Seat Entry to Determine Passenger Role
    code: "const VehicleSeatEntry* seat = vehicle->GetSeatForPassenger(unit);\nif\
      \ (seat != nullptr && seat->Flags & VEHICLE_SEAT_FLAG_CAN_ATTACK)\n{\n    //\
      \ This passenger can attack from this seat\n    unit->SetCanAttack(true);\n\
      }\nelse if (seat != nullptr && seat->Flags & VEHICLE_SEAT_FLAG_IS_PLAYER)\n\
      {\n    // This is a player-controlled seat\n    unit->SetPlayerControlled(true);\n\
      }"
    language: cpp
  notes: This method relies on internal tracking of passengers within the vehicle's
    passenger list. It assumes that the vehicle has been properly initialized and
    that the passenger unit is registered with the vehicle. The returned pointer is
    valid only as long as the vehicle and its passengers remain in a consistent state.
  warnings: Do not assume the returned VehicleSeatEntry pointer will remain valid
    across multiple frames or after vehicle modifications. Always check for null returns
    before dereferencing the pointer to avoid crashes.
  related:
  - GetPassenger
  - AddPassenger
  - RemovePassenger
  - HasPassenger
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:32:08.218418'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
