api:
  class: MountManager
  method: GetBestMount
  signature: const MountInfo * MountManager::GetBestMount(int * player) const
documentation:
  brief: Returns the best available mount for the specified player based on their
    level, location, and known mounts.
  description: The GetBestMount method determines and returns the most suitable mount
    for a given player by evaluating their current level, geographical location, and
    the set of mounts they have learned. This method is typically used in the context
    of player movement and mount management within World of Warcraft's TrinityCore
    server implementation. The returned MountInfo pointer points to a static or cached
    mount entry that represents the optimal mount available to the player at their
    current state. It does not perform any side effects such as granting mounts or
    modifying player state; it merely retrieves the best match from internal data
    structures.
  parameters:
  - name: player
    description: Pointer to an integer representing the player's unique identifier
      (GUID). This parameter is expected to be a valid pointer to a player's GUID
      value, typically obtained through other TrinityCore APIs like GetPlayerByGUID
      or similar methods.
  returns: A const pointer to a MountInfo structure that contains detailed information
    about the best mount available for the specified player. Returns nullptr if no
    suitable mount can be determined for the player, which may occur if the player
    GUID is invalid or if there are no mounts registered for their current conditions.
  examples:
  - title: Basic usage to get best mount for a player
    code: "int playerId = 12345;\nconst MountInfo* bestMount = mountManager.GetBestMount(&playerId);\n\
      if (bestMount != nullptr) {\n    printf(\"Best mount ID: %u\\n\", bestMount->ID);\n\
      } else {\n    printf(\"No suitable mount found for player.\\n\");\n}"
    language: cpp
  notes: This method relies on internal mount data structures and assumes that the
    player's state (level, location, known mounts) is properly synchronized within
    the server. It may return different results depending on the current game world
    state, such as zone-specific mounts or faction-based restrictions. The MountInfo
    object returned should not be modified directly as it represents shared data.
  warnings: Ensure that the player GUID passed to this method is valid and corresponds
    to an actual logged-in player; otherwise, behavior is undefined and may result
    in a null return or crash. Do not assume that the returned MountInfo pointer remains
    valid beyond the scope of the current function call unless explicitly stated by
    the API contract.
  related:
  - GetMountByEntry
  - IsPlayerKnownToHaveMount
  - AddMountToPlayer
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:20:06.881940'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
