api:
  class: Aura
  method: UnregisterSingleTarget
  signature: void Aura::UnregisterSingleTarget()
documentation:
  brief: Removes a single target reference from the aura's target list.
  description: The UnregisterSingleTarget method removes a specific target from the
    aura's internal tracking of affected units. This method is typically called when
    an aura's effect ends on a particular unit, ensuring that the aura no longer maintains
    a reference to that target. It plays a crucial role in memory management and cleanup
    for auras that affect multiple targets. The method does not directly remove the
    aura from the target; instead, it updates the aura's internal data structures
    to reflect that the target is no longer affected by this aura.
  parameters: []
  returns: null
  examples:
  - title: Basic Usage in Aura Removal
    code: "void RemoveAuraFromTarget(Aura* aura, Unit* target)\n{\n    // Remove the\
      \ target from aura's tracking\n    aura->UnregisterSingleTarget();\n    // Additional\
      \ cleanup logic...\n}"
    language: cpp
  notes: This method is typically invoked internally by the TrinityCore framework
    when an aura expires or is removed from a target. Developers should not call this
    method directly unless implementing custom aura behavior. The method assumes that
    the aura has already been properly initialized and that the target reference is
    valid.
  warnings: Calling UnregisterSingleTarget on an aura that has already been unregistered
    for a target may lead to undefined behavior or crashes. Always verify that the
    target is still registered before calling this method.
  related:
  - Aura::RegisterSingleTarget
  - Aura::GetTarget
  - Aura::HasTarget
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:47:54.003147'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
