api:
  class: RestMgr
  method: GetRestBonusFor
  signature: uint32 RestMgr::GetRestBonusFor(RestTypes restType, uint32 xp)
documentation:
  brief: Calculates the rest bonus experience awarded based on rest type and current
    experience.
  description: The GetRestBonusFor method computes the amount of bonus experience
    a player receives depending on the type of rest they have performed (such as resting
    in a city or inn) and their current experience points. This method is used to
    determine how much additional XP is granted when a player rests, which can vary
    based on game mechanics like rested experience bonuses. The calculation takes
    into account both the RestTypes enum value and the base XP amount to return an
    adjusted bonus value that reflects the rest bonus.
  parameters:
  - name: restType
    description: The type of rest performed by the player, defined by the RestTypes
      enumeration. Valid values typically include REST_TYPE_IN_CITY, REST_TYPE_IN_TAVERN,
      and others depending on the game's implementation.
  - name: xp
    description: The current experience points value used as a base for calculating
      the rest bonus. This is usually the player's current XP total before applying
      any bonuses.
  returns: Returns a uint32 representing the calculated bonus experience awarded for
    resting. The value may be zero if no bonus applies or if the rest type does not
    provide XP bonuses.
  examples:
  - title: Calculate Rest Bonus for City Rest
    code: 'uint32 bonusXP = sRestMgr->GetRestBonusFor(REST_TYPE_IN_CITY, player->GetUInt32Value(PLAYER_XP));

      player->AddExperience(bonusXP);'
    language: cpp
  - title: Apply Rest Bonus to Player Experience
    code: 'uint32 currentXP = player->GetUInt32Value(PLAYER_XP);

      uint32 restBonus = sRestMgr->GetRestBonusFor(REST_TYPE_IN_TAVERN, currentXP);

      player->SetUInt32Value(PLAYER_XP, currentXP + restBonus);'
    language: cpp
  notes: This method is typically invoked during player rest events and may be affected
    by game settings or expansions. The exact bonus calculation logic depends on internal
    TrinityCore configurations related to rested XP mechanics.
  warnings: Ensure that the RestTypes enum value passed is valid; invalid values might
    lead to unexpected behavior or incorrect bonus calculations. Also, this method
    should only be called when a player has actually performed a rest action.
  related:
  - GetRestBonusFor
  - Player::AddExperience
  - Player::SetUInt32Value
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:07:50.576941'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
