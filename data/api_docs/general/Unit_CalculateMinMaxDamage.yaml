api:
  class: Unit
  method: CalculateMinMaxDamage
  signature: void Unit::CalculateMinMaxDamage(int attType, bool normalized, bool addTotalPct,
    float & minDamage, float & maxDamage) const
documentation:
  brief: Calculates minimum and maximum damage values for a given attack type.
  description: This method computes the minimum and maximum damage values for a specified
    attack type, taking into account various factors such as weapon damage, bonuses,
    and modifiers. It is commonly used in combat calculations to determine damage
    ranges for attacks. The method considers both base damage and any additional modifiers
    that may affect the final damage output. This function is essential for determining
    damage outcomes during combat scenarios.
  parameters:
  - name: attType
    description: The attack type to calculate damage for, typically representing different
      weapon types or attack categories such as melee, ranged, or spell attacks.
  - name: normalized
    description: Flag indicating whether the calculation should be normalized (true)
      or not (false). When true, it applies normalization rules that ensure consistent
      damage calculations across different scenarios.
  - name: addTotalPct
    description: Flag indicating whether to add percentage modifiers to the total
      damage calculation. When true, it includes additional percentage-based bonuses
      in the final damage computation.
  - name: minDamage
    description: Reference to a float variable that will store the calculated minimum
      damage value after the method completes.
  - name: maxDamage
    description: Reference to a float variable that will store the calculated maximum
      damage value after the method completes.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* unit = new Unit();

      float minDamage, maxDamage;

      unit->CalculateMinMaxDamage(ATTACK_TYPE_MELEE, true, false, minDamage, maxDamage);

      std::cout << "Min Damage: " << minDamage << " Max Damage: " << maxDamage <<
      std::endl;'
    language: cpp
  - title: Advanced Usage Example
    code: 'Unit* unit = new Unit();

      float minDamage, maxDamage;

      unit->CalculateMinMaxDamage(ATTACK_TYPE_SPELL, false, true, minDamage, maxDamage);

      std::cout << "Min Damage: " << minDamage << " Max Damage: " << maxDamage <<
      std::endl;

      // This example includes percentage modifiers in the calculation'
    language: cpp
  notes: This method is typically used in combat calculations and requires proper
    initialization of unit objects. The method may perform multiple internal calculations
    depending on the attack type and parameters provided. It's important to note that
    this function modifies the referenced variables directly, so care must be taken
    when using it in conjunction with other damage-related functions.
  warnings: This method should not be used without proper initialization of the unit
    object. Incorrect usage may lead to invalid damage calculations or errors in combat
    system. Also, ensure that the parameters are correctly set to avoid unexpected
    behavior during damage calculation.
  related:
  - CalculateMaxDamage
  - CalculateMinDamage
  - GetWeaponDamage
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:21:05.838396'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
