api:
  class: OutdoorPvPMgr
  method: GetOutdoorPvPToZoneId
  signature: OutdoorPvP * OutdoorPvPMgr::GetOutdoorPvPToZoneId(Map * map, int zoneid)
documentation:
  brief: Retrieves the OutdoorPvP object associated with a specific map and zone ID.
  description: The GetOutdoorPvPToZoneId method is used to locate and return the OutdoorPvP
    instance that corresponds to a given map and zone identifier. This functionality
    is essential for managing world PvP zones in TrinityCore, allowing the game to
    determine which outdoor player versus player area is active or relevant for a
    specific location. The method typically operates within the context of zone-based
    PvP systems where different areas of the game world may have distinct PvP mechanics
    or states. It serves as a lookup mechanism that helps the core game logic determine
    how to handle player interactions, events, and state changes in outdoor PvP zones.
  parameters:
  - name: map
    description: Pointer to the Map object representing the game map where the zone
      is located. This parameter specifies the world context for the zone lookup.
  - name: zoneid
    description: Integer identifier representing the specific zone within the map.
      This ID uniquely identifies a particular PvP zone or area in the game world.
  returns: Returns a pointer to an OutdoorPvP object if a matching outdoor PvP zone
    is found for the specified map and zone ID. Returns nullptr if no corresponding
    OutdoorPvP instance exists for the given parameters, indicating that the zone
    does not support outdoor player versus player mechanics.
  examples:
  - title: Basic Usage to Find OutdoorPvP Zone
    code: "OutdoorPvP* pvpZone = sOutdoorPvPMgr->GetOutdoorPvPToZoneId(map, zoneId);\n\
      if (pvpZone != nullptr)\n{\n    // Process PvP zone logic\n    pvpZone->HandlePlayerEnterZone(player,\
      \ zoneId);\n}"
    language: cpp
  - title: Checking for Valid OutdoorPvP Zone Before Interaction
    code: "Map* currentMap = player->GetMap();\nuint32 currentZoneId = player->GetZoneId();\n\
      OutdoorPvP* pvpInstance = sOutdoorPvPMgr->GetOutdoorPvPToZoneId(currentMap,\
      \ currentZoneId);\nif (pvpInstance != nullptr)\n{\n    // Player is in a PvP\
      \ zone, handle accordingly\n    pvpInstance->UpdatePlayerStatus(player, true);\n\
      }\nelse\n{\n    // Not in a PvP zone, normal handling\n    player->RemoveAurasByType(SPELL_AURA_MOD_DAMAGE_PERCENT_DONE);\n\
      }"
    language: cpp
  notes: This method is commonly used during player entry/exit events and zone update
    logic. It's important to note that the returned OutdoorPvP pointer should be checked
    for null before use, as not all zones in the game world support outdoor PvP mechanics.
    The method relies on internal zone-to-OutdoorPvP mapping tables maintained by
    the OutdoorPvPMgr.
  warnings: Never assume that this method will return a valid OutdoorPvP object. Always
    check the returned pointer for null before dereferencing it. Using an invalid
    pointer can lead to crashes or undefined behavior in the game logic.
  related:
  - GetOutdoorPvP
  - AddOutdoorPvP
  - RemoveOutdoorPvP
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T08:45:44.866486'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
