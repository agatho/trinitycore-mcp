api:
  class: Aura
  method: CanBeSaved
  signature: bool Aura::CanBeSaved() const
documentation:
  brief: Determines whether the aura can be saved to the database
  description: The CanBeSaved method checks if an aura instance is eligible for persistence
    in the database. This method is crucial for determining which auras should be
    stored during character save operations, particularly for temporary or non-persistent
    auras that may not need to be retained across sessions. The method evaluates various
    conditions including whether the aura has been applied, if it's currently active,
    and whether it meets criteria for saving. It typically returns true for auras
    that are meant to persist in the database, while false indicates that the aura
    should not be saved.
  parameters: []
  returns: Returns true if the aura can be saved to the database, false otherwise.
    The method may return false for auras that are temporary or have been removed
    from the character's active state.
  examples:
  - title: Basic usage example
    code: "if (aura->CanBeSaved()) {\n    // Save aura to database\n}\nelse {\n  \
      \  // Skip saving\n}"
    language: cpp
  notes: This method is typically used during character save operations to determine
    which auras should be persisted. Implementation details may vary depending on
    the specific type of aura being evaluated, and it's important to note that this
    method does not directly save the aura but rather determines whether it should
    be saved.
  warnings: The method should not be confused with the actual saving process; it only
    indicates whether an aura can be saved. Care must be taken when implementing logic
    based on this method as it may affect database storage and character state persistence.
  related:
  - Aura::IsExpired
  - Aura::IsVisible
  - Aura::IsApplied
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T02:54:41.043055'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
