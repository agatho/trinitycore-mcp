api:
  class: LazyManagerFactory
  method: GetInitializedCount
  signature: size_t LazyManagerFactory::GetInitializedCount() const
documentation:
  brief: Returns the count of initialized lazy managers within the factory.
  description: The GetInitializedCount method retrieves the total number of lazy managers
    that have been successfully initialized within the LazyManagerFactory instance.
    This method is typically used to monitor or debug the initialization state of
    various manager components in TrinityCore's architecture. The returned count represents
    how many managers have completed their initialization process and are ready for
    use. This can be particularly useful in scenarios where you need to verify that
    all required subsystems are properly initialized before proceeding with operations
    that depend on them.
  parameters: []
  returns: A size_t value representing the number of initialized lazy managers in
    the factory. Returns zero if no managers have been initialized or if the factory
    is empty.
  examples:
  - title: Basic Usage to Check Initialization Count
    code: "LazyManagerFactory& factory = LazyManagerFactory::Instance();\nsize_t initializedCount\
      \ = factory.GetInitializedCount();\nif (initializedCount > 0)\n{\n    printf(\"\
      %zu managers have been initialized.\\n\", initializedCount);\n}"
    language: cpp
  - title: Using Initialization Count for Conditional Logic
    code: "LazyManagerFactory& factory = LazyManagerFactory::Instance();\nsize_t count\
      \ = factory.GetInitializedCount();\nif (count >= 5)\n{\n    // Proceed with\
      \ operations that require at least 5 initialized managers\n    StartGameSystems();\n\
      }\nelse\n{\n    // Log warning or delay execution\n    sLog->outError(\"Only\
      \ %zu managers initialized, expected at least 5.\", count);\n}"
    language: cpp
  notes: This method is typically a read-only operation and should not have side effects.
    It's important to note that the count returned may change dynamically if lazy
    managers are initialized or destroyed during runtime. The implementation likely
    uses thread-safe mechanisms to ensure consistency when accessed from multiple
    threads.
  warnings: Be aware that this method does not guarantee that all managers are fully
    functional after initialization; it only indicates that they have completed their
    initialization process. Additionally, in a multi-threaded environment, the count
    might change between when you retrieve it and when you use it, so consider using
    appropriate synchronization if timing is critical.
  related:
  - LazyManagerFactory::GetManager
  - LazyManagerFactory::InitializeAll
  - LazyManagerFactory::IsInitialized
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T23:55:45.899957'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
