api:
  class: WorldObject
  method: CanDetect
  signature: bool WorldObject::CanDetect(const WorldObject * obj, bool ignoreStealth,
    bool checkAlert) const
documentation:
  brief: Determines whether this WorldObject can detect another WorldObject based
    on stealth, alert status, and detection rules.
  description: The CanDetect method evaluates if the calling WorldObject (such as
    a player or creature) is capable of detecting another WorldObject (like an invisible
    enemy or hidden trap). This check considers various game mechanics including stealth
    abilities, invisibility states, alert levels, and detection range. The method
    respects the ignoreStealth flag which bypasses stealth-based detection checks,
    and the checkAlert flag which determines whether alert status affects the outcome.
    It's commonly used in AI decision-making processes to determine visibility of
    targets, particularly for creatures that need to detect players or other objects
    in stealth.
  parameters:
  - name: obj
    description: Pointer to the WorldObject that is being checked for detection. Must
      not be null.
  - name: ignoreStealth
    description: Boolean flag indicating whether stealth should be ignored during
      detection check. If true, stealth effects do not prevent detection.
  - name: checkAlert
    description: Boolean flag indicating whether alert status should be considered
      in the detection check. If true, alert state may affect whether detection succeeds.
  returns: Returns true if the calling WorldObject can detect the target object based
    on all applicable rules; false otherwise.
  examples:
  - title: Basic usage to check if a creature can detect a player
    code: "if (creature->CanDetect(player, false, true)) {\n    // Creature can see\
      \ the player\n    creature->Attack(player);\n}"
    language: cpp
  - title: Using ignoreStealth to bypass stealth detection
    code: "if (player->CanDetect(npc, true, false)) {\n    // Player can detect NPC\
      \ regardless of stealth status\n    player->SendPacket(&packet);\n}"
    language: cpp
  notes: This method is primarily used in AI logic and visibility calculations. It
    may involve complex checks including line-of-sight, range, and game state conditions.
    Performance can be impacted when checking detection across large numbers of objects,
    especially with frequent calls.
  warnings: Ensure that the obj parameter is not null before calling this method to
    avoid undefined behavior. The checkAlert flag should be used carefully as it may
    affect AI behavior in unexpected ways if not properly understood.
  related:
  - IsInvisible
  - IsStealthed
  - IsVisible
  - HasInvisibility
  - CanSee
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:31:42.370229'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
