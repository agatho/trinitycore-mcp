api:
  class: Group
  method: SameSubGroup
  signature: bool Group::SameSubGroup(const Player * member1, const Player * member2)
    const
documentation:
  brief: Checks if two players are in the same subgroup within the group.
  description: The SameSubGroup method determines whether two specified players belong
    to the same subgroup (also known as a sub-group or raid subgroup) within the current
    group. This functionality is essential for group-based gameplay mechanics such
    as loot distribution, where certain rules apply based on subgroup membership.
    The method takes two Player pointers as arguments and returns true if both players
    are in the same subgroup, false otherwise. It's commonly used in conjunction with
    group loot systems and raid management features.
  parameters:
  - name: member1
    description: A pointer to the first Player object to compare. Must not be null.
  - name: member2
    description: A pointer to the second Player object to compare. Must not be null.
  returns: Returns true if both players are in the same subgroup, false otherwise.
  examples:
  - title: Basic usage to check subgroup membership
    code: "if (group->SameSubGroup(player1, player2)) {\n    // Both players are in\
      \ the same subgroup\n    SendSystemMessageToPlayer(player1, \"You and \" + player2->GetName()\
      \ + \" are in the same subgroup.\");\n}"
    language: cpp
  - title: Using SameSubGroup for loot distribution logic
    code: "void DistributeLoot(Group* group, Player* looter, Item* item) {\n    for\
      \ (Group::MemberSlotList::const_iterator itr = group->GetMemberSlots().begin();\n\
      \         itr != group->GetMemberSlots().end(); ++itr)\n    {\n        Player*\
      \ member = ObjectAccessor::FindPlayer(itr->guid);\n        if (!member || !member->IsInWorld())\n\
      \            continue;\n\n        if (group->SameSubGroup(looter, member))\n\
      \        {\n            // Distribute loot to members in the same subgroup\n\
      \            looter->AddItemToInventory(item);\n        }\n    }\n}"
    language: cpp
  notes: This method relies on internal group structure tracking and assumes that
    both players are valid members of the group. It does not perform any validation
    to ensure the players are actually in the same group, so calling code should verify
    group membership before invoking this method.
  warnings: Ensure that both player pointers are valid and non-null before calling
    this method. Passing null pointers may result in undefined behavior or crashes.
  related:
  - Group::GetMemberSlots
  - Group::IsMember
  - Group::SameSubGroup
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T00:52:08.298796'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
