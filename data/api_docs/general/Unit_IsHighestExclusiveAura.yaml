api:
  class: Unit
  method: IsHighestExclusiveAura
  signature: bool Unit::IsHighestExclusiveAura(const Aura * aura, bool removeOtherAuraApplications)
documentation:
  brief: Determines whether the specified aura is the highest exclusive aura applied
    to the unit.
  description: This method checks if a given aura is the highest exclusive aura currently
    active on the unit. Exclusive auras are those that prevent other auras of the
    same type from being applied simultaneously. The method returns true if the provided
    aura is the highest exclusive aura, false otherwise. It's commonly used in game
    mechanics to determine which aura should take effect when multiple similar auras
    exist on a unit. This function is particularly important for handling aura applications
    and ensuring proper stacking behavior.
  parameters:
  - name: aura
    description: The aura instance to check against the unit's current exclusive auras.
      This parameter must be a valid Aura pointer, typically obtained from an active
      aura application on the unit.
  - name: removeOtherAuraApplications
    description: When true, this parameter indicates that other aura applications
      of the same type should be removed if they are lower than the specified aura.
      When false, it prevents removal of lower applications and only checks if the
      current aura is the highest exclusive one.
  returns: Returns true if the specified aura is the highest exclusive aura on the
    unit, false otherwise. If the aura is not exclusive or if no exclusive auras exist
    on the unit, the method returns false.
  examples:
  - title: Basic usage example
    code: "if (unit->IsHighestExclusiveAura(aura)) {\n    // Handle highest exclusive\
      \ aura\n}\n"
    language: cpp
  - title: Advanced usage with removal
    code: "bool result = unit->IsHighestExclusiveAura(aura, true);\nif (result) {\n\
      \    // Remove lower applications and apply this one\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with aura stacking logic to
    ensure proper application of exclusive auras. It's important to note that the
    method may not behave as expected if the unit has no active auras or if the aura
    type is not exclusive. Performance considerations include checking the aura's
    type and comparing it against existing exclusive auras.
  warnings: This method should be used carefully when removing other aura applications,
    as it can lead to unexpected behavior if not properly handled. The removal of
    lower applications may cause loss of buffs or debuffs that could affect gameplay
    balance.
  related:
  - Unit::GetAura
  - Unit::AddAura
  - Unit::RemoveAura
  - Unit::HasAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:07:14.482199'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
