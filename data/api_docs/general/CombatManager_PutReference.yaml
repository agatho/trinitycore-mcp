api:
  class: CombatManager
  method: PutReference
  signature: void CombatManager::PutReference(const int & guid, CombatReference *
    ref)
documentation:
  brief: Adds a combat reference to the manager using the specified GUID as key.
  description: The PutReference method stores a CombatReference object within the
    CombatManager, associating it with a unique identifier (GUID). This allows the
    manager to track and manage combat-related data for specific entities such as
    players or creatures. The method typically handles internal bookkeeping to ensure
    references are properly indexed and retrievable by GUID. It is commonly used during
    combat initialization or when new combatants are added to an ongoing fight.
  parameters:
  - name: guid
    description: A constant reference to the unique identifier (GUID) of the entity
      for which the combat reference is being stored. This value must be a valid GUID
      present in the game world.
  - name: ref
    description: A pointer to the CombatReference object that contains the combat-related
      data for the specified entity. Must not be null, and should point to a valid
      instance of CombatReference.
  returns: null
  examples:
  - title: Basic Usage
    code: 'CombatManager* manager = ...;

      CombatReference* reference = new CombatReference();

      int guid = 12345;

      manager->PutReference(guid, reference);'
    language: cpp
  - title: Adding Player Combat Reference
    code: 'Player* player = ...;

      CombatManager* manager = ...;

      CombatReference* ref = new CombatReference();

      ref->SetAttacker(player);

      manager->PutReference(player->GetGUID(), ref);'
    language: cpp
  notes: This method assumes that the provided GUID is unique within the combat context
    and that the reference object is properly initialized. The CombatManager likely
    uses internal containers like maps or hash tables to store these references, so
    performance depends on the underlying data structure implementation.
  warnings: Ensure that the CombatReference pointer passed is valid and not already
    managed by another system, as this may lead to memory leaks or undefined behavior.
    Also, avoid calling PutReference with duplicate GUIDs unless intentional overwrites
    are desired.
  related:
  - GetReference
  - RemoveReference
  - HasReference
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:04:52.617943'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
