api:
  class: Aura
  method: Aura
  signature: void Aura::Aura(Aura && param0)
documentation:
  brief: Moves an aura object to a new location, effectively transferring ownership
    of the aura instance.
  description: This method represents a move constructor for the Aura class, which
    transfers ownership of an aura instance from one object to another. It is typically
    used in scenarios where an aura needs to be moved or repositioned within memory,
    such as when creating new aura instances or handling aura objects during gameplay
    mechanics like spell effects or debuff management. The method ensures that the
    original aura object is properly moved and that the new object takes over the
    ownership of the aura's resources.
  parameters:
  - name: param0
    description: The source aura object to be moved. This parameter represents an
      rvalue reference to an Aura object, indicating that the original object will
      be moved rather than copied.
  returns: null
  examples:
  - title: Basic Aura Move Constructor Usage
    code: 'Aura* aura = new Aura(std::move(*sourceAura));

      // This moves the sourceAura to the new aura object'
    language: cpp
  notes: This method is part of the standard C++ move semantics and should be used
    carefully to avoid double-free errors. It's important to ensure that the source
    aura object is not accessed after the move operation, as it may become invalid.
  warnings: Improper usage of this move constructor can lead to undefined behavior
    or memory corruption if the source aura object is still referenced after being
    moved. Always ensure proper memory management when using this method.
  related:
  - Aura::Aura(const Aura&)
  - Aura::operator=
  - Aura::Aura(Aura&&)
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:00:54.474227'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
