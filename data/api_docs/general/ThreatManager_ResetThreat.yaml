api:
  class: ThreatManager
  method: ResetThreat
  signature: void ThreatManager::ResetThreat(Unit * target)
documentation:
  brief: Clears threat values for a specified target from the threat manager.
  description: The ResetThreat method removes all threat entries associated with a
    given target unit from the ThreatManager's internal threat list. This function
    is typically used during combat reset scenarios, such as when a creature's combat
    state is cleared or when a target is removed from the threat calculation system.
    The method ensures that the specified target no longer holds any threat value
    within the manager, effectively resetting its threat status to zero. This operation
    does not affect other units in the threat list and maintains the integrity of
    the overall threat management system.
  parameters:
  - name: target
    description: Pointer to the Unit object for which threat values should be cleared.
      Must be a valid pointer to an existing unit in the game world. If null, the
      method may result in undefined behavior or crash.
  returns: None. This method does not return any value.
  examples:
  - title: Basic threat reset for a target unit
    code: 'Unit* target = ...; // some valid Unit pointer

      ThreatManager* threatMgr = creature->GetThreatManager();

      threatMgr->ResetThreat(target);'
    language: cpp
  - title: Resetting threat for multiple targets in a loop
    code: "std::vector<Unit*> targets = ...; // list of target units\nThreatManager*\
      \ threatMgr = creature->GetThreatManager();\nfor (Unit* target : targets)\n\
      {\n    threatMgr->ResetThreat(target);\n}"
    language: cpp
  notes: This method is typically invoked internally by the core combat system when
    units leave combat or when threat management needs to be reset. It's important
    to ensure that the target unit pointer passed is valid and not destroyed before
    calling this method. The method performs no locking or thread safety checks, so
    callers should ensure proper synchronization if used in multi-threaded contexts.
  warnings: Passing a null pointer as the target parameter can lead to crashes or
    undefined behavior. Always validate the target pointer before calling ResetThreat.
    Additionally, calling this method during active combat processing may cause inconsistencies
    in threat calculations if not handled carefully.
  related:
  - AddThreat
  - GetThreat
  - UpdateThreat
  - GetMostHated
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:42:33.869184'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
