api:
  class: AuraEffect
  method: HandleAuraActAsControlZone
  signature: void AuraEffect::HandleAuraActAsControlZone(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Handles the application or removal of an aura that acts as a control zone,
    modifying player behavior within its area.
  description: The HandleAuraActAsControlZone method manages the activation and deactivation
    of auras that function as control zones. These auras typically restrict or modify
    player actions within their defined area of effect. The method is invoked during
    aura application or removal through the AuraApplication system, adjusting relevant
    game state such as movement restrictions, spell casting limitations, or interaction
    behaviors based on the mode and apply flags. This functionality is commonly used
    for mechanics like capture points, restricted zones, or special environmental
    effects that alter player capabilities while inside them.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. Contains context about which unit the aura affects and how
      it was applied.
  - name: mode
    description: The mode of operation for the aura effect, typically indicating whether
      this is an initial application (0), a periodic tick (1), or another state. Values
      may vary based on internal implementation.
  - name: apply
    description: Boolean flag indicating if the aura is being applied (true) or removed
      (false). Determines whether to enable or disable the control zone behavior.
  returns: null
  examples:
  - title: Basic Aura Control Zone Application
    code: "void MyAuraHandler::HandleAuraActAsControlZone(const AuraApplication* aurApp,\
      \ uint8 mode, bool apply) const {\n    if (apply) {\n        // Apply control\
      \ zone effects\n        Player* player = aurApp->GetTarget()->ToPlayer();\n\
      \        if (player)\n            player->SetCanNotEnterCombat(true);\n    }\
      \ else {\n        // Remove control zone effects\n        Player* player = aurApp->GetTarget()->ToPlayer();\n\
      \        if (player)\n            player->SetCanNotEnterCombat(false);\n   \
      \ }\n}"
    language: cpp
  notes: This method is part of the TrinityCore's aura handling system and is called
    internally by the core when an aura with the 'ActAsControlZone' effect is applied
    or removed. It should not be invoked directly unless implementing custom aura
    effects. The method assumes that the target unit is a player or has appropriate
    behavior for control zone mechanics.
  warnings: Improper implementation of this method may lead to unexpected behavior
    in player movement, spell casting, or interaction with game objects within the
    control zone. Ensure correct handling of both apply and remove states to avoid
    persistent state issues.
  related:
  - AuraEffect::HandleAuraApply
  - AuraEffect::HandleAuraRemove
  - AuraApplication::GetTarget
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T13:37:43.028956'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
