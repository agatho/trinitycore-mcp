api:
  class: Player
  method: _LoadAuras
  signature: void Player::_LoadAuras(int auraResult, int effectResult, uint32 timediff)
documentation:
  brief: Loads player auras from database with specified timing and effect results
  description: This method loads all active auras for the player from the database,
    handling the timing and effect results of aura applications. It is typically called
    during player initialization or when restoring player state after loading from
    database. The method processes aura data including duration, effects, and application
    times to ensure proper aura states are restored. This function plays a crucial
    role in maintaining game mechanics related to player status effects and their
    persistence across sessions.
  parameters:
  - name: auraResult
    description: The result code indicating the outcome of aura loading operations
      from database
  - name: effectResult
    description: The result code indicating the outcome of effect application operations
      from database
  - name: timediff
    description: Time difference in milliseconds between current time and when auras
      were last applied, used for calculating remaining duration
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->_LoadAuras(0, 0, 1000);

      // This loads auras with default result codes and 1 second time difference'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = new Player();

      int auraResult = 1;

      int effectResult = 2;

      uint32 timediff = 5000;

      player->_LoadAuras(auraResult, effectResult, timediff);

      // This loads auras with specific result codes and 5 second time difference'
    language: cpp
  notes: This method should only be called during player initialization or when restoring
    player state from database. The method handles timing calculations for aura durations
    and may be called multiple times during a player's lifetime. Implementation details
    include handling of different aura types and their effects, with potential performance
    implications if many auras are loaded.
  warnings: This method should not be called directly by external code without proper
    context. It is typically used internally by TrinityCore's player loading system.
    Improper usage could lead to incorrect aura states or game mechanics issues. The
    method requires careful handling of timing calculations and database result codes.
  related:
  - Player::LoadFromDB
  - Player::SaveToDB
  - Player::UpdateAuraState
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T23:12:47.467120'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
