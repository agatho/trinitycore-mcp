api:
  class: ThreatManager
  method: IsThreateningTo
  signature: bool ThreatManager::IsThreateningTo(const Unit * who, bool includeOffline)
    const
documentation:
  brief: Determines whether a unit is currently threatening the target.
  description: This method checks if a given unit is actively generating threat towards
    the target unit, which is essential for understanding the current threat state
    in combat. The function considers both active and inactive threat states, including
    whether the unit is offline or not. It's commonly used in AI logic to determine
    if a unit should be targeted by mobs or players based on threat level. This method
    is crucial for maintaining proper combat behavior and ensuring that units are
    appropriately prioritized in threat management.
  parameters:
  - name: who
    description: A pointer to the Unit whose threat status is being checked. This
      unit must be valid and may be either a player or creature.
  - name: includeOffline
    description: Boolean flag indicating whether offline units should be considered
      in the threat calculation. If true, offline units will be included in the check;
      if false, only active units are considered.
  returns: Returns true if the specified unit is currently threatening the target,
    false otherwise. A return value of false indicates that the unit is not generating
    threat towards the target or that the unit has no threat at all.
  examples:
  - title: Basic usage example
    code: "if (threatManager->IsThreateningTo(player))\n    {\n        // Do something\n\
      \    }"
    language: cpp
  - title: Advanced usage with offline consideration
    code: "bool result = threatManager->IsThreateningTo(creature, true);\nif (result)\n\
      \    {\n        // Handle the case where creature is threatening even if offline\n\
      \    }"
    language: cpp
  notes: This method is typically used in conjunction with other threat management
    functions to determine overall threat status. Performance considerations are minimal
    since it simply checks against existing threat data rather than calculating new
    threat values. Thread safety is ensured as long as the unit pointer remains valid
    during execution.
  warnings: Care must be taken when using this method with offline units, as it may
    lead to unexpected behavior if not properly handled. Also, ensure that the target
    unit is valid before calling this method to avoid potential crashes or undefined
    behavior.
  related:
  - IsThreateningTo
  - AddThreat
  - RemoveThreat
  - GetThreatList
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:08:01.962012'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
