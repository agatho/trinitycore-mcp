api:
  class: Player
  method: GetCommandStatus
  signature: bool Player::GetCommandStatus(uint32 command) const
documentation:
  brief: Checks if a player has access to a specific command.
  description: The GetCommandStatus method determines whether a player has the necessary
    permissions to execute a particular command within the TrinityCore framework.
    This method is typically used in conjunction with command handling systems to
    validate player privileges and ensure that commands are only executed by users
    with appropriate access levels. The function returns true if the player has the
    command enabled, false otherwise. It's commonly used in command processor implementations
    to verify command access before executing commands.
  parameters: []
  returns: Returns true if the player has access to the specified command, false otherwise.
    The method essentially acts as a permission check for command execution.
  examples:
  - title: Basic Command Access Check
    code: "if (player->GetCommandStatus(123))\n{\n    // Player has access to command\
      \ 123\n    // Proceed with command execution\n}\nelse\n{\n    // Player does\
      \ not have access to command 123\n    // Handle accordingly\n}"
    language: cpp
  notes: This method is typically used in conjunction with command system implementations
    and requires proper command ID validation. Performance considerations are minimal
    as it's a simple lookup operation.
  warnings: The method should not be used to determine if a player has access to commands
    that require specific permissions levels, as it only checks for command existence,
    not permission level.
  related:
  - GetPlayerCommand
  - SetPlayerCommand
  - HasCommand
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T17:15:38.949531'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
