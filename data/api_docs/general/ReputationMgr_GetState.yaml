api:
  class: ReputationMgr
  method: GetState
  signature: const FactionState * ReputationMgr::GetState(RepListID id) const
documentation:
  brief: Retrieves the faction state for a given reputation list ID.
  description: The GetState method retrieves a const pointer to the FactionState structure
    associated with the specified RepListID. This method is used to access detailed
    information about a player's reputation status with a specific faction, including
    current standing, flags, and any custom reputation values. The returned pointer
    is valid only during the lifetime of the ReputationMgr instance and should not
    be stored or dereferenced after the manager is destroyed or modified. This method
    does not modify any internal state and is safe for read-only access to faction
    data.
  parameters: []
  returns: A const pointer to the FactionState structure representing the faction's
    current reputation state, or nullptr if the RepListID is invalid or no faction
    data exists for that ID.
  examples:
  - title: Basic Usage
    code: "const FactionState* state = reputationMgr->GetState(1234);\nif (state)\n\
      {\n    // Access faction standing\n    uint32 standing = state->Standing;\n\
      \    // Use the standing value for logic\n}"
    language: cpp
  - title: Checking Faction Status
    code: "RepListID factionId = 509; // Example: Argent Dawn\nconst FactionState*\
      \ factionState = player->GetReputationMgr().GetState(factionId);\nif (factionState\
      \ && factionState->Standing >= 4)\n{\n    // Player has at least friendly reputation\
      \ with this faction\n    // Proceed with faction-specific actions\n}"
    language: cpp
  notes: The returned FactionState pointer is only valid while the ReputationMgr instance
    exists. Accessing the structure after the manager has been destroyed or modified
    may result in undefined behavior. This method performs a lookup operation and
    should be used judiciously in performance-critical code paths.
  warnings: Do not store the returned pointer for later use as it may become invalid.
    Always check for null return values before dereferencing the pointer to avoid
    crashes. Be aware that the underlying data structure can change during gameplay,
    so relying on cached pointers may lead to stale data.
  related:
  - GetReputation
  - SetReputation
  - ModifyReputation
  - GetFactionState
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:29:13.044578'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
