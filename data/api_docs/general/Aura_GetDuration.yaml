api:
  class: Aura
  method: GetDuration
  signature: int32 Aura::GetDuration() const
documentation:
  brief: Retrieves the remaining duration of the aura in milliseconds.
  description: The GetDuration method returns the current time remaining before the
    aura expires, measured in milliseconds. This value decreases over time as the
    aura progresses toward its expiration. The returned value can be used to determine
    how much time is left for effects such as buffs, debuffs, or other temporary status
    conditions. In TrinityCore, auras are managed by the server and their duration
    is typically set when the aura is applied. If the aura has already expired or
    is permanent, this method may return 0 or a negative value depending on implementation
    details.
  parameters: []
  returns: An int32 value representing the remaining duration of the aura in milliseconds.
    A value of 0 or less indicates that the aura has either expired or is permanent.
  examples:
  - title: Check Remaining Duration of an Aura
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    int32 duration\
      \ = aura->GetDuration();\n    if (duration > 0)\n        ChatHandler(player->GetSession()).PSendSysMessage(\"\
      Aura has %d ms remaining.\", duration);\n    else\n        ChatHandler(player->GetSession()).PSendSysMessage(\"\
      Aura is expired or permanent.\");\n}"
    language: cpp
  notes: This method accesses the internal duration field of the aura object, which
    is updated by the server's aura system during each game tick. It does not perform
    any calculations or lookups; it simply returns the stored value.
  warnings: null
  related:
  - GetMaxDuration
  - SetDuration
  - IsExpired
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:20:10.129496'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
