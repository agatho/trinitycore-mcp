api:
  class: Unit
  method: GetTotalAuraMultiplier
  signature: float Unit::GetTotalAuraMultiplier(int auraType, const int & predicate)
    const
documentation:
  brief: Calculates the total multiplier effect of auras on a specific aura type.
  description: This method computes the cumulative multiplier effect of all auras
    applied to the unit that match a specified aura type. It considers both positive
    and negative multipliers from various sources including buffs, debuffs, and passive
    effects. The method is commonly used in combat calculations and stat computations
    where precise aura effects are required for accurate gameplay mechanics.
  parameters:
  - name: auraType
    description: The type of aura to calculate the multiplier for. This typically
      corresponds to a specific aura effect such as 'AuraType' or 'SpellEffect' in
      the game's internal system.
  - name: predicate
    description: A reference to an integer that serves as a filter condition for determining
      which specific auras to include in the calculation. This parameter allows for
      precise control over which aura types are considered.
  returns: Returns a float value representing the total multiplier effect applied
    to the specified aura type. A value of 1.0 indicates no change from base, while
    values greater than 1.0 indicate increased effects and less than 1.0 indicate
    decreased effects.
  examples:
  - title: Basic usage example
    code: float multiplier = unit->GetTotalAuraMultiplier(SPELL_AURA_MOD_DAMAGE_DONE_PERCENT,
      predicate);
    language: cpp
  - title: Advanced usage with multiple aura types
    code: float multiplier = unit->GetTotalAuraMultiplier(SPELL_AURA_MOD_ATTACK_POWER,
      predicate);
    language: cpp
  notes: This method is typically used in conjunction with other aura calculation
    methods to determine overall stat effects. Performance considerations include
    the need for efficient iteration through aura lists and potential caching of results
    for frequently used calculations.
  warnings: The method may return unexpected values if the predicate parameter is
    not properly initialized or if the aura type does not exist in the unit's aura
    list. Care should be taken when using this method with non-standard aura types.
  related:
  - GetAuraType
  - GetAuraEffect
  - GetTotalAuraMod
  - GetAuraMultiplier
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T12:36:38.192799'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
