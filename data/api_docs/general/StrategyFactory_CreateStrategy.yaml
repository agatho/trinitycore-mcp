api:
  class: StrategyFactory
  method: CreateStrategy
  signature: int StrategyFactory::CreateStrategy(const std::string & name)
documentation:
  brief: Creates and registers a new AI strategy with the specified name, returning
    its unique identifier.
  description: The CreateStrategy method initializes a new AI strategy within the
    TrinityCore framework, associating it with the provided name. This strategy can
    then be used by NPCs or players to determine their behavior in various game scenarios.
    The method typically handles internal registration and setup of the strategy object,
    ensuring it's available for use by the AI system. It returns an integer identifier
    that uniquely represents this strategy within the system, which can later be used
    to reference or manage the strategy. The method may perform validation on the
    input name to ensure it meets naming conventions and doesn't conflict with existing
    strategies.
  parameters:
  - name: name
    description: The unique name to assign to the new AI strategy. This string must
      be non-empty and typically follows specific naming conventions required by the
      TrinityCore AI framework. Duplicate names may result in errors or overwriting
      of existing strategies.
  returns: An integer identifier representing the newly created strategy. A positive
    value indicates successful creation, while a negative value or zero typically
    signifies an error such as invalid name, duplicate registration, or system resource
    limitations.
  examples:
  - title: Basic Strategy Creation
    code: "int strategyId = factory.CreateStrategy(\"AggressiveCombat\");\nif (strategyId\
      \ > 0) {\n    // Strategy created successfully\n    std::cout << \"Strategy\
      \ created with ID: \" << strategyId << std::endl;\n} else {\n    // Handle error\
      \ case\n    std::cerr << \"Failed to create strategy\" << std::endl;\n}"
    language: cpp
  - title: Strategy Creation with Error Handling
    code: "StrategyFactory factory;\nstd::string strategyName = \"DefensivePatrol\"\
      ;\nint result = factory.CreateStrategy(strategyName);\n\nswitch (result) {\n\
      \    case -1:\n        // Name is empty or invalid\n        std::cerr << \"\
      Invalid strategy name provided\" << std::endl;\n        break;\n    case 0:\n\
      \        // Strategy already exists\n        std::cout << \"Strategy already\
      \ registered\" << std::endl;\n        break;\n    default:\n        // Successfully\
      \ created with ID result\n        std::cout << \"Created strategy with ID: \"\
      \ << result << std::endl;\n        break;\n}"
    language: cpp
  notes: This method is typically used during server initialization or runtime when
    new AI behaviors need to be introduced. The returned identifier should be stored
    for future reference when applying the strategy to units. Implementation may involve
    locking mechanisms to ensure thread safety during concurrent strategy creation.
  warnings: Passing an empty string or null name will likely result in undefined behavior
    or errors. Creating strategies with duplicate names might overwrite existing ones,
    potentially causing unexpected AI behavior. Always validate return values before
    using the strategy ID.
  related:
  - GetStrategy
  - RemoveStrategy
  - ApplyStrategy
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T20:45:55.692147'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
