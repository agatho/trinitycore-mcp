api:
  class: BotPopulationManager
  method: GetBotToPlayerRatio
  signature: float BotPopulationManager::GetBotToPlayerRatio() const
documentation:
  brief: Calculates and returns the ratio of bot characters to player characters in
    the game world.
  description: The GetBotToPlayerRatio method computes the proportional relationship
    between the number of bot characters and active player characters within the TrinityCore
    instance. This value is typically used for balancing gameplay mechanics, monitoring
    server population dynamics, or adjusting AI behavior based on player density.
    The method performs a read-only calculation that does not modify any internal
    state. It may be called at any time during runtime, though results are only meaningful
    when there is a non-zero number of players and bots present in the world.
  parameters: []
  returns: A floating-point value representing the ratio of bot characters to player
    characters. A value of 0.0 indicates no bots exist, while values greater than
    1.0 indicate more bots than players. For example, a return value of 0.5 means
    there are half as many bots as players.
  examples:
  - title: Basic Usage
    code: "float ratio = sBotPopulationManager->GetBotToPlayerRatio();\nif (ratio\
      \ > 1.0f)\n{\n    // There are more bots than players\n    sLog->outString(\"\
      High bot density detected: %f\", ratio);\n}"
    language: cpp
  - title: Adjusting AI Behavior Based on Ratio
    code: "float ratio = sBotPopulationManager->GetBotToPlayerRatio();\nif (ratio\
      \ < 0.5f)\n{\n    // Low bot density - increase bot activity\n    sBotAIRegistry->SetGlobalDifficulty(BotDifficulty::Easy);\n\
      }\nelse if (ratio >= 1.0f)\n{\n    // High bot density - reduce bot activity\n\
      \    sBotAIRegistry->SetGlobalDifficulty(BotDifficulty::Hard);\n}"
    language: cpp
  notes: This method relies on internal counters maintained by the BotPopulationManager
    class. It is recommended to cache this value if it's accessed frequently, as recalculating
    the ratio may involve iterating over active entities in the world. The result
    is not thread-safe and should be used with appropriate locking mechanisms if accessed
    from multiple threads.
  warnings: The returned ratio can fluctuate rapidly depending on how many bots and
    players are currently active in the game world. Do not assume this value remains
    constant between calls, especially during peak hours or when large-scale bot spawning
    occurs.
  related:
  - GetTotalBotCount
  - GetTotalPlayerCount
  - SetBotToPlayerRatio
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T17:01:48.380223'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
