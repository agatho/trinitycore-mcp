api:
  class: IManagerBase
  method: GetUpdateInterval
  signature: uint32 IManagerBase::GetUpdateInterval() const
documentation:
  brief: Returns the update interval in milliseconds for the manager instance
  description: The GetUpdateInterval method retrieves the time interval at which the
    manager should perform its periodic updates. This value is typically used by the
    core game loop to determine how frequently a specific manager (such as an AI manager,
    event manager, or system manager) should execute its update logic. The returned
    value represents milliseconds and is crucial for maintaining proper timing and
    synchronization within the TrinityCore framework. This method is often called
    during the server's main update cycle to control execution frequency of various
    subsystems.
  parameters: []
  returns: A uint32 value representing the update interval in milliseconds. This indicates
    how often the manager should perform its update operations. Typical values might
    range from 100ms to several seconds depending on the manager type and required
    responsiveness.
  examples:
  - title: Basic Usage Example
    code: 'uint32 interval = myManager->GetUpdateInterval();

      TC_LOG_INFO("misc", "Manager update interval: {} ms", interval);'
    language: cpp
  - title: Using Interval in Update Loop
    code: "void MyManager::Update(uint32 diff)\n{\n    if (m_updateTimer <= diff)\n\
      \    {\n        uint32 interval = GetUpdateInterval();\n        // Perform update\
      \ logic here\n        m_updateTimer = interval;\n    }\n    else\n    {\n  \
      \      m_updateTimer -= diff;\n    }\n}"
    language: cpp
  notes: This method is typically implemented as a getter for a private member variable
    that stores the update interval. The value should remain constant during runtime
    unless explicitly changed through a setter method. Developers should be aware
    that changing this value at runtime may affect system behavior and timing dependencies.
  warnings: Be cautious when modifying the update interval in runtime as it can cause
    synchronization issues with other systems that depend on consistent timing intervals.
    Ensure that any changes to this interval are thoroughly tested to avoid unexpected
    behavior or performance degradation.
  related:
  - SetUpdateInterval
  - GetNextUpdateTime
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T00:19:03.720103'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
