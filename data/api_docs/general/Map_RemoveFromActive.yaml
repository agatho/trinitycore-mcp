api:
  class: Map
  method: RemoveFromActive
  signature: void Map::RemoveFromActive(WorldObject * obj)
documentation:
  brief: Removes a WorldObject from the map's active object list, making it no longer
    processed for updates or visibility.
  description: The RemoveFromActive method removes a specified WorldObject from the
    map's active object container. This operation is typically invoked when an object
    becomes inactive or is about to be destroyed, ensuring that the object is no longer
    considered part of the active world state for update processing, visibility calculations,
    and other map-related operations. The method ensures that the object is properly
    removed from internal tracking structures without triggering additional cleanup
    logic. This is a core part of TrinityCore's object lifecycle management system.
  parameters:
  - name: obj
    description: Pointer to the WorldObject to be removed from the active list. Must
      not be null and must represent an object currently registered with the map.
  returns: null
  examples:
  - title: Removing a Creature from Active List
    code: 'Creature* creature = ...; // Some existing creature

      map->RemoveFromActive(creature);

      // The creature is now removed from active processing'
    language: cpp
  - title: Removing Player Object Before Despawn
    code: "Player* player = ...; // Some player object\nif (player->IsInWorld())\n\
      {\n    map->RemoveFromActive(player);\n    // Player is now removed from active\
      \ processing but still exists in memory\n}"
    language: cpp
  notes: This method does not destroy the WorldObject itself; it only removes it from
    the active tracking structures. The object may still be referenced elsewhere in
    the system, and proper cleanup should be handled separately. This method is typically
    called internally by the core engine during object destruction or when transitioning
    objects between different map states.
  warnings: Calling this method with a null pointer will likely result in undefined
    behavior or crash. Ensure that the WorldObject pointer is valid and has been previously
    added to the map's active list before calling this method. Improper use can lead
    to dangling references or inconsistent object state.
  related:
  - AddToActive
  - IsInActive
  - GetPlayers
  - GetCreatures
metadata:
  confidence: 0.92
  generated_at: '2025-10-31T11:00:23.973345'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
