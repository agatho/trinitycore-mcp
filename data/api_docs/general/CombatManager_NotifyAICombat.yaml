api:
  class: CombatManager
  method: NotifyAICombat
  signature: void CombatManager::NotifyAICombat(Unit * me, Unit * other)
documentation:
  brief: Notifies the AI system that a unit has entered combat with another unit.
  description: The NotifyAICombat method is used to inform the AI subsystem that a
    specific unit (me) has initiated or is engaged in combat with another unit (other).
    This method typically triggers AI behavior updates, such as switching to combat
    states, initiating attack patterns, or updating threat tables. It is commonly
    called internally by the core when combat begins between units, and may also be
    invoked manually by custom scripts or modules that need to simulate or force AI
    combat engagement. The method does not return any value and operates synchronously
    within the game's main thread.
  parameters:
  - name: me
    description: Pointer to the Unit object that is entering combat. This represents
      the unit initiating or currently engaged in combat.
  - name: other
    description: Pointer to the Unit object that is the opponent in the combat. This
      represents the target or enemy unit involved in the combat.
  returns: null
  examples:
  - title: Basic AI Combat Notification
    code: "void ExampleAIHandler(Unit* attacker, Unit* victim)\n{\n    // Notify AI\
      \ that combat has started between these two units\n    sCombatManager->NotifyAICombat(attacker,\
      \ victim);\n}"
    language: cpp
  - title: Custom Combat Trigger
    code: "void ForceCombat(Unit* player, Unit* mob)\n{\n    // Manually trigger combat\
      \ AI for a custom event\n    if (player && mob)\n    {\n        sCombatManager->NotifyAICombat(player,\
      \ mob);\n        // Additional logic can follow here\n    }\n}"
    language: cpp
  notes: This method is typically invoked automatically by the core combat system
    when units enter combat. Developers should be cautious about calling it manually
    unless necessary, as repeated or improper usage may cause unexpected AI behavior
    or performance issues. The method assumes valid Unit pointers and does not perform
    null checks internally.
  warnings: Calling this method with invalid or null Unit pointers will likely result
    in a crash or undefined behavior. It is recommended to verify that both 'me' and
    'other' are valid, non-null pointers before invoking the method. Avoid calling
    this method excessively during high-frequency events such as tick-based loops.
  related:
  - CombatManager::EnterCombat
  - CombatManager::LeaveCombat
  - Unit::SetInCombatWith
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:05:55.179154'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
