api:
  class: Unit
  method: IsVehicle
  signature: bool Unit::IsVehicle() const
documentation:
  brief: Determines whether the unit is a vehicle.
  description: This method checks if the current Unit object represents a vehicle
    entity within the game world. It returns true if the unit has vehicle data associated
    with it, indicating that it can function as a vehicle for passenger interaction.
    This is commonly used in scenarios where units need to be evaluated for their
    vehicle capabilities, such as when checking if a player or NPC can mount or interact
    with vehicle mechanics.
  parameters: []
  returns: Returns true if the unit is a vehicle, false otherwise. The method does
    not return null or error values as it simply evaluates the internal vehicle state
    of the Unit object.
  examples:
  - title: Basic Vehicle Check
    code: "if (unit->IsVehicle()) {\n    // Unit is a vehicle\n}\n"
    language: cpp
  - title: Vehicle Usage in Player Interaction
    code: "Unit* player = GetPlayer();\nif (player->IsVehicle()) {\n    // Player\
      \ can mount vehicle\n}\n"
    language: cpp
  notes: Implementation relies on internal vehicle flags stored in the Unit's data.
    This method is thread-safe and does not require any special conditions or preconditions
    to be met.
  warnings: This method should not be used for checking if a unit is a vehicle in
    all contexts, as some units may have vehicle data but not be actively usable as
    vehicles. Always verify with additional checks when necessary.
  related:
  - IsVehicle
  - GetVehicle
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T11:51:20.691083'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
