api:
  class: FormationManager
  method: ~FormationManager
  signature: void FormationManager::~FormationManager()
documentation:
  brief: Destroys the FormationManager instance and cleans up all associated formation
    data and resources.
  description: The ~FormationManager destructor is called when a FormationManager
    object goes out of scope or is explicitly deleted. This method ensures proper
    cleanup of all formation-related data structures, including removing references
    to creatures and waypoints that were managed by this formation manager. It typically
    handles deallocation of memory, removal of formations from active lists, and any
    necessary cleanup of internal data structures to prevent memory leaks. The destructor
    is automatically invoked during object destruction and should not be called manually
    unless explicitly needed for resource management purposes.
  parameters: []
  returns: null
  examples:
  - title: Automatic Destructor Call
    code: "void SomeFunction()\n{\n    FormationManager manager;\n    // ... use manager\
      \ ...\n    // Destructor called automatically here\n}"
    language: cpp
  - title: Explicit Deletion (if needed)
    code: 'FormationManager* manager = new FormationManager();

      // ... use manager ...

      delete manager; // Triggers destructor'
    language: cpp
  notes: The destructor is automatically called by the C++ runtime when objects go
    out of scope. It's important to ensure that no other objects hold references to
    formations managed by this manager before destruction, as dangling references
    could lead to undefined behavior. The cleanup process may involve iterating through
    all active formations and properly releasing their resources.
  warnings: Do not manually invoke the destructor unless you are explicitly managing
    object lifetime. Calling it multiple times or on already-destroyed objects will
    result in undefined behavior. Be aware that if other systems hold references to
    formations managed by this manager, those references may become invalid after
    destruction.
  related: []
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T04:06:12.474898'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
