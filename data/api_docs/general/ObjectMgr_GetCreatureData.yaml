api:
  class: ObjectMgr
  method: GetCreatureData
  signature: const int * ObjectMgr::GetCreatureData(int spawnId) const
documentation:
  brief: Retrieves creature data associated with a specific spawn ID from the object
    manager's internal storage.
  description: The GetCreatureData method fetches a pointer to an array of integers
    that represent the data for a creature instance identified by its spawn ID. This
    data typically includes information such as the creature's entry ID, spawn coordinates,
    orientation, health, and other relevant attributes stored in the database. The
    returned pointer points to a fixed-size array of integers that must not be modified
    directly. This method is commonly used during creature loading or respawn operations
    within the TrinityCore server framework to retrieve preloaded creature data from
    memory.
  parameters: []
  returns: A const pointer to an integer array containing creature data fields for
    the specified spawn ID. The array typically holds values like entry ID, spawn
    position (x, y, z), orientation, health status, and other metadata. Returns nullptr
    if no creature data exists for the given spawn ID.
  examples:
  - title: Retrieve and process creature data
    code: "const int* data = sObjectMgr->GetCreatureData(12345);\nif (data != nullptr)\n\
      {\n    uint32 entryId = data[0];\n    float x = data[1] / 1000.0f;\n    float\
      \ y = data[2] / 1000.0f;\n    float z = data[3] / 1000.0f;\n    // Process creature\
      \ data\n}"
    language: cpp
  notes: The returned integer array is managed internally by ObjectMgr and should
    not be freed or modified directly. The exact structure of the returned data depends
    on how it was originally loaded from the database, typically mapping to fields
    in the creature table such as id, map, position_x, position_y, position_z, orientation,
    and other relevant fields.
  warnings: Do not attempt to modify the contents of the returned array, as this can
    corrupt internal data structures. Always check for null return values before accessing
    the data to prevent segmentation faults.
  related:
  - GetCreatureDataBySpawnId
  - LoadCreatureData
  - GetCreatureTemplate
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:00:38.440200'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
