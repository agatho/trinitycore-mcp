api:
  class: LineOfSightManager
  method: LineOfSightManager
  signature: void LineOfSightManager::LineOfSightManager(Player * bot)
documentation:
  brief: Initializes a LineOfSightManager instance for the specified player, setting
    up internal tracking for line-of-sight calculations.
  description: The LineOfSightManager constructor initializes the manager with a reference
    to a Player object. This setup allows the manager to perform line-of-sight checks
    and related computations for the given player within the TrinityCore framework.
    The manager typically handles visibility calculations, obstruction detection,
    and other gameplay mechanics that depend on whether a target is visible to the
    player. It's commonly used in AI systems where NPCs need to determine if they
    can see a player or object, such as during combat or quest interactions. This
    constructor prepares internal data structures and state necessary for efficient
    line-of-sight operations without requiring repeated initialization.
  parameters:
  - name: bot
    description: Pointer to the Player object that this LineOfSightManager will manage
      line-of-sight calculations for. Must not be null, as the manager requires a
      valid player context to operate correctly.
  returns: null
  examples:
  - title: Basic Initialization
    code: 'Player* myBot = ...; // Assume this is a valid Player pointer

      LineOfSightManager losManager(myBot);

      // The losManager is now ready to perform line-of-sight checks for myBot'
    language: cpp
  - title: Usage in AI Context
    code: "class MyAI {\nprivate:\n    LineOfSightManager losManager;\npublic:\n \
      \   MyAI(Player* bot) : losManager(bot) {}\n    \n    bool CanSeeTarget(Unit*\
      \ target) {\n        return losManager.IsInLineOfSight(target);\n    }\n};"
    language: cpp
  notes: This constructor does not perform any immediate line-of-sight calculations.
    It merely sets up the internal state and references needed for future operations.
    The manager may cache certain data about the player's position, orientation, and
    environment to optimize performance during repeated checks.
  warnings: Ensure that the Player pointer passed to this constructor remains valid
    throughout the lifetime of the LineOfSightManager instance. Passing a null or
    invalid pointer will result in undefined behavior and likely crashes.
  related:
  - IsInLineOfSight
  - GetLosResult
  - UpdateLosCache
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T03:40:36.236454'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
