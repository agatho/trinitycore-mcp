api:
  class: Player
  method: CanStoreNewItem
  signature: int Player::CanStoreNewItem(uint8 bag, uint8 slot, ItemPosCountVec &
    dest, uint32 item, uint32 count, uint32 * no_space_count) const
documentation:
  brief: Checks if an item can be stored in a player's inventory and returns the appropriate
    result code.
  description: The CanStoreNewItem method determines whether a given item can be stored
    in a player's inventory. It evaluates the item's properties, the player's inventory
    slots, and available space to determine if the item can be successfully added
    to the inventory. This method is commonly used during item creation or when attempting
    to add items to a player's inventory, such as during quest rewards or loot distribution.
    The method returns different codes indicating success or failure, with 0 meaning
    the item can be stored, and non-zero values indicating various failure conditions.
  parameters:
  - name: bag
    description: The bag slot to check for item storage. Values range from 0 to 11,
      where 0 represents the backpack, and 1-11 represent the equipped bags.
  - name: slot
    description: The specific slot within the bag to check for item storage. Values
      range from 0 to 36, where 0 represents the first slot in the bag.
  - name: dest
    description: A reference to ItemPosCountVec which will be populated with the position
      where the item can be stored if successful. This vector contains the item's
      position and count information.
  - name: item
    description: The item ID to check for storage. This represents the item's template
      ID, not the actual item instance.
  - name: count
    description: The quantity of items to store. This is the number of items being
      checked for storage.
  - name: no_space_count
    description: Optional pointer to a uint32 value that will be filled with the number
      of items that could not be stored due to lack of space. This parameter is used
      when the method returns non-zero values.
  returns: Returns 0 if the item can be successfully stored, or a non-zero value indicating
    various failure conditions such as insufficient space, invalid item, or other
    inventory-related issues.
  examples:
  - title: Basic usage example
    code: "ItemPosCountVec dest;\nint result = player->CanStoreNewItem(0, 0, dest,\
      \ 12345, 1);\nif (result == 0)\n{\n    // Item can be stored\n}"
    language: cpp
  - title: Advanced usage example
    code: "ItemPosCountVec dest;\nuint32 no_space_count = 0;\nint result = player->CanStoreNewItem(1,\
      \ 5, dest, 67890, 10, &no_space_count);\nif (result != 0)\n{\n    // Handle\
      \ the failure case\n    // no_space_count will contain how many items couldn't\
      \ be stored\n}"
    language: cpp
  notes: This method is typically used in conjunction with other inventory-related
    methods like StoreItem or AddItem. It's important to note that this method does
    not actually store the item, but rather checks if it can be stored. The method
    may also consider item restrictions and player requirements such as level or class.
  warnings: The method might return non-zero values even when the item is valid, especially
    if there are no available slots in the specified bag or slot. Care should be taken
    to properly handle all possible return values to avoid incorrect assumptions about
    item storage.
  related:
  - StoreItem
  - AddItem
  - CanUseItem
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T17:38:17.113783'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
