api:
  class: InterruptManager
  method: GetReactionTime
  signature: uint32 InterruptManager::GetReactionTime() const
documentation:
  brief: Calculates and returns the reaction time value used for interrupt handling
    in the game's AI system.
  description: The GetReactionTime method retrieves the current reaction time setting
    for an InterruptManager instance, which determines how quickly an AI-controlled
    unit responds to interrupts or external stimuli. This value is typically used
    in combat scenarios where timing and responsiveness are critical for NPC behavior.
    The method does not modify any internal state and serves purely as a getter function.
    It is commonly invoked during AI decision-making processes to ensure appropriate
    reaction delays based on difficulty settings, combat state, or other contextual
    factors.
  parameters: []
  returns: Returns a uint32 value representing the reaction time in milliseconds.
    This value indicates how long the system should wait before responding to an interrupt
    event, with higher values resulting in slower reactions and lower values leading
    to more immediate responses.
  examples:
  - title: Basic Usage Example
    code: "InterruptManager* interruptMgr = player->GetInterruptManager();\nuint32\
      \ reactionTime = interruptMgr->GetReactionTime();\n// Use reactionTime for AI\
      \ timing calculations\nif (reactionTime > 500)\n{\n    // Handle slow reaction\
      \ case\n}"
    language: cpp
  - title: Integration with Combat Logic
    code: "void OnInterruptReceived(Unit* attacker)\n{\n    InterruptManager* im =\
      \ GetInterruptManager();\n    uint32 reactionTime = im->GetReactionTime();\n\
      \    \n    // Schedule next action based on reaction time\n    if (reactionTime\
      \ > 0)\n    {\n        // Delay combat response by reaction time\n        _scheduler.Schedule(reactionTime,\
      \ [this](uint32) {\n            DoCombatResponse();\n        });\n    }\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any context without risk
    of race conditions. The returned value may vary depending on the current game
    difficulty, player level, or other environmental factors that influence AI behavior.
    It's recommended to cache this value when used frequently in performance-critical
    sections.
  warnings: Be cautious when relying on this value for precise timing-sensitive operations,
    as it may change dynamically during gameplay based on various conditions. Avoid
    using this method in tight loops without caching the result, as repeated calls
    could impact performance.
  related:
  - SetReactionTime
  - GetInterruptDelay
  - IsInterruptible
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:32:28.994396'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
