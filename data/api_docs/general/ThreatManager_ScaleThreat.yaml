api:
  class: ThreatManager
  method: ScaleThreat
  signature: void ThreatManager::ScaleThreat(Unit * target, float factor)
documentation:
  brief: Scales the threat generated by a unit against a target by a specified factor.
  description: The ScaleThreat method modifies the threat value that a Unit generates
    against a specific target. This is commonly used in AI behavior to adjust how
    aggressively a creature pursues a player or other unit. The scaling factor can
    increase or decrease the threat, allowing for dynamic control over combat engagement.
    This method directly affects the threat table within the ThreatManager and influences
    the unit's targeting behavior. It should be used carefully as it can alter the
    intended combat flow and group dynamics in encounters.
  parameters:
  - name: target
    description: Pointer to the Unit object against which the threat is being scaled.
      This represents the target unit that will experience modified threat values.
  - name: factor
    description: Float value representing the scaling factor for threat. A value of
      1.0 maintains original threat, values greater than 1.0 increase threat, and
      values less than 1.0 decrease threat. Negative values may be used to reduce
      or invert threat behavior.
  returns: null
  examples:
  - title: Increase threat generation by 50%
    code: 'Unit* target = player;

      float scale = 1.5f;

      threatManager->ScaleThreat(target, scale);'
    language: cpp
  - title: Reduce threat to zero for a specific target
    code: 'Unit* target = player;

      float scale = 0.0f;

      threatManager->ScaleThreat(target, scale);'
    language: cpp
  notes: This method modifies the internal threat table and should be called with
    consideration for combat balance. It does not directly affect the unit's attack
    or damage output, but rather influences which units will be targeted by enemy
    mobs. The change is immediate and affects all future threat calculations involving
    the specified target.
  warnings: Using negative threat factors can lead to unpredictable targeting behavior.
    Be cautious when scaling threat during active combat as it may cause units to
    switch targets unexpectedly or ignore their primary target. This method should
    not be used in performance-critical sections of code due to potential table updates
    and recalculations.
  related:
  - AddThreat
  - GetThreat
  - UpdateThreat
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:42:08.588046'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
