api:
  class: ScriptMgr
  method: OnCreateMap
  signature: void ScriptMgr::OnCreateMap(Map * map)
documentation:
  brief: Invoked when a new map instance is created in the game world
  description: The OnCreateMap method is a callback function within the ScriptMgr
    class that gets triggered whenever a new Map instance is initialized and added
    to the game world. This method allows script developers to execute custom logic
    or perform initialization tasks when maps are created, such as setting up custom
    map data, registering event handlers, or modifying map properties before the map
    becomes active for players. The method is called during the map creation process,
    providing an opportunity to inject custom behavior into the core game mechanics
    without modifying the base TrinityCore codebase.
  parameters:
  - name: map
    description: Pointer to the Map object that has been created and is being initialized.
      This parameter provides access to all map-related functionality and properties
      for customization or extension.
  returns: null
  examples:
  - title: Basic Map Initialization Handler
    code: "class MyMapScript : public ScriptObject\n{\npublic:\n    MyMapScript()\
      \ : ScriptObject(\"MyMapScript\") {}\n\n    void OnCreateMap(Map* map) override\n\
      \    {\n        // Custom initialization logic for new maps\n        if (map->GetId()\
      \ == 1234) // Example: specific map ID\n        {\n            // Set custom\
      \ map properties or register events\n            map->SetScript(this);\n   \
      \     }\n    }\n};"
    language: cpp
  - title: Advanced Map Customization with Data Loading
    code: "class AdvancedMapScript : public ScriptObject\n{\npublic:\n    AdvancedMapScript()\
      \ : ScriptObject(\"AdvancedMapScript\") {}\n\n    void OnCreateMap(Map* map)\
      \ override\n    {\n        // Load custom data for the map\n        if (map->GetDifficulty()\
      \ == DUNGEON_DIFFICULTY_NORMAL)\n        {\n            // Initialize custom\
      \ NPC spawns or object placements\n            LoadCustomMapData(map);\n   \
      \     }\n        else if (map->GetDifficulty() == DUNGEON_DIFFICULTY_HEROIC)\n\
      \        {\n            // Apply heroic-specific modifications\n           \
      \ ApplyHeroicModifiers(map);\n        }\n    }\n\nprivate:\n    void LoadCustomMapData(Map*\
      \ map)\n    {\n        // Implementation to load custom data for the map\n \
      \   }\n\n    void ApplyHeroicModifiers(Map* map)\n    {\n        // Implementation\
      \ to apply heroic difficulty modifications\n    }\n};"
    language: cpp
  notes: This method is called during the map creation lifecycle, so it's important
    to ensure that any operations performed do not block or significantly delay map
    initialization. The Map pointer provided is guaranteed to be valid and fully constructed
    at this point. Developers should avoid modifying core map systems directly from
    this callback unless necessary, as it may affect performance or stability.
  warnings: Avoid performing heavy computations or blocking operations within this
    callback as it can cause delays in map loading and potentially impact game performance.
    Also, be cautious when modifying map properties that might affect gameplay balance
    or player experience.
  related:
  - OnMapUpdate
  - OnMapEnter
  - OnMapRemove
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T18:13:02.831867'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
