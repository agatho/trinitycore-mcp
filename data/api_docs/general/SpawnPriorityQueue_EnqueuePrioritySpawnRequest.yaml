api:
  class: SpawnPriorityQueue
  method: EnqueuePrioritySpawnRequest
  signature: bool SpawnPriorityQueue::EnqueuePrioritySpawnRequest(PrioritySpawnRequest
    request)
documentation:
  brief: Enqueues a priority spawn request into the SpawnPriorityQueue for processing.
  description: The EnqueuePrioritySpawnRequest method adds a PrioritySpawnRequest
    object to an internal queue that manages high-priority entity spawning within
    the TrinityCore server. This mechanism ensures that certain spawns, such as bosses
    or quest-related NPCs, are handled with higher precedence than regular spawn operations.
    The method returns true if the request was successfully added to the queue, and
    false if the operation failed due to queue limitations or other internal constraints.
    This functionality is crucial for maintaining game balance and ensuring timely
    appearance of important entities during gameplay events.
  parameters:
  - name: request
    description: A PrioritySpawnRequest object containing details about the entity
      to be spawned with priority. This includes spawn location, creature template
      ID, and any associated spawn conditions or flags that determine how the entity
      should be handled in the priority queue.
  returns: True if the priority spawn request was successfully enqueued; false if
    the operation failed due to queue overflow, invalid request data, or internal
    system constraints.
  examples:
  - title: Basic Usage of EnqueuePrioritySpawnRequest
    code: "PrioritySpawnRequest spawnReq;\nspawnReq.creatureId = 12345;\nspawnReq.position\
      \ = Position(100.0f, 200.0f, 300.0f, 0.0f);\nspawnReq.spawnTime = GameTime::GetGameTime();\n\
      bool success = sSpawnPriorityQueue->EnqueuePrioritySpawnRequest(spawnReq);\n\
      if (success)\n{\n    TC_LOG_INFO(\"server\", \"Priority spawn request queued\
      \ successfully.\");\n}\nelse\n{\n    TC_LOG_ERROR(\"server\", \"Failed to queue\
      \ priority spawn request.\");\n}"
    language: cpp
  notes: This method is typically used by game event handlers, quest systems, or AI
    modules that require immediate spawning of specific creatures. The internal queue
    may have a limited capacity, and repeated calls without processing can lead to
    failure returns. The method is thread-safe as it uses appropriate locking mechanisms
    internally.
  warnings: Calling this method with invalid or malformed PrioritySpawnRequest objects
    may result in undefined behavior or failed enqueuing attempts. Ensure that all
    required fields in the request are properly initialized before calling this function.
  related:
  - DequeuePrioritySpawnRequest
  - ProcessPrioritySpawns
  - IsQueueEmpty
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T21:11:47.533062'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
