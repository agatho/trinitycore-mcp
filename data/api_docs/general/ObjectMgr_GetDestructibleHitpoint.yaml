api:
  class: ObjectMgr
  method: GetDestructibleHitpoint
  signature: const int * ObjectMgr::GetDestructibleHitpoint(uint32 entry) const
documentation:
  brief: Retrieves the destructible hitpoint data for a specified game object entry.
  description: The GetDestructibleHitpoint method retrieves a pointer to an array
    of integers that represent the hitpoint values for different states or stages
    of a destructible game object, such as a siege wall or door. This data is typically
    used by the game engine to determine how much damage a destructible object can
    take before transitioning between visual states or being completely destroyed.
    The method accesses internal lookup tables within the ObjectMgr class that map
    entry IDs to their corresponding destructible hitpoint configurations. The returned
    pointer should be treated as read-only and must not be modified directly.
  parameters: []
  returns: A const pointer to an array of integers representing the hitpoint values
    for the specified game object entry, or nullptr if no such entry exists in the
    internal lookup tables.
  examples:
  - title: Retrieve destructible hitpoints for a siege wall
    code: "const int* hitpoints = sObjectMgr->GetDestructibleHitpoint(12345);\nif\
      \ (hitpoints != nullptr) {\n    printf(\"Wall has %d hitpoints\\n\", hitpoints[0]);\n\
      } else {\n    printf(\"No destructible data found for entry 12345\\n\");\n}"
    language: cpp
  notes: This method is primarily used in the context of World of Warcraft's siege
    mechanics, particularly for objects like gates and walls that have multiple hitpoint
    thresholds before destruction. The returned array typically contains at least
    one value, but may contain more depending on how many distinct states the destructible
    object has. The implementation relies on internal data structures populated during
    server startup from game databases.
  warnings: The returned pointer is only valid while the ObjectMgr instance remains
    alive and should not be stored for later use. Accessing memory beyond the bounds
    of the returned array can lead to undefined behavior. This method does not perform
    any validation on the input entry ID, so calling it with invalid IDs may return
    nullptr or cause access violations.
  related:
  - GetGameObjectTemplate
  - GetDestructibleData
  - GetObjectTemplate
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:49:33.066800'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
