api:
  class: Unit
  method: GetTotalAuraMultiplierByMiscValue
  signature: float Unit::GetTotalAuraMultiplierByMiscValue(int auraType, int32 misc_value)
    const
documentation:
  brief: Calculates the total aura multiplier for a specific aura type and misc value.
  description: This method retrieves the cumulative multiplier effect of all auras
    that match a specified aura type and misc value. It is commonly used in World
    of Warcraft to determine how much a particular aura contributes to stat modifications,
    such as damage bonuses or healing multipliers. The method considers all active
    auras on the unit, including those from items, spells, and abilities, and computes
    their combined effect based on the specified parameters. This functionality is
    essential for accurate gameplay mechanics in TrinityCore.
  parameters:
  - name: auraType
    description: The type of aura to consider (e.g., 1 for damage over time, 2 for
      healing over time). Valid values are typically defined by the game's aura system
      and can include various types like damage, healing, or stat modifiers.
  - name: misc_value
    description: The specific value that defines the aura's effect (e.g., 100 for
      a 100% increase in damage). This parameter determines which specific aura to
      aggregate and can be used to filter auras based on their misc value.
  returns: Returns a float representing the total multiplier applied by all matching
    auras. A value of 1.0f indicates no additional effect, while values greater than
    1.0f indicate increased effects (e.g., 1.5f means 50% more damage). Values less
    than 1.0f may indicate reduced effects or negative modifiers.
  examples:
  - title: Basic Usage Example
    code: float multiplier = unit->GetTotalAuraMultiplierByMiscValue(1, 100); // Calculates
      total damage multiplier for a 100% increase
    language: cpp
  - title: Advanced Usage Example
    code: float multiplier = unit->GetTotalAuraMultiplierByMiscValue(2, 50); // Calculates
      total healing multiplier for a 50% increase
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine overall stat modifications. Performance-wise, it involves iterating
    through all active auras and applying their effects, which can be computationally
    intensive if many auras are present. Thread safety depends on the unit's state;
    if the unit is being modified by multiple threads, synchronization may be required.
  warnings: This method should not be used for direct calculations without considering
    the context of the aura type and misc value. Incorrect usage could lead to inaccurate
    stat calculations or unexpected behavior in gameplay mechanics. Also, it's important
    to note that this method does not account for aura stacking rules or specific
    game mechanics like stacking restrictions.
  related:
  - GetTotalAuraMultiplierByMiscValue
  - GetAuraEffect
  - GetAuraCount
  - GetAuraType
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:35:03.166371'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
