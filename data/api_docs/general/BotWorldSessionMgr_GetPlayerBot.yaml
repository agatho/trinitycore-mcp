api:
  class: BotWorldSessionMgr
  method: GetPlayerBot
  signature: Player * BotWorldSessionMgr::GetPlayerBot(int playerGuid) const
documentation:
  brief: Retrieves a player bot instance by its unique identifier.
  description: The GetPlayerBot method retrieves a Player object representing a specific
    player bot within the TrinityCore world session manager. This method is typically
    used in bot management systems to access individual bots by their GUID. The returned
    Player pointer can be used to interact with the bot's properties, behavior, or
    state. The method assumes that the player bot has been previously registered or
    initialized within the session manager. If no bot exists with the specified GUID,
    the method may return a null pointer.
  parameters:
  - name: playerGuid
    description: The unique identifier (GUID) of the player bot to retrieve. This
      should be a valid 32-bit unsigned integer representing the bot's identifier
      within the game world.
  returns: A pointer to the Player object representing the requested player bot, or
    nullptr if no bot exists with the specified GUID.
  examples:
  - title: Basic Usage
    code: "Player* bot = sBotWorldSessionMgr->GetPlayerBot(12345);\nif (bot != nullptr)\
      \ {\n    // Use the bot object\n    std::cout << \"Found bot with name: \" <<\
      \ bot->GetName() << std::endl;\n} else {\n    std::cout << \"No bot found with\
      \ GUID 12345\" << std::endl;\n}"
    language: cpp
  - title: Checking Bot State Before Use
    code: "uint32_t botGuid = 98765;\nPlayer* bot = sBotWorldSessionMgr->GetPlayerBot(botGuid);\n\
      if (bot && bot->IsInWorld()) {\n    // Safe to perform operations on the bot\n\
      \    bot->TeleportTo(0, 0.0f, 0.0f, 0.0f, 0.0f);\n} else {\n    // Handle case\
      \ where bot is not valid or not in world\n    sLog->outError(\"Bot with GUID\
      \ %u is not available\", botGuid);\n}"
    language: cpp
  notes: This method operates within the context of TrinityCore's bot system and assumes
    that player bots are managed through the BotWorldSessionMgr. The returned Player
    pointer should be validated before use to ensure the bot is still active and valid
    in the game world.
  warnings: Calling this method with an invalid or non-existent GUID will likely return
    a nullptr, which must be checked to prevent null pointer dereferences. Additionally,
    the returned Player object may become invalid if the bot is removed from the session
    manager.
  related:
  - GetPlayerBotCount
  - AddPlayerBot
  - RemovePlayerBot
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:36:39.662909'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
