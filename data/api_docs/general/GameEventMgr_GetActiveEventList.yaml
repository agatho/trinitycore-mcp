api:
  class: GameEventMgr
  method: GetActiveEventList
  signature: const ActiveEvents & GameEventMgr::GetActiveEventList() const
documentation:
  brief: Retrieves a constant reference to the list of currently active game events.
  description: The GetActiveEventList method returns a constant reference to an internal
    collection of active game events. This collection is updated dynamically as game
    events start and end, typically managed by the GameEventMgr class. The returned
    reference provides read-only access to the current set of active events, allowing
    other systems to query which events are currently active without modifying the
    event state. This method is commonly used for event-based content handling, such
    as determining which seasonal events or holiday celebrations are currently in
    progress.
  parameters: []
  returns: A constant reference to an ActiveEvents collection containing the identifiers
    of all currently active game events. The collection type is typically a container
    like std::vector or std::set of event IDs or pointers to event structures.
  examples:
  - title: Check for Active Events
    code: "const auto& activeEvents = sGameEventMgr->GetActiveEventList();\nfor (const\
      \ auto& eventId : activeEvents) {\n    // Process each active event\n    std::cout\
      \ << \"Active event ID: \" << eventId << std::endl;\n}"
    language: cpp
  - title: Determine if Specific Event is Active
    code: "uint32_t holidayEventId = 12345;\nconst auto& activeEvents = sGameEventMgr->GetActiveEventList();\n\
      bool isHolidayActive = std::find(activeEvents.begin(), activeEvents.end(), holidayEventId)\
      \ != activeEvents.end();\nif (isHolidayActive) {\n    // Apply holiday-specific\
      \ logic\n}"
    language: cpp
  notes: The returned reference points to an internal data structure that is updated
    by the GameEventMgr. Modifications to this collection should not be made directly
    through this reference, as it may cause inconsistencies in event management. The
    method is thread-safe for read operations but should not be called during event
    state changes.
  warnings: Do not modify the returned collection directly, as doing so can corrupt
    internal game event state. Always use the GameEventMgr's dedicated methods for
    adding or removing events. The list may change between calls to this method if
    events are starting or ending.
  related:
  - GameEventMgr::IsActiveEvent
  - GameEventMgr::StartEvent
  - GameEventMgr::StopEvent
  - GameEventMgr::UpdateEvents
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T13:37:32.221463'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
