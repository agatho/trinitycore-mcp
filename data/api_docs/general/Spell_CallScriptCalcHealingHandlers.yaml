api:
  class: Spell
  method: CallScriptCalcHealingHandlers
  signature: void Spell::CallScriptCalcHealingHandlers(const SpellEffectInfo & spellEffectInfo,
    Unit * victim, int32 & healing, int32 & flatMod, float & pctMod)
documentation:
  brief: Calculates healing effects for spell handlers
  description: This method processes and calculates healing values based on spell
    effect information, considering both flat modifications and percentage modifiers.
    It is used in conjunction with script-based healing calculations to determine
    final healing amounts applied to targets. The method handles the interaction between
    different spell effects and target units, ensuring proper healing application
    mechanics.
  parameters:
  - name: spellEffectInfo
    description: Contains information about the spell effect being processed, including
      effect type, base damage, and other relevant parameters
  - name: victim
    description: The target unit receiving healing, which could be player or creature
      depending on the context
  - name: healing
    description: Reference to the calculated healing amount that will be modified
      by flat and percentage adjustments
  - name: flatMod
    description: Reference to the flat modification value that will be applied to
      the healing calculation
  - name: pctMod
    description: Reference to the percentage modifier value that will be applied to
      the healing calculation
  returns: null
  examples:
  - title: Basic usage example
    code: 'Spell* spell = new Spell();

      SpellEffectInfo effectInfo;

      Unit* target = new Unit();

      int32 healAmount = 0;

      int32 flatMod = 0;

      float pctMod = 1.0f;

      spell->CallScriptCalcHealingHandlers(effectInfo, target, healAmount, flatMod,
      pctMod);'
    language: cpp
  notes: This method is typically invoked during spell processing in the TrinityCore
    core, particularly when handling healing effects. It requires careful handling
    of references to avoid modifying values incorrectly. Performance considerations
    include ensuring proper memory management and avoiding unnecessary calculations.
  warnings: Improper handling of references can lead to incorrect healing calculations.
    Care should be taken to ensure that the target unit is valid before calling this
    method, as invalid pointers may cause crashes or undefined behavior.
  related: []
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T22:47:40.049964'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
