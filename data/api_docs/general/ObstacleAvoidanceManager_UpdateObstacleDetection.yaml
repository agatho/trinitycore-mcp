api:
  class: ObstacleAvoidanceManager
  method: UpdateObstacleDetection
  signature: void ObstacleAvoidanceManager::UpdateObstacleDetection(const DetectionContext
    & context)
documentation:
  brief: Updates obstacle detection for the given context, processing movement and
    collision avoidance logic.
  description: The UpdateObstacleDetection method is responsible for performing real-time
    obstacle detection and avoidance calculations based on the provided DetectionContext.
    This method typically integrates with the AI system to prevent units from moving
    through solid objects or other obstacles in the game world. It evaluates the current
    environment, checks for potential collisions, and adjusts movement paths accordingly.
    The method operates as part of the broader obstacle avoidance subsystem within
    TrinityCore's AI framework and is often called during update cycles to maintain
    smooth and realistic unit navigation.
  parameters:
  - name: context
    description: The DetectionContext object containing current position, movement
      data, and environmental information used for obstacle detection calculations.
      This includes target positions, movement speed, collision radius, and other
      relevant parameters needed for pathfinding and avoidance logic.
  returns: null
  examples:
  - title: Basic usage in AI update loop
    code: "void CustomAI::UpdateAI(uint32 diff)\n{\n    if (Unit* target = me->GetVictim())\n\
      \    {\n        DetectionContext context;\n        context.movementSpeed = me->GetSpeed(MOVE_RUN);\n\
      \        context.position = me->GetPosition();\n        context.targetPosition\
      \ = target->GetPosition();\n        context.collisionRadius = me->GetObjectSize();\n\
      \        \n        obstacleAvoidanceManager.UpdateObstacleDetection(context);\n\
      \    }\n}"
    language: cpp
  notes: This method is typically called from within AI update loops and should be
    invoked regularly to maintain accurate obstacle detection. The method may perform
    expensive calculations involving raycasting or pathfinding, so frequent calls
    could impact performance. It's recommended to batch updates or use throttling
    mechanisms in high-frequency scenarios.
  warnings: The DetectionContext parameter must contain valid data; otherwise, the
    method may produce incorrect avoidance behavior or crash. Ensure that all required
    fields are properly initialized before calling this method.
  related:
  - GetObstacleAvoidanceStatus
  - SetObstacleAvoidanceEnabled
  - ResetObstacleDetection
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T21:18:23.137935'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
