api:
  class: BotChatCommandHandler
  method: GetPlayerPermission
  signature: CommandPermission BotChatCommandHandler::GetPlayerPermission(Player *
    player, Player * bot)
documentation:
  brief: Determines the command permission level for a player interacting with a bot.
  description: The GetPlayerPermission method evaluates the access level and privileges
    of a given player in relation to a specific bot. It checks whether the player
    has sufficient permissions to execute commands or interact with the bot based
    on game rules, player roles, and configuration settings. This method is typically
    used within the TrinityCore framework to enforce command restrictions and maintain
    proper gameplay integrity when bots are involved. The result is a CommandPermission
    enum value that defines what actions the player can perform.
  parameters:
  - name: player
    description: Pointer to the Player object representing the user attempting to
      interact with the bot. Must be a valid player instance; null pointers will cause
      undefined behavior.
  - name: bot
    description: Pointer to the Player object representing the bot being accessed
      by the player. Must be a valid bot instance; null pointers will cause undefined
      behavior.
  returns: Returns a CommandPermission enum value indicating the level of access granted
    to the player for interacting with the specified bot. Possible values may include
    PERMISSION_NONE, PERMISSION_PLAYER, PERMISSION_MODERATOR, PERMISSION_ADMIN, or
    PERMISSION_OWNER depending on the implementation and server configuration.
  examples:
  - title: Check Player Permission Level
    code: "CommandPermission perm = handler.GetPlayerPermission(player, bot);\nif\
      \ (perm >= PERMISSION_MODERATOR) {\n    // Allow moderator-level commands\n\
      \    SendResponse(\"You have moderator access to this bot.\");\n} else {\n \
      \   SendResponse(\"Insufficient permissions.\");\n}"
    language: cpp
  notes: This method likely relies on internal server configuration and player account
    data such as security levels, GM status, or group membership. It may also consider
    the relationship between the player and bot (e.g., if the player owns the bot).
    Ensure that both player and bot pointers are valid before calling this method
    to avoid crashes.
  warnings: Passing null pointers for either player or bot will result in undefined
    behavior and potential crashes. Always validate input parameters before invoking
    this method. The permission levels returned depend heavily on server settings
    and may vary between different TrinityCore configurations.
  related:
  - GetPlayerPermission
  - SetPlayerPermission
  - IsBotCommandAllowed
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:26:13.279843'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
