api:
  class: InstanceScript
  method: IsAreaTriggerDone
  signature: bool InstanceScript::IsAreaTriggerDone(uint32 id) const
documentation:
  brief: Checks whether a specific area trigger has been activated within the instance.
  description: The IsAreaTriggerDone method determines if a particular area trigger
    (defined by its unique identifier) has already been triggered and completed within
    the current instance. This is commonly used in scripted encounters to track player
    progress or ensure certain conditions are met before proceeding with further mechanics.
    The method returns true if the area trigger has been processed, and false otherwise.
    It's typically called during event handling or conditional logic to control quest
    progression, encounter phases, or other scripted behaviors.
  parameters: []
  returns: Returns a boolean value indicating whether the specified area trigger has
    been activated (true) or not (false).
  examples:
  - title: Checking Area Trigger Status Before Proceeding
    code: "if (!instance->IsAreaTriggerDone(12345))\n{\n    // Area trigger hasn't\
      \ been done yet, activate it\n    instance->DoAreaTrigger(12345);\n}\nelse\n\
      {\n    // Area trigger already completed, skip or handle accordingly\n    player->SendNotification(\"\
      Area trigger already activated.\");\n}"
    language: cpp
  - title: Using Area Trigger Status in Encounter Logic
    code: "class BossEncounterScript : public InstanceScript\n{\npublic:\n    void\
      \ SetData(uint32 type, uint32 data) override\n    {\n        if (type == DATA_TRIGGER_COMPLETE)\n\
      \        {\n            if (IsAreaTriggerDone(54321))\n            {\n     \
      \           // Trigger already done, proceed with next phase\n             \
      \   DoNextPhase();\n            }\n            else\n            {\n       \
      \         // Mark trigger as done and start phase\n                SetAreaTriggerDone(54321);\n\
      \                StartPhaseOne();\n            }\n        }\n    }\n};"
    language: cpp
  notes: This method is part of the instance scripting system in TrinityCore, which
    tracks various state flags for encounters and events. The area trigger IDs are
    typically defined in the database or script files. The implementation relies on
    internal tracking mechanisms that persist throughout the instance's lifetime but
    reset when the instance is destroyed.
  warnings: Be cautious when using this method in conjunction with other state management
    functions, as incorrect usage may lead to inconsistent encounter states. Ensure
    that area triggers are properly initialized and tracked to avoid unexpected behavior
    during scripted events.
  related:
  - SetAreaTriggerDone
  - ResetAreaTriggers
  - GetAreaTriggerState
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:46:39.679695'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
