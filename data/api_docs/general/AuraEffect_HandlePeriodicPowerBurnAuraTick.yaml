api:
  class: AuraEffect
  method: HandlePeriodicPowerBurnAuraTick
  signature: void AuraEffect::HandlePeriodicPowerBurnAuraTick(Unit * target, Unit
    * caster) const
documentation:
  brief: Applies a periodic power burn effect to the target unit.
  description: 'The HandlePeriodicPowerBurnAuraTick method is responsible for executing
    the tick logic of a periodic power burn aura. This method is invoked at regular
    intervals during the aura''s duration and reduces the target''s power (such as
    mana, rage, or energy) by a specified amount. It is typically used in spells that
    drain the opponent''s power over time, such as Drain Mana or Shadow Word: Pain.
    The method ensures that the power reduction is applied correctly to the target
    unit, taking into account any applicable modifiers or resistances.'
  parameters:
  - name: target
    description: The Unit object that is affected by the aura tick. This represents
      the recipient of the power burn effect.
  - name: caster
    description: The Unit object that cast the aura. This may be used to determine
      the source of the power drain or apply any caster-specific effects.
  returns: null
  examples:
  - title: Basic Usage in Aura Application
    code: "void MySpellAura::HandlePeriodicPowerBurnAuraTick(Unit* target, Unit* caster)\
      \ const {\n    if (!target || !caster)\n        return;\n\n    uint32 powerAmount\
      \ = GetAmount();\n    target->ModifyPower(target->getPowerType(), -int32(powerAmount));\n\
      }"
    language: cpp
  notes: This method is typically called internally by the TrinityCore aura system
    during the tick processing phase. Ensure that the aura's duration and tick interval
    are properly configured to avoid unintended behavior. The power type being drained
    should be validated against the target's available power types.
  warnings: Improper handling of the target or caster pointers can lead to crashes
    or undefined behavior. Always validate that both parameters are non-null before
    proceeding with any operations. Be cautious when modifying power values directly,
    as this may affect combat balance and player experience.
  related:
  - AuraEffect::HandlePeriodicTick
  - AuraEffect::GetAmount
  - Unit::ModifyPower
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:08:01.777921'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
