api:
  class: SceneMgr
  method: HasScene
  signature: bool SceneMgr::HasScene(uint32 sceneInstanceID, uint32 sceneScriptPackageId)
    const
documentation:
  brief: Checks if a scene with the specified instance ID and script package ID exists
    in the scene manager.
  description: The HasScene method determines whether a specific scene, identified
    by its instance ID and script package ID, is registered within the SceneMgr. This
    functionality is crucial for managing dynamic scenes in World of Warcraft, such
    as quest cutscenes or cinematic events. The method performs a lookup in the internal
    scene registry to verify the existence of the scene before returning a boolean
    result. It does not modify any state and can be safely called during gameplay
    or loading sequences.
  parameters:
  - name: sceneInstanceID
    description: The unique identifier for the scene instance. This value corresponds
      to the SceneInstanceID field in the scene database entries.
  - name: sceneScriptPackageId
    description: The script package ID associated with the scene. This identifies
      the specific script behavior and data that governs how the scene should be executed.
  returns: Returns true if a scene with the given instance ID and script package ID
    exists in the scene manager; otherwise, returns false.
  examples:
  - title: Basic Scene Existence Check
    code: "if (sSceneMgr->HasScene(12345, 67890))\n{\n    // Scene exists, proceed\
      \ with logic\n    sLog->outString(\"Scene found: 12345\");\n}\nelse\n{\n   \
      \ // Scene does not exist\n    sLog->outString(\"Scene not found: 12345\");\n\
      }"
    language: cpp
  - title: Conditional Logic Based on Scene Presence
    code: "uint32 sceneId = 98765;\nuint32 scriptPackageId = 43210;\n\nif (sSceneMgr->HasScene(sceneId,\
      \ scriptPackageId))\n{\n    // Trigger the scene or perform related actions\n\
      \    Player* player = ...; // assume player is available\n    player->SendSceneStart(sceneId,\
      \ scriptPackageId);\n}\nelse\n{\n    // Fallback behavior when scene is missing\n\
      \    sLog->outError(\"Scene %u with package %u not found\", sceneId, scriptPackageId);\n\
      }"
    language: cpp
  notes: This method performs a fast lookup in an internal registry and should not
    be called excessively during performance-critical sections of code. The SceneMgr
    maintains scenes in memory for active players, so this check is typically efficient
    unless dealing with large numbers of scene queries.
  warnings: Ensure that both parameters are valid before calling this function to
    avoid unexpected behavior. Invalid IDs may lead to incorrect results or internal
    errors depending on implementation details.
  related:
  - SceneMgr::AddScene
  - SceneMgr::RemoveScene
  - SceneMgr::GetScene
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:53:53.610171'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
