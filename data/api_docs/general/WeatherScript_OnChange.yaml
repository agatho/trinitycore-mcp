api:
  class: WeatherScript
  method: OnChange
  signature: void WeatherScript::OnChange(Weather * weather, WeatherState state, float
    grade)
documentation:
  brief: Invoked when a weather state changes in the game world.
  description: The OnChange method is a callback function that gets triggered whenever
    the weather conditions in a specific zone are modified. This method allows script
    developers to respond to dynamic weather updates, such as rain, snow, or clear
    skies, enabling custom behaviors based on environmental changes. The method provides
    information about the weather object, its new state, and the intensity of the
    change. It is part of the WeatherScript class which handles weather-related scripting
    events in TrinityCore.
  parameters:
  - name: weather
    description: Pointer to the Weather object that triggered the event. This represents
      the specific weather instance in a zone that has changed.
  - name: state
    description: The new WeatherState enum value indicating the type of weather change
      (e.g., rain, snow, clear).
  - name: grade
    description: A float value representing the intensity or strength of the weather
      change, typically ranging from 0.0 to 1.0.
  returns: null
  examples:
  - title: Basic Weather Change Handler
    code: "class MyWeatherScript : public WeatherScript\n{\npublic:\n    void OnChange(Weather*\
      \ weather, WeatherState state, float grade) override\n    {\n        if (state\
      \ == WEATHER_STATE_RAIN)\n            ChatHandler->SendSysMessage(\"It started\
      \ raining!\");\n        else if (state == WEATHER_STATE_CLEAR)\n           \
      \ ChatHandler->SendSysMessage(\"The weather cleared up.\");\n    }\n};"
    language: cpp
  - title: Advanced Weather Response with Grade Logic
    code: "class AdvancedWeatherScript : public WeatherScript\n{\npublic:\n    void\
      \ OnChange(Weather* weather, WeatherState state, float grade) override\n   \
      \ {\n        if (grade > 0.7f && state == WEATHER_STATE_RAIN)\n            ChatHandler->SendSysMessage(\"\
      Heavy rain is falling!\");\n        else if (grade < 0.3f && state == WEATHER_STATE_SNOW)\n\
      \            ChatHandler->SendSysMessage(\"Light snowfall detected.\");\n  \
      \  }\n};"
    language: cpp
  notes: This method is called from the core game loop when weather transitions occur,
    so performance should be considered for complex logic. The Weather object passed
    in may be used to determine zone-specific behaviors or to broadcast messages to
    players in that area.
  warnings: Avoid performing heavy operations or blocking calls within this method
    as it's invoked during critical game state updates. Ensure the Weather pointer
    is valid before using it, though it should always be non-null when this callback
    fires.
  related:
  - WeatherScript::OnUpdate
  - WeatherScript::OnLoad
  - WeatherScript::OnUnload
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T19:34:46.733732'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
