api:
  class: QuestManager
  method: GetActiveQuests
  signature: int QuestManager::GetActiveQuests() const
documentation:
  brief: Retrieves the total count of active quests assigned to the player
  description: The GetActiveQuests method returns an integer value representing the
    number of currently active quests in the player's quest log. Active quests are
    those that have been accepted but not yet completed or turned in. This count includes
    all quest types such as main story quests, world quests, daily quests, and any
    other active objectives. The method does not distinguish between different quest
    categories or provide detailed information about individual quests; it simply
    provides a tally of how many active quests exist for the player. This functionality
    is commonly used by game systems to determine quest progression, display quest
    counts in UI elements, or trigger events based on quest activity levels.
  parameters: []
  returns: An integer representing the total number of active quests in the player's
    quest log. Returns 0 if no active quests are present. The value is always non-negative
    and reflects the current state of the player's active quest assignments.
  examples:
  - title: Basic Quest Count Retrieval
    code: "int activeQuestCount = player->GetQuestManager()->GetActiveQuests();\n\
      if (activeQuestCount > 0)\n{\n    std::cout << \"Player has \" << activeQuestCount\
      \ << \" active quests.\" << std::endl;\n}"
    language: cpp
  - title: Using Quest Count for UI Updates
    code: "void UpdateQuestTracker()\n{\n    int questCount = player->GetQuestManager()->GetActiveQuests();\n\
      \    if (questCount != previousQuestCount)\n    {\n        // Update UI elements\
      \ that display active quest count\n        questCounterLabel->SetText(std::to_string(questCount));\n\
      \        previousQuestCount = questCount;\n    }\n}"
    language: cpp
  notes: This method performs a simple count operation and is generally fast. It does
    not cache results, so multiple calls will always return the current state of active
    quests. The implementation likely iterates through the player's quest log to tally
    active entries, making it efficient for frequent calls in UI updates or game logic
    checks.
  warnings: The returned count may change between calls if quests are accepted, completed,
    or abandoned during gameplay. Developers should not assume the value remains constant
    across multiple method calls without re-evaluating the current quest state.
  related:
  - GetQuestStatus
  - HasActiveQuest
  - GetQuestCount
  - AddQuest
  - CompleteQuest
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:48:33.340610'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
