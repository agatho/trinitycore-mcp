api:
  class: ReputationMgr
  method: IsAtWar
  signature: bool ReputationMgr::IsAtWar(const FactionEntry * factionEntry) const
documentation:
  brief: Determines whether the player is at war with a specified faction.
  description: The IsAtWar method checks if the player's reputation with the given
    faction is currently in a state of war. This method evaluates the player's current
    standing against the specified faction and returns true if the faction is considered
    hostile (at war), or false if the faction is friendly or neutral. In World of
    Warcraft terms, this corresponds to whether the player can engage in combat with
    units belonging to that faction without being flagged as an aggressor. The method
    relies on the internal reputation tracking system and considers all factors such
    as faction standing, reputation levels, and any temporary modifiers that may affect
    the relationship.
  parameters:
  - name: factionEntry
    description: A pointer to the FactionEntry structure representing the faction
      to check. This parameter must not be null and should point to a valid faction
      entry in the game's database.
  returns: Returns true if the player is at war with the specified faction, meaning
    the faction's reputation level is below the 'Hostile' threshold (typically -6000
    or lower). Returns false if the player's reputation with the faction is not considered
    hostile, including when the faction is friendly, neutral, or revered.
  examples:
  - title: Basic Usage to Check Faction War Status
    code: "if (player->GetReputationMgr().IsAtWar(factionEntry))\n{\n    // Player\
      \ is at war with this faction\n    // Can attack faction NPCs without being\
      \ flagged\n}"
    language: cpp
  - title: Using IsAtWar in a Combat Decision Logic
    code: "FactionEntry const* faction = sFactionStore.LookupEntry(1118); // Example:\
      \ The Sons of Hodir\nif (faction && player->GetReputationMgr().IsAtWar(faction))\n\
      {\n    // Allow combat with faction NPCs\n    player->CastSpell(target, 45678,\
      \ true); // Example spell\n}"
    language: cpp
  notes: This method internally uses the player's reputation data and does not perform
    any database lookups. It is optimized for frequent calls during gameplay logic
    such as combat checks or NPC interaction decisions. The faction entry passed must
    be valid and exist in the game's faction database.
  warnings: Ensure that the FactionEntry pointer passed to this method is valid and
    not null, otherwise the behavior is undefined. This method should not be used
    to determine if a player can attack a specific NPC unless you have verified that
    the NPC belongs to the faction being checked.
  related:
  - GetReputation
  - SetReputation
  - GetFactionState
  - IsFriendlyTo
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:26:58.964825'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
