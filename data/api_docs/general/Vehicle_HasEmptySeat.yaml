api:
  class: Vehicle
  method: HasEmptySeat
  signature: bool Vehicle::HasEmptySeat(int8 seatId) const
documentation:
  brief: Checks if a specified seat on the vehicle is currently unoccupied.
  description: The HasEmptySeat method determines whether a given seat ID on the vehicle
    is available for passenger boarding. This method is commonly used in vehicle interaction
    logic to validate passenger placement and prevent overbooking of seats. The method
    performs a simple lookup within the vehicle's internal seat management system
    to verify if the specified seat has no associated passenger. It does not perform
    any side effects or modifications to the vehicle state, making it safe for use
    in conditional checks during gameplay.
  parameters:
  - name: seatId
    description: The identifier of the seat to check. Valid values are typically integers
      from 0 to the maximum number of seats defined for the vehicle type. Seat IDs
      are zero-indexed and correspond to specific passenger positions on the vehicle.
  returns: Returns true if the specified seat is unoccupied and available for a passenger
    to board, false otherwise. If the seat ID is invalid (outside the valid range),
    the behavior may be undefined or return false depending on implementation details.
  examples:
  - title: Basic Seat Availability Check
    code: "if (vehicle->HasEmptySeat(0))\n{\n    // Seat 0 is available, allow passenger\
      \ to board\n    player->EnterVehicle(vehicle, 0);\n}"
    language: cpp
  - title: Multiple Seat Validation
    code: "for (int8 i = 0; i < vehicle->GetMaxPassengers(); ++i)\n{\n    if (vehicle->HasEmptySeat(i))\n\
      \    {\n        // Found an empty seat, assign passenger\n        player->EnterVehicle(vehicle,\
      \ i);\n        break;\n    }\n}"
    language: cpp
  notes: This method relies on the vehicle's internal passenger tracking system. It
    assumes that all seat management is handled through the standard TrinityCore vehicle
    API. The method does not account for temporary states such as passengers in the
    process of mounting or dismounting, which may cause race conditions in high-frequency
    access scenarios.
  warnings: Do not assume that a seat being empty guarantees it will remain empty
    after the check. Concurrent access by multiple threads or rapid player actions
    could result in a passenger occupying the seat between the time of checking and
    attempting to board. Always validate seat availability immediately before attempting
    to assign a passenger.
  related:
  - GetMaxPassengers
  - GetPassenger
  - IsVehicleFull
  - EnterVehicle
  - RemovePassenger
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:30:22.979991'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
