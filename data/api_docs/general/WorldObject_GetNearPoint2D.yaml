api:
  class: WorldObject
  method: GetNearPoint2D
  signature: void WorldObject::GetNearPoint2D(const WorldObject * searcher, float
    & x, float & y, float distance, float absAngle) const
documentation:
  brief: Calculates and sets the 2D coordinates at a specified distance and angle
    from a reference object.
  description: The GetNearPoint2D method computes a 2D point located at a given distance
    and absolute angle relative to the calling WorldObject. It modifies the provided
    x and y coordinates to reflect this calculated position. This utility is commonly
    used in game mechanics for positioning objects, calculating spawn points, or determining
    movement targets around a reference point. The method does not perform any collision
    detection or validation of the resulting coordinates; it simply calculates based
    on trigonometric relationships. The searcher parameter allows for context-aware
    calculations, though its exact usage may depend on implementation details within
    TrinityCore's object management system.
  parameters:
  - name: searcher
    description: A pointer to the reference WorldObject from which the angle and distance
      are calculated. This object defines the origin point for the coordinate calculation.
  - name: x
    description: A reference to a float value that will be updated with the calculated
      X coordinate of the resulting point.
  - name: y
    description: A reference to a float value that will be updated with the calculated
      Y coordinate of the resulting point.
  - name: distance
    description: The radial distance from the searcher object's position to the target
      point. Must be non-negative.
  - name: absAngle
    description: The absolute angle (in radians) from the positive X-axis toward which
      the point is calculated. Zero radians points east, pi/2 radians north, etc.
  returns: null
  examples:
  - title: Basic Usage for Spawn Point Calculation
    code: 'float x, y;

      WorldObject* player = ...; // Assume valid pointer

      WorldObject* target = ...; // Assume valid pointer

      player->GetNearPoint2D(target, x, y, 5.0f, M_PI / 4.0f); // 5 units away at
      45-degree angle'
    language: cpp
  - title: Using with Angle from Object Orientation
    code: 'float x, y;

      WorldObject* mob = ...; // Assume valid pointer

      WorldObject* player = ...; // Assume valid pointer

      float angle = mob->GetOrientation();

      mob->GetNearPoint2D(player, x, y, 3.0f, angle + M_PI); // Behind the mob'
    language: cpp
  notes: This method performs basic trigonometric calculations and is generally fast.
    It does not interact with the game world's collision system or terrain data, so
    the resulting coordinates may be invalid if they fall outside walkable areas.
    The angle parameter uses radians, not degrees, which is standard in C++ math libraries.
  warnings: Ensure that the distance and angle parameters are within reasonable bounds
    to avoid unexpected behavior. Since this method modifies input references directly,
    it's important to initialize or validate x and y before calling to prevent undefined
    behavior if the method fails to update them properly.
  related:
  - GetNearPoint
  - GetPosition
  - GetOrientation
metadata:
  confidence: 0.92
  generated_at: '2025-10-29T21:54:17.009362'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
