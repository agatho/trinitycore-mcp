api:
  class: Aura
  method: _Remove
  signature: void Aura::_Remove(AuraRemoveMode removeMode)
documentation:
  brief: Removes the aura from the target and performs cleanup operations based on
    the removal mode.
  description: The Aura::_Remove method is responsible for removing an aura from its
    target unit. It handles the cleanup of aura-related data, updates the unit's state,
    and triggers any necessary callbacks or events. The method takes an AuraRemoveMode
    parameter that determines how the aura should be removed, such as by expiration,
    cancellation, or application of a new aura with higher priority. This method is
    typically called internally by the TrinityCore framework when an aura's duration
    ends, is overridden, or is explicitly removed by an external source.
  parameters:
  - name: removeMode
    description: Specifies the reason and method for removing the aura. Valid values
      include AURA_REMOVE_BY_DEFAULT, AURA_REMOVE_BY_EXPIRE, AURA_REMOVE_BY_CANCEL,
      AURA_REMOVE_BY_DISPEL, AURA_REMOVE_BY_AURA_BREAK, and others. The mode affects
      how the aura's removal is processed and what events are triggered.
  returns: null
  examples:
  - title: Basic Aura Removal
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    aura->_Remove(AURA_REMOVE_BY_CANCEL);\n\
      }"
    language: cpp
  - title: Removing Aura on Expiration
    code: "void OnAuraExpired(Aura* aura)\n{\n    aura->_Remove(AURA_REMOVE_BY_EXPIRE);\n\
      }\n\n// Called when an aura's duration ends"
    language: cpp
  notes: This method should not be called directly from outside the Aura class unless
    you are certain about the removal mode and its implications. The method performs
    internal checks to ensure proper cleanup of resources and updates related systems
    such as combat state, unit stats, and visual effects. It is important to note
    that calling this method may trigger additional events or callbacks depending
    on the remove mode.
  warnings: Calling _Remove directly without understanding the removal mode can lead
    to unexpected behavior, including incorrect stat updates, visual glitches, or
    inconsistent game state. Never call this method from within a loop or recursive
    context as it might cause stack overflow or unintended side effects. Also, ensure
    that the aura is still valid before calling this method.
  related:
  - Aura::Apply
  - Aura::Remove
  - Aura::IsRemoved
  - Aura::GetAuraRemoveMode
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T13:45:47.911854'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
