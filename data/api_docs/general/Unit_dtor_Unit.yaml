api:
  class: Unit
  method: ~Unit
  signature: void Unit::~Unit()
documentation:
  brief: Destroys a Unit instance and performs necessary cleanup operations.
  description: The ~Unit destructor is automatically invoked when a Unit object goes
    out of scope or is explicitly deleted. This method ensures proper cleanup of resources
    associated with the unit, including removing it from game systems, releasing memory,
    and handling any necessary finalization tasks. In the context of TrinityCore's
    architecture, this destructor plays a critical role in maintaining memory integrity
    and preventing resource leaks when units such as players, creatures, or game objects
    are removed from the world. The destruction process typically involves notifying
    subsystems that the unit is being destroyed and ensuring all references to it
    are properly handled.
  parameters: []
  returns: null
  examples:
  - title: Basic Unit Destruction
    code: 'Unit* unit = new Player();

      // ... use the unit ...

      delete unit; // This calls ~Unit()'
    language: cpp
  - title: Automatic Destruction via Scope
    code: "void someFunction() {\n    Unit* unit = new Creature();\n    // ... do\
      \ work with unit ...\n} // ~Unit() automatically called here when unit goes\
      \ out of scope"
    language: cpp
  notes: The destructor is typically not called directly by user code. It's automatically
    invoked during object cleanup. Developers should be aware that the destruction
    process may involve complex operations including database synchronization, network
    packet sending, and subsystem notifications.
  warnings: Never call ~Unit() directly unless you're implementing a custom memory
    management system. The destructor handles critical cleanup tasks that must not
    be bypassed or duplicated.
  related:
  - Unit::IsInWorld
  - Unit::RemoveFromWorld
  - Unit::AddToWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T20:47:51.116484'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
