api:
  class: AuraCreateInfo
  method: AuraCreateInfo
  signature: void AuraCreateInfo::AuraCreateInfo(int castId, const SpellInfo * spellInfo,
    int castDifficulty, uint32 auraEffMask, WorldObject * owner)
documentation:
  brief: Initializes a new AuraCreateInfo object with specified spell casting parameters
    and aura effects.
  description: The AuraCreateInfo constructor initializes a structure used to create
    auras in the TrinityCore framework. It sets up the necessary information for aura
    application, including the cast identifier, spell information, difficulty level,
    aura effect mask, and owner object. This structure is typically used when applying
    temporary or permanent auras to game objects such as players, creatures, or items.
    The method prepares internal state for aura creation without actually applying
    the aura to any target.
  parameters:
  - name: castId
    description: Unique identifier for the spell cast instance. Used to track and
      manage specific spell applications within the game world.
  - name: spellInfo
    description: Pointer to the SpellInfo structure containing detailed information
      about the spell being applied as an aura, including effects, duration, and other
      properties.
  - name: castDifficulty
    description: Difficulty level of the spell cast. Determines how the spell behaves
      based on game difficulty settings (e.g., normal, heroic, mythic).
  - name: auraEffMask
    description: Bitmask indicating which aura effects should be applied from the
      spell. Each bit corresponds to a specific effect index in the spell.
  - name: owner
    description: Pointer to the WorldObject that owns or is the source of this aura.
      Can be a player, creature, or item that will have the aura applied.
  returns: null
  examples:
  - title: Basic Aura Creation Initialization
    code: 'SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(12345);

      WorldObject* owner = player;

      AuraCreateInfo auraInfo(1, spellInfo, DIFFICULTY_NORMAL, 0x01, owner);

      // This creates an AuraCreateInfo structure ready for use with aura application'
    language: cpp
  - title: Advanced Aura Creation with Multiple Effects
    code: 'SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(67890);

      WorldObject* owner = creature;

      AuraCreateInfo auraInfo(100, spellInfo, DIFFICULTY_HEROIC, 0x0F, owner);

      // Creates an aura with multiple effects (bitmask 0x0F enables first four effects)'
    language: cpp
  notes: This is a constructor method that initializes internal data members of the
    AuraCreateInfo structure. The actual aura application logic occurs elsewhere in
    the codebase when this structure is passed to aura creation functions. Developers
    should ensure that the SpellInfo pointer is valid and not null before creating
    an AuraCreateInfo instance.
  warnings: Do not use uninitialized or invalid SpellInfo pointers as they may cause
    crashes or undefined behavior. The auraEffMask parameter must be carefully constructed
    to avoid applying unintended effects. Make sure the owner object remains valid
    throughout the lifetime of the aura being created.
  related:
  - AuraCreateInfo::SetSpellInfo
  - AuraCreateInfo::SetOwner
  - AuraCreateInfo::GetAuraEffectMask
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T04:44:34.687690'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
