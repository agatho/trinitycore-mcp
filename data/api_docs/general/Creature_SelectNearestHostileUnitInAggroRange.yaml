api:
  class: Creature
  method: SelectNearestHostileUnitInAggroRange
  signature: int * Creature::SelectNearestHostileUnitInAggroRange(bool useLOS, bool
    ignoreCivilians) const
documentation:
  brief: Selects the nearest hostile unit within aggro range, considering line of
    sight and civilian ignore options.
  description: This method identifies and returns the GUID of the nearest hostile
    creature or player within the creature's aggro range. It takes into account whether
    line of sight (LOS) should be considered when selecting the target, and whether
    civilians should be ignored during selection. The method is commonly used in AI
    scripts to determine targets for attacks or spells based on proximity and visibility
    conditions.
  parameters:
  - name: useLOS
    description: When true, the method considers line of sight between the creature
      and potential targets. When false, it selects targets regardless of whether
      they are obstructed by terrain or other objects.
  - name: ignoreCivilians
    description: When true, the method excludes civilian NPCs from consideration when
      selecting a target. When false, civilians may be selected as targets if they
      are within aggro range.
  returns: Returns a pointer to an integer representing the GUID of the nearest hostile
    unit found within aggro range. If no suitable target is found, it returns nullptr
    or NULL.
  examples:
  - title: Basic Usage Example
    code: "int* target = creature->SelectNearestHostileUnitInAggroRange(true, false);\n\
      if (target != nullptr)\n{\n    // Proceed with attack or spell targeting\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "int* target = creature->SelectNearestHostileUnitInAggroRange(false, true);\n\
      if (target != nullptr)\n{\n    // Ignore civilians and use aggressive targeting\n\
      }"
    language: cpp
  notes: This method is typically used in creature AI scripts to implement target
    selection logic. It's important to note that the method returns a pointer to an
    integer, not a GUID directly, so developers must ensure proper handling of the
    returned value. Performance considerations include the use of LOS and civilian
    filtering which can affect execution time.
  warnings: The method may return nullptr if no suitable targets are found within
    aggro range, especially when using strict LOS conditions or ignoring civilians.
    Care should be taken to avoid null dereference errors in code that uses this method.
  related:
  - SelectNearestHostileUnitInAggroRange
  - GetVictim
  - GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T02:39:52.333174'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
