api:
  class: Creature
  method: StartDefaultCombatMovement
  signature: void Creature::StartDefaultCombatMovement(int * victim, int range, int
    angle)
documentation:
  brief: Starts default combat movement for a creature, initiating its movement toward
    a target within specified range and angle.
  description: This method initiates the default combat movement behavior for a Creature
    object, causing it to move toward a specified victim within a given range and
    angle. It is typically used in AI-based combat scenarios where creatures need
    to approach targets based on their positioning and combat mechanics. The method
    handles movement logic and can be triggered when a creature enters combat or needs
    to engage with a target. This function does not directly perform combat actions
    but rather sets up the movement behavior for the creature's combat AI.
  parameters:
  - name: victim
    description: Pointer to the target object that the creature will move toward.
      This parameter defines the target entity for movement, typically a player or
      another creature.
  - name: range
    description: The maximum distance within which the creature should move toward
      the target. This determines how close the creature should get to its target
      before initiating combat movement.
  - name: angle
    description: The angle in degrees relative to the creature's facing direction,
      determining the direction of movement. This parameter controls how the creature
      moves relative to the target's position.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Creature* creature = new Creature();

      int target = 10;

      int range = 5;

      int angle = 45;

      creature->StartDefaultCombatMovement(&target, range, angle);'
    language: cpp
  notes: This method is typically used in conjunction with other combat movement functions
    and AI logic. It may be called during combat initiation or when a creature needs
    to move toward a target. Performance considerations include the use of pathfinding
    algorithms for movement, which can impact execution time if not handled properly.
  warnings: The method requires valid parameters to function correctly; invalid pointers
    or incorrect range/angle values may lead to unexpected behavior or errors in movement
    logic. Ensure that the victim parameter points to a valid target object before
    calling this method.
  related:
  - Creature::CombatMovement
  - Creature::MoveTo
  - Creature::StartMovement
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T02:37:28.828057'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
