api:
  class: ObjectMgr
  method: IsVendorItemValid
  signature: bool ObjectMgr::IsVendorItemValid(uint32 vendor_entry, const int & vItem,
    int * player, int * skip_vendors, uint32 ORnpcflag) const
documentation:
  brief: Validates if a vendor item is acceptable for a given vendor entry and player
    context
  description: The IsVendorItemValid method checks whether a specific item (identified
    by vItem) is valid for use by a vendor with the specified vendor_entry. It verifies
    that the item exists, is not restricted, and meets any applicable conditions based
    on the player's state, vendor flags, and skip vendors list. This method is used
    internally by the TrinityCore server to ensure proper vendor item management and
    prevent invalid items from being sold to players. The validation considers various
    factors including item existence in the database, player restrictions, and vendor-specific
    flags.
  parameters:
  - name: vendor_entry
    description: The unique identifier (entry ID) of the vendor NPC that is checking
      the item validity
  - name: vItem
    description: Reference to an integer representing the item entry ID being validated.
      Negative values may indicate special handling or error states
  - name: player
    description: Pointer to an integer representing the player's GUID or context,
      used for player-specific validations and restrictions
  - name: skip_vendors
    description: Pointer to an integer that may indicate vendors to skip during validation
      or special vendor handling flags
  - name: ORnpcflag
    description: A uint32 value representing OR'd NPC flags used for additional vendor
      behavior checks and validations
  returns: Returns true if the vendor item is valid according to all checks, false
    otherwise. Validation failures may occur due to invalid item entries, player restrictions,
    or vendor flag conflicts.
  examples:
  - title: Basic Vendor Item Validation
    code: "uint32 vendorId = 12345;\nint itemEntry = 56789;\nint playerId = 98765;\n\
      int skipVendors = 0;\nuint32 npcFlags = 0;\n\nbool isValid = sObjectMgr->IsVendorItemValid(vendorId,\
      \ itemEntry, &playerId, &skipVendors, npcFlags);\nif (isValid)\n{\n    // Item\
      \ is valid for this vendor\n    printf(\"Item %d is valid for vendor %d\\n\"\
      , itemEntry, vendorId);\n}\nelse\n{\n    // Item is not valid for this vendor\n\
      \    printf(\"Item %d is invalid for vendor %d\\n\", itemEntry, vendorId);\n\
      }"
    language: cpp
  notes: This method likely performs database lookups and internal validation checks.
    It should be used carefully in performance-critical code paths as it may involve
    multiple database queries or complex conditional logic. The method is part of
    the core ObjectMgr functionality and is typically called during vendor item processing.
  warnings: The parameters player and skip_vendors are passed by reference, so ensure
    they point to valid memory locations. Passing null pointers for these parameters
    may cause undefined behavior. The vItem parameter should be validated before passing
    to avoid negative or invalid item IDs.
  related:
  - GetVendorItem
  - AddVendorItem
  - RemoveVendorItem
  - GetVendorItems
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:57:41.820369'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
