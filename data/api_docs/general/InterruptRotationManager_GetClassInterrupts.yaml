api:
  class: InterruptRotationManager
  method: GetClassInterrupts
  signature: int InterruptRotationManager::GetClassInterrupts(uint8 classId)
documentation:
  brief: Retrieves the interruptible abilities for a specified class in the rotation
    manager.
  description: The GetClassInterrupts method returns an integer value representing
    the bitmask of interruptible abilities associated with a given class ID. This
    functionality is typically used within the context of AI behavior trees or combat
    rotation logic to determine which spells or abilities can be interrupted during
    gameplay. The returned value encodes information about what types of interrupts
    are allowed for that specific class, enabling dynamic decision-making in combat
    scenarios. The method assumes a predefined mapping between class IDs and their
    respective interrupt capabilities stored internally within the InterruptRotationManager.
  parameters: []
  returns: An integer representing a bitmask of interruptible abilities for the specified
    class ID. Each bit in the integer corresponds to a specific interrupt type, allowing
    bitwise operations to check or enable/disable particular interrupts. Returns 0
    if no interrupts are defined for the given class ID.
  examples:
  - title: Basic Usage Example
    code: "InterruptRotationManager rotationManager;\nint interrupts = rotationManager.GetClassInterrupts(CLASS_WARRIOR);\n\
      if (interrupts & INTERRUPT_SPELL_CAST)\n{\n    // Warrior can interrupt spell\
      \ casts\n}"
    language: cpp
  - title: Checking Multiple Interrupt Types
    code: "InterruptRotationManager rotationManager;\nint interrupts = rotationManager.GetClassInterrupts(CLASS_MAGE);\n\
      bool canInterrupt = (interrupts & (INTERRUPT_SPELL_CAST | INTERRUPT_DAMAGE_TAKEN))\
      \ != 0;\nif (canInterrupt)\n{\n    // Mage can interrupt both spell casts and\
      \ damage taken\n}"
    language: cpp
  notes: This method relies on internal class mappings that must be properly initialized
    before calling. The returned bitmask values should be validated against known
    interrupt constants defined in the TrinityCore API. Performance is generally fast
    as it's a simple lookup operation, but repeated calls may benefit from caching.
  warnings: Ensure that the provided classId parameter corresponds to valid class
    identifiers recognized by the game engine; invalid IDs may return unexpected results
    or zero values. Be cautious when modifying interrupt configurations at runtime
    as this could affect AI behavior unpredictably.
  related:
  - SetClassInterrupts
  - GetInterruptibleSpells
  - IsInterruptAllowed
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:22:26.636429'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
