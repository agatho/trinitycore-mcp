api:
  class: DungeonScriptMgr
  method: HasScriptForMap
  signature: bool DungeonScriptMgr::HasScriptForMap(uint32 mapId) const
documentation:
  brief: Checks whether a dungeon script exists for the specified map ID.
  description: The HasScriptForMap method determines if there is an associated dungeon
    script registered for a given map identifier. This functionality is crucial in
    TrinityCore's scripting system, particularly when managing dungeon-specific behaviors,
    events, or custom logic that should be executed when players enter certain maps.
    The method performs a lookup within the internal dungeon script registry to verify
    the presence of a script handler for the specified map. It does not validate the
    map's existence in the game world, but rather checks if scripting support has
    been defined for it.
  parameters: []
  returns: Returns true if a dungeon script is registered for the given map ID; otherwise
    returns false. A return value of false indicates that no custom dungeon logic
    is associated with the specified map.
  examples:
  - title: Basic usage to check for dungeon script
    code: "if (sDungeonScriptMgr->HasScriptForMap(123)) {\n    // Custom dungeon logic\
      \ exists for map ID 123\n    sLog->outString(\"Dungeon script found for map\
      \ 123\");\n} else {\n    // No custom dungeon script registered\n    sLog->outString(\"\
      No dungeon script for map 123\");\n}"
    language: cpp
  - title: Using in conditional logic for dynamic behavior
    code: "uint32 mapId = player->GetMapId();\nif (sDungeonScriptMgr->HasScriptForMap(mapId))\
      \ {\n    // Execute custom dungeon-specific actions\n    sLog->outString(\"\
      Executing custom script for map %u\", mapId);\n    // Trigger custom event or\
      \ behavior\n} else {\n    // Fall back to default behavior\n    player->SendNotification(\"\
      Standard dungeon behavior\");\n}"
    language: cpp
  notes: This method is typically used during map loading or player entry events to
    determine if special handling is required. It relies on the internal registry
    maintained by DungeonScriptMgr, which is populated at server startup or through
    dynamic script loading mechanisms.
  warnings: Ensure that map IDs passed to this method are valid dungeon map identifiers;
    while the method itself doesn't validate map existence, invalid map IDs may lead
    to unexpected behavior if scripts are not properly registered. This method should
    not be used as a substitute for actual map validation in gameplay logic.
  related:
  - DungeonScriptMgr::GetScriptForMap
  - DungeonScriptMgr::LoadDungeonScripts
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T14:06:50.791169'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
