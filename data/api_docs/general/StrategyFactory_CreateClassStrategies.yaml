api:
  class: StrategyFactory
  method: CreateClassStrategies
  signature: int StrategyFactory::CreateClassStrategies(uint8 classId, uint8 spec)
documentation:
  brief: Creates and initializes class-specific AI strategies for a given player class
    and specialization
  description: The CreateClassStrategies method is responsible for setting up the
    appropriate AI behavior strategies for a specified player class and its talent
    specialization. This method typically handles the registration or instantiation
    of strategy objects that define how an AI-controlled unit (such as a pet, guardian,
    or NPC) should behave based on the player's class and spec. The method likely
    populates internal strategy mappings or initializes strategy containers specific
    to the provided class and specialization combination. It may also handle loading
    of class-specific behavior configurations from data files or databases.
  parameters:
  - name: classId
    description: The numeric identifier representing the player class (e.g., 1 for
      Warrior, 2 for Paladin, etc.). Valid values are typically 1-12 corresponding
      to standard WoW classes.
  - name: spec
    description: The specialization index for the given class. For most classes, this
      represents the talent tree selection (0 = First spec, 1 = Second spec, 2 = Third
      spec). Valid values depend on the number of specs available for each class.
  returns: Returns an integer value indicating success or failure of the strategy
    creation process. A return value of 0 typically indicates successful completion,
    while negative values may indicate errors such as invalid classId or spec parameters.
  examples:
  - title: Initialize Warrior AI Strategies
    code: "int result = strategyFactory->CreateClassStrategies(1, 0); // Warrior,\
      \ Arms spec\nif (result == 0) {\n    // Successfully created strategies for\
      \ Warrior Arms\n}"
    language: cpp
  - title: Initialize Mage AI Strategies with Frost Spec
    code: "int result = strategyFactory->CreateClassStrategies(8, 2); // Mage, Frost\
      \ spec\nif (result != 0) {\n    // Handle error in creating Mage Frost strategies\n\
      }"
    language: cpp
  notes: This method is likely called during AI initialization or when a player changes
    their specialization. It's important to note that the method may not be thread-safe
    and should ideally be called from the main game thread or within a synchronized
    context. The exact implementation details depend on how strategies are stored
    internally, but it probably involves creating strategy objects, registering them
    with the AI system, and possibly caching them for reuse.
  warnings: Calling this method with invalid classId or spec values may result in
    undefined behavior or failed initialization. Ensure that the provided parameters
    correspond to valid class and specialization combinations as defined by the TrinityCore
    database or game constants.
  related:
  - GetClassStrategies
  - RegisterStrategy
  - UnregisterStrategy
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T20:47:39.319746'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
