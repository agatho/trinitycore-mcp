api:
  class: Unit
  method: CheckAttackFitToAuraRequirement
  signature: bool Unit::CheckAttackFitToAuraRequirement(int param0, const AuraEffect
    * param1) const
documentation:
  brief: Checks if an attack fits the requirements of a given aura effect.
  description: This method determines whether a specific attack type meets the requirements
    set by a given aura effect. It evaluates the compatibility between the attack's
    properties and the aura's constraints, such as required attack types, damage types,
    or other conditions. The method is commonly used in combat mechanics to validate
    whether an attack can proceed based on active aura effects. This function is typically
    called during attack processing to ensure proper validation of attack requirements.
  parameters:
  - name: param0
    description: An integer representing the attack type or condition identifier,
      likely used to specify the nature of the attack being evaluated.
  - name: param1
    description: A pointer to an AuraEffect object that defines the requirements for
      the attack. This parameter specifies the constraints and conditions that must
      be met for the attack to be considered valid.
  returns: Returns true if the attack fits the requirements of the specified aura
    effect, false otherwise. The method may return false if the attack does not meet
    the required conditions or if the aura effect is not applicable to the current
    attack type.
  examples:
  - title: Basic usage example
    code: "if (unit->CheckAttackFitToAuraRequirement(1, auraEffect)) {\n    // Attack\
      \ is valid\n}"
    language: cpp
  - title: Advanced usage example
    code: "bool result = unit->CheckAttackFitToAuraRequirement(attackType, auraEffect);\n\
      if (result) {\n    // Proceed with attack processing\n} else {\n    // Handle\
      \ invalid attack\n}"
    language: cpp
  notes: This method is part of the combat system and should be used carefully during
    attack validation. It may involve performance considerations when checking multiple
    aura effects, especially in high-frequency combat scenarios.
  warnings: The method may not be thread-safe if used in concurrent combat situations.
    Ensure that the aura effect pointer remains valid throughout the call to avoid
    memory access violations.
  related:
  - CheckAttackFitToAuraRequirement
  - GetAuraEffect
  - IsAttackValid
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:19:16.634249'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
