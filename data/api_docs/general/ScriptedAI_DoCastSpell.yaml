api:
  class: ScriptedAI
  method: DoCastSpell
  signature: void ScriptedAI::DoCastSpell(int * target, const int * spellInfo, bool
    triggered)
documentation:
  brief: Initiates casting of a specified spell on a target entity within the AI system.
  description: The DoCastSpell method is used by ScriptedAI implementations to cast
    a spell on a given target. It serves as a core mechanism for AI-controlled creatures
    to execute spell-based abilities during combat or other scripted events. The method
    accepts a pointer to the target entity, a pointer to the spell information structure,
    and an optional flag indicating whether the spell should be triggered without
    any casting time or visual effects. This function integrates with TrinityCore's
    spell system to ensure proper cooldown handling, mana cost deduction, and spell
    effect application according to game rules.
  parameters:
  - name: target
    description: Pointer to the target entity on which the spell will be cast. Can
      be NULL to cast on self or based on AI logic.
  - name: spellInfo
    description: Pointer to the spell information structure defining the spell to
      be cast. This typically references a SpellInfo object from the game's spell
      database.
  - name: triggered
    description: Boolean flag indicating whether the spell should be cast immediately
      without any casting time or visual effects. If true, the spell bypasses normal
      casting mechanics.
  returns: null
  examples:
  - title: Basic Spell Casting on Target
    code: "void ExampleAI::UpdateAI(uint32 diff)\n{\n    if (Unit* target = SelectTarget(SELECT_TARGET_TOPAGGRO))\n\
      \    {\n        DoCastSpell(&target, &SpellInfo, false);\n    }\n}"
    language: cpp
  - title: Triggered Spell Casting
    code: "void ExampleAI::JustDied()\n{\n    DoCastSpell(NULL, &DeathSpell, true);\n\
      }"
    language: cpp
  notes: This method is part of the ScriptedAI framework and should only be called
    from within AI update loops or event handlers. The spellInfo parameter must point
    to a valid SpellInfo structure that exists in the game's spell database. Ensure
    that target entities are properly validated before casting to avoid crashes or
    undefined behavior.
  warnings: Calling DoCastSpell with an invalid spellInfo pointer can cause a crash.
    Always validate that the spell exists and is appropriate for the context. Using
    triggered=true may bypass important game mechanics like cooldowns, so use carefully
    in scenarios where normal spell behavior is required.
  related:
  - DoCast
  - DoCastVictim
  - DoCastSpellOnTarget
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:54:03.797486'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
