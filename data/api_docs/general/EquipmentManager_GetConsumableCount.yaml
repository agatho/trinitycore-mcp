api:
  class: EquipmentManager
  method: GetConsumableCount
  signature: uint32 EquipmentManager::GetConsumableCount(int * player, uint32 itemId)
documentation:
  brief: Retrieves the count of a specific consumable item in the player's equipment
  description: The GetConsumableCount method queries the EquipmentManager to determine
    how many instances of a specified consumable item are present in the player's
    inventory. This method is typically used for managing item usage, such as determining
    if a player has enough potions, food items, or other consumables before attempting
    to use them. The method takes a pointer to a player object and an item ID, returning
    the quantity of that item available. It is commonly used in game logic where consumable
    items need to be validated for availability before consumption.
  parameters:
  - name: player
    description: Pointer to the Player object whose inventory will be checked for
      the specified consumable item
  - name: itemId
    description: The unique identifier of the consumable item to count in the player's
      inventory
  returns: Returns a uint32 value representing the total count of the specified consumable
    item in the player's equipment. Returns 0 if the item is not found or if the player
    pointer is invalid.
  examples:
  - title: Check potion availability before use
    code: "Player* player = ...;\nuint32 healthPotionCount = equipmentManager->GetConsumableCount(player,\
      \ 1710);\nif (healthPotionCount > 0) {\n    // Player has at least one health\
      \ potion available\n    player->UseItem(1710);\n}"
    language: cpp
  - title: Validate consumable usage in combat
    code: "Player* player = ...;\nuint32 manaPotionCount = equipmentManager->GetConsumableCount(player,\
      \ 1711);\nif (manaPotionCount >= 3) {\n    // Player has at least 3 mana potions\
      \ for extended combat\n    player->CastSpell(player, 1001); // Use mana potion\n\
      }"
    language: cpp
  notes: This method performs a lookup in the player's inventory and may involve database
    access depending on the implementation. It should be used judiciously in performance-critical
    code paths. The method assumes that the player pointer is valid and that the item
    ID corresponds to an actual consumable item in the game database.
  warnings: Ensure that the player pointer passed to this method is not null, as this
    could lead to undefined behavior. Also, be aware that item IDs must correspond
    to valid consumable items; otherwise, the result will be zero regardless of inventory
    state.
  related:
  - GetItemCount
  - HasItem
  - AddItem
  - RemoveItem
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:04:36.808552'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
