api:
  class: MotionMaster
  method: MoveChase
  signature: void MotionMaster::MoveChase(Unit * target, float dist, float angle)
documentation:
  brief: Initiates a chase movement toward a target unit with optional distance and
    angle constraints.
  description: The MoveChase method instructs the MotionMaster to begin moving toward
    a specified target unit. It allows for fine-tuned control over the approach behavior
    by specifying a minimum distance to maintain from the target and an angular offset
    relative to the target's facing direction. This is commonly used in AI logic to
    make creatures follow or pursue targets while maintaining specific positioning.
    The movement will continue until interrupted or the target becomes unreachable.
    The method does not block execution; it schedules the motion and returns immediately.
  parameters:
  - name: target
    description: Pointer to the Unit object that this motion master should chase.
      Must be a valid pointer to an existing unit in the world.
  - name: dist
    description: The minimum distance to maintain from the target unit during the
      chase. If zero, no specific distance constraint is applied. Values less than
      zero are typically treated as zero.
  - name: angle
    description: An angular offset in radians relative to the target's facing direction.
      This controls where the motion master positions itself around the target. A
      value of 0 means move directly toward the target.
  returns: null
  examples:
  - title: Basic Chase Movement
    code: motionMaster->MoveChase(targetUnit);
    language: cpp
  - title: Chase with Distance and Angle
    code: motionMaster->MoveChase(targetUnit, 3.0f, M_PI_2); // Chase at 3 yards distance,
      90 degrees offset
    language: cpp
  notes: This method is part of the AI movement system in TrinityCore and integrates
    with the creature's current AI state machine. It internally uses pathfinding algorithms
    to determine a valid route toward the target. The motion type used for this action
    is typically 'CHASE' which may be overridden by other movement types like 'FLEE'
    or 'WANDER'.
  warnings: Ensure that the target pointer is not null before calling MoveChase, as
    passing a null pointer will likely result in undefined behavior or crash. Also,
    avoid frequent calls to this method without checking if the motion is already
    active, as it may cause performance issues due to redundant movement scheduling.
  related:
  - MoveFollow
  - MoveIdle
  - MoveTo
  - Clear
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T10:40:06.356785'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
