api:
  class: Unit
  method: HasAuraTypeWithFamilyFlags
  signature: bool Unit::HasAuraTypeWithFamilyFlags(int auraType, uint32 familyName,
    int familyFlags) const
documentation:
  brief: Checks if the unit has a specific aura type with matching family flags.
  description: This method determines whether a Unit (such as a player or creature)
    possesses a specific aura type that matches the specified family name and flags.
    It is commonly used in World of Warcraft's TrinityCore framework to verify the
    presence of certain effects, such as those from spells or abilities, within the
    unit's aura list. The method evaluates the aura type against the provided family
    name and flags, returning true if a match is found, otherwise false. This functionality
    is essential for implementing game mechanics that rely on checking specific aura
    conditions.
  parameters:
  - name: auraType
    description: The type of aura to check for (e.g., SPELL_AURA_MOD_STATS, SPELL_AURA_PROC_TRIGGER_SPELL).
      Valid values are defined by the SpellAuraType enum.
  - name: familyName
    description: The family name associated with the aura (e.g., SPELLFAMILY_WARLOCK,
      SPELLFAMILY_MAGE). This is used to match against the aura's family field.
  - name: familyFlags
    description: The family flags to check for within the specified family name. This
      represents a bitmask of specific flags associated with the aura type and family.
  returns: Returns true if the unit has an aura matching the specified aura type,
    family name, and family flags; otherwise false.
  examples:
  - title: Basic Usage Example
    code: "if (unit->HasAuraTypeWithFamilyFlags(SPELL_AURA_MOD_STATS, SPELLFAMILY_WARLOCK,\
      \ 0x10)) {\n    // Do something\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "if (unit->HasAuraTypeWithFamilyFlags(SPELL_AURA_PROC_TRIGGER_SPELL, SPELLFAMILY_MAGE,\
      \ 0x200)) {\n    // Check for specific spell proc\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine whether a unit has specific effects active. Performance considerations
    include checking only necessary aura types and avoiding unnecessary calls during
    combat or movement. Thread safety depends on the context of use, but generally
    this method should be safe for single-threaded usage.
  warnings: This method requires careful handling of family names and flags, as incorrect
    values may lead to false negatives or positives. It is important to ensure that
    the correct aura type and family flags are used when checking for specific effects.
  related:
  - HasAuraType
  - HasAura
  - GetAura
  - IsInCombat
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:23:35.942764'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
