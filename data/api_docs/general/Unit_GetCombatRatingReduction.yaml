api:
  class: Unit
  method: GetCombatRatingReduction
  signature: float Unit::GetCombatRatingReduction(CombatRating cr) const
documentation:
  brief: Calculates and returns the combat rating reduction value for a specified
    combat rating.
  description: The GetCombatRatingReduction method computes the effective reduction
    applied to a specific combat rating for this unit. This is typically used in combat
    calculations where certain effects or buffs may reduce the impact of a combat
    rating, such as armor penetration or spell penetration. The method takes a CombatRating
    enum value and returns a float representing the calculated reduction factor. This
    value can be used to modify damage, healing, or other combat-related metrics based
    on the unit's current state and applied modifiers.
  parameters: []
  returns: A float value representing the combat rating reduction factor. This is
    typically a value between 0.0f and 1.0f, where 0.0f means no reduction and 1.0f
    means full reduction. Values in between indicate partial reduction.
  examples:
  - title: Calculate armor penetration reduction
    code: 'float reduction = unit->GetCombatRatingReduction(COMBAT_RATING_ARMOR_PENETRATION);

      // Use the reduction to modify damage calculations

      float finalDamage = baseDamage * (1.0f - reduction);'
    language: cpp
  - title: Apply combat rating reduction to spell damage
    code: 'Unit* target = ...;

      float spellPenetrationReduction = target->GetCombatRatingReduction(COMBAT_RATING_SPELL_PENETRATION);

      // Apply the reduction to spell effectiveness

      float effectiveSpellPower = baseSpellPower * (1.0f - spellPenetrationReduction);'
    language: cpp
  notes: This method likely aggregates all applicable modifiers and effects that reduce
    combat ratings for the unit. The implementation may involve checking for buffs,
    debuffs, talents, and other game state factors that influence combat rating effectiveness.
    This function is typically called during combat calculations to determine final
    stat application.
  warnings: Ensure that the CombatRating enum value passed is valid, as invalid values
    might lead to undefined behavior or incorrect calculations. The returned float
    should be used carefully in mathematical operations to avoid precision loss or
    unexpected results.
  related:
  - GetCombatRating
  - AddCombatRating
  - ModifyCombatRating
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T09:33:31.313706'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
