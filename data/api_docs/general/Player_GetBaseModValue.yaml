api:
  class: Player
  method: GetBaseModValue
  signature: float Player::GetBaseModValue(int modGroup, int modType) const
documentation:
  brief: Returns the base modifier value for a specified mod group and type.
  description: The GetBaseModValue method retrieves the base modifier value associated
    with a specific mod group and type from the player's character data. This method
    is commonly used in World of Warcraft to access various game mechanics such as
    attack power, critical strike chance, or other stat modifiers that are stored
    in the player's base stats. The method operates on the player's internal data
    structure and returns float values representing the modifier amount. It is typically
    used in conjunction with other methods like GetBaseModBonus or GetTotalModValue
    to calculate final stat values.
  parameters:
  - name: modGroup
    description: An integer representing the mod group identifier, which defines the
      category of modifier being accessed (e.g., 0 for attack power, 1 for critical
      strike chance, etc.).
  - name: modType
    description: An integer representing the mod type identifier, which specifies
      the exact type of modifier within the group (e.g., 0 for base value, 1 for bonus
      value, etc.).
  returns: Returns a float value representing the base modifier value for the specified
    mod group and type. The value may be zero or negative if no modifier is present,
    or it could be a positive float if modifiers are applied.
  examples:
  - title: Basic usage example
    code: 'float attackPower = player->GetBaseModValue(0, 0);

      float criticalStrikeChance = player->GetBaseModValue(1, 0);'
    language: cpp
  - title: Advanced usage example
    code: 'float totalModifier = player->GetBaseModValue(0, 0) + player->GetBaseModBonus(0,
      0);

      float finalValue = player->GetTotalModValue(0, 0);'
    language: cpp
  notes: This method is part of the internal player data structure and should be used
    carefully as it may involve complex calculations involving multiple modifiers.
    Performance considerations include avoiding repeated calls to this method in loops
    or frequently executed code paths.
  warnings: The method may return zero or negative values if no modifier exists for
    the specified group and type, which could lead to incorrect assumptions about
    player stats if not handled properly. Also, ensure that modGroup and modType parameters
    are correctly defined as they can affect the result.
  related:
  - GetBaseModBonus
  - GetTotalModValue
  - GetModValue
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T17:22:26.805957'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
