api:
  class: BotMemoryManager
  method: GetTotalMemoryUsage
  signature: uint64_t BotMemoryManager::GetTotalMemoryUsage() const
documentation:
  brief: Calculates and returns the total memory usage of all bot-related data structures
    within the BotMemoryManager.
  description: The GetTotalMemoryUsage method computes the cumulative memory consumption
    across all managed bot data structures, including but not limited to AI state
    information, behavior trees, action queues, and internal tracking mechanisms.
    This method is essential for monitoring memory allocation in bot systems, particularly
    in environments where resource constraints are critical. It aggregates individual
    memory metrics from various components of the bot memory management system to
    provide a holistic view of memory utilization. The returned value represents the
    total bytes consumed by all active bots under this manager's control and can be
    used for performance optimization, debugging, or system health monitoring purposes.
  parameters: []
  returns: A uint64_t value representing the total memory usage in bytes across all
    bot data structures managed by this BotMemoryManager instance. The value is cumulative
    and includes all allocated memory for bot-related objects.
  examples:
  - title: Basic Memory Usage Check
    code: 'uint64_t totalMemory = botMemoryManager->GetTotalMemoryUsage();

      TC_LOG_INFO("bot", "Total bot memory usage: {} bytes", totalMemory);'
    language: cpp
  - title: Monitoring Memory Growth Over Time
    code: "uint64_t initialMemory = botMemoryManager->GetTotalMemoryUsage();\n// ...\
      \ perform bot operations ...\nuint64_t currentMemory = botMemoryManager->GetTotalMemoryUsage();\n\
      if (currentMemory > initialMemory + 1024 * 1024) // 1MB threshold\n{\n    TC_LOG_WARN(\"\
      bot\", \"Potential memory leak detected: {} bytes allocated\", currentMemory\
      \ - initialMemory);\n}"
    language: cpp
  notes: This method performs a full scan of all managed bot objects to calculate
    memory usage, which may introduce performance overhead during high-frequency calls.
    It is recommended to cache or sample this value periodically rather than calling
    it in tight loops. The memory calculation includes both heap-allocated and stack-based
    structures that are tracked by the BotMemoryManager.
  warnings: Calling this method frequently in performance-critical sections can cause
    noticeable lag due to the comprehensive memory scan required. Avoid using it in
    time-sensitive operations such as AI decision-making loops or combat processing.
    Additionally, the returned value may not reflect actual physical memory usage
    if memory fragmentation is significant.
  related:
  - GetBotMemoryUsage
  - GetTotalBotCount
  - ResetMemoryUsage
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T17:05:58.914639'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
