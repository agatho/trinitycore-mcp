api:
  class: Spell
  method: AddUnitTarget
  signature: void Spell::AddUnitTarget(Unit * target, uint32 effectMask, bool checkIfValid,
    bool implicit, const int * losPosition)
documentation:
  brief: Adds a unit target to the spell's target list for the specified effects
  description: The AddUnitTarget method registers a Unit as a target for the current
    spell, associating it with specific effects defined by the effectMask parameter.
    This method is typically used during spell execution to track which units are
    affected by the spell. The method supports optional validation checks and can
    handle implicit targeting scenarios. When losPosition is provided, it verifies
    line-of-sight between the caster and target before adding the unit as a target.
  parameters:
  - name: target
    description: Pointer to the Unit object that will be added as a spell target.
      Must not be null.
  - name: effectMask
    description: Bitmask specifying which spell effects should target this unit. Each
      bit corresponds to an effect index in the spell.
  - name: checkIfValid
    description: When true, validates that the target is a valid spell target according
      to game rules and restrictions.
  - name: implicit
    description: When true, indicates this target was added implicitly (e.g., through
      area-of-effect or automatic targeting).
  - name: losPosition
    description: Optional pointer to a position vector for line-of-sight checking.
      If provided, verifies that the caster has clear sight to the target at this
      location.
  returns: null
  examples:
  - title: Basic Unit Target Addition
    code: 'Unit* target = ...; // some unit

      Spell* spell = ...; // current spell

      spell->AddUnitTarget(target, 1); // Add target for effect 0'
    language: cpp
  - title: Adding Target with Line-of-Sight Check
    code: 'Unit* target = ...;

      Spell* spell = ...;

      float position[3] = {x, y, z};

      spell->AddUnitTarget(target, 1, true, false, position); // Validate and check
      LOS'
    language: cpp
  notes: This method is part of the spell target management system in TrinityCore.
    It updates internal target lists that are used during spell processing and damage
    application. The effectMask parameter allows precise control over which effects
    apply to specific targets, enabling complex spells with multiple targets and effects.
  warnings: Ensure that the target pointer is valid before calling this method, as
    passing a null pointer will likely cause undefined behavior or crashes. Be cautious
    when using implicit targeting flags, as they may affect spell mechanics like proc
    chances or target validation.
  related:
  - Spell::AddTarget
  - Spell::GetUnitTarget
  - Spell::HasUnitTarget
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:01:55.581201'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
