api:
  class: Aura
  method: GetEffect
  signature: AuraEffect * Aura::GetEffect(uint32 index) const
documentation:
  brief: Retrieves a specific aura effect from the aura by its index.
  description: The GetEffect method retrieves a pointer to a specific AuraEffect object
    within the Aura instance, identified by the provided index. This method is commonly
    used in World of Warcraft's TrinityCore framework to access individual effects
    that compose a spell aura. Each aura can have multiple effects (e.g., damage over
    time, stat bonuses, etc.), and this method allows developers to retrieve one specific
    effect based on its position in the aura's effect array. The index parameter corresponds
    to the zero-based position of the effect within the aura. It is important to note
    that if an invalid index is provided or if the aura does not have an effect at
    that index, the method will return a null pointer.
  parameters: []
  returns: A pointer to the AuraEffect object at the specified index, or nullptr if
    the index is out of bounds or no effect exists at that position.
  examples:
  - title: Accessing a Specific Aura Effect
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    AuraEffect* effect\
      \ = aura->GetEffect(0);\n    if (effect)\n    {\n        // Use the effect\n\
      \        uint32 effectType = effect->GetAuraType();\n    }\n}"
    language: cpp
  - title: Iterating Through All Aura Effects
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    for (uint32 i =\
      \ 0; i < aura->GetEffectCount(); ++i)\n    {\n        AuraEffect* effect = aura->GetEffect(i);\n\
      \        if (effect)\n        {\n            // Process each effect\n      \
      \      sLog->outString(\"Effect %u: Type=%u\", i, effect->GetAuraType());\n\
      \        }\n    }\n}"
    language: cpp
  notes: The method performs bounds checking internally but returns nullptr for invalid
    indices. It is safe to call from any thread context as long as the Aura object
    itself is not being modified concurrently. The returned AuraEffect pointer remains
    valid only as long as the parent Aura object exists.
  warnings: Always check if the returned pointer is not null before using it, as invalid
    indices or empty aura effects will result in a nullptr return. This method should
    not be used to modify aura effects directly; use appropriate setter methods instead.
  related:
  - GetEffectCount
  - GetAuraType
  - HasEffect
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:19:32.301648'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
