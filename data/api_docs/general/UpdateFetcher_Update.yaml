api:
  class: UpdateFetcher
  method: Update
  signature: UpdateResult UpdateFetcher::Update(const bool redundancyChecks, const
    bool allowRehash, const bool archivedRedundancy, const int32 cleanDeadReferencesMaxCount)
    const
documentation:
  brief: Performs an update operation on the fetcher with optional redundancy checks
    and reference cleaning.
  description: The Update method executes a comprehensive update routine for the UpdateFetcher
    instance. It processes data retrieval, applies redundancy checks if enabled, handles
    rehashing when necessary, and cleans up dead references based on the provided
    maximum count. This method is typically used in the context of data synchronization
    or cache management within TrinityCore's core systems. The operation may involve
    database queries, memory management, and internal state updates depending on the
    parameters specified.
  parameters:
  - name: redundancyChecks
    description: When true, enables redundant data validation checks during the update
      process to ensure consistency and prevent duplicate entries.
  - name: allowRehash
    description: When true, allows the system to perform rehashing operations on fetched
      data if inconsistencies are detected.
  - name: archivedRedundancy
    description: When true, includes archived or historical data in redundancy checks,
      ensuring older entries are also validated for consistency.
  - name: cleanDeadReferencesMaxCount
    description: Specifies the maximum number of dead references to clean during this
      update cycle. A value of -1 indicates unlimited cleaning.
  returns: Returns an UpdateResult enum indicating the outcome of the update operation.
    Possible values include SUCCESS, FAILED, PARTIAL_SUCCESS, or other implementation-specific
    results depending on whether data was processed, validated, or cleaned.
  examples:
  - title: Basic Update with Default Settings
    code: UpdateResult result = fetcher.Update(false, false, false, -1);
    language: cpp
  - title: Update with Full Redundancy and Reference Cleaning
    code: UpdateResult result = fetcher.Update(true, true, true, 100);
    language: cpp
  notes: This method may block during database operations or heavy processing. It
    is recommended to call this method from a background thread to avoid UI freezing
    in client applications. The cleanDeadReferencesMaxCount parameter helps control
    resource usage by limiting how many stale references are removed per update cycle.
  warnings: Calling this method with allowRehash set to true might cause performance
    degradation if large amounts of data need rehashing. Be cautious when setting
    cleanDeadReferencesMaxCount to a very high number as it could lead to excessive
    memory or CPU usage during cleanup phases.
  related:
  - UpdateFetcher::GetLastUpdateResult
  - UpdateFetcher::IsUpdating
  - UpdateFetcher::CancelUpdate
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T20:01:12.176584'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
