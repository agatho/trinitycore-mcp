api:
  class: Player
  method: GetRunesState
  signature: uint8 Player::GetRunesState() const
documentation:
  brief: Returns the current state of the player's runes as a bitmask.
  description: The GetRunesState method retrieves the current status of all runes
    associated with the player's character. This method returns a uint8 value representing
    the bitwise state of all runes, where each bit corresponds to a specific rune
    type (Blood, Unholy, Frost, Death). The returned value indicates which runes are
    available for use and which are on cooldown. Understanding this value is crucial
    for managing class-specific abilities and ensuring proper gameplay mechanics,
    particularly for Death Knights who rely heavily on rune management.
  parameters: []
  returns: Returns a uint8 value representing the current state of all runes. Each
    bit in the returned value corresponds to a specific rune type (Blood, Unholy,
    Frost, Death), with set bits indicating available runes and unset bits indicating
    runes currently on cooldown. The value can be interpreted as a bitmask where 1
    represents an available rune and 0 represents a cooldown.
  examples:
  - title: Basic Usage Example
    code: "uint8 runesState = player->GetRunesState();\nif (runesState & 0x01)\n{\n\
      \    // Blood rune is available\n}\nelse\n{\n    // Blood rune is on cooldown\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with other rune-related methods
    like GetRuneCooldown and GetRuneType to fully understand the player's rune state.
    The returned value may vary based on the player's class and level, as different
    classes have different rune configurations. Performance-wise, this method should
    be fast as it simply returns cached data without performing complex calculations.
  warnings: This method should not be used for determining if a specific rune is available
    for use in combat, as the returned value may not directly correspond to the actual
    usable state of runes due to cooldowns and other game mechanics. Developers should
    be aware that this value represents the state of all runes combined rather than
    individual rune states.
  related:
  - GetRuneCooldown
  - GetRuneType
  - GetRuneState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:27:47.692545'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
