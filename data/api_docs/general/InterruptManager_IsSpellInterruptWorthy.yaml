api:
  class: InterruptManager
  method: IsSpellInterruptWorthy
  signature: bool InterruptManager::IsSpellInterruptWorthy(uint32 spellId, Unit *
    caster)
documentation:
  brief: Determines whether a spell cast by a unit is worthy of being interrupted.
  description: The IsSpellInterruptWorthy method evaluates whether a given spell,
    cast by a specific unit, should be interrupted based on game mechanics and spell
    properties. This function is typically used during spell casting to determine
    if an interruptible spell can be disrupted by external factors such as damage,
    movement, or other game events. It checks the spell's interruptibility flags and
    other relevant conditions to make this determination.
  parameters:
  - name: spellId
    description: The unique identifier of the spell being evaluated for interruption
      worthiness. This ID corresponds to entries in the Spell.dbc file.
  - name: caster
    description: Pointer to the Unit object that is casting the spell. This parameter
      is crucial as it provides context about the caster's state, abilities, and other
      factors that may affect interruptibility.
  returns: Returns true if the spell is considered worthy of interruption, meaning
    it can be interrupted by external effects or actions. Returns false if the spell
    is not interruptible or should not be interrupted under normal circumstances.
  examples:
  - title: Basic usage to check spell interruptibility
    code: "if (interruptManager->IsSpellInterruptWorthy(spellId, caster)) {\n    //\
      \ Spell can be interrupted\n    // Perform interrupt logic here\n}"
    language: cpp
  - title: Using within a spell cast interruption handler
    code: "void OnSpellCast(Unit* caster, uint32 spellId) {\n    if (interruptManager->IsSpellInterruptWorthy(spellId,\
      \ caster)) {\n        // Apply interrupt effects\n        caster->InterruptSpell(CURRENT_GENERIC_SPELL);\n\
      \    }\n}"
    language: cpp
  notes: This method likely checks spell flags and properties defined in the Spell.dbc
    file. It may also consider the caster's state, such as whether they are channeling
    or casting a non-interruptible spell. The implementation might be used in conjunction
    with other systems like combat state management, spell cooldowns, or aura effects.
  warnings: Ensure that the spellId and caster parameters are valid before calling
    this method to avoid undefined behavior. Incorrectly handling null pointers or
    invalid spell IDs could lead to crashes or incorrect game logic.
  related:
  - InterruptManager::InterruptSpell
  - Unit::InterruptSpell
  - SpellInfo::IsInterruptible
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:27:45.167059'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
