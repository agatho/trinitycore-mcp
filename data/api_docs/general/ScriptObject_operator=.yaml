api:
  class: ScriptObject
  method: operator=
  signature: ScriptObject & ScriptObject::operator=(ScriptObject && right)
documentation:
  brief: Moves the contents of another ScriptObject to this object, leaving the source
    in a valid but unspecified state.
  description: The move assignment operator transfers ownership of resources from
    the right-hand ScriptObject to the left-hand ScriptObject. This operation is typically
    used to efficiently transfer the internal state or data members of one ScriptObject
    instance to another without performing deep copies. The source object (right)
    will be left in a valid but unspecified state after the move, meaning it should
    not be used for further operations unless reinitialized. In the context of TrinityCore's
    scripting system, this operator is commonly used when assigning script objects
    to variables or when returning script objects from functions to avoid unnecessary
    copying and improve performance. The behavior ensures that only one object holds
    valid resources at any given time.
  parameters: []
  returns: A reference to the ScriptObject (left-hand side) that was assigned to,
    allowing for chaining of assignments.
  examples:
  - title: Basic Move Assignment
    code: 'ScriptObject obj1;

      ScriptObject obj2 = std::move(obj1); // Move obj1''s contents to obj2

      // obj1 is now in a valid but unspecified state'
    language: cpp
  - title: Function Return with Move Assignment
    code: "ScriptObject createScriptObject() {\n    ScriptObject obj;\n    // Initialize\
      \ obj...\n    return obj; // Move semantics allow efficient return\n}\n\nScriptObject\
      \ mainObj = createScriptObject(); // Move assignment used here"
    language: cpp
  notes: This operator is part of C++'s move semantics and should be implemented efficiently
    to avoid copying expensive resources. In TrinityCore, ScriptObjects may contain
    pointers or handles to game objects, so moving them avoids unnecessary reference
    counting or resource duplication.
  warnings: After a move assignment, the source object should not be used for any
    operations that require valid internal state, as it is left in a valid but unspecified
    condition. This can lead to undefined behavior if accessed improperly.
  related:
  - ScriptObject::ScriptObject()
  - ScriptObject::ScriptObject(const ScriptObject&)
  - ScriptObject::ScriptObject(ScriptObject&&)
  - operator==
  - operator!=
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:58:27.440399'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
