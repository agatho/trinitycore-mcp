api:
  class: SceneMgr
  method: PlaySceneByTemplate
  signature: uint32 SceneMgr::PlaySceneByTemplate(const SceneTemplate * sceneTemplate,
    const Position * position)
documentation:
  brief: Initiates a scene sequence using the specified scene template at the given
    position and returns a unique scene identifier.
  description: The PlaySceneByTemplate method is used to start a scene sequence in
    World of Warcraft using a predefined scene template. It takes a pointer to a SceneTemplate
    object which defines the scene's properties, triggers, and animations, and a Position
    object that specifies where the scene should be played. The method returns a unique
    identifier (uint32) that can be used to reference or manage the ongoing scene.
    This functionality is commonly used for quest events, cinematic sequences, or
    any scripted interaction that requires visual effects or narrative presentation.
    The scene will play according to the template's configuration and may involve
    multiple actors, camera movements, and visual effects.
  parameters:
  - name: sceneTemplate
    description: Pointer to a SceneTemplate object that defines the scene's behavior,
      triggers, animations, and other properties. Must not be null.
  - name: position
    description: Pointer to a Position object specifying the world coordinates where
      the scene should be initiated. Must not be null.
  returns: A unique 32-bit unsigned integer identifier representing the started scene
    instance. This ID can be used for subsequent operations like stopping or checking
    scene status.
  examples:
  - title: Basic Scene Playback
    code: "SceneTemplate* template = sSceneMgr->GetSceneTemplate(12345);\nPosition\
      \ pos;\npos.Relocate(100.0f, 200.0f, 300.0f, 0.0f);\nuint32 sceneId = sSceneMgr->PlaySceneByTemplate(template,\
      \ &pos);\nif (sceneId != 0)\n{\n    // Scene started successfully\n}"
    language: cpp
  - title: Scene Playback with Error Handling
    code: "SceneTemplate* template = sSceneMgr->GetSceneTemplate(54321);\nif (!template)\n\
      {\n    // Handle invalid scene template\n    return;\n}\n\nPosition pos;\npos.Relocate(0.0f,\
      \ 0.0f, 0.0f, 0.0f);\nuint32 sceneId = sSceneMgr->PlaySceneByTemplate(template,\
      \ &pos);\nif (sceneId == 0)\n{\n    // Scene failed to start\n    // Log error\
      \ or handle appropriately\n}"
    language: cpp
  notes: This method is typically used in conjunction with scene templates defined
    in the database or through scripting. The returned scene ID can be used to track
    scene progress, stop it early, or query its status. Scene playback is asynchronous
    and may involve multiple game ticks before completion.
  warnings: Ensure that both parameters are valid and non-null; passing null pointers
    will likely result in undefined behavior or crashes. Scene templates must be properly
    configured in the database for successful playback.
  related:
  - PlayScene
  - StopScene
  - GetSceneTemplate
  - IsScenePlaying
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T23:14:29.969726'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
