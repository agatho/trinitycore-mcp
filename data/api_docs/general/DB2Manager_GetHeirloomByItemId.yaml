api:
  class: DB2Manager
  method: GetHeirloomByItemId
  signature: const HeirloomEntry * DB2Manager::GetHeirloomByItemId(uint32 itemId)
    const
documentation:
  brief: Retrieves the heirloom entry associated with a specified item ID from the
    database.
  description: The GetHeirloomByItemId method is used to fetch a HeirloomEntry structure
    that corresponds to a given item identifier. This function serves as a lookup
    mechanism within the TrinityCore database manager, specifically for heirloom-related
    data. It allows game systems to access detailed information about heirlooms such
    as their appearance, requirements, and associated rewards. The method performs
    a fast lookup using an internal data structure indexed by item ID, making it efficient
    for real-time gameplay operations where heirloom data needs to be accessed frequently.
  parameters: []
  returns: A pointer to a const HeirloomEntry object if the specified item ID exists
    in the database and corresponds to an heirloom; otherwise, returns nullptr if
    no matching heirloom entry is found.
  examples:
  - title: Basic Usage
    code: "const HeirloomEntry* heirloom = sDB2Manager->GetHeirloomByItemId(12345);\n\
      if (heirloom != nullptr)\n{\n    // Process the heirloom data\n    printf(\"\
      Heirloom Name: %s\\n\", heirloom->Name);\n}"
    language: cpp
  - title: Checking for Valid Heirloom Before Use
    code: "uint32 itemId = 98765;\nconst HeirloomEntry* heirloom = sDB2Manager->GetHeirloomByItemId(itemId);\n\
      if (heirloom != nullptr && heirloom->ItemID == itemId)\n{\n    // Safe to use\
      \ heirloom data\n    // Example: Apply visual effects or check requirements\n\
      }\nelse\n{\n    // Handle invalid or missing heirloom\n}"
    language: cpp
  notes: This method assumes that the DB2Manager has already loaded the relevant heirloom
    data into memory. The returned pointer is valid only as long as the DB2Manager
    instance remains active and the data has not been reloaded or cleared. This lookup
    is typically O(1) in performance due to internal hash table usage.
  warnings: Always check for null return values before dereferencing the returned
    HeirloomEntry pointer to avoid segmentation faults. Ensure that the item ID passed
    corresponds to an actual heirloom in the database, as incorrect IDs will result
    in a nullptr return without any error indication.
  related:
  - GetHeirloomByItemLevel
  - GetHeirloomByExpansion
  - LoadHeirloomData
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T15:03:21.028203'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
