api:
  class: WorldObject
  method: IsSelfOrInSameMap
  signature: bool WorldObject::IsSelfOrInSameMap(const WorldObject * obj) const
documentation:
  brief: Determines whether the object is the same as the provided object or is located
    within the same map.
  description: The IsSelfOrInSameMap method checks if the calling WorldObject instance
    is either identical to the provided WorldObject pointer or if both objects exist
    within the same game map. This utility function is commonly used in TrinityCore's
    core systems to validate spatial relationships between game entities before performing
    operations that require them to be in the same logical space. The method performs
    a simple comparison of map identifiers and object pointers, returning true if
    either condition is met. It is particularly useful for avoiding invalid operations
    across different maps or when checking self-referential conditions.
  parameters: []
  returns: Returns true if the calling object is the same as the provided object (identity
    check) or if both objects are located in the same map; otherwise returns false.
  examples:
  - title: Basic usage to check if two units are in the same map
    code: "if (player->IsSelfOrInSameMap(targetUnit)) {\n    // Both player and targetUnit\
      \ are in the same map\n    // Safe to perform operations between them\n}"
    language: cpp
  - title: Using in a spell targeting context
    code: "if (caster->IsSelfOrInSameMap(target)) {\n    // Proceed with spell effect\n\
      \    caster->CastSpell(target, spellId, true);\n} else {\n    // Target is on\
      \ a different map, skip spell\n}"
    language: cpp
  notes: This method does not perform any complex spatial calculations or distance
    checks. It only verifies map identity and object identity. The implementation
    relies on the internal map identifier stored in each WorldObject instance, which
    is set during object creation and loading.
  warnings: Be cautious when using this method in performance-critical code paths
    as it may be called frequently in certain game systems. Also note that this check
    does not guarantee that objects are within a valid interaction range, only that
    they share the same map context.
  related:
  - GetMapId
  - GetMap
  - IsInMap
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:19:54.895431'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
