api:
  class: ResourceManager
  method: GetRunes
  signature: int ResourceManager::GetRunes()
documentation:
  brief: Retrieves the current number of runes available in the resource manager.
  description: The GetRunes method returns the total count of runes currently stored
    within the ResourceManager instance. This method is typically used in the context
    of World of Warcraft's combat system, where runes are a core resource for certain
    classes like Death Knights. The returned value represents the number of available
    rune slots or charges that can be consumed for abilities. The method does not
    modify any internal state and provides a read-only view of the current rune count.
    This is essential for game logic that needs to validate whether a player has sufficient
    runes before casting rune-based spells or abilities.
  parameters: []
  returns: An integer representing the number of runes currently available in the
    ResourceManager. A return value of 0 indicates no runes are available, while positive
    values indicate the count of available runes.
  examples:
  - title: Basic Usage to Check Rune Availability
    code: "int runeCount = resourceManager.GetRunes();\nif (runeCount > 0)\n{\n  \
      \  // Player can use a rune-based ability\n    player.CastRuneAbility();\n}\n\
      else\n{\n    // No runes available, cannot cast\n    player.SendSystemMessage(\"\
      Not enough runes.\");\n}"
    language: cpp
  - title: Using Rune Count in Resource Management Logic
    code: "void CheckAndConsumeRunes(Player* player)\n{\n    ResourceManager& rm =\
      \ player->GetResourceManager();\n    int availableRunes = rm.GetRunes();\n \
      \   \n    if (availableRunes >= 2)\n    {\n        // Consume 2 runes for a\
      \ powerful ability\n        player->ConsumeRunes(2);\n        player->CastSpell(SPELL_POWERFUL_RUNE_ABILITY);\n\
      \    }\n    else\n    {\n        player->SendSystemMessage(\"Insufficient runes\
      \ to cast this ability.\");\n    }\n}"
    language: cpp
  notes: This method is thread-safe as it only reads from internal state without modifying
    it. The ResourceManager class likely maintains a counter for runes that gets updated
    through other methods like AddRunes() or ConsumeRunes(). This method should be
    called frequently to ensure up-to-date rune counts, especially in time-sensitive
    combat scenarios.
  warnings: Be aware that this method returns only the current count and does not
    validate whether the runes are actually usable (e.g., if they're on cooldown).
    Also, calling this method in a tight loop without proper caching may impact performance
    in high-frequency scenarios.
  related:
  - AddRunes
  - ConsumeRunes
  - GetMaxRunes
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:14:58.805527'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
