api:
  class: Player
  method: HasGemWithLimitCategoryEquipped
  signature: bool Player::HasGemWithLimitCategoryEquipped(uint32 limitCategory, uint32
    count, uint8 except_slot) const
documentation:
  brief: Checks if a player has gems with a specific limit category equipped.
  description: This method determines whether a player has gems that are limited by
    a specific category equipped in their gear. It evaluates all gem slots on the
    player's equipment to see if any gems match the given limit category, considering
    a specified count and excluding a particular slot if needed. The method is useful
    for checking gem limitations such as those related to item level or socket bonuses,
    particularly in scenarios where players need to verify gem constraints before
    crafting or equipping items.
  parameters:
  - name: limitCategory
    description: The gem limit category to check for. This typically corresponds to
      a specific gem limitation such as item level or socket bonus that the gem must
      match.
  - name: count
    description: The number of gems with the specified limit category that must be
      present. This parameter allows checking for multiple gems matching the same
      category.
  - name: except_slot
    description: The slot to exclude from consideration when checking for gems. This
      is useful when checking for gem limitations while excluding a specific slot,
      such as when verifying that a gem is not present in a particular slot.
  returns: Returns true if the player has at least the specified number of gems with
    the given limit category equipped, false otherwise.
  examples:
  - title: Basic usage example
    code: bool result = player->HasGemWithLimitCategoryEquipped(123, 2, 0); // Checks
      if player has at least 2 gems with limit category 123
    language: cpp
  - title: Advanced usage example
    code: bool result = player->HasGemWithLimitCategoryEquipped(456, 1, 1); // Checks
      if player has at least 1 gem with limit category 456, excluding slot 1
    language: cpp
  notes: This method is primarily used in game mechanics related to gem checking and
    validation. It may be used in conjunction with other methods like GetGemSlot or
    GetEquippedItemBySlot to verify gem constraints on equipment.
  warnings: This method does not account for gems that are not equipped but present
    in the player's inventory, only those currently equipped in gear slots.
  related:
  - GetGemSlot
  - GetEquippedItemBySlot
  - HasGemWithLimitCategory
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:06:05.089424'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
