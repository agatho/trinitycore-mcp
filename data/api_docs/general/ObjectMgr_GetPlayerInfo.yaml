api:
  class: ObjectMgr
  method: GetPlayerInfo
  signature: const PlayerInfo * ObjectMgr::GetPlayerInfo(uint32 race, uint32 class_)
    const
documentation:
  brief: Retrieves player information for a specified race and class combination.
  description: The GetPlayerInfo method retrieves a const pointer to a PlayerInfo
    structure that contains data about player races and classes. This method is used
    internally by the TrinityCore server to access predefined player information such
    as starting stats, spell lists, and other class-specific attributes. The returned
    PlayerInfo object should not be modified directly as it represents static game
    data loaded at startup. This method performs a lookup in an internal data structure
    that maps race and class combinations to their respective player information.
  parameters:
  - name: race
    description: The race identifier (e.g., RACE_HUMAN, RACE_ORC) for which to retrieve
      player information
  - name: class_
    description: The class identifier (e.g., CLASS_WARRIOR, CLASS_MAGE) for which
      to retrieve player information
  returns: A const pointer to a PlayerInfo structure containing the player data for
    the specified race and class combination. Returns nullptr if no matching player
    info is found for the given race and class.
  examples:
  - title: Basic Usage
    code: "const PlayerInfo* info = sObjectMgr->GetPlayerInfo(RACE_HUMAN, CLASS_WARRIOR);\n\
      if (info)\n{\n    // Use player info\n    printf(\"Starting health: %u\\n\"\
      , info->health);\n}"
    language: cpp
  - title: Checking for Valid Player Info
    code: "uint32 race = PLAYER_RACE_ORC;\nuint32 class_ = PLAYER_CLASS_ROGUE;\nconst\
      \ PlayerInfo* playerInfo = sObjectMgr->GetPlayerInfo(race, class_);\n\nif (playerInfo\
      \ != nullptr)\n{\n    // Valid player info found\n    printf(\"Class: %s\\n\"\
      , playerInfo->className);\n}\nelse\n{\n    // No matching player info\n    printf(\"\
      No player info found for race %u and class %u\\n\", race, class_);\n}"
    language: cpp
  notes: This method accesses a pre-loaded static data structure. The PlayerInfo objects
    returned are read-only and should not be modified. The method is thread-safe as
    it only performs read operations on static data. Performance is optimal since
    it uses hash map lookups internally.
  warnings: Do not modify the returned PlayerInfo pointer as it points to static read-only
    data. If you need to modify player information, consider creating a copy or using
    appropriate game mechanics instead of modifying the global data directly.
  related:
  - GetPlayerClassInfo
  - GetPlayerRaceInfo
  - LoadPlayerInfo
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T09:22:32.554445'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
