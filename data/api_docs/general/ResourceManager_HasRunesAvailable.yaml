api:
  class: ResourceManager
  method: HasRunesAvailable
  signature: bool ResourceManager::HasRunesAvailable(uint32 bloodRunes, uint32 frostRunes,
    uint32 unholyRunes)
documentation:
  brief: Checks if the player has enough runes available to cast a spell or ability
    requiring specific rune counts.
  description: The HasRunesAvailable method determines whether a player possesses
    sufficient runes of each type (blood, frost, and unholy) to activate a spell or
    ability that consumes them. This method is typically used in the context of World
    of Warcraft's Death Knight class mechanics, where abilities consume specific combinations
    of rune types. The method evaluates the current rune counts against the requested
    amounts and returns true if all required runes are available, false otherwise.
    It does not modify any rune state; it only performs a check.
  parameters:
  - name: bloodRunes
    description: The number of blood runes required for the spell or ability.
  - name: frostRunes
    description: The number of frost runes required for the spell or ability.
  - name: unholyRunes
    description: The number of unholy runes required for the spell or ability.
  returns: True if the player has at least the specified number of blood, frost, and
    unholy runes available; false otherwise.
  examples:
  - title: Check if player can cast a spell requiring 1 blood, 2 frost, and 1 unholy
      rune
    code: "if (resourceManager.HasRunesAvailable(1, 2, 1)) {\n    // Player can cast\
      \ the ability\n    player.CastSpell(SPELL_DEATH_COIL);\n} else {\n    // Not\
      \ enough runes\n    player.SendSystemMessage(\"Not enough runes.\");\n}"
    language: cpp
  - title: Check multiple rune requirements before casting a powerful ability
    code: "uint32 requiredBlood = 2;\nuint32 requiredFrost = 1;\nuint32 requiredUnholy\
      \ = 1;\n\nif (resourceManager.HasRunesAvailable(requiredBlood, requiredFrost,\
      \ requiredUnholy)) {\n    // Proceed with ability casting logic\n    player.ConsumeRunes(requiredBlood,\
      \ requiredFrost, requiredUnholy);\n    player.CastSpell(SPELL_FROST_STRIKE);\n\
      } else {\n    // Handle insufficient runes case\n    player.SendSystemMessage(\"\
      Insufficient runes to cast Frost Strike.\");\n}"
    language: cpp
  notes: This method assumes that the ResourceManager instance is associated with
    a valid player character. It's commonly used in conjunction with other rune-related
    methods such as ConsumeRunes or GetRuneCount. The implementation likely checks
    internal rune state variables without modifying them.
  warnings: Ensure that the resource manager is properly initialized and linked to
    a player object before calling this method. Incorrect rune counts may lead to
    unexpected behavior when combined with rune-consuming abilities.
  related:
  - ConsumeRunes
  - GetRuneCount
  - IsRuneReady
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:11:19.536642'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
