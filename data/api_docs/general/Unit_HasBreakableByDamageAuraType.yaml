api:
  class: Unit
  method: HasBreakableByDamageAuraType
  signature: bool Unit::HasBreakableByDamageAuraType(int type, uint32 excludeAura)
    const
documentation:
  brief: Checks if the unit has a breakable aura of a specific type, excluding a specified
    aura.
  description: This method determines whether a Unit object possesses a breakable
    aura that matches a given aura type, while excluding a specific aura from consideration.
    It is commonly used in World of Warcraft mechanics to evaluate whether an entity
    can be interrupted or broken by damage-based effects. The method evaluates the
    presence of aura types such as those related to interruptible spells, stun, root,
    or other breakable effects, and returns true if any matching aura exists. This
    functionality is essential for determining combat behavior and spell interactions
    in TrinityCore.
  parameters:
  - name: type
    description: The aura type to check for. This parameter specifies the type of
      breakable aura (e.g., 0 for stun, 1 for root, etc.) that is being evaluated.
  - name: excludeAura
    description: The specific aura ID to exclude from consideration. This allows filtering
      out certain aura types that might otherwise be considered as breakable.
  returns: Returns true if the unit has a breakable aura matching the specified type,
    excluding the given aura; otherwise false.
  examples:
  - title: Basic usage example
    code: "if (unit->HasBreakableByDamageAuraType(0, 12345)) {\n    // Do something\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with other aura evaluation methods
    and is part of the core combat system logic. Performance considerations are minimal
    as it involves simple aura checks, but it should be used carefully when evaluating
    multiple aura types.
  warnings: Be cautious when using this method with different aura types, as incorrect
    usage may lead to false positive or negative results in interruptible spell detection.
    Also, ensure that the excludeAura parameter is properly set to avoid unintended
    exclusions.
  related:
  - Unit::HasAuraType
  - Unit::HasBreakableByDamageAura
  - Unit::HasAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:21:43.251137'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
