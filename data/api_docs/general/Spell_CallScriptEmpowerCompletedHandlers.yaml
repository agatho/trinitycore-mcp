api:
  class: Spell
  method: CallScriptEmpowerCompletedHandlers
  signature: void Spell::CallScriptEmpowerCompletedHandlers(int32 completedStagesCount)
documentation:
  brief: Invokes all script handlers registered for spell empowerment completion events.
  description: The CallScriptEmpowerCompletedHandlers method is responsible for executing
    all registered script callbacks that are triggered when a spell's empowerment
    stage has been completed. This method is typically invoked internally by the TrinityCore
    spell system during the processing of empowered spells, such as those with multi-stage
    effects or progressive damage increases. It ensures that any custom logic defined
    in scripts (such as Lua or C++ scripts) related to empowerment completion is properly
    executed. The method accepts a parameter indicating how many stages of empowerment
    have been completed, allowing scripts to react differently based on the progress
    level.
  parameters:
  - name: completedStagesCount
    description: An integer value representing the number of empowerment stages that
      have been successfully completed for the spell. This count is used by script
      handlers to determine the current state or progression of the empowerment effect.
  returns: null
  examples:
  - title: Basic usage in spell processing
    code: "void MySpell::HandleEmpowermentStageComplete(int32 stages)\n{\n    // Trigger\
      \ script handlers for empowerment completion\n    CallScriptEmpowerCompletedHandlers(stages);\n\
      }"
    language: cpp
  - title: Integration with custom spell logic
    code: "void Spell::DoEmpowerment()\n{\n    // Simulate empowerment stages\n  \
      \  for (int32 i = 1; i <= MAX_EMPOWERMENT_STAGES; ++i)\n    {\n        // Apply\
      \ empowerment effects\n        ApplyEmpowermentEffect(i);\n        \n      \
      \  // Notify script handlers of completion\n        CallScriptEmpowerCompletedHandlers(i);\n\
      \    }\n}"
    language: cpp
  notes: This method is part of the internal spell lifecycle management in TrinityCore
    and should only be called from within spell processing code. It does not perform
    any validation on the input parameter, so callers must ensure that completedStagesCount
    is a valid positive integer or zero.
  warnings: Improper usage of this method may lead to unexpected behavior if scripts
    expect specific empowerment stage counts but receive invalid values. Ensure that
    all script handlers are properly registered before calling this method.
  related:
  - Spell::CallScriptEffectHandlers
  - Spell::CallScriptTargetHandlers
  - Spell::CallScriptLaunchHandlers
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:57:46.373466'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
