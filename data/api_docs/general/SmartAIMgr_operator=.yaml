api:
  class: SmartAIMgr
  method: operator=
  signature: SmartAIMgr & SmartAIMgr::operator=(SmartAIMgr && param0)
documentation:
  brief: Moves ownership of a SmartAIMgr instance to another SmartAIMgr instance
  description: The move assignment operator for SmartAIMgr transfers all resources
    from the source SmartAIMgr object to the target object, leaving the source in
    a valid but unspecified state. This operation is used to efficiently transfer
    ownership of AI-related data structures and configurations without unnecessary
    copying. In the context of TrinityCore's AI system, this allows for efficient
    management of smart AI behaviors assigned to creatures and game objects. The method
    ensures that any existing resources in the target object are properly cleaned
    up before the move operation occurs.
  parameters: []
  returns: A reference to the target SmartAIMgr object after the move assignment has
    completed
  examples:
  - title: Basic Move Assignment Usage
    code: 'SmartAIMgr manager1;

      SmartAIMgr manager2 = std::move(manager1); // Move-assigns manager1 to manager2'
    language: cpp
  - title: Move Assignment in AI Context
    code: "void UpdateAI()\n{\n    SmartAIMgr newAIManager;\n    // ... populate newAIManager\
      \ with AI data ...\n    \n    // Move the AI manager to current object\n   \
      \ *this = std::move(newAIManager);\n}"
    language: cpp
  notes: This operator is typically used in scenarios where SmartAIMgr objects need
    to be reassigned or swapped during runtime. The move operation is more efficient
    than copy operations as it transfers ownership of resources rather than duplicating
    them. Developers should ensure that the source object is not used after a move
    operation, as its state becomes undefined but still valid.
  warnings: Using this operator on an already moved-from object can lead to undefined
    behavior. The source SmartAIMgr object should not be accessed after a move assignment.
    Additionally, care must be taken when using this in multi-threaded contexts where
    the source and target objects might be accessed concurrently.
  related:
  - SmartAIMgr::SmartAIMgr()
  - SmartAIMgr::SmartAIMgr(SmartAIMgr&&)
  - SmartAIMgr::operator=
  - SmartAIMgr::Clear
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:34:18.208853'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
