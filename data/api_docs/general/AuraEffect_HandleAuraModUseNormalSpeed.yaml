api:
  class: AuraEffect
  method: HandleAuraModUseNormalSpeed
  signature: void AuraEffect::HandleAuraModUseNormalSpeed(const AuraApplication *
    aurApp, uint8 mode, bool apply) const
documentation:
  brief: Modifies the target's movement speed based on aura application state.
  description: The HandleAuraModUseNormalSpeed method adjusts the target's movement
    speed to reflect normal speed values when an aura is applied or removed. This
    method is typically invoked during aura application or removal events to ensure
    that the character's speed is correctly updated in response to the aura effect.
    It interacts with the AuraApplication object to determine whether to apply or
    remove the speed modification, and uses a mode parameter to define how the change
    should be processed. The method is part of the core aura handling system within
    TrinityCore and directly impacts player movement mechanics during gameplay.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This parameter contains information about the aura's state,
      target, and other relevant context needed for processing the speed modification.
  - name: mode
    description: The mode of operation that determines how the speed modification
      should be handled. Valid values are typically 0 (apply) or 1 (remove), though
      specific implementation may vary based on internal TrinityCore logic.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the speed modification. When true, normal speed is enforced; when false, previous
      speed settings are restored.
  returns: null
  examples:
  - title: Basic Aura Speed Modification
    code: "void MyAuraHandler::HandleAuraModUseNormalSpeed(const AuraApplication*\
      \ aurApp, uint8 mode, bool apply) const {\n    if (apply) {\n        // Apply\
      \ normal speed effect\n        Unit* target = aurApp->GetTarget();\n       \
      \ target->SetSpeed(MOVE_RUN, 1.0f);\n        target->SetSpeed(MOVE_WALK, 1.0f);\n\
      \    } else {\n        // Remove speed effect and restore default\n        Unit*\
      \ target = aurApp->GetTarget();\n        target->UpdateSpeed(MOVE_RUN, true);\n\
      \        target->UpdateSpeed(MOVE_WALK, true);\n    }\n}"
    language: cpp
  notes: This method is part of the internal aura handling system and should not be
    called directly by external code. The implementation relies on the AuraApplication
    object to provide context about the target unit and aura state. Performance considerations
    are minimal as this is a standard event handler, but frequent calls during combat
    may impact frame rate if not optimized.
  warnings: Improper use of this method can cause unexpected movement behavior or
    speed glitches in players. Ensure that all speed modifications are properly synchronized
    with the aura application lifecycle to prevent conflicts or inconsistent states.
  related:
  - AuraEffect::HandleAuraModSpeed
  - AuraApplication::GetTarget
  - Unit::SetSpeed
  - Unit::UpdateSpeed
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T13:02:34.038718'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
