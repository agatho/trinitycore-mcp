api:
  class: RBACData
  method: GetSecurityLevel
  signature: uint8 RBACData::GetSecurityLevel() const
documentation:
  brief: Returns the security level associated with the RBAC data instance.
  description: The GetSecurityLevel method retrieves the security level value stored
    within an RBACData object. In the context of TrinityCore's Role-Based Access Control
    system, this value determines the administrative privileges and access rights
    of a user or account. The returned uint8 typically corresponds to predefined security
    levels such as Player (0), Moderator (1), Gamemaster (2), Admin (3), and higher
    levels depending on server configuration. This method is commonly used in permission
    checks and access control logic throughout the core codebase.
  parameters: []
  returns: A uint8 value representing the security level of the RBAC data. Valid values
    are typically 0-255, where 0 usually indicates a standard player, and higher numbers
    represent increasing levels of administrative access. The exact mapping depends
    on server configuration and custom RBAC definitions.
  examples:
  - title: Basic Usage in Permission Check
    code: "RBACData* rbac = accountMgr->GetRBACData(accountId);\nif (rbac && rbac->GetSecurityLevel()\
      \ >= SEC_GAMEMASTER)\n{\n    // Allow GM-only action\n    HandleGMCommand(session,\
      \ \"gm visible on\");\n}"
    language: cpp
  - title: Storing Security Level for Later Use
    code: "RBACData* rbac = player->GetSession()->GetSecurity();\nuint8 securityLevel\
      \ = rbac->GetSecurityLevel();\n// Store in a variable for multiple checks\n\
      if (securityLevel >= SEC_ADMINISTRATOR)\n{\n    // Perform admin-only operations\n\
      }"
    language: cpp
  notes: This method is a simple getter that directly returns the stored security
    level without performing any calculations or lookups. It's safe to call from any
    thread context as long as the RBACData object itself is properly synchronized.
    The method assumes that the RBACData instance has been properly initialized with
    valid security data.
  warnings: Ensure that the RBACData object is not null before calling this method,
    as it may cause undefined behavior if accessed on an uninitialized or destroyed
    object. Also note that security levels are server-configurable and may vary between
    different TrinityCore installations.
  related:
  - RBACData::SetSecurityLevel
  - RBACData::HasPermission
  - RBACData::GetPermissions
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:40:41.385933'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
