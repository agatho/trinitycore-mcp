api:
  class: WorldObject
  method: SetTransport
  signature: void WorldObject::SetTransport(TransportBase * t)
documentation:
  brief: Sets the transport object associated with this WorldObject, linking it to
    a moving transport such as a boat or elevator.
  description: The SetTransport method assigns a TransportBase object to the current
    WorldObject, establishing a relationship that allows the object to move along
    with the transport's movement. This is commonly used for players and creatures
    that are riding transports like boats, zeppelins, or elevator platforms within
    Azeroth. When a WorldObject is attached to a transport, its position and orientation
    are updated automatically based on the transport's movement. The method typically
    sets internal transport-related flags and updates the object's location relative
    to the transport's coordinate system. This mechanism ensures that objects maintain
    their correct spatial relationship with moving transports during gameplay.
  parameters:
  - name: t
    description: Pointer to the TransportBase object that this WorldObject should
      be attached to. Must not be null, otherwise behavior is undefined.
  returns: null
  examples:
  - title: Attach a player to a transport
    code: 'Player* player = ...;

      TransportBase* transport = ...;

      player->SetTransport(transport);'
    language: cpp
  - title: Attach a creature to a transport during spawn
    code: "Creature* creature = ...;\nTransportBase* transport = ...;\nif (transport)\n\
      {\n    creature->SetTransport(transport);\n    creature->UpdatePosition(transport->GetPositionX(),\
      \ transport->GetPositionY(), transport->GetPositionZ(), transport->GetOrientation());\n\
      }"
    language: cpp
  notes: This method is typically called internally by the core engine when objects
    are mounted or boarded transports. It's important to ensure that the TransportBase
    pointer is valid and properly initialized before calling this method. The object's
    movement will be automatically synchronized with the transport, so manual position
    updates should not be performed while attached.
  warnings: Calling SetTransport with a null pointer can lead to undefined behavior
    or crashes. Additionally, setting a new transport without first clearing the previous
    one may cause positioning issues if not handled carefully. Ensure that all related
    systems (such as movement handlers) are aware of the transport change to avoid
    synchronization problems.
  related:
  - GetTransport
  - IsOnTransport
  - RemoveFromTransport
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:03:02.229747'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
