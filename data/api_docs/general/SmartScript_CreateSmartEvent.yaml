api:
  class: SmartScript
  method: CreateSmartEvent
  signature: SmartScriptHolder SmartScript::CreateSmartEvent(SMART_EVENT e, uint32
    event_flags, uint32 event_param1, uint32 event_param2, uint32 event_param3, uint32
    event_param4, uint32 event_param5, SMART_ACTION action, uint32 action_param1,
    uint32 action_param2, uint32 action_param3, uint32 action_param4, uint32 action_param5,
    uint32 action_param6, uint32 action_param7, SMARTAI_TARGETS t, uint32 target_param1,
    uint32 target_param2, uint32 target_param3, uint32 target_param4, int targetParamString,
    uint32 phaseMask)
documentation:
  brief: Creates and initializes a new smart script event with specified event and
    action parameters for AI behavior implementation.
  description: The CreateSmartEvent method is used to define a complete smart script
    event within the TrinityCore AI system. It sets up an event that triggers under
    specific conditions (defined by SMART_EVENT parameters) and executes a corresponding
    action (SMART_ACTION) with associated parameters. This method allows developers
    to programmatically construct AI behaviors for creatures, game objects, or areas
    that respond to various in-game events such as creature aggro, damage taken, or
    timer expiration. The event is configured with flags, parameters, and target specifications
    to control when and how the action executes. The returned SmartScriptHolder contains
    the fully constructed event data ready for use in the smart AI system.
  parameters:
  - name: e
    description: The SMART_EVENT type that defines what condition triggers this script
      event (e.g., EVENT_ON_AGRO, EVENT_RECEIVE_EMOTE).
  - name: event_flags
    description: Bitmask flags that modify the behavior of the event trigger (e.g.,
      FLAG_DISABLE_PROC, FLAG_AURA_NOT_PRESENT).
  - name: event_param1
    description: First parameter specific to the event type, often representing a
      value or ID related to the triggering condition.
  - name: event_param2
    description: Second parameter specific to the event type, typically used for additional
      event configuration.
  - name: event_param3
    description: Third parameter specific to the event type, often used for more complex
      event conditions.
  - name: event_param4
    description: Fourth parameter specific to the event type, may be used for advanced
      event filtering or timing.
  - name: event_param5
    description: Fifth parameter specific to the event type, often used for additional
      condition values or thresholds.
  - name: action
    description: The SMART_ACTION type that defines what action should be executed
      when the event is triggered.
  - name: action_param1
    description: First parameter specific to the action type, often representing a
      value or ID related to the action being performed.
  - name: action_param2
    description: Second parameter specific to the action type, typically used for
      additional action configuration.
  - name: action_param3
    description: Third parameter specific to the action type, often used for more
      complex action parameters.
  - name: action_param4
    description: Fourth parameter specific to the action type, may be used for advanced
      action behavior or targeting.
  - name: action_param5
    description: Fifth parameter specific to the action type, often used for additional
      action configuration or data.
  - name: action_param6
    description: Sixth parameter specific to the action type, typically used for advanced
      action parameters or flags.
  - name: action_param7
    description: Seventh parameter specific to the action type, often used for additional
      action data or complex configurations.
  - name: t
    description: The SMARTAI_TARGETS type that defines how the action targets its
      subject (e.g., TARGET_SELF, TARGET_HOSTILE).
  - name: target_param1
    description: First target parameter specific to the target type, often representing
      a value or ID related to the targeting logic.
  - name: target_param2
    description: Second target parameter specific to the target type, typically used
      for additional targeting configuration.
  - name: target_param3
    description: Third target parameter specific to the target type, often used for
      more complex targeting conditions.
  - name: target_param4
    description: Fourth target parameter specific to the target type, may be used
      for advanced targeting behavior or filtering.
  - name: targetParamString
    description: Integer value representing a string parameter for certain target
      types that require text-based targeting.
  - name: phaseMask
    description: Bitmask specifying which phases this event should be active in (0
      = all phases).
  returns: Returns a SmartScriptHolder object containing the fully configured smart
    script event. This holder can be used to add the event to a creature's AI or other
    smart script-enabled objects.
  examples:
  - title: Basic Aggro Event
    code: "SmartScriptHolder event = smartAI->CreateSmartEvent(SMART_EVENT_ON_AGRO,\
      \ 0, 0, 0, 0, 0, 0,\n    SMART_ACTION_TALK, 12345, 0, 0, 0, 0, 0, 0,\n    SMARTAI_TARGET_SELF,\
      \ 0, 0, 0, 0, -1, 0);\nsmartAI->AddEvent(event);"
    language: cpp
  - title: Timer-Based Action with Targeting
    code: "SmartScriptHolder event = smartAI->CreateSmartEvent(SMART_EVENT_TIMER,\
      \ 0, 5000, 10000, 0, 0, 0,\n    SMART_ACTION_CAST, 67890, 0, 0, 0, 0, 0, 0,\n\
      \    SMARTAI_TARGET_HOSTILE, 10, 0, 0, 0, -1, 0);\nsmartAI->AddEvent(event);"
    language: cpp
  notes: This method is part of the TrinityCore SmartAI system which provides a flexible
    framework for creating complex AI behaviors. The event parameters are highly dependent
    on the specific SMART_EVENT and SMART_ACTION types being used. Developers should
    consult the SMART_EVENT and SMART_ACTION enumerations to understand valid parameter
    values for each type. The returned SmartScriptHolder must be added to an AI system
    using methods like AddEvent() to become active.
  warnings: Incorrect parameter values can lead to undefined behavior or script failures.
    Event parameters must match the expected types for their respective event and
    action types. Using invalid SMART_EVENT or SMART_ACTION values will cause runtime
    errors. The phaseMask parameter should be carefully considered as events may not
    trigger in unintended phases if incorrectly set.
  related:
  - AddEvent
  - ClearEvents
  - GetEvent
  - HasEvents
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T18:04:47.629146'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
