api:
  class: SpellScript
  method: GetSpell
  signature: Spell * SpellScript::GetSpell() const
documentation:
  brief: Retrieves the Spell object associated with the current spell script context
  description: The GetSpell method returns a pointer to the Spell object that is currently
    being processed by the spell script. This method provides access to the spell's
    properties, effects, and state during execution. The returned Spell pointer remains
    valid only during the duration of the script execution and should not be stored
    or used outside of the script context. This is commonly used in spell script implementations
    to access spell-specific data such as spell info, targets, or effect parameters.
  parameters: []
  returns: A pointer to the Spell object representing the current spell being executed
    by this script, or nullptr if no spell is associated with the script context
  examples:
  - title: Accessing Spell Info in a Spell Script
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleEffect(SpellEffIndex\
      \ effIndex) override\n    {\n        Spell* spell = GetSpell();\n        if\
      \ (spell)\n        {\n            uint32 spellId = spell->m_spellInfo->Id;\n\
      \            // Use spell ID for further processing\n        }\n    }\n};"
    language: cpp
  - title: Checking Spell Target in a Script
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnApply(AuraEffect\
      \ const* aurEff, AuraRemoveMode mode) override\n    {\n        Spell* spell\
      \ = GetSpell();\n        if (spell && spell->m_targets.GetUnitTarget())\n  \
      \      {\n            // Process spell target information\n            Unit*\
      \ target = spell->m_targets.GetUnitTarget();\n            // ... additional\
      \ logic\n        }\n    }\n};"
    language: cpp
  notes: The returned Spell pointer is only valid within the scope of the current
    script execution. It's important to check for null before using the returned pointer
    to avoid crashes. This method is typically called from within spell effect handlers
    or aura application/removal callbacks where the spell context is actively being
    processed.
  warnings: Never store the returned Spell pointer for later use outside of the script
    execution context, as it may become invalid. Always verify that the returned pointer
    is not null before dereferencing it to prevent access violations.
  related:
  - GetCaster
  - GetTarget
  - GetEffectIndex
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T05:51:52.127306'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
