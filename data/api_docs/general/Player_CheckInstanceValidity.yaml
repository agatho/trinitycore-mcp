api:
  class: Player
  method: CheckInstanceValidity
  signature: bool Player::CheckInstanceValidity(bool param0)
documentation:
  brief: Checks if the player is currently in a valid instance or dungeon.
  description: This method determines whether the player character is currently located
    within a valid instance or dungeon environment. It evaluates the player's current
    location and checks if they are in a proper raid or dungeon instance, ensuring
    that the player has not been kicked out of the instance or is not in an invalid
    state such as being in a non-instance area. The method returns true if the player
    is in a valid instance, false otherwise. This functionality is crucial for maintaining
    game mechanics related to instance progression and preventing players from accessing
    invalid areas during instance content.
  parameters:
  - name: param0
    description: This parameter represents whether to check for instance validity
      in a more strict manner. When set to true, it ensures that the player is not
      only in an instance but also that they are properly connected to the instance's
      server environment and not in a state where they would be considered invalid.
  returns: Returns true if the player is currently in a valid instance or dungeon
    environment, false otherwise. The method may return false if the player is in
    a non-instance area or has been removed from an instance due to various game mechanics
    such as time-out or player disconnection.
  examples:
  - title: Basic Instance Validity Check
    code: bool isValid = player->CheckInstanceValidity(true);
    language: cpp
  - title: Advanced Instance Validity Check with Conditional Logic
    code: "if (player->CheckInstanceValidity(false)) {\n    // Player is in valid\
      \ instance\n    // Proceed with instance-related actions\n} else {\n    // Player\
      \ is not in valid instance\n    // Handle accordingly\n}"
    language: cpp
  notes: This method typically involves checking the player's current zone or instance
    ID against valid instance IDs. It may also involve checking if the player has
    been disconnected from the instance server or if they are in a state where they
    would be considered invalid due to various game mechanics such as time-out or
    player disconnection.
  warnings: This method should not be used for determining whether a player is in
    an instance without proper context, as it may return false even when the player
    is in a valid instance but not connected to the instance server properly. Care
    must be taken to ensure that all checks are performed correctly and that the player's
    state is properly evaluated.
  related:
  - IsInInstance
  - GetInstanceId
  - CheckInstanceValidity
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T01:02:44.175363'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
