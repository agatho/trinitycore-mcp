api:
  class: Unit
  method: GetTopAI
  signature: UnitAI * Unit::GetTopAI() const
documentation:
  brief: Returns the topmost AI instance for the unit, typically used for accessing
    the primary AI behavior.
  description: The GetTopAI method retrieves the highest priority AI instance associated
    with a Unit object. This is commonly used in World of Warcraft's TrinityCore framework
    to access the primary AI behavior for creatures or players. The returned AI instance
    represents the most significant AI in the hierarchy, often corresponding to the
    main AI controller that manages the unit's behavior and actions. This method is
    particularly useful when dealing with complex AI systems where multiple AI instances
    may be present, such as in boss encounters or scripted events. The method ensures
    thread safety by returning a valid AI pointer, though it does not guarantee that
    the returned AI will be active or functional at all times.
  parameters: []
  returns: Returns a pointer to the UnitAI instance which represents the topmost AI
    in the hierarchy for this unit. If no AI is present, it returns nullptr. The returned
    AI instance typically controls the primary behavior of the unit and may be used
    for managing combat, movement, or other actions.
  examples:
  - title: Basic usage example
    code: "UnitAI* ai = unit->GetTopAI();\nif (ai)\n{\n    // Use AI for behavior\
      \ control\n}"
    language: cpp
  - title: Advanced usage with AI checking
    code: "UnitAI* ai = unit->GetTopAI();\nif (ai && ai->IsInCombat())\n{\n    //\
      \ Handle combat behavior\n}\nelse\n{\n    // Handle non-combat behavior\n}"
    language: cpp
  notes: The method is designed to be thread-safe and should not cause race conditions
    in multi-threaded environments. It returns the topmost AI instance, which may
    be different from the currently active AI if multiple AI instances exist. Performance
    considerations are minimal as this method simply retrieves a pointer from internal
    storage.
  warnings: Care should be taken when using this method in conjunction with other
    AI-related methods, as it may return different AI instances than expected if multiple
    AI systems are present. Also note that the returned AI instance may not always
    be active or functional, especially during transitions or in complex scenarios.
  related:
  - GetAI
  - GetSecondAI
  - GetThirdAI
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:06:53.583570'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
