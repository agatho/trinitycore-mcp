api:
  class: CooldownManager
  method: IsGCDReady
  signature: bool CooldownManager::IsGCDReady() const
documentation:
  brief: Checks if the global cooldown (GCD) is ready to be used by the player
  description: The IsGCDReady method determines whether a player's global cooldown
    has expired and can now be reset. In World of Warcraft, the global cooldown is
    a mechanic that prevents players from immediately casting another spell or ability
    after using one. This method returns true when the GCD timer has completed and
    the player can cast again, and false otherwise. The global cooldown typically
    lasts 1.5 seconds after casting any spell or ability that triggers it.
  parameters: []
  returns: Returns true if the global cooldown is ready (has expired), allowing the
    player to cast another ability; returns false if the global cooldown is still
    active and the player must wait before casting again
  examples:
  - title: Basic GCD Check Before Casting
    code: "if (player->GetCooldownManager()->IsGCDReady()) {\n    player->CastSpell(target,\
      \ SPELL_FIREBALL);\n} else {\n    player->SendSystemMessage(\"You must wait\
      \ for the global cooldown to expire.\");\n}"
    language: cpp
  - title: Using GCD Status in a Custom Spell Handler
    code: "void Player::HandleCustomSpellCast(uint32 spellId) {\n    if (GetCooldownManager()->IsGCDReady())\
      \ {\n        // Proceed with spell casting\n        CastSpell(spellId);\n  \
      \      // Reset GCD after successful cast\n        GetCooldownManager()->AddGCD(1500);\
      \ // 1.5 second GCD\n    } else {\n        // Prevent casting and send error\
      \ message\n        SendCastFailed(SPELL_FAILED_NOT_READY);\n    }\n}"
    language: cpp
  notes: This method is commonly used in spell cast validation logic to prevent players
    from spamming abilities. The global cooldown is a fundamental gameplay mechanic
    that ensures balanced combat and prevents instant ability spamming. The GCD timer
    is typically managed internally by the CooldownManager class.
  warnings: Do not use this method alone for preventing spell casting - always combine
    with proper spell validation and error handling. Be aware that some abilities
    may have different cooldown behaviors than standard spells, so check specific
    spell properties when implementing custom logic.
  related:
  - AddGCD
  - GetGCDRemaining
  - IsReady
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T15:39:18.144036'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
