api:
  class: Unit
  method: ChangeSeat
  signature: void Unit::ChangeSeat(int8 seatId, bool next)
documentation:
  brief: Changes the seat position of a unit to a specified seat ID.
  description: The ChangeSeat method allows a unit to be repositioned to a specific
    seat within a vehicle, typically used for controlling passenger positioning during
    vehicle interactions. This method is commonly employed when managing player or
    creature seating in vehicle mechanics, such as during mount transitions or when
    entering/leaving vehicle states. The seatId parameter determines which seat the
    unit will occupy, while the next parameter controls whether the seat change occurs
    immediately or after a delay. The method operates within the context of World
    of Warcraft's vehicle system and affects the unit's positioning in relation to
    its vehicle.
  parameters:
  - name: seatId
    description: The seat ID to which the unit should be moved. Valid values are typically
      between -1 and 7, where -1 indicates no specific seat, and 0-7 represent different
      seat positions within a vehicle.
  - name: next
    description: Determines whether the seat change occurs immediately (true) or after
      a delay (false). When true, the unit's position changes instantly; when false,
      the change happens after a short delay.
  returns: null
  examples:
  - title: Basic Seat Change Example
    code: 'Unit* unit = player;

      unit->ChangeSeat(0, true);'
    language: cpp
  - title: Advanced Vehicle Seat Change Example
    code: 'Unit* unit = creature;

      unit->ChangeSeat(3, false);

      // This would change the creature''s seat position after a delay'
    language: cpp
  notes: This method is primarily used in vehicle-related code and should be called
    carefully to avoid disrupting vehicle mechanics. It may have performance implications
    when used frequently during vehicle transitions, as it involves updating the unit's
    positioning within the vehicle system.
  warnings: The seatId parameter must be valid for the vehicle type being used; invalid
    seat IDs can cause errors or unexpected behavior. Using this method in a loop
    without proper checks can lead to infinite loops or performance degradation.
  related:
  - Unit::GetVehicleKit
  - Unit::EnterVehicle
  - Unit::ExitVehicle
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:19:45.953902'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
