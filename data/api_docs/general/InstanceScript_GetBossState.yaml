api:
  class: InstanceScript
  method: GetBossState
  signature: EncounterState InstanceScript::GetBossState(uint32 id) const
documentation:
  brief: Retrieves the current encounter state of a specified boss within the instance.
  description: The GetBossState method is used to query the current state of a specific
    boss encounter in an instance. It returns an EncounterState enum value that indicates
    whether the boss is pending, in progress, defeated, or has been reset. This method
    is essential for managing instance logic, such as determining if a boss can be
    engaged, checking if a previous fight has been completed, or handling loot distribution
    and quest progression based on encounter outcomes. The method operates on a per-boss
    basis using the unique identifier (id) of the boss to retrieve its specific state.
  parameters: []
  returns: Returns an EncounterState enum value representing the current state of
    the specified boss encounter. Possible values include NOT_STARTED, IN_PROGRESS,
    DONE, FAILED, and others depending on the implementation. The exact meaning of
    each state depends on the specific instance and boss encounter logic.
  examples:
  - title: Check if a boss has been defeated
    code: "if (instance->GetBossState(BOSS_MARWYN) == DONE)\n{\n    // Boss has been\
      \ defeated, proceed with loot or quest logic\n    DoSomething();\n}"
    language: cpp
  - title: Use boss state to control instance progression
    code: "EncounterState state = instance->GetBossState(BOSS_SINDRAGOSA);\nswitch\
      \ (state)\n{\n    case NOT_STARTED:\n        // Allow player to engage the boss\n\
      \        break;\n    case IN_PROGRESS:\n        // Boss fight in progress, prevent\
      \ re-engagement\n        break;\n    case DONE:\n        // Boss defeated, enable\
      \ rewards and next phase\n        break;\n}"
    language: cpp
  notes: This method is typically used within instance scripts to manage encounter
    state tracking. The boss ID parameter should correspond to the unique identifier
    assigned to each boss in the specific instance. Implementation may vary between
    different instances, but generally follows a consistent pattern of tracking boss
    encounters through defined states.
  warnings: Ensure that the boss ID passed to this method is valid and corresponds
    to an actual boss in the instance. Using an invalid ID could result in undefined
    behavior or incorrect state retrieval. This method should only be called during
    appropriate game events or when the instance script is properly initialized.
  related:
  - SetBossState
  - GetBossNumber
  - IsEncounterInProgress
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T12:52:34.430261'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
