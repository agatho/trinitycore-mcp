api:
  class: KitingManager
  method: GetMinimumSafeDistance
  signature: float KitingManager::GetMinimumSafeDistance(Unit * target)
documentation:
  brief: Calculates and returns the minimum safe distance required for kiting behavior
    relative to the target unit.
  description: The GetMinimumSafeDistance method computes the smallest distance at
    which a unit can safely maintain its position while performing kiting mechanics,
    typically used in AI decision-making for ranged attackers. This value is determined
    based on factors such as the unit's attack range, the target's movement speed,
    and potential threat zones. The result helps determine whether an NPC or player
    should move closer to or farther from a target during combat. This method does
    not modify any internal state and is purely informational.
  parameters: []
  returns: A float value representing the minimum safe distance in yards. Returns
    0.0f if no valid target exists or if calculations cannot be performed due to invalid
    parameters.
  examples:
  - title: Basic Usage in AI Logic
    code: "float safeDistance = kitingManager->GetMinimumSafeDistance(targetUnit);\n\
      if (me->GetDistance(targetUnit) < safeDistance)\n{\n    // Move away from target\
      \ to maintain safety\n    me->GetMotionMaster()->MoveFleeing(targetUnit, 10.0f);\n\
      }"
    language: cpp
  - title: Using Distance for Kiting Strategy
    code: "float minDistance = kitingManager->GetMinimumSafeDistance(target);\nfloat\
      \ currentDistance = me->GetDistance(target);\nif (currentDistance < minDistance)\n\
      {\n    // Adjust movement to stay at or beyond minimum safe distance\n    Position\
      \ targetPos;\n    target->GetPosition(&targetPos);\n    Position safePos;\n\
      \    me->GetMotionMaster()->CalculateDestination(safePos, minDistance, 0.0f,\
      \ &targetPos);\n    me->GetMotionMaster()->MovePoint(0, safePos);\n}"
    language: cpp
  notes: This method assumes that the target unit is valid and accessible within the
    current context. It may rely on internal AI state or cached values for performance
    reasons. The calculation might be influenced by the unit's current combat stance,
    spell effects, or movement capabilities.
  warnings: Ensure that the target pointer passed to this method is valid before calling
    to avoid undefined behavior. If the target unit is not in the same map or has
    been destroyed, the result may be unreliable or zero.
  related:
  - GetMaximumAttackDistance
  - IsSafeToAttack
  - CalculateKitingMovement
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:02:46.462906'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
