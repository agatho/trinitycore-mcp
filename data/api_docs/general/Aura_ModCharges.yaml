api:
  class: Aura
  method: ModCharges
  signature: bool Aura::ModCharges(int32 num, AuraRemoveMode removeMode)
documentation:
  brief: Modifies the charge count of an aura, optionally removing it when charges
    are depleted.
  description: The ModCharges method adjusts the current charge count of an aura by
    the specified number. If the resulting charge count reaches zero or below and
    the removeMode parameter is set to a valid removal mode, the aura will be removed
    from the target. This method is commonly used for abilities that consume charges
    over time or through use, such as talents or buff effects with limited applications.
    The method returns true if the operation was successful and the aura state was
    updated accordingly.
  parameters:
  - name: num
    description: The number of charges to add or subtract from the current charge
      count. A positive value increases charges, while a negative value decreases
      them.
  - name: removeMode
    description: Specifies the removal mode for the aura when charges are depleted.
      This parameter determines how and under what conditions the aura is removed
      from the target.
  returns: Returns true if the charge modification was successful and the aura state
    was updated; otherwise, returns false if the operation failed or the aura could
    not be modified.
  examples:
  - title: Add Charges to an Aura
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    aura->ModCharges(2,\
      \ AURA_REMOVE_NONE); // Add 2 charges without removing the aura\n}"
    language: cpp
  - title: Remove Aura When Charges Are Depleted
    code: "Aura* aura = player->GetAura(67890);\nif (aura)\n{\n    aura->ModCharges(-1,\
      \ AURA_REMOVE_BY_DEATH); // Decrease charge by 1 and remove on death\n}"
    language: cpp
  notes: This method directly manipulates the internal charge counter of the aura.
    It's important to ensure that the aura actually supports charges before calling
    this method, as modifying non-charge-based auras may lead to undefined behavior.
    The removeMode parameter must be one of the valid AuraRemoveMode values defined
    in TrinityCore.
  warnings: Calling ModCharges on an aura that does not support charges can cause
    unexpected behavior or crashes. Always verify that the aura type supports charge
    modification before invoking this method. Additionally, improper use of the removeMode
    parameter may result in incorrect removal logic or unintended aura cleanup.
  related:
  - GetCharges
  - SetCharges
  - GetAuraDuration
  - RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T13:54:42.769612'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
