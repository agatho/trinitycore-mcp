api:
  class: Aura
  method: GetSpellInfo
  signature: const SpellInfo * Aura::GetSpellInfo() const
documentation:
  brief: Retrieves the SpellInfo structure associated with this aura, providing access
    to spell properties and data.
  description: The GetSpellInfo method returns a pointer to the SpellInfo structure
    that defines the spell behavior and properties for the aura. This method is commonly
    used in TrinityCore's spell and aura system to access detailed information about
    the spell that created or is associated with this aura instance. The returned
    SpellInfo pointer remains valid for the lifetime of the aura and provides access
    to spell attributes, effects, durations, and other spell-related data. This method
    does not perform any validation checks on the aura's internal state; it simply
    returns the cached SpellInfo reference from the aura's initialization.
  parameters: []
  returns: A constant pointer to the SpellInfo structure that defines this aura's
    spell properties. Returns nullptr if the aura was not initialized with a valid
    spell or if the spell data is no longer accessible in the global spell database.
  examples:
  - title: Accessing spell info for aura effects
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    const SpellInfo*\
      \ spellInfo = aura->GetSpellInfo();\n    if (spellInfo)\n    {\n        // Access\
      \ spell duration\n        uint32 duration = spellInfo->Duration;\n        //\
      \ Access spell effect type\n        SpellEffectType effectType = spellInfo->Effects[0].Effect;\n\
      \    }\n}"
    language: cpp
  - title: Checking aura spell properties
    code: "Unit* target = ...;\nAura* aura = target->GetAura(12345);\nif (aura &&\
      \ aura->GetSpellInfo())\n{\n    const SpellInfo* spellInfo = aura->GetSpellInfo();\n\
      \    if (spellInfo->IsPassive())\n    {\n        // Handle passive aura logic\n\
      \    }\n    else if (spellInfo->HasAttribute(SPELL_ATTR0_AURA_IS_CASTER))\n\
      \    {\n        // Handle caster-based aura effects\n    }\n}"
    language: cpp
  notes: This method is a simple getter that returns a cached reference to the SpellInfo
    structure. The returned pointer should not be modified and represents read-only
    spell data. In TrinityCore, SpellInfo objects are managed globally and remain
    valid throughout the server's lifetime. The method is thread-safe as long as the
    aura itself is not being modified concurrently.
  warnings: Be cautious when using this method in multithreaded contexts where the
    aura might be destroyed or modified simultaneously. The returned pointer may become
    invalid if the spell database is reloaded or if the aura is removed from the target.
    Always check for null returns before accessing spell properties.
  related:
  - GetSpellId
  - GetAuraType
  - GetDuration
  - GetMaxDuration
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:16:28.403966'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
