api:
  class: SmartAIMgr
  method: instance
  signature: SmartAIMgr * SmartAIMgr::instance()
documentation:
  brief: Returns the singleton instance of the SmartAIMgr class for managing AI behaviors
    in the game world.
  description: The instance() method implements the singleton pattern for the SmartAIMgr
    class, ensuring that only one instance of the manager exists throughout the application
    lifecycle. This instance is responsible for handling all SmartAI-related functionality
    including creature AI scripts, event handling, and behavior management. The method
    is thread-safe and provides access to the global SmartAI manager that coordinates
    AI behaviors across all game entities. It should be called whenever access to
    the SmartAI system is required, such as when registering new AI scripts or querying
    existing AI configurations.
  parameters: []
  returns: A pointer to the singleton instance of SmartAIMgr. The method never returns
    NULL as the singleton is guaranteed to exist during runtime.
  examples:
  - title: Accessing SmartAI Manager
    code: 'SmartAIMgr* aiManager = SmartAIMgr::instance();

      // Use aiManager to access SmartAI functionality

      CreatureAI* ai = aiManager->GetCreatureAI(creature);

      '
    language: cpp
  - title: Registering AI Script with Manager
    code: 'SmartAIMgr* aiMgr = SmartAIMgr::instance();

      // Register a new SmartAI script

      aiMgr->RegisterSmartScript(scriptId, scriptType);

      '
    language: cpp
  notes: This method follows the standard singleton pattern implementation. The SmartAIMgr
    instance is initialized during server startup and remains active throughout the
    entire runtime. It's important to note that while this method is thread-safe,
    direct access to the returned instance should be considered in a thread-safe context
    if multiple threads are involved in AI management operations.
  warnings: Do not attempt to manually delete or destroy the returned SmartAIMgr instance
    as it is managed by the singleton pattern. Calling this method repeatedly will
    always return the same instance pointer, so caching the result is recommended
    for performance reasons.
  related:
  - GetCreatureAI
  - RegisterSmartScript
  - UnregisterSmartScript
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:34:41.581881'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
