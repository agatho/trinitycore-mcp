api:
  class: Unit
  method: ModifyAuraState
  signature: void Unit::ModifyAuraState(int flag, bool apply)
documentation:
  brief: Modifies the aura state of a unit by applying or removing specified flags.
  description: The ModifyAuraState method is used to control the application or removal
    of specific aura states on a Unit object. This method allows developers to manipulate
    various game mechanics related to aura effects, such as enabling or disabling
    certain conditions like stun, root, or fear. It is commonly used in conjunction
    with other aura-related methods to manage unit behavior during combat or spell
    effects. The method operates on internal flags that represent different states
    of the unit's aura, and it can be used to modify these states based on whether
    the flag should be applied or removed.
  parameters:
  - name: flag
    description: The aura state flag to be modified. This represents a specific state
      such as stun, root, or fear that can be applied or removed from the unit.
  - name: apply
    description: Boolean value indicating whether to apply (true) or remove (false)
      the specified aura state flag.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* target = GetTarget();


      // Apply a stun aura state

      target->ModifyAuraState(FLAG_STUNNED, true);


      // Remove the stun aura state

      target->ModifyAuraState(FLAG_STUNNED, false);'
    language: cpp
  - title: Advanced usage example
    code: "// In a spell effect handler\nUnit* target = GetTarget();\n\nif (IsSpellEffect(SpellEffect_0))\
      \ {\n    // Apply root aura state\n    target->ModifyAuraState(FLAG_ROOT, true);\n\
      }\nelse {\n    // Remove root aura state\n    target->ModifyAuraState(FLAG_ROOT,\
      \ false);\n}"
    language: cpp
  notes: This method is typically used in conjunction with other methods like AddAura
    or RemoveAura to manage the state of a unit's aura. It should be used carefully
    as it can affect combat behavior and gameplay mechanics. The method is thread-safe
    when called from within the same thread, but may require synchronization if used
    across multiple threads.
  warnings: Improper use of this method can lead to incorrect aura states, which may
    result in unexpected behavior during combat or spell effects. Avoid applying flags
    that are not valid for the unit's current state or type. Also, be cautious when
    using this method with units that have multiple aura states active simultaneously.
  related:
  - AddAura
  - RemoveAura
  - GetAuraState
  - SetAuraState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:56:51.990381'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
