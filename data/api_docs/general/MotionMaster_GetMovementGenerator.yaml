api:
  class: MotionMaster
  method: GetMovementGenerator
  signature: MovementGenerator * MotionMaster::GetMovementGenerator(const std::function<bool
    (const MovementGenerator *)> & filter, MovementSlot slot) const
documentation:
  brief: Retrieves a movement generator from the motion master based on a filter condition
    and slot.
  description: This method retrieves a specific movement generator from the MotionMaster's
    internal list of movement generators. It allows filtering by a predicate function
    and specifies which slot to retrieve from. The method is used primarily for managing
    creature or player movement behavior in World of Warcraft, particularly when dealing
    with different movement types such as idle, combat, or pathing. It serves as a
    key interface for accessing movement data during runtime operations.
  parameters:
  - name: filter
    description: A std::function that takes a const MovementGenerator pointer and
      returns bool. This predicate function is used to filter which movement generator
      to retrieve from the MotionMaster's list based on specific criteria.
  - name: slot
    description: The MovementSlot enum value specifying which slot to retrieve the
      movement generator from. This typically corresponds to different movement types
      like idle, combat, or pathing.
  returns: Returns a pointer to the MovementGenerator that matches the filter criteria
    and slot. If no matching generator is found, it returns nullptr.
  examples:
  - title: Basic usage example
    code: "MovementGenerator* mg = motionMaster->GetMovementGenerator([](const MovementGenerator*\
      \ mg) {\n    return mg->GetType() == MOVEMENT_TYPE_IDLE;\n}, SLOT_IDLE);\n"
    language: cpp
  - title: Advanced usage example
    code: "auto filter = [](const MovementGenerator* mg) {\n    return mg->GetType()\
      \ == MOVEMENT_TYPE_CHASE;\n};\nMovementGenerator* mg = motionMaster->GetMovementGenerator(filter,\
      \ SLOT_CHASE);\n"
    language: cpp
  notes: This method is typically used in conjunction with other movement-related
    methods to manage creature or player behavior. It's important to note that the
    returned pointer may be nullptr if no matching generator exists, so developers
    should always check for null before using the result.
  warnings: Be cautious when using this method as it can lead to memory access issues
    if used improperly. The returned pointer should not be deleted directly, as it
    is managed by the MotionMaster internally. Also, ensure that the filter function
    doesn't modify the movement generator's state during retrieval.
  related:
  - GetMovementGenerator
  - UpdateMovement
  - AddMovementGenerator
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T03:54:15.465426'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
