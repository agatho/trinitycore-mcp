api:
  class: Object
  method: hasInvolvedQuest
  signature: bool Object::hasInvolvedQuest(uint32 param0) const
documentation:
  brief: Determines whether the object has an involved quest
  description: The hasInvolvedQuest method checks if a given object (such as a player,
    game object, or creature) has any quest that is currently active and being tracked
    by the object. This method is commonly used in quest-related logic to verify if
    a quest is in progress or has been started but not yet completed. It's particularly
    useful for determining whether a quest is currently involved in the object's quest
    log, which can be essential for quest completion checks and quest progression.
  parameters: []
  returns: Returns true if the object has an involved quest; otherwise returns false
    if no involved quest exists or if the object does not have any quests in progress.
  examples:
  - title: Basic usage example
    code: "if (player->hasInvolvedQuest(12345)) {\n    // Do something\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other quest-related methods
    such as GetQuestStatus or GetQuestCount. It's important to note that the method
    may return false if a quest has been completed but not yet removed from the player's
    quest log, which can lead to incorrect assumptions about quest status.
  warnings: Be cautious when using this method in combination with other quest-related
    functions as it may not always reflect the actual state of a quest. The method
    only checks for active quests and does not account for completed quests that might
    still be present in the player's quest log.
  related:
  - GetQuestStatus
  - GetQuestCount
  - HasQuest
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T01:41:46.146877'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
