api:
  class: ArenaTeamMgr
  method: GetArenaTeams
  signature: const ArenaTeamContainer & ArenaTeamMgr::GetArenaTeams() const
documentation:
  brief: Returns a constant reference to the container holding all arena teams in
    the server.
  description: The GetArenaTeams method provides access to the internal container
    that stores all active arena teams within the TrinityCore server. This method
    is typically used by subsystems that need to iterate through or query arena team
    data, such as the arena system, player management, or battleground handling components.
    The returned reference points to an immutable container, ensuring that external
    code cannot modify the arena team list directly. This design prevents race conditions
    and maintains data consistency across concurrent operations in a multi-threaded
    environment.
  parameters: []
  returns: A constant reference to the ArenaTeamContainer which holds all registered
    arena teams. The container is read-only and should not be modified directly by
    calling code.
  examples:
  - title: Iterating Through All Arena Teams
    code: "for (const auto& team : sArenaTeamMgr->GetArenaTeams()) {\n    ArenaTeam*\
      \ arenaTeam = team.second;\n    // Process each arena team\n    std::cout <<\
      \ \"Team Name: \" << arenaTeam->GetName() << std::endl;\n}"
    language: cpp
  - title: Finding a Specific Arena Team by ID
    code: "uint32 teamId = 12345;\nconst auto& teams = sArenaTeamMgr->GetArenaTeams();\n\
      auto it = teams.find(teamId);\nif (it != teams.end()) {\n    ArenaTeam* team\
      \ = it->second;\n    // Use the found arena team\n}"
    language: cpp
  notes: The returned container is managed internally by the ArenaTeamMgr and should
    not be modified. Modifications to arena teams should be done through appropriate
    manager methods rather than direct container manipulation. This method is thread-safe
    as it returns a constant reference to an immutable data structure.
  warnings: Do not attempt to modify the returned container directly, as this will
    lead to undefined behavior. Always use proper arena team management APIs for any
    modifications to team data or membership.
  related:
  - ArenaTeamMgr::AddArenaTeam
  - ArenaTeamMgr::RemoveArenaTeam
  - ArenaTeamMgr::GetArenaTeamById
  - ArenaTeamMgr::GetArenaTeamByCaptain
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:35:16.598018'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
