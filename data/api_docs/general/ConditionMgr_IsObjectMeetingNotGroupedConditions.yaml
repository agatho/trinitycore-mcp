api:
  class: ConditionMgr
  method: IsObjectMeetingNotGroupedConditions
  signature: bool ConditionMgr::IsObjectMeetingNotGroupedConditions(ConditionSourceType
    sourceType, uint32 entry, const WorldObject * target0, const WorldObject * target1,
    const WorldObject * target2) const
documentation:
  brief: Evaluates whether an object meets not-grouped conditions based on the specified
    source type and entry.
  description: The IsObjectMeetingNotGroupedConditions method determines if a given
    WorldObject satisfies a set of conditions that are not tied to group membership.
    This function is typically used in game mechanics where certain actions or events
    should only occur when specific criteria are met, regardless of whether the object
    is part of a group. The method checks against condition lists defined in the database
    for the specified source type and entry. It takes up to three target WorldObjects
    as parameters which may be used in condition evaluation logic. This function is
    crucial for implementing conditional triggers, quest requirements, and other game
    logic that depends on object states or relationships without requiring group context.
  parameters:
  - name: sourceType
    description: The type of source that the conditions are associated with. Defines
      the category of condition being evaluated (e.g., quest start/end, item use,
      spell cast).
  - name: entry
    description: The unique identifier for the specific condition entry to be checked.
      This corresponds to an entry in the condition database table.
  - name: target0
    description: First target WorldObject used in condition evaluation. Can be nullptr
      if not needed for the condition check.
  - name: target1
    description: Second target WorldObject used in condition evaluation. Can be nullptr
      if not needed for the condition check.
  - name: target2
    description: Third target WorldObject used in condition evaluation. Can be nullptr
      if not needed for the condition check.
  returns: Returns true if all not-grouped conditions for the specified source type
    and entry are met by the provided object, false otherwise.
  examples:
  - title: Check if player meets quest start conditions
    code: "if (sConditionMgr->IsObjectMeetingNotGroupedConditions(CONDITION_SOURCE_TYPE_QUEST_START,\
      \ 12345, player, nullptr, nullptr)) {\n    // Player can start the quest\n}"
    language: cpp
  - title: Evaluate spell cast conditions with multiple targets
    code: "if (sConditionMgr->IsObjectMeetingNotGroupedConditions(CONDITION_SOURCE_TYPE_SPELL_CAST,\
      \ 67890, caster, target1, target2)) {\n    // Spell can be cast\n}"
    language: cpp
  notes: This method is part of the condition system that allows flexible game logic
    implementation. The condition evaluation may involve database lookups and complex
    logic depending on the condition types defined in the database. Performance can
    be impacted by complex conditions or frequent calls, especially in high-frequency
    contexts like spell casting or quest updates.
  warnings: Ensure that all WorldObject pointers passed are valid and not null unless
    explicitly allowed by the condition system. Incorrect parameter values may lead
    to unexpected behavior or crashes. The method assumes proper initialization of
    the ConditionMgr singleton and database conditions.
  related:
  - IsObjectMeetingConditions
  - GetConditionList
  - CheckConditionList
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T15:56:58.433388'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
