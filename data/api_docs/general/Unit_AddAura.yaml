api:
  class: Unit
  method: AddAura
  signature: Aura * Unit::AddAura(const SpellInfo * spellInfo, uint32 effMask, Unit
    * target)
documentation:
  brief: Adds a spell aura to the target unit and returns a pointer to the created
    aura.
  description: The AddAura method creates and applies a spell aura to a target unit
    based on the provided SpellInfo and effect mask. It is commonly used in World
    of Warcraft TrinityCore for applying buffs, debuffs, or other magical effects
    to units. The method handles the creation, initialization, and application of
    the aura while respecting the game mechanics such as stacking rules, duration,
    and visual effects. This method is typically called internally by the core system
    when spell effects are applied, and it returns a pointer to the newly created
    aura object which can be used for further manipulation or tracking.
  parameters:
  - name: spellInfo
    description: Pointer to the SpellInfo structure that defines the spell being applied.
      This contains information about the spell such as its ID, effects, duration,
      and visual components.
  - name: effMask
    description: Bitmask representing which effects of the spell are being applied.
      This determines which effect(s) from the spell will be active in the aura.
  - name: target
    description: Pointer to the target unit that will receive the aura. This is typically
      the unit being affected by the spell, such as a player or creature.
  returns: Returns a pointer to the newly created Aura object. If the aura creation
    fails or if the target is invalid, it may return nullptr. The returned pointer
    allows further manipulation of the aura, such as checking its duration, effect,
    or removing it from the target.
  examples:
  - title: Basic Usage Example
    code: "Aura* aura = unit->AddAura(spellInfo, effMask, target);\nif (aura)\n{\n\
      \    // Use the aura for further processing\n}"
    language: cpp
  - title: Advanced Usage Example
    code: "Aura* aura = unit->AddAura(spellInfo, EFFECT_MASK_ALL, target);\nif (aura\
      \ && aura->GetSpellInfo())\n{\n    // Check if the aura is valid and get its\
      \ spell info\n}"
    language: cpp
  notes: The method internally handles the creation of the aura object based on the
    provided parameters. It ensures that the aura is properly initialized with correct
    effect mask, duration, and visual effects. Performance considerations include
    the overhead of creating and applying multiple auras simultaneously. Thread safety
    depends on the context in which it's called; typically, this method should be
    used within thread-safe contexts or with proper synchronization.
  warnings: Care must be taken when using this method because improper use can lead
    to memory leaks or incorrect aura application. The target unit must be valid and
    not null; otherwise, the method will return nullptr. Also, if multiple effects
    are applied simultaneously, it may cause conflicts in stacking rules depending
    on the spell's behavior.
  related:
  - AddAura
  - RemoveAura
  - GetAura
  - HasAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:34:45.006466'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
