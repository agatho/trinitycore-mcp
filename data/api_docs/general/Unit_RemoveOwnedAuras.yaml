api:
  class: Unit
  method: RemoveOwnedAuras
  signature: void Unit::RemoveOwnedAuras(uint32 spellId, const int & check, int removeMode)
documentation:
  brief: Removes all auras owned by the unit that match the specified spell ID.
  description: The RemoveOwnedAuras method removes all aura applications associated
    with a specific spell ID from the unit's aura list. This method is commonly used
    in World of Warcraft TrinityCore to manage spell effects and their durations on
    units, particularly when dealing with spell mechanics such as removing debuffs,
    buffs, or other aura effects. It ensures that any active aura matching the given
    spell ID is cleared from the unit's aura list, which can be crucial for maintaining
    game balance and preventing unintended side effects during gameplay.
  parameters:
  - name: spellId
    description: The unique identifier of the spell whose auras should be removed.
      This parameter determines which specific aura applications are cleared from
      the unit's aura list.
  - name: check
    description: An integer value that specifies whether to check for specific aura
      properties or conditions before removal. The exact meaning depends on implementation
      but typically controls how strictly the removal is applied.
  - name: removeMode
    description: The mode of removal, which can be used to specify different types
      of aura removal behavior such as full removal, partial removal, or specific
      removal conditions.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* target = player->GetTarget();


      // Remove all auras matching spell ID 12345

      target->RemoveOwnedAuras(12345, 0, 0);'
    language: cpp
  - title: Advanced usage example
    code: 'Unit* target = player->GetTarget();


      // Remove all auras matching spell ID 12345 with specific check and remove mode

      target->RemoveOwnedAuras(12345, 1, 2);'
    language: cpp
  notes: This method is typically used in conjunction with other aura management functions
    to ensure proper spell handling. Performance considerations include avoiding unnecessary
    removals when the unit already has no matching auras. Thread safety depends on
    whether the unit's aura list is accessed concurrently by multiple threads.
  warnings: Improper use of this method can lead to incorrect removal of auras, potentially
    causing game balance issues or unintended behavior. Care should be taken when
    specifying the check and removeMode parameters to ensure correct application of
    removal logic.
  related:
  - RemoveAuras
  - RemoveAura
  - AddAura
  - GetAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:32:46.984964'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
