api:
  class: WorldObject
  method: GetNameForLocaleIdx
  signature: std::string WorldObject::GetNameForLocaleIdx(LocaleConstant param0) const
documentation:
  brief: Returns the localized name of the WorldObject for the specified locale index.
  description: The GetNameForLocaleIdx method retrieves the name of a WorldObject
    (such as a player, creature, or game object) in the language corresponding to
    the provided locale constant. This method is used internally by the TrinityCore
    server to support localization of object names across different client languages.
    The returned string represents the localized version of the object's name, which
    may differ based on the locale specified. This method does not perform any validation
    on the input parameter and assumes that the provided LocaleConstant is valid.
    If no localized name exists for the given locale, it typically falls back to the
    default English name.
  parameters:
  - name: param0
    description: The locale constant specifying which language version of the name
      to retrieve. Valid values are defined in the LocaleConstant enum, such as LOCALE_en,
      LOCALE_ko, LOCALE_fr, etc.
  returns: A std::string containing the localized name of the WorldObject for the
    specified locale. If no localized version exists, it returns the default English
    name.
  examples:
  - title: Retrieve localized name for a creature
    code: 'Creature* creature = ...;

      std::string name = creature->GetNameForLocaleIdx(LOCALE_fr); // Gets French
      name

      printf("French name: %s\n", name.c_str());'
    language: cpp
  - title: Get localized name for a player object
    code: "Player* player = ...;\nstd::string playerName = player->GetNameForLocaleIdx(LOCALE_de);\
      \ // Gets German name\nif (!playerName.empty()) {\n    printf(\"German player\
      \ name: %s\\n\", playerName.c_str());\n}"
    language: cpp
  notes: This method relies on the internal localization system of TrinityCore and
    assumes that localization data has been properly loaded for the requested locale.
    The method is typically used in conjunction with other WorldObject methods to
    provide multilingual support in game UI elements, chat messages, or database queries.
  warnings: Ensure that the LocaleConstant passed as parameter is valid; passing an
    invalid locale may result in undefined behavior or incorrect fallbacks. This method
    should not be called on objects that do not have a name defined, as it might return
    empty strings or unexpected results.
  related:
  - GetName
  - GetLocaleName
  - GetEntry
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:56:12.487685'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
