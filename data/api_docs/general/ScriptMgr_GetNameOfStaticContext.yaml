api:
  class: ScriptMgr
  method: GetNameOfStaticContext
  signature: const std::string & ScriptMgr::GetNameOfStaticContext()
documentation:
  brief: Returns the name of the current static script context.
  description: The GetNameOfStaticContext method retrieves the string identifier associated
    with the currently active static script context within the TrinityCore scripting
    system. This context is typically used to determine which script environment or
    module is currently executing, particularly in scenarios involving static script
    bindings or global script states. The returned name can be used for debugging,
    logging, or identifying the execution context of script-related operations. This
    method does not require any parameters and always returns a valid string reference
    representing the current context's name.
  parameters: []
  returns: A constant reference to a std::string containing the name of the current
    static script context. The string is guaranteed to be valid and non-empty during
    active script execution.
  examples:
  - title: Basic Usage
    code: "void MyScriptFunction()\n{\n    const std::string& contextName = ScriptMgr::GetNameOfStaticContext();\n\
      \    sLog->outString(\"Current script context: %s\", contextName.c_str());\n\
      }"
    language: cpp
  - title: Debugging Context
    code: "class MyScriptHandler\n{\npublic:\n    void OnEvent()\n    {\n        std::string\
      \ context = ScriptMgr::GetNameOfStaticContext();\n        if (context == \"\
      PlayerScript\")\n        {\n            // Handle player-specific logic\n  \
      \      }\n        else if (context == \"CreatureScript\")\n        {\n     \
      \       // Handle creature-specific logic\n        }\n    }\n};"
    language: cpp
  notes: This method is primarily intended for internal use within the TrinityCore
    scripting framework. The returned string name may vary depending on how scripts
    are initialized and loaded, typically reflecting the script type or module name.
    It's recommended to cache this value if it's accessed frequently during performance-critical
    code paths.
  warnings: The returned reference points to an internal static string managed by
    the ScriptMgr. While it is safe to use in most contexts, avoid storing references
    to it beyond the scope where the context remains valid, as the underlying string
    may be reused or modified by subsequent script operations.
  related:
  - GetScriptMgr
  - IsStaticContextActive
  - SetStaticContext
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:48:37.339350'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
