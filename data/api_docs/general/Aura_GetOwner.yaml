api:
  class: Aura
  method: GetOwner
  signature: WorldObject * Aura::GetOwner() const
documentation:
  brief: Returns the WorldObject that owns this aura instance.
  description: The GetOwner method retrieves the WorldObject to which the aura is
    attached. In the context of TrinityCore's World of Warcraft emulation, auras are
    effects that can be applied to various game objects such as players, creatures,
    or game objects. This method provides access to the object that the aura is currently
    bound to, allowing for interaction with the owner's properties or state. The returned
    pointer may be null if the aura has been removed from its owner or if the owner
    has been destroyed.
  parameters: []
  returns: A pointer to the WorldObject that owns this aura, or nullptr if the aura
    is not associated with any valid owner.
  examples:
  - title: Basic Usage
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    WorldObject* owner\
      \ = aura->GetOwner();\n    if (owner)\n    {\n        // Use owner for further\
      \ operations\n        sLog->outString(\"Aura owner type: %u\", owner->GetTypeId());\n\
      \    }\n}"
    language: cpp
  - title: Checking Owner Type
    code: "Aura* aura = unit->GetAura(67890);\nif (aura)\n{\n    WorldObject* owner\
      \ = aura->GetOwner();\n    if (owner && owner->IsPlayer())\n    {\n        Player*\
      \ player = owner->ToPlayer();\n        // Perform player-specific operations\n\
      \        player->ModifyMoney(100);\n    }\n}"
    language: cpp
  notes: The returned WorldObject pointer is valid only as long as the owner object
    remains alive. If the owner is destroyed or removed from the world, subsequent
    calls to GetOwner may return a null pointer. This method does not perform any
    reference counting or memory management; it simply returns a stored pointer.
  warnings: Be cautious when using the returned pointer without checking for null
    values, as accessing a destroyed object can lead to crashes. Also, ensure that
    the aura is still valid before calling GetOwner, since an aura may be removed
    from its owner during execution of other code paths.
  related:
  - GetCaster
  - GetAuraEffect
  - IsRemoved
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:17:29.636976'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
