api:
  class: Aura
  method: GetType
  signature: AuraObjectType Aura::GetType() const
documentation:
  brief: Returns the type identifier of the aura object.
  description: The GetType method retrieves the AuraObjectType enumeration value that
    represents the specific type of this aura instance. This allows code to determine
    whether the aura is a passive, temporary, or permanent effect, among other classifications.
    The returned value can be used for conditional logic to handle different aura
    behaviors or to filter auras by their type in various game systems such as spell
    casting, aura application, or removal routines.
  parameters: []
  returns: An AuraObjectType enumeration value indicating the specific type of this
    aura instance. Possible values include but are not limited to AURA_TYPE_PASSIVE,
    AURA_TYPE_TEMPORARY, and AURA_TYPE_PERMANENT, depending on how the aura was applied
    and its intended behavior within the TrinityCore framework.
  examples:
  - title: Basic Type Check
    code: "Aura* aura = player->GetAura(12345);\nif (aura && aura->GetType() == AURA_TYPE_TEMPORARY)\n\
      {\n    // Handle temporary aura logic\n}"
    language: cpp
  - title: Filtering Auras by Type
    code: "std::vector<Aura*> temporaryAuras;\nfor (auto& aura : player->GetAuraList())\n\
      {\n    if (aura->GetType() == AURA_TYPE_TEMPORARY)\n    {\n        temporaryAuras.push_back(aura);\n\
      \    }\n}"
    language: cpp
  notes: This method is a constant getter and does not modify the aura state. It's
    commonly used in aura management systems to distinguish between different kinds
    of effects for processing or display purposes.
  warnings: null
  related:
  - GetAuraType
  - IsPassive
  - IsTemporary
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:15:10.188410'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
