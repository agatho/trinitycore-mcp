api:
  class: Player
  method: EquipItem
  signature: Item * Player::EquipItem(uint16 pos, Item * pItem, bool update)
documentation:
  brief: Equips an item to the specified slot on the player.
  description: The EquipItem method allows a player to equip an item to a specific
    inventory slot. It handles the necessary game mechanics such as updating the player's
    equipment state, modifying attributes, and potentially triggering visual changes
    in the player's appearance. The method returns the item that was previously in
    the slot, if any, allowing for proper handling of item replacement. This method
    is commonly used during item creation, quest completion, or when applying items
    from inventory to the player's equipment.
  parameters:
  - name: pos
    description: The inventory slot position where the item should be equipped. This
      can be a bag slot or an equipment slot such as head, chest, hands, etc.
  - name: pItem
    description: Pointer to the Item object that will be equipped. This must be a
      valid item with proper data and cannot be null.
  - name: update
    description: Boolean flag indicating whether to update the player's equipment
      state. If true, the method will perform necessary updates such as recalculating
      stats and updating visual appearance.
  returns: Returns a pointer to the item that was previously in the slot, or nullptr
    if no item was equipped at that position before.
  examples:
  - title: Basic usage example
    code: Item* oldItem = player->EquipItem(12, new_item, true);
    language: cpp
  - title: Advanced usage example with item replacement
    code: "Item* oldItem = player->EquipItem(EQUIPMENT_SLOT_HEAD, item, true);\nif\
      \ (oldItem)\n{\n    player->RemoveItemFromInventory(oldItem);\n}"
    language: cpp
  notes: This method is typically used internally by the TrinityCore system when handling
    item equipping. It's important to note that this method does not actually move
    items between inventories; it merely updates the player's equipment state and
    returns the old item if present. The method may trigger visual changes in the
    player's appearance depending on the item being equipped.
  warnings: The method may cause issues if used incorrectly with invalid item pointers
    or slot positions. It is crucial to ensure that the item being equipped is valid
    and that the slot position corresponds to a valid equipment slot. Failure to do
    so can result in undefined behavior or crashes.
  related:
  - Player::RemoveItemFromInventory
  - Player::AddItemToInventory
  - Player::SetInventorySlot
  - Player::GetItemByPos
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T00:51:00.292981'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
