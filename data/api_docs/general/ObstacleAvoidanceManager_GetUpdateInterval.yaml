api:
  class: ObstacleAvoidanceManager
  method: GetUpdateInterval
  signature: uint32 ObstacleAvoidanceManager::GetUpdateInterval() const
documentation:
  brief: Returns the update interval in milliseconds used by the obstacle avoidance
    manager for pathfinding calculations.
  description: The GetUpdateInterval method retrieves the time interval, measured
    in milliseconds, at which the ObstacleAvoidanceManager performs its obstacle detection
    and path adjustment calculations. This value determines how frequently the AI
    system evaluates potential obstacles and recalculates movement paths to avoid
    them. The update interval is crucial for balancing performance and responsiveness
    of NPC movement behavior in the game world. A shorter interval provides more responsive
    but computationally expensive avoidance, while a longer interval reduces CPU usage
    but may result in less smooth navigation.
  parameters: []
  returns: A uint32 value representing the update interval in milliseconds. This indicates
    how often the obstacle avoidance system should perform its calculations and adjustments
    during NPC movement.
  examples:
  - title: Basic Usage to Check Update Interval
    code: 'ObstacleAvoidanceManager* manager = player->GetMovementInterface()->GetObstacleAvoidanceManager();

      uint32 interval = manager->GetUpdateInterval();

      TC_LOG_INFO("misc", "Obstacle avoidance update interval: %u ms", interval);'
    language: cpp
  - title: Using Update Interval for Performance Monitoring
    code: "void CheckMovementPerformance(Player* player)\n{\n    ObstacleAvoidanceManager*\
      \ manager = player->GetMovementInterface()->GetObstacleAvoidanceManager();\n\
      \    uint32 interval = manager->GetUpdateInterval();\n    \n    if (interval\
      \ > 100)\n    {\n        TC_LOG_WARN(\"misc\", \"High obstacle avoidance update\
      \ interval detected: %u ms\", interval);\n    }\n}"
    language: cpp
  notes: This method is typically called during AI tick processing to determine how
    frequently obstacle avoidance calculations should occur. The returned value may
    be modified by configuration settings or runtime adjustments in the TrinityCore
    server. The update interval directly impacts CPU usage of movement AI systems,
    especially for groups of moving NPCs.
  warnings: Modifying the update interval through external means may cause unexpected
    behavior in NPC movement patterns. The interval should not be set too low (below
    10ms) as it could overwhelm the server's processing capabilities and cause performance
    degradation.
  related:
  - SetUpdateInterval
  - GetMovementSpeed
  - IsObstacleAvoidanceEnabled
metadata:
  confidence: 0.92
  generated_at: '2025-10-31T21:20:00.126950'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
