api:
  class: BotLevelManager
  method: SetMaxBotsPerUpdate
  signature: void BotLevelManager::SetMaxBotsPerUpdate(uint32 maxBots)
documentation:
  brief: Sets the maximum number of bots that can be updated in a single iteration.
  description: The SetMaxBotsPerUpdate method configures the upper limit on how many
    bot instances can be processed during one update cycle. This parameter is crucial
    for performance management, particularly in environments with a large number of
    bots, as it helps control CPU usage and prevents excessive resource consumption
    during bot updates. The value set here directly influences the frequency and intensity
    of bot processing tasks within the TrinityCore framework.
  parameters:
  - name: maxBots
    description: The maximum number of bots to process per update cycle. Valid values
      are positive integers. Setting this value too high may cause performance degradation,
      while setting it too low may result in delayed bot behavior updates.
  returns: null
  examples:
  - title: Setting Maximum Bots Per Update
    code: BotLevelManager::instance()->SetMaxBotsPerUpdate(50);
    language: cpp
  - title: Adjusting Bot Update Limit for Performance
    code: 'uint32 botsPerUpdate = 100;

      BotLevelManager::instance()->SetMaxBotsPerUpdate(botsPerUpdate);'
    language: cpp
  notes: This method is typically used in conjunction with other bot management settings
    to fine-tune performance. It's recommended to test different values under various
    load conditions to determine optimal settings for your specific server configuration.
  warnings: Setting this value too high may cause significant lag or server instability,
    especially on low-end hardware or servers with many active bots. Ensure that the
    value is appropriate for your server's capabilities and expected bot population.
  related:
  - GetMaxBotsPerUpdate
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T01:51:01.752423'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
