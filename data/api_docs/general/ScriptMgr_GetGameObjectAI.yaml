api:
  class: ScriptMgr
  method: GetGameObjectAI
  signature: GameObjectAI * ScriptMgr::GetGameObjectAI(GameObject * go)
documentation:
  brief: Retrieves the AI instance associated with a game object.
  description: The GetGameObjectAI method is used to obtain the GameObjectAI instance
    that controls the behavior of a specific game object. This method is typically
    called during the initialization or update cycle of game objects to access their
    AI functionality. The returned pointer can be used to interact with the object's
    AI logic, such as triggering events, checking states, or modifying behaviors.
    It is important to note that this method may return nullptr if no AI has been
    assigned to the game object, which should be handled appropriately by calling
    code.
  parameters: []
  returns: A pointer to the GameObjectAI instance associated with the specified game
    object. Returns nullptr if no AI is assigned to the object or if the input GameObject
    pointer is invalid.
  examples:
  - title: Basic Usage
    code: "GameObject* go = ...; // Assume this is a valid GameObject\nGameObjectAI*\
      \ ai = ScriptMgr::GetGameObjectAI(go);\nif (ai)\n{\n    // Use the AI instance\n\
      \    ai->UpdateAI(1000); // Update AI with 1 second elapsed time\n}"
    language: cpp
  - title: Checking for Valid AI Before Usage
    code: "GameObject* go = ...; // Assume this is a valid GameObject\nGameObjectAI*\
      \ ai = ScriptMgr::GetGameObjectAI(go);\nif (ai != nullptr)\n{\n    // Safe to\
      \ use the AI\n    if (ai->IsInCombat())\n    {\n        // Handle combat logic\n\
      \    }\n}\nelse\n{\n    // No AI assigned - handle accordingly\n}"
    language: cpp
  notes: This method is part of TrinityCore's scripting system and relies on proper
    registration of GameObjectAI instances. The returned GameObjectAI pointer should
    not be deleted or managed manually as it is handled by the core game engine. Ensure
    that the GameObject parameter is valid and has been properly initialized before
    calling this method.
  warnings: Calling this method with a null GameObject pointer will likely result
    in undefined behavior or crashes. Always validate the GameObject pointer before
    invoking this method. Additionally, be cautious when storing references to the
    returned GameObjectAI instance across multiple frames, as the AI instance might
    be destroyed or replaced during gameplay.
  related:
  - GetCreatureAI
  - GetUnitAI
  - RegisterGameObjectAI
  - CreateGameObjectAI
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:49:07.806777'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
