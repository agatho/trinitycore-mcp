api:
  class: InstanceScript
  method: ~InstanceScript
  signature: void InstanceScript::~InstanceScript()
documentation:
  brief: Destroys an InstanceScript object and performs necessary cleanup operations.
  description: The destructor for the InstanceScript class is responsible for cleaning
    up all resources associated with the instance script. This includes releasing
    any allocated memory, unregistering from game systems, and ensuring that all tracked
    objects are properly destroyed. In the context of TrinityCore's World of Warcraft
    emulation, this destructor ensures that when an instance of a dungeon or raid
    ends, all related data structures and callbacks are properly disposed of to prevent
    memory leaks and maintain system stability. The destructor is automatically invoked
    when the instance script object goes out of scope or is explicitly deleted.
  parameters: []
  returns: null
  examples:
  - title: Automatic destruction of InstanceScript
    code: "class MyInstanceScript : public InstanceScript {\npublic:\n    MyInstanceScript(Map*\
      \ map) : InstanceScript(map) {}\n    ~MyInstanceScript() override {\n      \
      \  // Custom cleanup code\n    }\n};\n\nvoid SomeFunction() {\n    MyInstanceScript*\
      \ script = new MyInstanceScript(someMap);\n    // ... use the script ...\n \
      \   delete script; // Destructor called here\n}"
    language: cpp
  notes: The InstanceScript destructor is typically not called directly by user code.
    It's automatically invoked when the instance script object is destroyed, either
    through normal scope exit or explicit deletion. Developers should ensure that
    any custom cleanup in derived classes properly calls the base class destructor
    using 'InstanceScript::~InstanceScript()' if needed.
  warnings: null
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T03:54:15.173871'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
