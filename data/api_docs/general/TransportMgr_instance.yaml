api:
  class: TransportMgr
  method: instance
  signature: TransportMgr * TransportMgr::instance()
documentation:
  brief: Returns the singleton instance of the TransportMgr class
  description: The instance() method implements the singleton pattern for the TransportMgr
    class, providing global access to the transport management system. This system
    handles all transport-related functionality in TrinityCore, including managing
    transport vehicles, their movement, and interactions with players and creatures.
    The method ensures that only one instance of TransportMgr exists throughout the
    server's lifetime, making it a central point for transport-related operations.
    It is typically called during server initialization or when needing to access
    transport management features from various parts of the codebase.
  parameters: []
  returns: A pointer to the singleton instance of TransportMgr. The method never returns
    NULL as the singleton is guaranteed to be initialized during server startup.
  examples:
  - title: Accessing Transport Manager
    code: 'TransportMgr* transportMgr = TransportMgr::instance();

      // Use transportMgr to access transport-related functionality

      WorldSafeLocsEntry const* safeLoc = transportMgr->GetDefaultTransportLocation();'
    language: cpp
  - title: Using Transport Manager in Event Handler
    code: "void OnPlayerEnterTransport(Player* player, Transport* transport)\n{\n\
      \    TransportMgr* mgr = TransportMgr::instance();\n    // Access transport\
      \ data through the singleton\n    if (mgr && transport)\n    {\n        // Perform\
      \ transport-specific operations\n        mgr->AddPassengerToTransport(transport,\
      \ player);\n    }\n}"
    language: cpp
  notes: This method is thread-safe as it's a simple singleton getter. The TransportMgr
    instance is initialized during server startup before any game threads begin processing.
    Developers should be aware that accessing this singleton from different threads
    requires proper synchronization if the returned instance's methods are not thread-safe
    themselves.
  warnings: While the singleton pattern ensures only one instance exists, developers
    should avoid storing references to the TransportMgr instance in long-lived objects
    as it may lead to issues during server shutdown. Also, be cautious when using
    this method in contexts where the server might not have fully initialized transport
    systems yet.
  related:
  - GetTransport
  - AddTransport
  - RemoveTransport
  - UpdateTransports
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T20:11:49.586114'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
