api:
  class: Unit
  method: _TryStackingOrRefreshingExistingAura
  signature: Aura * Unit::_TryStackingOrRefreshingExistingAura(AuraCreateInfo & createInfo)
documentation:
  brief: Attempts to stack or refresh an existing aura with the specified createInfo.
  description: This method handles the process of either stacking an existing aura
    with the same spell ID or refreshing it if it already exists on the unit. It is
    commonly used in combat situations where a player's aura needs to be updated or
    increased in duration and stack count. The method checks for existing auras, determines
    whether to increment the stack count or refresh the duration, and returns the
    resulting aura object. This functionality is essential for maintaining proper
    spell mechanics during combat and periodic effects.
  parameters: []
  returns: Returns a pointer to the updated Aura object if the operation was successful,
    or nullptr if no existing aura was found or the stacking/refreshing process failed.
  examples:
  - title: Basic usage example
    code: "Aura* aura = unit->_TryStackingOrRefreshingExistingAura(createInfo);\n\
      if (aura)\n{\n    // Handle the updated aura\n}"
    language: cpp
  notes: This method is typically used in conjunction with spell effects and combat
    mechanics. It may be called during periodic tick events or when applying new auras
    to ensure proper stacking behavior. Performance considerations include checking
    for existing auras before attempting to stack them, which can impact efficiency
    if done frequently.
  warnings: The method may return nullptr if no existing aura is found, so developers
    should always check for null before using the returned pointer. Also, this method
    does not handle all possible aura types; it's primarily used for stacking or refreshing
    specific types of auras.
  related: []
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T19:59:35.138921'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
