api:
  class: SceneObject
  method: BuildValuesUpdateForPlayerWithMask
  signature: void SceneObject::BuildValuesUpdateForPlayerWithMask(int * data, const
    int & requestedObjectMask, const int & requestedSceneObjectMask, const int * target)
    const
documentation:
  brief: Populates update data for a scene object with specified masks for a target
    player.
  description: The BuildValuesUpdateForPlayerWithMask method constructs and fills
    update data for a SceneObject, applying specific object and scene object masks
    to determine which fields should be included in the update packet sent to a particular
    player. This method is typically used during player login or when objects enter
    a player's visibility range to ensure that only relevant data is transmitted.
    It allows for efficient network usage by selectively including object properties
    based on the provided masks. The method operates on internal data structures and
    modifies the provided data buffer according to the specified parameters.
  parameters:
  - name: data
    description: Pointer to an integer array where the update data will be written.
      This buffer must be pre-allocated with sufficient space to hold all relevant
      update fields.
  - name: requestedObjectMask
    description: An integer mask specifying which object fields should be included
      in the update packet. Each bit corresponds to a specific field in the object's
      update data structure.
  - name: requestedSceneObjectMask
    description: An integer mask specifying which scene object fields should be included
      in the update packet. Similar to the object mask, this determines which scene-specific
      properties are sent.
  - name: target
    description: Pointer to the target player's data structure or identifier. Used
      to determine how the update data should be adjusted based on the player's perspective
      or state.
  returns: null
  examples:
  - title: Basic usage for updating a scene object with specific masks
    code: 'int updateData[100];

      int objectMask = 0x0001;

      int sceneObjectMask = 0x0002;

      Player* targetPlayer = player;

      sceneObject->BuildValuesUpdateForPlayerWithMask(updateData, objectMask, sceneObjectMask,
      reinterpret_cast<const int*>(targetPlayer));'
    language: cpp
  notes: This method is part of the TrinityCore's update system and is crucial for
    maintaining efficient communication between server and client. The masks are typically
    defined in the game's update field definitions. Ensure that the data buffer pointed
    to by 'data' is large enough to accommodate all fields specified by the masks.
  warnings: Incorrectly setting the masks may result in incomplete or invalid updates
    being sent to clients, potentially causing visual glitches or desynchronization.
    The target parameter must point to a valid player object; otherwise, undefined
    behavior may occur.
  related:
  - BuildValuesUpdateForPlayer
  - BuildOutOfRangeUpdate
  - BuildCreateUpdateBlockForPlayer
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T23:10:26.182312'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
