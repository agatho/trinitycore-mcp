api:
  class: PlayerbotGroupManager
  method: CanJoinGroup
  signature: bool PlayerbotGroupManager::CanJoinGroup(Player * player, uint32 groupId,
    GroupRole role)
documentation:
  brief: Determines whether a player can join a specified group with the given role.
  description: The CanJoinGroup method evaluates if a player is eligible to join a
    particular group based on various game rules and restrictions. It checks factors
    such as group size limits, role availability, player status (e.g., being in another
    group), and other relevant conditions that govern group formation in TrinityCore's
    playerbot system. This method is typically used before attempting to add a player
    to a group to prevent invalid or disruptive group configurations.
  parameters:
  - name: player
    description: Pointer to the Player object that is attempting to join the group.
      Must be a valid player instance.
  - name: groupId
    description: Unique identifier of the target group the player wishes to join.
      Used to locate and validate the group's current state.
  - name: role
    description: The GroupRole enum value indicating the role the player intends to
      take within the group. Determines if that role is available for assignment.
  returns: Returns true if the player can successfully join the specified group with
    the given role, otherwise false. A return of false may indicate that the group
    is full, the role is already occupied, or the player is ineligible due to game
    rules.
  examples:
  - title: Check if a player can join a group
    code: "if (botGroupManager->CanJoinGroup(player, groupId, GROUP_ROLE_TANK)) {\n\
      \    // Proceed with joining logic\n    botGroupManager->JoinGroup(player, groupId,\
      \ GROUP_ROLE_TANK);\n} else {\n    // Handle inability to join\n    player->GetSession()->SendNotification(\"\
      Cannot join group at this time.\");\n}"
    language: cpp
  notes: This method is part of the playerbot AI system and should only be called
    in contexts where group management logic is required. It does not perform any
    actual joining; it merely evaluates eligibility.
  warnings: Ensure that the provided player pointer is valid and not null before calling
    this method, as passing an invalid pointer may lead to undefined behavior or crashes.
  related:
  - JoinGroup
  - LeaveGroup
  - GetGroupForPlayer
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:25:18.402035'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
