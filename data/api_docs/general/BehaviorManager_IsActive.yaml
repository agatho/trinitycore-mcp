api:
  class: BehaviorManager
  method: IsActive
  signature: bool BehaviorManager::IsActive() const
documentation:
  brief: Checks whether the behavior manager is currently active and processing behaviors
  description: The IsActive method determines if the BehaviorManager instance is in
    an active state where it processes and executes AI behaviors. This method typically
    checks internal flags or state variables that indicate whether the manager has
    been initialized, enabled, and is actively running its behavior update loop. The
    return value can be used to conditionally execute code based on the manager's
    operational status, ensuring that behavior-related operations are only performed
    when the system is ready to handle them. This is particularly important in TrinityCore's
    AI framework where multiple behavior managers may exist for different NPC types
    or scenarios.
  parameters: []
  returns: Returns true if the BehaviorManager is currently active and processing
    behaviors, false otherwise. The method returns false when the manager has been
    disabled, uninitialized, or is in a shutdown state.
  examples:
  - title: Basic usage to check behavior manager status
    code: "if (behaviorManager->IsActive())\n{\n    // Perform behavior-related operations\n\
      \    behaviorManager->UpdateAI(timeDiff);\n}"
    language: cpp
  - title: Conditional behavior execution based on manager state
    code: "void NPCAI::UpdateAI(uint32 diff)\n{\n    if (!me->IsInCombat() && behaviorManager->IsActive())\n\
      \    {\n        // Only update behaviors when not in combat and manager is active\n\
      \        behaviorManager->UpdateBehaviors(diff);\n    }\n}"
    language: cpp
  notes: This method performs a simple state check and should have minimal performance
    impact. The active state typically depends on whether the manager has been properly
    initialized and not marked for deletion or shutdown. In TrinityCore's AI architecture,
    this method is commonly used in update loops to prevent operations on inactive
    managers.
  warnings: Be cautious when relying on this method's return value in time-critical
    code paths as it may affect performance if called excessively. Also, ensure that
    behavior managers are properly initialized before calling IsActive() to avoid
    unexpected false returns due to incomplete setup.
  related:
  - BehaviorManager::Initialize
  - BehaviorManager::SetEnabled
  - BehaviorManager::IsInitialized
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T17:38:56.948849'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
