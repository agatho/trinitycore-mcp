api:
  class: WorldObject
  method: MovePosition
  signature: void WorldObject::MovePosition(Position & pos, float dist, float angle,
    float maxHeightChange) const
documentation:
  brief: Moves a WorldObject to a specified position relative to its current location.
  description: The MovePosition method calculates and sets a new position for a WorldObject
    based on distance, angle, and optional height change from its current location.
    It is commonly used in pathfinding and movement calculations for NPCs or players
    within the TrinityCore framework. This method allows for precise control over
    object positioning while considering movement constraints such as terrain elevation
    changes. The operation modifies the provided Position object with the calculated
    coordinates.
  parameters:
  - name: pos
    description: Reference to a Position object that will be updated with the new
      calculated coordinates after movement.
  - name: dist
    description: Distance in meters from the current position to move the object.
      Must be non-negative value.
  - name: angle
    description: Angle in radians relative to the object's current facing direction.
      Can be any valid angle value.
  - name: maxHeightChange
    description: Maximum height change allowed during movement, used for calculating
      elevation differences. Negative values may result in downward movement.
  returns: null
  examples:
  - title: Basic Movement Example
    code: 'Position pos;

      WorldObject* object = new WorldObject();

      object->MovePosition(pos, 10.0f, M_PI_2, 0.0f);

      // pos.x and pos.y are now set to the new coordinates

      '
    language: cpp
  - title: Advanced Movement Example with Height Change
    code: 'Position pos;

      WorldObject* object = new WorldObject();

      object->MovePosition(pos, 5.0f, 0.0f, -2.0f);

      // Calculates movement with potential height decrease

      '
    language: cpp
  notes: Implementation details include handling of coordinate systems and angle calculations;
    performance considerations involve avoiding frequent calls to this method during
    pathfinding operations. Thread safety is not guaranteed for concurrent usage in
    multi-threaded environments.
  warnings: Caution should be taken when using negative distances or angles, as these
    may lead to unexpected positioning behavior. The method does not validate whether
    the resulting position is valid or within bounds of the game world.
  related:
  - WorldObject::GetOrientation
  - WorldObject::GetPosition
  - WorldObject::MoveTo
  - WorldObject::NearbyObject
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:41:03.129741'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
