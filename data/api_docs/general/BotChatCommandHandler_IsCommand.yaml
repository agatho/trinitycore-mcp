api:
  class: BotChatCommandHandler
  method: IsCommand
  signature: bool BotChatCommandHandler::IsCommand(const std::string & message)
documentation:
  brief: Determines whether a given message is recognized as a bot chat command.
  description: The IsCommand method checks if the provided message string matches
    the pattern of a recognized bot chat command. It evaluates the input message against
    predefined command prefixes or patterns to identify if it should be processed
    as a command by the bot system. This method is typically used within the TrinityCore's
    bot framework to distinguish between regular chat messages and commands that trigger
    specific bot behaviors or actions.
  parameters:
  - name: message
    description: The input string representing a potential chat message or command.
      The method analyzes this string to determine if it conforms to a known bot command
      format.
  returns: Returns true if the message is recognized as a valid bot command; otherwise,
    returns false.
  examples:
  - title: Basic Command Check
    code: 'BotChatCommandHandler handler;

      std::string msg = "/bot follow";

      bool isCmd = handler.IsCommand(msg);

      // Returns true if "/bot" is a recognized command prefix'
    language: cpp
  - title: Non-Command Message
    code: 'BotChatCommandHandler handler;

      std::string msg = "Hello everyone!";

      bool isCmd = handler.IsCommand(msg);

      // Returns false as this is not a command message'
    language: cpp
  notes: This method likely performs pattern matching or prefix checking against registered
    bot commands. It may be case-sensitive depending on implementation and could be
    used in conjunction with other methods like ExecuteCommand() to process recognized
    messages.
  warnings: null
  related:
  - ExecuteCommand
  - RegisterCommand
  - UnregisterCommand
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:23:37.666756'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
