api:
  class: MotionMaster
  method: CalculateJumpSpeeds
  signature: void MotionMaster::CalculateJumpSpeeds(float dist, UnitMoveType moveType,
    float speedMultiplier, float minHeight, float maxHeight, float & speedXY, float
    & speedZ) const
documentation:
  brief: Calculates the X/Y and Z speed components for a jump motion based on distance,
    movement type, and height parameters.
  description: The CalculateJumpSpeeds method computes the necessary horizontal (XY)
    and vertical (Z) velocity components required to execute a jump motion over a
    specified distance. It takes into account the unit's movement type, a speed multiplier,
    and minimum/maximum height constraints to determine appropriate jump speeds. This
    method is typically used internally by the MotionMaster class when planning jump-based
    movements for units such as creatures or players. The calculated speeds are returned
    via output parameters and can be used to configure the actual jump animation or
    physics simulation. The method does not perform any direct movement but rather
    prepares the speed values needed for motion execution.
  parameters:
  - name: dist
    description: The horizontal distance (in yards) that the unit needs to travel
      during the jump.
  - name: moveType
    description: The UnitMoveType enum value indicating the type of movement being
      calculated (e.g., RUN, WALK, SWIM). This affects how speed multipliers and physics
      are applied.
  - name: speedMultiplier
    description: A scalar multiplier that adjusts the base jump speed. Values greater
      than 1 increase speed, while values less than 1 decrease it.
  - name: minHeight
    description: The minimum height (in yards) the jump must reach at its peak.
  - name: maxHeight
    description: The maximum height (in yards) the jump can reach at its peak. Must
      be greater than or equal to minHeight.
  - name: speedXY
    description: Output parameter; the calculated horizontal speed component (in yards
      per second) for the jump motion.
  - name: speedZ
    description: Output parameter; the calculated vertical speed component (in yards
      per second) for the jump motion.
  returns: null
  examples:
  - title: Basic Jump Speed Calculation
    code: 'float speedXY, speedZ;

      MotionMaster* mm = unit->GetMotionMaster();

      mm->CalculateJumpSpeeds(10.0f, RUN, 1.0f, 2.0f, 4.0f, speedXY, speedZ);

      // speedXY and speedZ now contain the calculated jump speeds'
    language: cpp
  - title: Adjusting Jump Speed with Multiplier
    code: 'float speedXY, speedZ;

      MotionMaster* mm = unit->GetMotionMaster();

      mm->CalculateJumpSpeeds(15.0f, WALK, 1.5f, 1.0f, 3.0f, speedXY, speedZ);

      // Calculates jump speeds with 1.5x speed multiplier for walking movement'
    language: cpp
  notes: This method is part of the internal motion planning system and should not
    be called directly unless implementing custom movement logic. The calculation
    assumes standard gravity physics and does not account for terrain variations or
    obstacles. It's designed to work with the TrinityCore's movement subsystem and
    may rely on engine-specific constants for jump physics.
  warnings: Ensure that maxHeight >= minHeight, otherwise the method behavior is undefined.
    Do not use this method outside of motion planning contexts as it may produce incorrect
    results if called without proper setup or context.
  related:
  - MoveJump
  - CalculateJumpTime
  - GetMotionMaster
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:45:12.027411'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
