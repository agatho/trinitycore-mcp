api:
  class: InterruptManager
  method: GetOptimalInterruptTiming
  signature: uint32 InterruptManager::GetOptimalInterruptTiming(const InterruptTarget
    & target)
documentation:
  brief: Calculates the optimal timing window for interrupting a target's spell cast.
  description: The GetOptimalInterruptTiming method determines the precise moment
    within a target's spell casting process when an interruption attempt is most likely
    to succeed. This calculation takes into account various factors such as the target's
    current cast time, remaining cast progress, and any applicable interrupt mechanics
    or abilities. The returned value represents a time interval in milliseconds that
    indicates when the optimal window for performing an interrupt action occurs. This
    method is typically used by AI systems or player actions that require precise
    timing to successfully interrupt spell casts.
  parameters: []
  returns: Returns a uint32 value representing the optimal timing window in milliseconds
    for interrupting the target's current spell cast. A value of 0 indicates no valid
    interrupt timing could be calculated, which may occur if the target is not currently
    casting or if the conditions for interruption are not met.
  examples:
  - title: Basic Interrupt Timing Calculation
    code: "InterruptTarget target;\n// Assume target is initialized with a current\
      \ spell cast\nuint32 optimalTiming = interruptManager.GetOptimalInterruptTiming(target);\n\
      if (optimalTiming > 0)\n{\n    // Proceed with interrupt action at the calculated\
      \ timing\n    printf(\"Optimal interrupt timing: %d ms\\n\", optimalTiming);\n\
      }\nelse\n{\n    // No valid timing available\n    printf(\"Cannot interrupt\
      \ at this time\\n\");\n}"
    language: cpp
  notes: This method is primarily used in combat AI logic and player interrupt mechanics.
    The calculation may vary based on the specific spell being cast, the caster's
    level, and any buffs or debuffs affecting the casting process. The returned timing
    value should be interpreted as a relative window rather than an absolute timestamp.
  warnings: The method assumes that the target parameter is properly initialized with
    valid casting state information. Calling this method without a valid target state
    may result in undefined behavior or incorrect timing calculations. Additionally,
    the timing window calculated may become invalid if the target's cast state changes
    before the interrupt action is executed.
  related:
  - InterruptManager::CanInterrupt
  - InterruptManager::InterruptTarget
  - InterruptManager::GetInterruptChance
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:32:57.896313'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
