api:
  class: BotAccountMgr
  method: GetAccountInfo
  signature: const BotAccountInfo * BotAccountMgr::GetAccountInfo(uint32 bnetAccountId)
    const
documentation:
  brief: Retrieves account information for a specified Battle.net account ID.
  description: The GetAccountInfo method fetches the BotAccountInfo structure associated
    with a given Battle.net account identifier. This method is used within the TrinityCore
    bot management system to retrieve stored information about a specific account,
    such as its configuration settings, permissions, and status flags. The returned
    pointer provides access to all relevant account data without modifying the internal
    state of the manager. This function performs a lookup operation in an internal
    data structure that maps Battle.net account IDs to their respective bot account
    information.
  parameters:
  - name: bnetAccountId
    description: The unique Battle.net account identifier for which to retrieve account
      information. This value typically corresponds to the account's numeric ID used
      by the Battle.net authentication system.
  returns: A constant pointer to a BotAccountInfo structure containing the account
    details for the specified Battle.net account ID, or nullptr if no matching account
    information is found.
  examples:
  - title: Basic Usage
    code: "const BotAccountInfo* info = botAccountMgr->GetAccountInfo(123456789);\n\
      if (info != nullptr)\n{\n    // Use the retrieved account information\n    std::cout\
      \ << \"Account name: \" << info->GetName() << std::endl;\n}"
    language: cpp
  - title: Safe Access with Null Check
    code: "uint32 accountId = 987654321;\nconst BotAccountInfo* accountInfo = botAccountMgr->GetAccountInfo(accountId);\n\
      if (accountInfo && accountInfo->IsEnabled())\n{\n    // Proceed with enabled\
      \ account operations\n    ProcessBotAccount(accountInfo);\n}\nelse\n{\n    //\
      \ Handle disabled or non-existent account\n    LOG_ERROR(\"worldserver\", \"\
      Account {} is not available or disabled.\", accountId);\n}"
    language: cpp
  notes: This method performs a hash-based lookup operation, making it efficient for
    retrieving account information. The returned pointer remains valid only as long
    as the BotAccountMgr instance exists and the account data has not been modified
    or removed. The method is thread-safe if the underlying data structure supports
    concurrent access.
  warnings: Ensure that the provided Battle.net account ID is valid before calling
    this method, as invalid IDs may result in a nullptr return value. Always check
    for null returns to prevent dereferencing invalid pointers.
  related:
  - BotAccountMgr::AddAccountInfo
  - BotAccountMgr::RemoveAccountInfo
  - BotAccountMgr::UpdateAccountInfo
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T17:33:25.185980'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
