api:
  class: WorldObject
  method: IsValidAttackTarget
  signature: bool WorldObject::IsValidAttackTarget(const WorldObject * target, const
    SpellInfo * bySpell) const
documentation:
  brief: Determines whether a target object is a valid attack target for this WorldObject,
    considering faction, visibility, and spell-specific restrictions.
  description: The IsValidAttackTarget method evaluates if a given WorldObject can
    be attacked by the current object. It checks various conditions such as faction
    relationships (friendly vs hostile), visibility status (stealth, invisibility),
    and spell-specific targeting rules. This method is crucial for determining valid
    targets in combat mechanics and is typically called before initiating an attack
    or casting a spell that requires a target. The method respects the game's concept
    of 'attackable' objects and ensures that players or creatures cannot attack invalid
    targets such as invisible units, friendly NPCs, or objects outside of their allowed
    targeting range.
  parameters:
  - name: target
    description: A pointer to the WorldObject that is being evaluated as a potential
      attack target. Must not be null.
  - name: bySpell
    description: An optional pointer to the SpellInfo structure representing the spell
      that would be used to attack the target. If provided, additional spell-specific
      targeting rules may apply.
  returns: Returns true if the target is a valid attack target; otherwise returns
    false. This includes checks for faction compatibility, visibility, and any spell
    restrictions.
  examples:
  - title: Basic usage in combat logic
    code: "if (attacker->IsValidAttackTarget(target)) {\n    attacker->Attack(target,\
      \ true);\n} else {\n    // Handle invalid target case\n}"
    language: cpp
  - title: Using with spell targeting
    code: "SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(12345);\nif (caster->IsValidAttackTarget(target,\
      \ spellInfo)) {\n    caster->CastSpell(target, spellInfo, true);\n}"
    language: cpp
  notes: This method is commonly used in AI logic and combat systems. It performs
    checks on faction relationships using the ObjectMgr system, and respects stealth/invisibility
    flags set on the target. The method may also consider line-of-sight restrictions
    depending on spell properties.
  warnings: Ensure that the target pointer is valid before calling this method to
    avoid crashes. Be aware that some spells might have special targeting rules that
    override normal faction checks.
  related:
  - WorldObject::IsHostileTo
  - WorldObject::IsFriendlyTo
  - WorldObject::IsInMap
  - WorldObject::IsWithinLOS
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T21:17:59.754866'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
