api:
  class: ObjectMgr
  method: IsValidEvent
  signature: bool ObjectMgr::IsValidEvent(uint32 eventId) const
documentation:
  brief: Validates whether the specified event ID is registered and active within
    the game world.
  description: The IsValidEvent method checks if a given event ID corresponds to a
    valid, registered event in the TrinityCore database. This function ensures that
    event IDs used in game mechanics such as holiday events, seasonal celebrations,
    or custom scripted events are properly defined and active. It performs a lookup
    in the internal event management system to confirm the existence of the event
    before returning a boolean result. The method is commonly used by other systems
    to verify event validity before executing event-specific logic or applying event-based
    modifications to game objects.
  parameters: []
  returns: Returns true if the event ID exists and is currently active in the game
    world; otherwise returns false. A return value of false may indicate that the
    event ID does not exist, has been disabled, or has expired according to its defined
    schedule.
  examples:
  - title: Basic Event Validation
    code: "if (sObjectMgr->IsValidEvent(12345)) {\n    // Proceed with event-specific\
      \ logic\n    sWorld->SendWorldText(\"Event is active!\");\n} else {\n    //\
      \ Handle invalid event ID\n    sWorld->SendWorldText(\"Invalid or inactive event.\"\
      );\n}"
    language: cpp
  - title: Using Event Validation in Quest System
    code: "uint32 eventId = player->GetQuestRewardEventId(questId);\nif (sObjectMgr->IsValidEvent(eventId))\
      \ {\n    // Apply event-based quest rewards or modifications\n    player->AddItem(ITEM_ID_EVENT_REWARD,\
      \ 1);\n} else {\n    // Fallback to standard quest reward\n    player->AddItem(ITEM_ID_STANDARD_REWARD,\
      \ 1);\n}"
    language: cpp
  notes: This method performs a database lookup and should be used judiciously in
    performance-critical code paths. The event validation is typically cached internally
    for better performance during frequent checks. Event IDs are usually defined in
    the `game_event` table of the TrinityCore database.
  warnings: Avoid calling this method excessively in tight loops or high-frequency
    update functions as it may impact performance. Ensure that event IDs passed to
    this function are properly validated before use to prevent potential runtime errors
    or unexpected behavior in event-based systems.
  related:
  - GetEventByName
  - GetEventById
  - IsEventActive
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T08:58:32.297913'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
