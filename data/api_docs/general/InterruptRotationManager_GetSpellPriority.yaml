api:
  class: InterruptRotationManager
  method: GetSpellPriority
  signature: InterruptPriority InterruptRotationManager::GetSpellPriority(uint32 spellId)
    const
documentation:
  brief: Retrieves the interrupt priority level for a specified spell ID within the
    rotation manager.
  description: The GetSpellPriority method determines and returns the interrupt priority
    of a given spell based on its unique identifier. This functionality is crucial
    for AI-driven spell selection in combat scenarios, particularly when deciding
    which spells to interrupt or prioritize during enemy actions. The method evaluates
    the spell's configuration against predefined priority levels to ensure optimal
    gameplay behavior. It operates as a constant member function, meaning it does
    not modify any internal state of the InterruptRotationManager instance. This method
    is typically used by AI systems to make informed decisions about spell casting
    and interruption strategies.
  parameters: []
  returns: Returns an InterruptPriority enum value that indicates the priority level
    assigned to the specified spell. The possible values may include LOW, MEDIUM,
    HIGH, or CRITICAL, depending on how the spell is configured within the rotation
    manager's internal priority system.
  examples:
  - title: Basic Usage Example
    code: "InterruptPriority priority = rotationManager.GetSpellPriority(12345);\n\
      if (priority == InterruptPriority::HIGH)\n{\n    // Handle high-priority interrupt\
      \ spell\n}"
    language: cpp
  - title: Integration with AI Decision Making
    code: "uint32 spellId = player->GetTarget()->GetSpellById(12345);\nInterruptPriority\
      \ priority = rotationManager.GetSpellPriority(spellId);\nif (priority >= InterruptPriority::MEDIUM)\n\
      {\n    // Cast interrupt spell\n    player->CastSpell(player, 67890, true);\n\
      }"
    language: cpp
  notes: This method relies on internal spell priority mappings that are typically
    defined in configuration files or hardcoded within the rotation manager. The implementation
    assumes that all spell IDs passed to this method have been properly registered
    with the manager. Performance is generally fast as it uses hash-based lookups
    for spell-to-priority mapping.
  warnings: Ensure that the provided spellId corresponds to a valid spell that has
    been registered with the InterruptRotationManager, otherwise undefined behavior
    may occur. The method does not validate the existence of the spell ID; it simply
    returns the priority assigned to it if found.
  related:
  - SetSpellPriority
  - GetAllSpellPriorities
  - IsInterruptSpell
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:21:08.738222'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
