api:
  class: Unit
  method: GetCreatePowerValue
  signature: int32 Unit::GetCreatePowerValue(int power) const
documentation:
  brief: Retrieves the base power value for a specified power type when the unit is
    created.
  description: The GetCreatePowerValue method returns the initial power value assigned
    to a unit for a specific power type at the time of its creation. This value is
    typically used to determine the starting amount of mana, rage, energy, or other
    power resources for creatures and players. The method takes a power type identifier
    as input and returns the corresponding base power value. This value may be modified
    by various factors such as class, level, equipment, or buffs, but represents the
    fundamental starting point for that unit's power resource.
  parameters:
  - name: power
    description: The power type identifier (e.g., POWER_MANA, POWER_RAGE, POWER_ENERGY)
      for which to retrieve the base value.
  returns: Returns the initial base power value for the specified power type. This
    value represents the starting amount of that resource when the unit was created.
    Returns 0 if an invalid power type is provided.
  examples:
  - title: Get initial mana value for a player
    code: 'Unit* player = ...;

      int32 baseMana = player->GetCreatePowerValue(POWER_MANA);

      // Returns the starting mana amount for this player at creation'
    language: cpp
  - title: Check all power types for a creature
    code: "Unit* creature = ...;\nfor (int i = 0; i < MAX_POWERS; ++i)\n{\n    int32\
      \ baseValue = creature->GetCreatePowerValue(i);\n    if (baseValue > 0)\n  \
      \  {\n        // Process non-zero base power values\n        printf(\"Power\
      \ type %d: %d\\n\", i, baseValue);\n    }\n}"
    language: cpp
  notes: This method returns only the base creation value and does not account for
    any modifications or temporary changes to the unit's power. The returned value
    is typically used as a reference point for calculating current power levels, especially
    when resetting or restoring initial states. This method should be called on valid
    Unit instances.
  warnings: Ensure that the power type parameter is a valid identifier from the POWER_*
    enumeration; passing invalid values may result in unexpected behavior or zero
    returns. This method does not consider any temporary buffs or debuffs that might
    affect current power levels.
  related:
  - GetPower
  - SetPower
  - ModifyPower
  - GetMaxPower
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T16:42:02.749632'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
