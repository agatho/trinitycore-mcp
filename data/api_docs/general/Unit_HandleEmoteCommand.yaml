api:
  class: Unit
  method: HandleEmoteCommand
  signature: void Unit::HandleEmoteCommand(int emoteId, int * target, int spellVisualKitIds,
    int32 sequenceVariation)
documentation:
  brief: Initiates an emote command for a unit with specified emote ID and visual
    kit.
  description: The HandleEmoteCommand method is used to trigger an emote action on
    a Unit object, typically in response to a specific emote ID or visual kit. This
    method allows for the execution of emote animations and visual effects that are
    part of World of Warcraft's gameplay mechanics. It supports various emote types
    including combat-related actions, general emotes, and special visual effects.
    The method handles the interaction between the unit and its target, ensuring proper
    execution of emote commands within the game context.
  parameters:
  - name: emoteId
    description: The emote ID to be executed, which determines the type of emote action
      to perform. This can include combat emotes, general emotes, or special visual
      effects.
  - name: target
    description: Pointer to the target object for the emote command. This parameter
      may be null or point to a specific unit in the game world.
  - name: spellVisualKitIds
    description: The visual kit ID associated with the emote, which determines the
      visual effects applied during the emote execution.
  - name: sequenceVariation
    description: The sequence variation for the emote command, used to control specific
      variations in the emote execution and ensure proper synchronization.
  returns: null
  examples:
  - title: Basic Emote Command Usage
    code: 'Unit* unit = new Unit();

      unit->HandleEmoteCommand(123, nullptr, 456, 789);'
    language: cpp
  - title: Advanced Emote Command with Target
    code: 'Unit* unit = new Unit();

      Unit* target = new Unit();

      unit->HandleEmoteCommand(123, target, 456, 789);'
    language: cpp
  notes: This method is primarily used for handling emote actions in game context.
    It requires proper synchronization of emote commands with the game world and may
    involve multiple steps including visual effects, target handling, and sequence
    variations.
  warnings: Improper use of emote IDs or visual kits can lead to incorrect visual
    effects or gameplay issues. Care must be taken when using null pointers for targets
    to avoid runtime errors.
  related:
  - Unit::HandleEmote
  - Unit::GetEmote
  - Unit::SetEmote
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:06:38.701613'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
