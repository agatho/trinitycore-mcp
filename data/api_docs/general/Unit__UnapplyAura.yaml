api:
  class: Unit
  method: _UnapplyAura
  signature: void Unit::_UnapplyAura(AuraApplication * aurApp, int removeMode)
documentation:
  brief: Removes an aura application from the unit's aura list
  description: This method unapplies a given AuraApplication from the Unit, effectively
    removing the aura effect from the target. It is used internally by the TrinityCore
    engine to manage aura applications during removal operations. The method handles
    the cleanup of aura application data and ensures proper synchronization with the
    unit's aura state. This operation typically occurs when an aura is removed due
    to expiration, cancellation, or other game mechanics such as spell interruption.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that represents the aura being
      removed. Must not be null.
  - name: removeMode
    description: Integer value indicating how the aura should be removed. Valid values
      include 0 (normal removal), 1 (aura cancellation), and 2 (aura expiration).
  returns: null
  examples:
  - title: Basic Aura Removal Example
    code: "Unit* target = GetUnit();\nAuraApplication* auraApp = target->GetAuraApplication(12345);\n\
      if (auraApp)\n{\n    target->_UnapplyAura(auraApp, 0);\n}"
    language: cpp
  notes: This method should only be called internally by the engine. Developers should
    not directly invoke this method unless explicitly required by game mechanics.
    The method performs cleanup of aura application data and updates the unit's aura
    state accordingly.
  warnings: Improper use of this method may cause memory leaks or incorrect aura states.
    Always ensure that the AuraApplication pointer is valid before calling this method.
  related:
  - Unit::GetAuraApplication
  - Unit::ApplyAura
  - Unit::AddAura
  - Unit::RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:59:19.231878'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
