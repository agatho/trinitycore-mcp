api:
  class: Player
  method: SendBuyError
  signature: void Player::SendBuyError(int msg, Creature * creature, uint32 item,
    uint32 param) const
documentation:
  brief: Sends a buy error message to the player when they attempt to purchase an
    item from a creature
  description: This method sends a buy error message to the player's client when they
    try to purchase an item from a creature, providing feedback about why the purchase
    failed. The method is typically used in conjunction with the BuyItemFromVendor
    function and handles various error conditions such as insufficient money, item
    not found, or inventory full. It allows developers to provide specific error messages
    based on different scenarios, enhancing player experience by giving clear feedback
    about why a transaction failed.
  parameters:
  - name: msg
    description: 'The buy error message type that indicates the reason for failure.
      Valid values include: 0 (BuyItemErrorNoMoney), 1 (BuyItemErrorNotEnoughItems),
      2 (BuyItemErrorItemNotFound), 3 (BuyItemErrorInventoryFull), 4 (BuyItemErrorVendorNotValidItem),
      5 (BuyItemErrorNotEnoughMoney), 6 (BuyItemErrorItemAlreadySold), 7 (BuyItemErrorItemNotAvailable),
      8 (BuyItemErrorItemNotSellable), 9 (BuyItemErrorItemNotBuyable), 10 (BuyItemErrorItemNotBuyable).'
  - name: creature
    description: Pointer to the creature from which the player is attempting to purchase
      an item. This parameter determines which vendor the error message relates to.
  - name: item
    description: The item ID being purchased, used for identifying the specific item
      in the error message.
  - name: param
    description: Additional parameter that may be used to provide context for the
      error message. This could be related to item quantity or other parameters depending
      on the error type.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = GetPlayer();

      Creature* creature = GetCreature();

      uint32 item = 12345;

      uint32 param = 0;

      player->SendBuyError(0, creature, item, param);'
    language: cpp
  - title: Advanced usage example with error handling
    code: 'Player* player = GetPlayer();

      Creature* creature = GetCreature();

      uint32 item = 12345;

      uint32 param = 1;

      player->SendBuyError(5, creature, item, param);

      // This would send a "not enough money" error message'
    language: cpp
  notes: This method is part of the TrinityCore's internal messaging system and is
    used to communicate with players about purchase failures. It should be called
    only when a player attempts to buy an item from a vendor, and the error message
    should match the actual reason for failure. The method does not actually perform
    any transaction but rather sends a message to the client.
  warnings: This method should not be used outside of proper transaction contexts.
    Calling it without proper context may result in incorrect error messages being
    sent to players. Also, the parameters must be carefully chosen to match the intended
    error type, as incorrect values could confuse players or cause unexpected behavior.
  related:
  - BuyItemFromVendor
  - SendSellError
  - SendItemPushResult
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T23:49:38.908889'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
