api:
  class: Unit
  method: SetControlled
  signature: void Unit::SetControlled(bool apply, UnitState state)
documentation:
  brief: Sets the controlled state of a unit, applying or removing specific unit states.
  description: The SetControlled method allows a unit to be marked as controlled or
    uncontrolled by setting or clearing specific unit states. This is commonly used
    in game mechanics to manage player or creature behavior during combat, movement,
    or other gameplay scenarios. The method operates on the unit's internal state
    flags and can apply multiple states simultaneously. It is typically used in conjunction
    with other control methods like SetControlledState to manage complex unit behaviors.
  parameters:
  - name: apply
    description: A boolean value indicating whether to apply or remove the controlled
      state. True applies the state, false removes it.
  - name: state
    description: The UnitState enum value representing the specific state to be applied
      or removed. This can include various states like UNIT_STATE_STUNNED, UNIT_STATE_ROOTed,
      etc., depending on the intended control behavior.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* target = GetTarget();


      // Apply controlled state to target

      target->SetControlled(true, UNIT_STATE_STUNNED);


      // Remove controlled state from target

      target->SetControlled(false, UNIT_STATE_STUNNED);'
    language: cpp
  - title: Advanced Usage Example
    code: '// Apply multiple states to a unit

      Unit* player = GetPlayer();

      player->SetControlled(true, UNIT_STATE_ROOTED);

      player->SetControlled(true, UNIT_STATE_STUNNED);


      // Remove all controlled states

      player->SetControlled(false, UNIT_STATE_ROOTED);

      player->SetControlled(false, UNIT_STATE_STUNNED);'
    language: cpp
  notes: This method directly modifies the unit's internal state flags. It should
    be used carefully as it affects gameplay mechanics such as movement, combat, and
    player control. The implementation involves setting or clearing bit flags in the
    unit's state management system. Performance considerations include potential impact
    on unit update routines if multiple states are applied simultaneously.
  warnings: Improper use of this method can lead to unexpected behavior in game mechanics,
    especially when dealing with complex state combinations. Care should be taken
    to ensure that the state being applied is appropriate for the intended control
    scenario. Using incorrect state values may cause unit behavior anomalies or crashes.
  related:
  - SetControlledState
  - GetControlledState
  - IsControlled
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T01:22:49.624560'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
