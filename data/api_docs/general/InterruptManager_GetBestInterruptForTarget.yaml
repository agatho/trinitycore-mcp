api:
  class: InterruptManager
  method: GetBestInterruptForTarget
  signature: InterruptCapability * InterruptManager::GetBestInterruptForTarget(const
    InterruptTarget & target)
documentation:
  brief: Determines and returns the most effective interrupt capability available
    for a given target.
  description: The GetBestInterruptForTarget method evaluates the current state and
    capabilities of an AI-controlled unit to identify the optimal interrupt ability
    that can be used against a specified target. This method is typically invoked
    during combat decision-making processes where interrupts are considered as part
    of the AI's tactical behavior. It assesses factors such as the target's current
    spell casting status, the interrupt's cooldown, mana cost, and effectiveness against
    the target's spell type. The result is a pointer to an InterruptCapability object
    that represents the best available interrupt option for the given target.
  parameters: []
  returns: A pointer to an InterruptCapability object representing the most effective
    interrupt ability for the specified target. Returns nullptr if no suitable interrupt
    capability is found or if the target does not require interruption.
  examples:
  - title: Basic Usage in AI Logic
    code: "InterruptCapability* bestInterrupt = interruptManager->GetBestInterruptForTarget(target);\n\
      if (bestInterrupt != nullptr)\n{\n    // Execute the interrupt ability\n   \
      \ unit->CastSpell(target, bestInterrupt->spellId);\n}"
    language: cpp
  notes: This method is part of the AI interrupt management system and should be called
    within combat context. The returned InterruptCapability object must not be modified
    directly as it's managed by the InterruptManager. Performance-wise, this method
    may involve multiple checks and comparisons, so it should not be called excessively
    in tight loops.
  warnings: Ensure that the target parameter is valid and represents an actual unit
    in combat before calling this method. Calling with an invalid or null target may
    lead to undefined behavior or crashes. The returned pointer is only valid until
    the next call to GetBestInterruptForTarget or until the interrupt manager's state
    changes.
  related:
  - InterruptManager::AddInterruptCapability
  - InterruptManager::RemoveInterruptCapability
  - InterruptManager::HasInterruptCapability
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:36:53.224622'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
