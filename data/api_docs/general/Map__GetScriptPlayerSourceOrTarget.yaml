api:
  class: Map
  method: _GetScriptPlayerSourceOrTarget
  signature: Player * Map::_GetScriptPlayerSourceOrTarget(Object * source, Object
    * target, const ScriptInfo * scriptInfo) const
documentation:
  brief: Retrieves the Player object from either the source or target of a script
    execution context.
  description: The _GetScriptPlayerSourceOrTarget method is an internal utility function
    used within TrinityCore's scripting system to determine which Player object should
    be considered as the primary actor in a script event. It evaluates the provided
    source and target objects, checking if either one is a valid Player instance.
    If both are valid, it typically prioritizes the source. This method ensures that
    scripts can reliably access player data even when the execution context may not
    directly involve a Player object. The function is part of the core scripting infrastructure
    and is generally called by internal script handlers rather than being exposed
    to external code.
  parameters:
  - name: source
    description: The source object in the script execution context, typically representing
      the entity initiating an action or event.
  - name: target
    description: The target object in the script execution context, usually representing
      the entity receiving an action or event.
  - name: scriptInfo
    description: Information about the script being executed, including metadata and
      configuration details that may influence how the player is selected.
  returns: A pointer to a Player object if either source or target is a valid Player
    instance; otherwise, returns nullptr if no Player is found in the specified context.
  examples:
  - title: Basic usage within script handling
    code: "Player* player = map->_GetScriptPlayerSourceOrTarget(sourceObject, targetObject,\
      \ scriptInfo);\nif (player)\n{\n    // Process player-specific logic\n    player->SendNotification(\"\
      Script executed by you!\");\n}"
    language: cpp
  notes: This method is intended for internal use within TrinityCore's scripting engine
    and should not be called directly from custom scripts or modules unless explicitly
    documented as safe. It assumes that source and target are valid objects and may
    result in undefined behavior if they are not properly initialized.
  warnings: Do not assume this method will always return a valid Player pointer; always
    check for nullptr before using the returned value. The method does not perform
    any type checking beyond basic object validation, so calling it with invalid parameters
    can lead to crashes or data corruption.
  related:
  - Map::GetPlayer
  - Map::GetPlayers
  - ScriptInfo::GetScriptType
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T23:49:04.583681'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
