api:
  class: Player
  method: AddOverrideSpell
  signature: void Player::AddOverrideSpell(uint32 overridenSpellId, uint32 newSpellId)
documentation:
  brief: Adds a spell override to the player's spell list, replacing an existing spell
    with a new one.
  description: This method allows developers to override a specific spell in the player's
    spell list by replacing the original spell ID with a new one. It is commonly used
    for implementing custom spell effects, such as modifying existing spells or adding
    new spell mechanics without affecting the base game behavior. The method modifies
    the player's spell override list, which can be used to change how certain spells
    behave during gameplay. This functionality is particularly useful in custom content
    development where developers need to adjust spell behavior dynamically.
  parameters:
  - name: overridenSpellId
    description: The ID of the spell that will be overridden. This represents the
      original spell being replaced.
  - name: newSpellId
    description: The ID of the new spell that replaces the original spell. This is
      the spell that will take effect instead of the original.
  returns: null
  examples:
  - title: Basic Spell Override Example
    code: 'Player* player = GetPlayer();

      player->AddOverrideSpell(12345, 67890);'
    language: cpp
  - title: Advanced Spell Override with Conditional Logic
    code: "Player* player = GetPlayer();\nif (player->HasSpell(12345)) {\n    player->AddOverrideSpell(12345,\
      \ 67890);\n}\nelse {\n    // Handle case where spell doesn't exist\n}"
    language: cpp
  notes: This method directly modifies the player's override spell list. It should
    be used carefully as it can affect gameplay balance and spell mechanics. The override
    system is typically implemented in the player's spell book or spell list, and
    changes may not be immediately visible to other players unless they are updated
    through specific mechanisms.
  warnings: This method should only be called when the player has the original spell
    in their spell list. If used incorrectly, it can cause spell conflicts or unexpected
    behavior. Additionally, this method does not validate if the new spell ID is valid
    or exists in the game database; developers must ensure that both spell IDs are
    valid before calling this method.
  related:
  - Player::AddSpell
  - Player::RemoveOverrideSpell
  - Player::HasSpell
  - Player::GetSpellInfo
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T01:31:54.851878'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
