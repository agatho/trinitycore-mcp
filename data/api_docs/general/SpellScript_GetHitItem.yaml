api:
  class: SpellScript
  method: GetHitItem
  signature: Item * SpellScript::GetHitItem() const
documentation:
  brief: Returns the item that was hit by the spell during execution.
  description: The GetHitItem method retrieves a pointer to the Item object that was
    targeted or affected by the spell script. This method is typically used within
    spell effect handlers to access information about the specific item that was struck
    or modified by the spell. The returned item pointer may be null if no item was
    hit, or if the spell did not target an item directly. It's important to note that
    this method should only be called during the execution of a spell script, and
    its behavior is undefined outside of this context.
  parameters: []
  returns: A pointer to the Item object that was hit by the spell, or nullptr if no
    item was targeted or the spell did not affect an item directly.
  examples:
  - title: Basic usage in spell effect handler
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleHit()\n\
      \    {\n        Item* hitItem = GetHitItem();\n        if (hitItem)\n      \
      \  {\n            // Process the item that was hit by the spell\n          \
      \  // For example, modify item properties or trigger effects\n        }\n  \
      \  }\n};"
    language: cpp
  - title: Checking item type before processing
    code: "class EnchantSpellScript : public SpellScript\n{\npublic:\n    void HandleHit()\n\
      \    {\n        Item* hitItem = GetHitItem();\n        if (hitItem && hitItem->GetTemplate()->Class\
      \ == ITEM_CLASS_WEAPON)\n        {\n            // Only process weapons as targets\
      \ for enchantment\n            // Apply enchantment logic here\n        }\n\
      \    }\n};"
    language: cpp
  notes: This method is part of the SpellScript framework and should only be invoked
    during spell execution. The returned Item pointer is valid only within the scope
    of the current spell effect handler. Be cautious when storing references to the
    returned item, as it may become invalid if the item is destroyed or removed from
    the player's inventory during spell processing.
  warnings: Using GetHitItem outside of a spell script context will result in undefined
    behavior. Always check for null return values before dereferencing the pointer.
    Modifying the item directly through this reference might not persist changes to
    the server state unless proper update mechanisms are employed.
  related:
  - GetHitUnit
  - GetHitPlayer
  - GetHitCreature
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T05:55:00.235785'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
