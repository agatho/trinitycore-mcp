api:
  class: Aura
  method: CalcPPMProcChance
  signature: float Aura::CalcPPMProcChance(Unit * actor) const
documentation:
  brief: Calculates the chance of a proc occurring based on the aura's PPM (proc per
    minute) value and the actor's attack speed.
  description: The CalcPPMProcChance method computes the probability that an aura
    will trigger a proc effect during a given time interval, typically used for passive
    abilities or enchantments that have a proc rate defined in procs per minute. This
    calculation takes into account the unit's current attack speed to determine how
    often a proc can occur within a minute. The result is a floating-point value between
    0 and 1 representing the chance of proc occurrence per attack or swing. This method
    is essential for accurately simulating game mechanics such as weapon enchantments,
    trinkets, or aura effects that activate at a specified rate.
  parameters:
  - name: actor
    description: Pointer to the Unit object that is triggering the proc. This represents
      the entity whose attack speed and other properties are used in the calculation.
  returns: A float value between 0.0f and 1.0f indicating the probability of the aura
    procing on a given attack or swing. A value of 0.0f means no chance of procing,
    while 1.0f indicates guaranteed proc.
  examples:
  - title: Basic usage to determine proc chance
    code: "Aura* aura = player->GetAura(12345);\nfloat chance = aura->CalcPPMProcChance(player);\n\
      if (chance > 0.5f) {\n    // Handle high chance proc\n}"
    language: cpp
  - title: Using proc chance in combat logic
    code: "Unit* attacker = GetAttacker();\nAura* aura = attacker->GetAura(67890);\n\
      if (aura && roll_chance_f(aura->CalcPPMProcChance(attacker))) {\n    // Apply\
      \ proc effect\n    aura->HandleProc(...);\n}"
    language: cpp
  notes: This method is typically used internally by the TrinityCore engine during
    combat calculations. The calculation involves converting PPM to a per-swing probability,
    which depends on the actor's current attack speed (melee or ranged). It's important
    to note that this function may return different values depending on whether the
    actor is using melee or ranged attacks, as their respective speeds affect the
    proc rate.
  warnings: Ensure that the provided Unit pointer is valid and not null before calling
    this method, as passing a null pointer can lead to undefined behavior. Also, be
    aware that PPM-based procs may behave differently for different types of attacks
    (melee vs. ranged), so the actor's current attack type should be considered when
    interpreting results.
  related:
  - Aura::GetProcChance
  - Aura::HandleProc
  - Unit::GetAttackTime
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:16:03.168576'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
