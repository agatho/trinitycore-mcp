api:
  class: WorldObject
  method: GetAffectingPlayer
  signature: Player * WorldObject::GetAffectingPlayer() const
documentation:
  brief: Returns the player who is currently affecting this WorldObject.
  description: The GetAffectingPlayer method retrieves the Player object that is currently
    influencing or interacting with the given WorldObject. This method is commonly
    used in the context of game mechanics where objects may be affected by players
    through various interactions such as combat, spell effects, or other gameplay
    events. The returned player may be null if no player is actively affecting the
    object at the time of calling, which typically occurs when the object is not currently
    under player influence or during certain game states.
  parameters: []
  returns: Returns a pointer to the Player object that is currently affecting this
    WorldObject, or nullptr if no player is actively influencing it. The returned
    pointer may be null in cases where the WorldObject is not currently being affected
    by any player, such as when the object is in a state of non-player interaction
    or during specific game mechanics where player influence is temporarily suspended.
  examples:
  - title: Basic usage example
    code: "Player* player = worldObject->GetAffectingPlayer();\nif (player != nullptr)\n\
      {\n    // Player is currently affecting the object\n    // Do something with\
      \ the player\n}\nelse\n{\n    // No player is currently affecting the object\n\
      \    // Handle accordingly\n}"
    language: cpp
  notes: This method is typically used in conjunction with other methods that determine
    player influence or interaction. It may be called during various game events such
    as combat, spell casting, or when handling object interactions. Performance considerations
    include checking if the returned pointer is valid before using it to avoid null
    pointer dereferences.
  warnings: The method may return nullptr if no player is actively affecting the WorldObject
    at the time of calling. Care should be taken to handle null returns appropriately
    in code to prevent crashes or unexpected behavior. This method is not thread-safe
    and should not be used in multithreaded environments without proper synchronization.
  related:
  - GetOwner
  - GetFaction
  - GetMap
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T00:38:56.282362'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
