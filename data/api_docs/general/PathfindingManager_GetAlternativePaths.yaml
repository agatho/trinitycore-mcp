api:
  class: PathfindingManager
  method: GetAlternativePaths
  signature: int PathfindingManager::GetAlternativePaths(const int & goal, uint32
    maxAlternatives)
documentation:
  brief: Calculates and returns up to a specified number of alternative paths from
    the current position to a given goal node using pathfinding algorithms.
  description: The GetAlternativePaths method computes multiple possible routes from
    the agent's current location to a specified goal node. It utilizes the underlying
    pathfinding system to generate alternative paths, which can be useful for dynamic
    navigation, avoiding congestion, or providing fallback options when primary paths
    are blocked. The method takes into account various factors such as terrain, obstacles,
    and movement costs. This function is typically used in AI pathfinding systems
    where flexibility in route selection improves agent behavior and reduces deadlock
    situations. The returned number of paths may be less than the requested maximum
    if fewer alternatives exist or if pathfinding constraints prevent additional routes
    from being computed.
  parameters:
  - name: goal
    description: The target node identifier (typically a NavMesh node index) to which
      alternative paths should be calculated. This parameter defines the destination
      for all generated paths.
  - name: maxAlternatives
    description: The maximum number of alternative paths to compute and return. Must
      be a positive integer; values of zero or negative will typically result in no
      paths being returned.
  returns: An integer representing the actual number of alternative paths successfully
    computed and stored. Returns zero if no paths could be generated, or a positive
    value indicating how many valid alternative routes were found. Negative values
    may indicate errors during path computation.
  examples:
  - title: Basic usage to retrieve up to 3 alternative paths
    code: "int numPaths = pathfinder->GetAlternativePaths(12345, 3);\nif (numPaths\
      \ > 0)\n{\n    // Process the computed alternative paths\n    for (int i = 0;\
      \ i < numPaths; ++i)\n    {\n        // Access each alternative path via another\
      \ method like GetPath(i)\n    }\n}"
    language: cpp
  - title: Using alternative paths in AI decision making
    code: "uint32 maxAlternatives = 5;\nint numPaths = pathfinder->GetAlternativePaths(targetNode,\
      \ maxAlternatives);\nif (numPaths > 0)\n{\n    // Select the best path based\
      \ on criteria like distance, cost, or safety\n    int bestPathIndex = 0;\n \
      \   float minCost = GetPathCost(0); // Assume a helper method exists\n    for\
      \ (int i = 1; i < numPaths; ++i)\n    {\n        float cost = GetPathCost(i);\n\
      \        if (cost < minCost)\n        {\n            minCost = cost;\n     \
      \       bestPathIndex = i;\n        }\n    }\n    // Use the selected path\n\
      \    SetCurrentPath(bestPathIndex);\n}"
    language: cpp
  notes: This method is part of a larger pathfinding system that may cache results
    or reuse previously computed paths for performance. The actual implementation
    might depend on the underlying navigation mesh and agent-specific movement capabilities.
    Pathfinding calculations can be computationally expensive, especially when computing
    many alternatives, so use this function judiciously in performance-critical code
    sections.
  warnings: Calling this method with a very high value for maxAlternatives may lead
    to significant performance degradation or even memory issues if the pathfinding
    system cannot efficiently compute numerous alternatives. Ensure that goal node
    identifiers are valid and reachable within the navigation mesh before calling
    this function.
  related:
  - GetPath
  - CalculatePath
  - IsPathValid
  - ClearCachedPaths
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:43:40.919040'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
