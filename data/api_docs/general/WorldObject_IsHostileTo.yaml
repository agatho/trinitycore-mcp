api:
  class: WorldObject
  method: IsHostileTo
  signature: bool WorldObject::IsHostileTo(const WorldObject * target) const
documentation:
  brief: Determines whether this WorldObject is hostile toward the specified target
    WorldObject based on faction and relationship rules.
  description: The IsHostileTo method evaluates whether the current WorldObject has
    a hostile relationship with the provided target WorldObject. This determination
    is made using faction data, creature type, player versus NPC relationships, and
    other game-specific logic that defines hostility in World of Warcraft's combat
    system. The method respects the underlying faction system, including friendly,
    neutral, hostile, and PvP flags. It returns true if the objects are considered
    enemies according to the game's rules, and false otherwise. This function is commonly
    used in AI behavior, combat triggers, and targeting logic within TrinityCore.
  parameters: []
  returns: Returns true if this WorldObject is considered hostile toward the target
    WorldObject; otherwise returns false. Hostility is determined by faction relationships,
    creature types, and game rules such as PvP status or player vs. NPC hostility.
  examples:
  - title: Basic Usage in AI Logic
    code: "if (unit->IsHostileTo(target)) {\n    unit->Attack(target, true);\n}"
    language: cpp
  - title: Checking Hostility Before Casting Spell
    code: "if (caster->IsHostileTo(target)) {\n    caster->CastSpell(target, SPELL_FIREBALL,\
      \ true);\n} else {\n    // Handle non-hostile case\n}"
    language: cpp
  notes: This method relies on the underlying faction system and may be affected by
    temporary status changes such as PvP flags or stealth. It does not account for
    dynamic faction changes during runtime unless those are properly updated in the
    object's faction data.
  warnings: Be cautious when using IsHostileTo in performance-critical sections, as
    it may involve multiple checks including faction lookups and potential AI state
    evaluations. Ensure that target objects are valid before calling this method to
    avoid undefined behavior.
  related:
  - IsFriendlyTo
  - IsNeutralTo
  - GetFaction
  - SetFaction
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:28:17.004043'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
