api:
  class: SpellScript
  method: GetHitAura
  signature: Aura * SpellScript::GetHitAura(bool dynObjAura, bool withRemoved) const
documentation:
  brief: Retrieves the aura that was hit by the spell, optionally including dynamically
    created auras or removed auras.
  description: 'The GetHitAura method retrieves the Aura object that was affected
    by the current spell execution. This method is typically used within SpellScript
    implementations to access information about the aura that triggered the script.
    The method supports two optional flags: dynObjAura which determines whether to
    include auras from dynamic objects, and withRemoved which specifies if removed
    auras should be considered. The returned Aura pointer may be null if no applicable
    aura exists or if the spell did not hit an aura. This functionality is essential
    for implementing custom spell behaviors that depend on specific aura states or
    interactions.'
  parameters: []
  returns: A pointer to the Aura object that was hit by the spell, or nullptr if no
    such aura exists or if the conditions specified by the flags are not met.
  examples:
  - title: Basic Usage in SpellScript
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleHit()\n\
      \    {\n        Aura* hitAura = GetHitAura();\n        if (hitAura)\n      \
      \  {\n            // Process the aura that was hit\n            TC_LOG_DEBUG(\"\
      spells\", \"Hit aura with spell ID %u\", hitAura->GetId());\n        }\n   \
      \ }\n};"
    language: cpp
  - title: Using with Removed Auras Flag
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleHit()\n\
      \    {\n        // Get hit aura including removed ones\n        Aura* hitAura\
      \ = GetHitAura(false, true);\n        if (hitAura)\n        {\n            TC_LOG_DEBUG(\"\
      spells\", \"Hit removed aura with spell ID %u\", hitAura->GetId());\n      \
      \  }\n    }\n};"
    language: cpp
  notes: This method should only be called during the execution of a spell script
    where aura information is relevant. The returned Aura pointer is valid only within
    the scope of the current spell execution and must not be stored for later use
    without proper reference management.
  warnings: Using this method outside of a spell script context or after the spell
    has completed may result in undefined behavior. Additionally, accessing the aura's
    data after it has been removed might lead to memory access violations if not properly
    checked.
  related:
  - GetHitUnit
  - GetHitDamage
  - GetHitTarget
  - GetSpell
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T05:58:25.638865'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
