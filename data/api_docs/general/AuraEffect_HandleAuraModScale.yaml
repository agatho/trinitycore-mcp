api:
  class: AuraEffect
  method: HandleAuraModScale
  signature: void AuraEffect::HandleAuraModScale(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Applies or removes a scaling effect aura on the target.
  description: The HandleAuraModScale method is responsible for managing the application
    and removal of scaling effects applied by auras. This method modifies the scale
    of the target unit based on the aura's properties, typically used for visual effects
    such as size changes due to buffs or debuffs. The method interacts with the AuraApplication
    object to determine how the scaling should be applied or removed. It is part of
    the core aura handling system in TrinityCore and is invoked during aura application
    or removal events.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      the aura being applied or removed. This parameter determines which aura's scaling
      effect should be processed.
  - name: mode
    description: The mode of operation, typically indicating whether the effect is
      being applied (1) or removed (0). This value controls how the scaling modification
      is handled during the aura lifecycle.
  - name: apply
    description: Boolean flag indicating if the scaling effect should be applied (true)
      or removed (false). This parameter directly influences whether the target's
      scale is increased or reverted to its original state.
  returns: null
  examples:
  - title: Applying a Scaling Aura
    code: "void ApplyScaleAura(Unit* target, float scaleValue)\n{\n    AuraApplication*\
      \ aurApp = new AuraApplication();\n    // Assume aura is already created and\
      \ configured\n    aurApp->SetEffectIndex(0);\n    aurApp->SetTarget(target);\n\
      \    \n    AuraEffect* effect = new AuraEffect();\n    effect->HandleAuraModScale(aurApp,\
      \ 1, true); // Apply scaling\n}"
    language: cpp
  - title: Removing a Scaling Aura
    code: "void RemoveScaleAura(Unit* target)\n{\n    AuraApplication* aurApp = target->GetAuraApplication(12345);\
      \ // Get existing aura\n    if (aurApp)\n    {\n        AuraEffect* effect =\
      \ aurApp->GetEffect(0);\n        effect->HandleAuraModScale(aurApp, 0, false);\
      \ // Remove scaling\n    }\n}"
    language: cpp
  notes: This method is part of the aura system and directly affects unit scale. It
    should only be called from within the aura application/removal logic. The method
    does not perform any validation on input parameters, so callers must ensure that
    aurApp is valid and mode/apply are set correctly.
  warnings: Improper use of this method may cause visual inconsistencies or incorrect
    scaling behavior. Ensure that the aura's scale value is properly configured before
    calling this method, as incorrect values can result in unexpected visual effects
    or performance issues.
  related:
  - AuraEffect::HandleAuraModScale
  - AuraApplication::GetTarget
  - AuraEffect::ApplyAura
  - AuraEffect::RemoveAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:08:30.682862'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
