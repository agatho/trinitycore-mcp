api:
  class: ObjectMgr
  method: GetSummonGroup
  signature: const int * ObjectMgr::GetSummonGroup(uint32 summonerId, SummonerType
    summonerType, uint8 group) const
documentation:
  brief: Retrieves the summon group data for a specified summoner and group index.
  description: The GetSummonGroup method retrieves a pointer to an array of integers
    representing the summon group data associated with a given summoner ID, summoner
    type, and group index. This functionality is typically used in World of Warcraft's
    TrinityCore to manage summoned creatures or objects that are grouped together
    for specific behaviors or AI logic. The returned pointer points to a static array
    of integers which may represent creature IDs, spawn positions, or other summon-related
    data. The method does not validate the input parameters, so calling with invalid
    summonerId or group values may result in undefined behavior or incorrect data
    retrieval.
  parameters:
  - name: summonerId
    description: The unique identifier (GUID) of the creature or object that summoned
      the creatures. This ID is used to look up summon group information in internal
      data structures.
  - name: summonerType
    description: The type of summoner, which determines how the summon group data
      is interpreted. Valid values are typically defined by the SummonerType enum
      (e.g., SUMMONER_TYPE_CREATURE, SUMMONER_TYPE_PLAYER).
  - name: group
    description: The group index within the summoner's summon group data. This identifies
      which specific group of summoned creatures to retrieve from the summoner's data.
  returns: A pointer to a constant integer array representing the summon group data,
    or nullptr if no valid data is found for the given parameters. The array typically
    contains creature IDs or other summon-related values that define how the creatures
    should be summoned.
  examples:
  - title: Retrieve summon group data for a creature
    code: "uint32 creatureId = 12345;\nSummonerType type = SUMMONER_TYPE_CREATURE;\n\
      uint8 groupId = 0;\nconst int* groupData = sObjectMgr->GetSummonGroup(creatureId,\
      \ type, groupId);\nif (groupData != nullptr)\n{\n    // Process the summon group\
      \ data\n    for (int i = 0; i < 4; ++i) // Assuming max 4 creatures per group\n\
      \    {\n        if (groupData[i] > 0)\n            printf(\"Summoned creature\
      \ ID: %d\\n\", groupData[i]);\n    }\n}"
    language: cpp
  notes: This method accesses internal data structures that are populated during server
    startup or when creatures are loaded. The returned array is static and should
    not be modified. The method assumes valid input parameters; invalid summoner IDs
    or group indices may cause undefined behavior.
  warnings: Do not modify the returned integer array as it points to internal static
    memory. Ensure that summonerId and group values are valid before calling this
    method, as invalid inputs may lead to incorrect data being returned or crashes.
  related:
  - GetSummonGroup
  - LoadSummonGroups
  - AddSummonGroup
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:09:45.126734'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
