api:
  class: AuraEffect
  method: SetAmount
  signature: void AuraEffect::SetAmount(int32 amount)
documentation:
  brief: Sets the amount value of the aura effect, which typically defines the strength
    or magnitude of the effect's impact.
  description: The SetAmount method updates the internal amount value associated with
    an AuraEffect instance. This amount usually represents the intensity, duration
    modifier, or numerical effect of the aura, such as damage per tick, healing bonus,
    or stat increase. The change takes immediate effect on the aura's behavior and
    can influence how the effect interacts with game mechanics like combat calculations,
    stat modifications, or periodic effects. This method is commonly used during aura
    application, modification, or removal processes within the TrinityCore framework.
  parameters:
  - name: amount
    description: The new integer value to assign to the aura effect's amount field.
      This value can be positive, negative, or zero, depending on the nature of the
      aura effect and its intended behavior.
  returns: null
  examples:
  - title: Setting a Damage Over Time Effect Amount
    code: "AuraEffect* auraEff = unit->GetAuraEffect(SPELL_ID_FIREBALL, 0);\nif (auraEff)\n\
      {\n    auraEff->SetAmount(500); // Sets the damage per tick to 500\n}"
    language: cpp
  - title: Modifying a Stat Buff Amount
    code: "AuraEffect* auraEff = player->GetAuraEffect(SPELL_ID_BLESSING_OF_MIGHT,\
      \ 0);\nif (auraEff)\n{\n    int32 newAmount = auraEff->GetAmount() + 100; //\
      \ Increase existing buff by 100\n    auraEff->SetAmount(newAmount);\n}"
    language: cpp
  notes: This method directly modifies the aura effect's internal state and should
    be used carefully to avoid unintended side effects. Changes made via SetAmount
    may not immediately reflect in client-side visuals without proper synchronization
    through packet updates. The amount value is typically validated against spell
    definitions or aura constraints, but direct modification bypasses some validation
    checks.
  warnings: Modifying aura amounts directly can lead to game balance issues if not
    done correctly. Be cautious when changing amounts during active auras as it may
    cause inconsistent behavior or visual glitches. Avoid calling this method on aura
    effects that are currently being processed by the game engine, as it could lead
    to race conditions or undefined behavior.
  related:
  - GetAmount
  - SetDuration
  - GetAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T08:56:07.029642'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
