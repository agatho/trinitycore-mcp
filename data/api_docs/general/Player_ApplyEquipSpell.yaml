api:
  class: Player
  method: ApplyEquipSpell
  signature: void Player::ApplyEquipSpell(const int * spellInfo, Item * item, bool
    apply, bool formChange)
documentation:
  brief: Applies or removes spell effects from equipment items based on player's current
    state.
  description: The ApplyEquipSpell method handles the application and removal of spells
    associated with equipped items, particularly focusing on how these spells interact
    with player's form changes and item usage. This method is crucial for managing
    spell effects that depend on specific equipment or player states, such as aura
    effects from weapons or armor. It ensures proper handling of spell application
    when items are equipped or removed, and manages the transition between different
    forms (like stance or form) during spell application.
  parameters:
  - name: spellInfo
    description: Pointer to spell information structure that defines which spell to
      apply or remove. This typically contains data about the spell's ID, duration,
      and effects.
  - name: item
    description: Pointer to the Item object being equipped or unequipped. This determines
      which specific item's spell effects are being applied or removed.
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the spell effect from the item.
  - name: formChange
    description: Boolean flag indicating whether a form change is occurring during
      the spell application process. This affects how spell effects are handled when
      transitioning between different player forms.
  returns: null
  examples:
  - title: Basic Spell Application Example
    code: 'Player* player = GetPlayer();

      Item* item = player->GetItemBySlot(10);

      ApplyEquipSpell(&spellInfo, item, true, false);'
    language: cpp
  - title: Form Change Spell Application Example
    code: 'Player* player = GetPlayer();

      Item* item = player->GetItemBySlot(10);

      ApplyEquipSpell(&spellInfo, item, true, true);'
    language: cpp
  notes: This method is typically used internally by TrinityCore to manage spell effects
    during equipment changes. It requires careful handling of form transitions and
    may involve multiple checks for player state, including stance or form changes.
    Performance considerations include avoiding unnecessary spell applications when
    item is not being changed.
  warnings: Improper use of this method can lead to incorrect spell effects being
    applied or removed, potentially causing gameplay issues. Care must be taken to
    ensure that the correct spell information and item are passed to avoid unintended
    consequences.
  related:
  - Player::GetItemBySlot
  - Player::AddSpell
  - Player::RemoveSpell
  - Player::ApplyAura
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T01:19:21.449526'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
