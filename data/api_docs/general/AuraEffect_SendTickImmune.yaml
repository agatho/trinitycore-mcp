api:
  class: AuraEffect
  method: SendTickImmune
  signature: void AuraEffect::SendTickImmune(Unit * target, Unit * caster) const
documentation:
  brief: Sends a tick immune message to the target unit when an aura effect is applied.
  description: The SendTickImmune method is used within the TrinityCore framework
    to notify a target unit that it has been immune to a periodic aura effect tick.
    This typically occurs when an aura's tick is resisted, blocked, or otherwise nullified
    by the target's defensive mechanisms. The method sends a specific packet to the
    client to visually indicate that the aura tick was not applied. It is commonly
    used in conjunction with aura application and removal logic to maintain synchronization
    between server state and client display. This method does not modify any internal
    aura state but merely communicates the immune status to the affected unit.
  parameters:
  - name: target
    description: Pointer to the Unit object that is receiving the immune message.
      This represents the unit that was affected by the aura tick and is immune to
      its effects.
  - name: caster
    description: Pointer to the Unit object that originally cast the aura. This represents
      the source of the aura effect for which the tick was immune.
  returns: null
  examples:
  - title: Basic usage in aura application logic
    code: "void ApplyAuraEffect(AuraEffect* auraEff, Unit* target, Unit* caster)\n\
      {\n    if (target->IsImmuneToAuraEffect(auraEff))\n    {\n        auraEff->SendTickImmune(target,\
      \ caster);\n        return;\n    }\n    // Normal aura application logic\n}"
    language: cpp
  notes: This method is typically called internally by the aura system when a tick
    is determined to be immune. It should not be called directly unless implementing
    custom immunity logic. The method uses the target's connection to send a client-side
    packet, so it requires that the target is a player or has an active connection.
  warnings: Calling this method without proper validation may result in incorrect
    visual feedback to players. Ensure that the immunity condition is properly checked
    before invoking this method. Also, be aware that this method does not prevent
    the tick from being processed on the server side; it only sends a message to the
    client.
  related:
  - AuraEffect::HandleEffect
  - AuraEffect::ApplyEffect
  - Unit::IsImmuneToAuraEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T11:52:15.196584'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
