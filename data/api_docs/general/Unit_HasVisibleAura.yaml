api:
  class: Unit
  method: HasVisibleAura
  signature: bool Unit::HasVisibleAura(AuraApplication * aurApp) const
documentation:
  brief: Checks if a visible aura application is present on the unit.
  description: This method determines whether a specific aura application is currently
    visible on the unit. It evaluates the visibility status of an aura application,
    which represents a specific effect applied to the unit. The method is commonly
    used in game mechanics to verify active effects or to check for specific aura
    states during combat or spell processing. This functionality is crucial for determining
    if certain abilities or effects are active on the unit.
  parameters: []
  returns: Returns true if the aura application is visible on the unit, false otherwise.
    The method returns false when the aura application is not present or is not currently
    visible.
  examples:
  - title: Basic usage example
    code: "if (unit->HasVisibleAura(auraApp)) {\n    // Do something\n}\n"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related methods
    to determine the state of a unit's aura applications. It may be called during
    combat processing or spell effects to check visibility status.
  warnings: This method should not be used directly for checking aura application
    validity without verifying that the application exists first. It's recommended
    to use this method in combination with other methods like GetAuraApplicationForTarget
    to ensure proper handling of aura applications.
  related:
  - HasAura
  - GetAuraApplicationForTarget
  - IsVisible
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:15:43.049338'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
