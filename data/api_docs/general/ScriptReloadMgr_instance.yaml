api:
  class: ScriptReloadMgr
  method: instance
  signature: ScriptReloadMgr * ScriptReloadMgr::instance()
documentation:
  brief: Returns the singleton instance of the ScriptReloadMgr class for managing
    script reloading functionality.
  description: The instance() method implements the singleton pattern for the ScriptReloadMgr
    class, ensuring that only one instance of the manager exists throughout the TrinityCore
    server runtime. This instance is responsible for handling script reloading operations,
    including reloading AI scripts, creature scripts, game object scripts, and other
    scripted components. The method is thread-safe and provides access to the global
    script reload management system. It should be called whenever script reloading
    functionality is needed, typically during server administration or development
    phases.
  parameters: []
  returns: A pointer to the singleton instance of ScriptReloadMgr. The returned pointer
    is never null as the singleton ensures its own existence.
  examples:
  - title: Basic Usage
    code: 'ScriptReloadMgr* reloadMgr = ScriptReloadMgr::instance();

      reloadMgr->ReloadAllScripts();'
    language: cpp
  - title: Accessing Script Reload Manager for Admin Command
    code: "void HandleReloadScriptsCommand(ChatHandler* handler)\n{\n    ScriptReloadMgr*\
      \ mgr = ScriptReloadMgr::instance();\n    mgr->ReloadAllScripts();\n    handler->SendSysMessage(\"\
      All scripts reloaded successfully.\");\n}"
    language: cpp
  notes: This method follows the standard singleton pattern implementation. The ScriptReloadMgr
    instance is created on first access and persists for the lifetime of the server
    process. It's important to note that script reloading operations can be resource-intensive
    and may cause temporary performance degradation during execution.
  warnings: Calling this method repeatedly will always return the same instance pointer,
    so there's no risk of creating multiple instances. However, frequent script reloading
    during active gameplay can lead to instability or unexpected behavior in running
    instances of creatures or game objects that were previously scripted.
  related:
  - ReloadAllScripts
  - ReloadCreatureScripts
  - ReloadGameObjectScripts
  - ReloadQuestScripts
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:56:31.141640'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
