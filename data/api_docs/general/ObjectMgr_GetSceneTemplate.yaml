api:
  class: ObjectMgr
  method: GetSceneTemplate
  signature: const SceneTemplate * ObjectMgr::GetSceneTemplate(uint32 sceneId) const
documentation:
  brief: Retrieves a scene template by its unique identifier from the object manager's
    internal registry.
  description: The GetSceneTemplate method fetches a const pointer to a SceneTemplate
    object associated with the specified scene ID. This function is used in World
    of Warcraft's TrinityCore server to access predefined scene configurations that
    define visual effects, camera movements, and other cinematic behaviors during
    gameplay. The method performs a lookup in an internal data structure containing
    all registered scenes, returning a valid pointer if found or nullptr if no scene
    exists with the given ID. Scene templates are typically loaded at startup from
    database entries or DBC files and remain static throughout the server's runtime.
  parameters: []
  returns: A const pointer to the SceneTemplate object matching the provided sceneId,
    or nullptr if no such scene template exists in the registry.
  examples:
  - title: Basic Usage
    code: "const SceneTemplate* scene = sObjectMgr->GetSceneTemplate(12345);\nif (scene)\n\
      {\n    // Use scene data\n    printf(\"Scene name: %s\\n\", scene->Name.c_str());\n\
      }"
    language: cpp
  - title: Scene Template Validation
    code: "uint32 sceneId = 98765;\nconst SceneTemplate* scene = sObjectMgr->GetSceneTemplate(sceneId);\n\
      if (!scene)\n{\n    sLog->outError(LOG_FILTER_GENERAL, \"Scene template with\
      \ ID %u not found!\", sceneId);\n    return false;\n}\n// Proceed with valid\
      \ scene usage\nreturn true;"
    language: cpp
  notes: This method is thread-safe as it only reads from a static registry. The returned
    SceneTemplate pointer should never be modified directly, as these objects are
    managed by the ObjectMgr and represent immutable configuration data.
  warnings: Never assume that a returned SceneTemplate pointer is valid without checking
    for nullptr. Accessing invalid scene templates can lead to segmentation faults
    or undefined behavior.
  related:
  - GetSceneTemplate
  - LoadSceneTemplates
  - AddSceneTemplate
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T09:12:41.685552'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
