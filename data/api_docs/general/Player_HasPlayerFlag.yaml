api:
  class: Player
  method: HasPlayerFlag
  signature: bool Player::HasPlayerFlag(PlayerFlags flags) const
documentation:
  brief: Checks if a player has a specific player flag set.
  description: This method determines whether a particular player flag is currently
    set for the player. Player flags are used to represent various states or permissions
    that can be applied to players within the game, such as being in combat, having
    PvP flag, or being ghost. The method returns true if the specified flag is active
    and false otherwise. This functionality is essential for checking player state
    during gameplay mechanics and interactions.
  parameters: []
  returns: Returns true if the specified player flag is set, false otherwise. The
    return value represents the current state of the player flag within the player's
    internal flags structure.
  examples:
  - title: Basic usage example
    code: "if (player->HasPlayerFlag(PLAYER_FLAGS_PVP)) {\n    // Player has PvP flag\
      \ set\n}\n"
    language: cpp
  - title: Checking multiple flags
    code: "PlayerFlags flags = PLAYER_FLAGS_PVP | PLAYER_FLAGS_IGNORANT;\nif (player->HasPlayerFlag(flags))\
      \ {\n    // Player has both flags set\n}\n"
    language: cpp
  notes: This method is thread-safe and operates on the player's internal flag state.
    It does not modify any flags; it only reads them. Performance considerations are
    minimal as this involves simple bit checking operations.
  warnings: Be aware that player flags can change dynamically during gameplay, so
    checking flags may not always reflect current state. Also, be careful when using
    bitwise operations with player flags to avoid unintended behavior.
  related:
  - Player::SetPlayerFlag
  - Player::RemovePlayerFlag
  - Player::GetPlayerFlag
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:03:11.393657'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
