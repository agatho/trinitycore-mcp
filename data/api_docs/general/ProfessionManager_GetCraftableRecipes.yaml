api:
  class: ProfessionManager
  method: GetCraftableRecipes
  signature: int ProfessionManager::GetCraftableRecipes(int * player, ProfessionType
    profession) const
documentation:
  brief: Retrieves the list of craftable recipes for a player in the specified profession
  description: The GetCraftableRecipes method fetches all recipes that a player can
    currently craft based on their skill level, available materials, and profession
    requirements. This method is typically used by the game's crafting system to populate
    recipe lists in the user interface. It evaluates the player's current profession
    rank, any required secondary skills, and inventory availability to determine which
    recipes are accessible. The returned integer represents the count of craftable
    recipes found, or -1 if an error occurred during processing.
  parameters:
  - name: player
    description: Pointer to the player object whose craftable recipes are being retrieved.
      This parameter should point to a valid Player instance within the TrinityCore
      framework.
  - name: profession
    description: The ProfessionType enum value indicating which profession's recipes
      should be fetched. Valid values include various crafting professions such as
      Blacksmithing, Leatherworking, Alchemy, etc.
  returns: Returns the number of craftable recipes found for the specified player
    and profession. Returns -1 if an error occurs during processing or if either parameter
    is invalid.
  examples:
  - title: Basic Usage Example
    code: "Player* player = ...; // Assume valid player object\nint recipeCount =\
      \ sProfessionManager->GetCraftableRecipes(player, PROFESSION_BLACKSMITHING);\n\
      if (recipeCount >= 0)\n{\n    printf(\"Found %d craftable recipes\\n\", recipeCount);\n\
      }\nelse\n{\n    printf(\"Error retrieving recipes\\n\");\n}"
    language: cpp
  - title: Advanced Usage with Error Handling
    code: "Player* player = ...;\nProfessionType prof = PROFESSION_LEATHERWORKING;\n\
      int result = sProfessionManager->GetCraftableRecipes(player, prof);\nif (result\
      \ > 0)\n{\n    // Process the list of craftable recipes\n    printf(\"Player\
      \ can craft %d recipes in %s\\n\", result, GetProfessionName(prof));\n}\nelse\
      \ if (result == 0)\n{\n    printf(\"No craftable recipes available for this\
      \ profession\\n\");\n}\nelse\n{\n    printf(\"Failed to retrieve craftable recipes\\\
      n\");\n}"
    language: cpp
  notes: This method internally checks the player's skill level against recipe requirements
    and verifies that necessary materials are available in the player's inventory.
    The method may perform database queries or cache lookups depending on the implementation
    details of the ProfessionManager class. It is recommended to call this method
    only when the player's profession state is fully initialized.
  warnings: Ensure that the player pointer passed is valid and not null, as passing
    an invalid pointer could lead to undefined behavior. Also, be aware that calling
    this method during critical gameplay moments (such as combat) might cause performance
    degradation due to potential database access or complex calculations.
  related:
  - GetProfessionSkillLevel
  - CanPlayerCraftRecipe
  - AddCraftableRecipe
  - RemoveCraftableRecipe
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:06:53.249661'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
