api:
  class: Player
  method: CanEquipNewItem
  signature: int Player::CanEquipNewItem(uint8 slot, uint16 & dest, uint32 item, bool
    swap) const
documentation:
  brief: Checks if a player can equip an item in a specific slot, returning 0 if successful
    or an error code if not.
  description: The CanEquipNewItem method determines whether a player can equip a
    given item in a specified slot. It evaluates various conditions including item
    requirements, slot type, and inventory constraints to ensure proper equipment.
    This method is crucial for handling equipment validation during item transactions,
    such as when equipping items from bags or gear. The method returns 0 if the item
    can be equipped successfully, or an error code indicating why it cannot be equipped.
    It considers swap parameter for situations where an existing item needs to be
    swapped out.
  parameters:
  - name: slot
    description: The slot in which the item should be equipped. This is typically
      a uint8 representing the inventory slot (e.g., 1-18 for bag slots, 0-19 for
      equipment slots).
  - name: dest
    description: Reference to the destination slot where the item will be placed.
      This parameter is modified by the method to indicate the actual slot where the
      item will be equipped.
  - name: item
    description: The item ID or item entry to be equipped. This represents the item
      being checked for equipability, including its properties and requirements.
  - name: swap
    description: Boolean indicating whether a swap operation is required. If true,
      existing items in the slot will be swapped out; if false, no swap occurs.
  returns: Returns 0 if the item can be equipped successfully, or an error code (such
    as 1 for invalid item, 2 for invalid slot, etc.) indicating why the item cannot
    be equipped. The exact error codes depend on the specific conditions encountered
    during validation.
  examples:
  - title: Basic usage example
    code: int result = player->CanEquipNewItem(15, dest, 12345, false);
    language: cpp
  - title: Swap scenario example
    code: int result = player->CanEquipNewItem(19, dest, 67890, true);
    language: cpp
  notes: This method is typically used internally by TrinityCore during item transactions.
    It performs checks on item requirements, inventory slot validity, and equipment
    constraints. The method does not actually equip the item; it only validates whether
    it can be equipped. Performance considerations include checking item properties
    and slot constraints efficiently.
  warnings: The method may return different error codes depending on the specific
    conditions encountered. Developers should always check for non-zero return values
    before proceeding with actual equipment. Incorrect handling of return values may
    lead to invalid item placement or game mechanics issues.
  related:
  - CanEquipItem
  - EquipItem
  - Item::GetProto
  - Player::IsEquippedItem
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T17:48:36.916873'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
