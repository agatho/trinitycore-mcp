api:
  class: KitingManager
  method: GetKitingAggressiveness
  signature: float KitingManager::GetKitingAggressiveness() const
documentation:
  brief: Returns the current kiting aggressiveness value used by the KitingManager
    for AI decision making.
  description: The GetKitingAggressiveness method retrieves the float value that determines
    how aggressively a creature or NPC will pursue its target while using kiting behavior.
    This value influences the AI's decision-making process when determining whether
    to chase, maintain distance, or retreat from an enemy during combat. The aggressiveness
    level is typically used in conjunction with other kiting parameters to control
    movement patterns and combat tactics for non-player characters. This method does
    not modify any internal state and is purely informational.
  parameters: []
  returns: A float value representing the current kiting aggressiveness level, typically
    ranging between 0.0 (passive) and 1.0 (aggressive), though exact range may vary
    based on implementation details.
  examples:
  - title: Basic Usage
    code: "float aggressiveness = kitingManager->GetKitingAggressiveness();\nif (aggressiveness\
      \ > 0.7f)\n{\n    // Creature is highly aggressive in kiting behavior\n}"
    language: cpp
  - title: Using Aggressiveness for AI Logic
    code: "void UpdateKitingBehavior()\n{\n    float aggressiveness = kitingManager->GetKitingAggressiveness();\n\
      \    if (aggressiveness >= 0.5f)\n    {\n        // Apply more aggressive kiting\
      \ tactics\n        SetMovementType(MOVE_TYPE_CHASE);\n    }\n    else\n    {\n\
      \        // Apply defensive kiting tactics\n        SetMovementType(MOVE_TYPE_FLEE);\n\
      \    }\n}"
    language: cpp
  notes: This method is typically called during AI update cycles to make real-time
    decisions about kiting behavior. The returned value may be influenced by various
    factors such as creature type, difficulty level, or current combat situation.
    The method is thread-safe and can be safely called from different threads.
  warnings: The returned value should not be modified directly; it represents a read-only
    configuration parameter. Modifying this value through other means than appropriate
    setter methods may lead to unexpected AI behavior or inconsistencies in kiting
    patterns.
  related:
  - SetKitingAggressiveness
  - GetKitingDistance
  - GetKitingMovementType
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:04:46.801097'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
