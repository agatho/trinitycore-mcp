api:
  class: Unit
  method: Attack
  signature: bool Unit::Attack(Unit * victim, bool meleeAttack)
documentation:
  brief: Initiates melee attack against a target unit
  description: The Attack method begins a melee attack against the specified target
    unit, triggering the necessary combat mechanics including damage calculation,
    threat generation, and attack animation. This method is fundamental to player
    and NPC combat behavior in World of Warcraft, enabling units to engage in direct
    combat with their targets. The method handles both melee and ranged attacks based
    on the boolean parameter provided, with meleeAttack set to true indicating a melee
    attack while false indicates a ranged attack.
  parameters:
  - name: victim
    description: The target unit to attack. This parameter is required and must be
      a valid Unit pointer. The victim must be within melee range for melee attacks
      or within range for ranged attacks.
  - name: meleeAttack
    description: Boolean indicating whether the attack is melee (true) or ranged (false).
      When true, the method initiates a melee attack; when false, it initiates a ranged
      attack. This parameter determines the type of combat behavior and attack mechanics
      applied.
  returns: Returns true if the attack successfully begins, false otherwise. A return
    value of false typically indicates that the attack failed due to invalid target,
    range issues, or other combat restrictions.
  examples:
  - title: Basic Melee Attack Example
    code: "Unit* target = new Unit();\nbool success = player->Attack(target, true);\n\
      if (success)\n{\n    // Attack initiated successfully\n}"
    language: cpp
  - title: Ranged Attack Example
    code: "Unit* target = new Unit();\nbool success = player->Attack(target, false);\n\
      if (success)\n{\n    // Ranged attack initiated successfully\n}"
    language: cpp
  notes: The method requires the target unit to be valid and within combat range.
    It is typically used in conjunction with other combat-related methods like 'AttackStart'
    or 'SetTarget'. Performance considerations include checking for valid target and
    ensuring proper combat state before initiating attack.
  warnings: This method should not be called directly without proper validation of
    the target unit. Calling Attack on invalid targets can lead to crashes or undefined
    behavior. Always ensure that the target is within range before calling this method.
  related:
  - AttackStart
  - SetTarget
  - GetVictim
  - IsInCombat
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:25:23.293242'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
