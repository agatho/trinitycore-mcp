api:
  class: PoolMgr
  method: PoolMgr
  signature: void PoolMgr::PoolMgr(PoolMgr && right)
documentation:
  brief: Moves a PoolMgr object's resources to another PoolMgr instance, leaving the
    source in a valid but unspecified state.
  description: The PoolMgr move constructor transfers all internal resources and state
    from the right-hand side PoolMgr object to the current object. This operation
    is typically used when transferring ownership of a PoolMgr instance, such as during
    container operations or function returns. After the move, the source PoolMgr object
    will be left in a valid but unspecified state, meaning it can still be safely
    destroyed or assigned to, but its contents should not be relied upon. The move
    constructor is part of C++'s standard move semantics and is designed to avoid
    expensive deep copies while efficiently transferring resources.
  parameters: []
  returns: null
  examples:
  - title: Moving a PoolMgr instance
    code: 'PoolMgr sourcePool;

      // ... populate sourcePool ...

      PoolMgr newPool = std::move(sourcePool); // Move constructor invoked

      // sourcePool is now in a valid but unspecified state'
    language: cpp
  - title: Returning a PoolMgr from a function
    code: "PoolMgr createPool() {\n    PoolMgr pool;\n    // ... initialize pool ...\n\
      \    return pool; // Move constructor used for return value optimization\n}\n\
      \nPoolMgr myPool = createPool(); // Move constructor used to assign returned\
      \ pool"
    language: cpp
  notes: This is a move constructor, not a copy constructor. It's designed to be efficient
    and avoid deep copying of internal data structures. The source object after moving
    should not be used for operations that depend on its previous state, though it
    remains safe to destroy or reassign.
  warnings: After calling this move constructor, the source PoolMgr object is left
    in a valid but unspecified state. Do not attempt to use the source object's contents
    after a move operation; only destruction or assignment should be performed on
    it.
  related:
  - PoolMgr::PoolMgr(const PoolMgr&)
  - PoolMgr::~PoolMgr()
  - PoolMgr& PoolMgr::operator=(PoolMgr&&)
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T03:25:35.034136'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
