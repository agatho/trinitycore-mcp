api:
  class: Unit
  method: GetCharmed
  signature: Unit * Unit::GetCharmed() const
documentation:
  brief: Returns the Unit that is charmed by this unit, if any.
  description: The GetCharmed method retrieves the Unit object that is currently charmed
    by this unit. This method is commonly used in the context of creature AI and player
    mechanics to determine which unit is controlling another unit through charm effects.
    It returns a pointer to the charmed unit, or nullptr if no unit is charmed. The
    method is particularly useful for checking if a unit has been charmed by another
    unit, such as in scenarios involving pet AI or controlled creatures. This functionality
    is essential for implementing proper control logic in game mechanics where units
    can be charmed by other units.
  parameters: []
  returns: Returns a pointer to the Unit that is charmed by this unit, or nullptr
    if no unit is charmed. The returned pointer may be null if the unit has not been
    charmed by any other unit.
  examples:
  - title: Basic usage example
    code: "Unit* charmedUnit = unit->GetCharmed();\nif (charmedUnit != nullptr)\n\
      {\n    // Unit is charmed\n    // Do something with charmedUnit\n}\nelse\n{\n\
      \    // Unit is not charmed\n}"
    language: cpp
  notes: This method should be used carefully in multi-threaded environments as it
    may return nullptr if the unit is not charmed. The method does not perform any
    validation checks on whether the returned pointer is valid, so developers must
    ensure proper handling of null pointers.
  warnings: The method may return nullptr if no unit is charmed, which can lead to
    null pointer dereferences if not handled properly. Care should be taken when using
    this method in scenarios involving player or creature AI where charm effects are
    involved.
  related:
  - GetCharmer
  - IsCharmed
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T13:24:17.208204'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
