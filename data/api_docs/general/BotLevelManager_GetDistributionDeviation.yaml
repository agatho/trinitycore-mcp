api:
  class: BotLevelManager
  method: GetDistributionDeviation
  signature: float BotLevelManager::GetDistributionDeviation() const
documentation:
  brief: Calculates and returns the standard deviation of bot levels within the distribution.
  description: The GetDistributionDeviation method computes the statistical standard
    deviation of bot levels across all active bots managed by this BotLevelManager
    instance. This value represents how spread out the bot levels are from the mean
    level, providing insight into the diversity or uniformity of the bot population.
    A lower deviation indicates that most bots are close to the average level, while
    a higher deviation suggests a wider range of levels among bots. The method is
    typically used for balancing gameplay mechanics and ensuring appropriate challenge
    levels for players in different scenarios.
  parameters: []
  returns: A float value representing the standard deviation of bot levels in the
    current distribution. This value is always non-negative, with 0 indicating all
    bots are at the same level, and higher values indicating greater variation in
    bot levels.
  examples:
  - title: Basic Usage
    code: "float deviation = botLevelManager.GetDistributionDeviation();\nif (deviation\
      \ > 5.0f)\n{\n    // Adjust difficulty or spawn more varied bots\n}"
    language: cpp
  - title: Monitoring Bot Level Distribution
    code: "void CheckBotLevelBalance()\n{\n    float deviation = botLevelManager.GetDistributionDeviation();\n\
      \    if (deviation > 10.0f)\n    {\n        sLog->outString(\"Warning: High\
      \ level variance detected in bot distribution (%.2f)\", deviation);\n    }\n\
      \    else\n    {\n        sLog->outString(\"Bot levels are well-balanced (deviation:\
      \ %.2f)\", deviation);\n    }\n}"
    language: cpp
  notes: This method likely performs calculations based on the current set of managed
    bots and their assigned levels. The calculation may involve multiple iterations
    or caching to ensure performance, especially in high-frequency scenarios. The
    value returned is typically computed using a statistical formula that takes into
    account all active bot levels.
  warnings: The method assumes that all bots have valid level data. If bots are not
    properly initialized or if level data is missing, the result may be inaccurate
    or undefined. Additionally, this method should not be called during bot creation/destruction
    phases to avoid inconsistent results.
  related:
  - GetAverageLevel
  - GetBotCount
  - SetLevelDistribution
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:16:13.694279'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
