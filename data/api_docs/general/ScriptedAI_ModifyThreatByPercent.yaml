api:
  class: ScriptedAI
  method: ModifyThreatByPercent
  signature: void ScriptedAI::ModifyThreatByPercent(int * victim, int pct, int * who)
documentation:
  brief: Modifies the threat generated by a creature towards a target by a specified
    percentage.
  description: The ModifyThreatByPercent method adjusts the threat level that a ScriptedAI-controlled
    creature generates towards a specific target. This is commonly used in AI scripts
    to alter how much aggro a mob gains from attacks or abilities, allowing for dynamic
    combat behavior. The method takes a victim (the target of threat), a percentage
    value to modify the threat by, and an optional 'who' parameter that can specify
    which unit's threat is being modified. This functionality is crucial for creating
    complex AI behaviors such as threat redirection, threat scaling based on difficulty,
    or conditional aggro management.
  parameters:
  - name: victim
    description: Pointer to the target unit (Player or Creature) whose threat level
      will be modified. Must point to a valid Unit object.
  - name: pct
    description: Integer percentage value to modify threat by. Positive values increase
      threat, negative values decrease it. Zero means no change.
  - name: who
    description: Optional pointer to a specific unit whose threat is modified. If
      null, the current creature's threat towards victim is adjusted.
  returns: None. This method does not return any value.
  examples:
  - title: Increase Threat by 50%
    code: "void MyCreatureAI::OnSpellHit(Unit* caster, SpellInfo const* spell)\n{\n\
      \    if (spell->Id == 12345)\n        ModifyThreatByPercent(&victim, 50, nullptr);\n\
      }"
    language: cpp
  - title: Reduce Threat by 25% for Specific Target
    code: "void MyCreatureAI::DoSpecialAbility()\n{\n    Unit* target = SelectTarget(SELECT_TARGET_TOPAGGRO,\
      \ 0);\n    if (target)\n        ModifyThreatByPercent(&target, -25, &me);\n}"
    language: cpp
  notes: This method directly manipulates the threat table in the core's AI system.
    It should be used carefully to avoid unintended behavior such as aggro loss or
    excessive threat generation. The 'who' parameter allows for fine-grained control
    over which unit's threat is modified, useful when dealing with multiple targets
    or complex threat mechanics.
  warnings: Modifying threat values can cause unexpected combat behavior if not properly
    tested. Be cautious when using negative percentages on targets that are already
    highly aggroed, as this could potentially cause the creature to lose target focus
    or switch targets unexpectedly.
  related:
  - AddThreat
  - SetThreat
  - GetThreat
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T21:44:54.666769'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
