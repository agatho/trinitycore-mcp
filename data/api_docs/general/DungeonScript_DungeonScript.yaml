api:
  class: DungeonScript
  method: DungeonScript
  signature: void DungeonScript::DungeonScript(const char * name, uint32 mapId)
documentation:
  brief: Initializes a new dungeon script instance with the specified name and map
    ID.
  description: The DungeonScript constructor initializes a new dungeon script instance,
    associating it with a given name and map identifier. This method is typically
    used internally by the TrinityCore framework to set up dungeon-specific scripting
    behavior for instances. The name parameter defines the logical name of the script,
    while the mapId identifies which game map or instance this script applies to.
    This constructor likely registers the script within the core scripting system
    and prepares it for event handling related to dungeon mechanics such as boss encounters,
    loot distribution, and instance reset conditions.
  parameters:
  - name: name
    description: A null-terminated character string representing the logical name
      of the dungeon script. This identifier is used internally by the framework to
      reference and manage the script instance.
  - name: mapId
    description: A 32-bit unsigned integer identifying the specific map or instance
      ID this dungeon script is associated with. This value corresponds to the MapID
      field in the game's database for dungeon instances.
  returns: null
  examples:
  - title: Basic Dungeon Script Initialization
    code: DungeonScript* script = new DungeonScript("InstanceOfTheSunwell", 580);
    language: cpp
  - title: Creating a Custom Dungeon Script Instance
    code: "class MyDungeonScript : public DungeonScript\n{\npublic:\n    MyDungeonScript()\
      \ : DungeonScript(\"MyCustomDungeon\", 1234) {}\n};\n\nMyDungeonScript* customScript\
      \ = new MyDungeonScript();"
    language: cpp
  notes: This constructor is typically called during the initialization phase of a
    dungeon instance and should not be invoked directly by regular game code. The
    script name must be unique within the context of the map to avoid conflicts. The
    mapId parameter must correspond to an actual valid map entry in the database.
  warnings: Incorrect map IDs or duplicate script names may cause runtime errors or
    unexpected behavior in dungeon instance management. This constructor should only
    be called during proper object construction, not during runtime execution of game
    logic.
  related:
  - DungeonScript::~DungeonScript
  - DungeonScript::OnPlayerEnter
  - DungeonScript::OnBossKilled
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T04:10:30.378635'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
