api:
  class: BotThreatManager
  method: GetAllThreatTargets
  signature: int BotThreatManager::GetAllThreatTargets()
documentation:
  brief: Retrieves the total count of threat targets currently tracked by the bot's
    threat manager.
  description: The GetAllThreatTargets method returns an integer representing the
    number of entities that currently have threat assigned to them within the bot's
    threat management system. This method is typically used in AI logic to determine
    how many enemies are actively being targeted or considered for threat-based decision
    making. The method does not return the actual target objects, but rather provides
    a count which can be used to iterate through or manage threat targets. This functionality
    is integral to bot behavior in World of Warcraft's TrinityCore environment, particularly
    when implementing intelligent combat strategies based on threat levels.
  parameters: []
  returns: An integer value representing the total number of threat targets currently
    being tracked by the bot's threat manager. Returns zero if no threats are present
    or if the method fails to retrieve target information.
  examples:
  - title: Basic usage to check threat count
    code: "int threatCount = botThreatManager->GetAllThreatTargets();\nif (threatCount\
      \ > 0)\n{\n    // Bot has active threats\n    // Proceed with threat-based AI\
      \ logic\n}"
    language: cpp
  - title: Using threat count for combat decision making
    code: "int threatCount = botThreatManager->GetAllThreatTargets();\nif (threatCount\
      \ >= 3)\n{\n    // Bot is under heavy threat, consider fleeing or defensive\
      \ actions\n    bot->SetCombatState(false);\n}\nelse if (threatCount == 0)\n\
      {\n    // No threats, safe to engage new targets\n    bot->SetCombatState(true);\n\
      }"
    language: cpp
  notes: This method provides a quick way to assess the current threat landscape without
    retrieving individual target data. The implementation likely iterates through
    internal threat tables or maps maintained by the bot's AI system. Performance
    is generally low as it only requires counting entries rather than complex operations.
  warnings: The returned count may not reflect real-time changes if the threat manager's
    internal state has not been updated recently. In high-frequency combat scenarios,
    this value should be checked frequently to ensure accurate AI behavior.
  related:
  - GetThreatTarget
  - AddThreatTarget
  - RemoveThreatTarget
  - ClearAllThreatTargets
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T16:47:07.010349'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
