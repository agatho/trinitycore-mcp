api:
  class: SmartScript
  method: GetBaseObject
  signature: WorldObject * SmartScript::GetBaseObject() const
documentation:
  brief: Returns the base WorldObject associated with this SmartScript instance.
  description: The GetBaseObject method retrieves the primary WorldObject that serves
    as the context or owner for this SmartScript instance. This object typically represents
    the creature, game object, or player that triggered or is associated with the
    AI script execution. The returned pointer can be used to access various properties
    and methods of the underlying WorldObject, such as position, health, faction,
    or other game state information. This method is commonly used within SmartAI scripts
    to obtain contextual data about the entity executing the script.
  parameters: []
  returns: A pointer to the WorldObject that serves as the base object for this SmartScript
    instance. Returns nullptr if no valid base object is set or available.
  examples:
  - title: Accessing Base Object Position
    code: "void OnUpdate(SmartScript* script)\n{\n    WorldObject* baseObj = script->GetBaseObject();\n\
      \    if (baseObj)\n    {\n        Position pos = baseObj->GetPosition();\n \
      \       // Use position data for further logic\n    }\n}"
    language: cpp
  - title: Checking Base Object Type
    code: "void OnEvent(SmartScript* script)\n{\n    WorldObject* baseObj = script->GetBaseObject();\n\
      \    if (baseObj && baseObj->IsCreature())\n    {\n        Creature* creature\
      \ = static_cast<Creature*>(baseObj);\n        // Perform creature-specific actions\n\
      \    }\n}"
    language: cpp
  notes: The returned WorldObject pointer is valid only during the execution context
    of the SmartScript. Care should be taken to ensure that the object hasn't been
    destroyed or removed from the world before using it. This method is typically
    called within event handlers or action callbacks where the script's context is
    established.
  warnings: Calling this method on a SmartScript instance without a properly initialized
    base object may return nullptr, leading to null pointer dereferences if not checked.
    Always validate the returned pointer before using it in critical code paths.
  related:
  - GetOwner
  - GetTarget
  - SetBaseObject
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:37:53.599691'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
