api:
  class: Aura
  method: CallScriptEffectApplyHandlers
  signature: bool Aura::CallScriptEffectApplyHandlers(const AuraEffect * aurEff, const
    AuraApplication * aurApp, AuraEffectHandleModes mode)
documentation:
  brief: Calls all script handlers associated with an aura effect application.
  description: The CallScriptEffectApplyHandlers method is responsible for invoking
    all registered script handlers that are associated with a specific aura effect
    when it is applied to a target. This method ensures that scripted behavior, such
    as custom effects or modifications, are properly executed during the application
    of an aura effect. It takes into account the mode in which the effect is being
    applied (e.g., positive, negative, or passive) and handles the execution flow
    accordingly. The method returns true if all handlers were successfully executed,
    or false if any handler failed or was skipped.
  parameters:
  - name: aurEff
    description: Pointer to the AuraEffect object that represents the specific effect
      being applied.
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      how the aura is applied to a target.
  - name: mode
    description: The AuraEffectHandleModes enum value indicating the mode in which
      the effect is being applied (e.g., AURA_EFFECT_HANDLE_REAL, AURA_EFFECT_HANDLE_SEND_FOR_CLIENT).
  returns: Returns true if all script handlers were successfully executed for the
    aura effect; otherwise returns false.
  examples:
  - title: Basic usage in an aura application context
    code: "if (aura->CallScriptEffectApplyHandlers(aurEff, aurApp, mode)) {\n    //\
      \ All handlers executed successfully\n} else {\n    // At least one handler\
      \ failed or was skipped\n}"
    language: cpp
  notes: This method is typically invoked internally by the TrinityCore aura system
    when applying effects to players or creatures. Developers should ensure that any
    custom scripts attached to aura effects are properly implemented and do not introduce
    performance bottlenecks.
  warnings: Improper handling of script handlers can lead to unexpected behavior in
    gameplay mechanics. Ensure all custom scripts are thoroughly tested, especially
    those involving complex interactions with other auras or game systems.
  related:
  - Aura::CallScriptEffectRemoveHandlers
  - Aura::GetEffect
  - AuraApplication::GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T14:06:35.396475'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
