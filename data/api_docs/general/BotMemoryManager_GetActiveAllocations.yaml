api:
  class: BotMemoryManager
  method: GetActiveAllocations
  signature: uint32_t BotMemoryManager::GetActiveAllocations() const
documentation:
  brief: Returns the count of currently active memory allocations managed by the bot
    memory manager
  description: The GetActiveAllocations method retrieves the total number of memory
    blocks that are currently allocated and in use by the BotMemoryManager instance.
    This count represents all active allocations regardless of their type or purpose
    within the bot's memory management system. The method provides insight into memory
    usage patterns and can be useful for debugging memory leaks, monitoring resource
    consumption, or optimizing allocation strategies. The returned value is thread-safe
    and reflects the state at the time of the method call.
  parameters: []
  returns: A uint32_t value representing the total number of currently active memory
    allocations managed by this BotMemoryManager instance. Returns zero if no allocations
    are active.
  examples:
  - title: Basic Usage to Monitor Memory
    code: "uint32_t activeAllocs = botMemoryManager.GetActiveAllocations();\nif (activeAllocs\
      \ > 1000)\n{\n    sLog->outString(\"Warning: High memory allocation count detected:\
      \ %u\", activeAllocs);\n}"
    language: cpp
  - title: Memory Usage Analysis for Bot Performance
    code: 'uint32_t initialAllocs = botMemoryManager.GetActiveAllocations();

      // ... perform bot operations ...

      uint32_t finalAllocs = botMemoryManager.GetActiveAllocations();

      uint32_t delta = finalAllocs - initialAllocs;

      sLog->outString("Memory allocations increased by: %u", delta);'
    language: cpp
  notes: This method provides a snapshot of current memory state and should not be
    used for real-time allocation tracking. The implementation uses atomic operations
    to ensure thread safety when multiple threads access the memory manager concurrently.
  warnings: The returned value only reflects allocations managed by this specific
    BotMemoryManager instance, not global system memory usage. Frequent calls to this
    method may impact performance in high-frequency scenarios.
  related:
  - GetTotalAllocations
  - GetFreeMemory
  - GetUsedMemory
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T17:09:21.885635'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
