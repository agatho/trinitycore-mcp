api:
  class: Player
  method: CanEquipUniqueItem
  signature: int Player::CanEquipUniqueItem(const ItemTemplate * itemProto, const
    BonusData & itemBonus, uint8 except_slot, uint32 limit_count) const
documentation:
  brief: Checks if a player can equip a unique item based on item template and bonus
    data.
  description: This method determines whether a player can equip a specific unique
    item by evaluating the item's template, bonus data, and the slot where it would
    be equipped. It considers various game mechanics including item level requirements,
    class restrictions, and unique item limits. The method returns an integer value
    indicating the success or failure of the equip check, with values typically representing
    different failure states such as invalid slot, item level too low, or item limit
    exceeded.
  parameters:
  - name: itemProto
    description: Pointer to the ItemTemplate structure that defines the item properties
      and requirements. This includes item level, class restrictions, and unique item
      characteristics.
  - name: itemBonus
    description: Reference to BonusData structure containing bonus information for
      the item. This includes enchantment bonuses, gem bonuses, and other item-specific
      modifiers.
  - name: except_slot
    description: The slot where the item would be equipped (e.g., head, chest, weapon).
      This parameter allows checking specific slots beyond normal equipment restrictions.
  - name: limit_count
    description: The maximum number of items allowed to be equipped in that slot.
      This helps enforce unique item limits and prevents over-usage of unique items.
  returns: Returns an integer value indicating the result of the equip check. Values
    typically include 0 for success, or positive integers representing specific failure
    conditions such as invalid slot, item level too low, or limit exceeded.
  examples:
  - title: Basic usage example
    code: int result = player->CanEquipUniqueItem(itemTemplate, bonusData, SLOT_HEAD,
      1);
    language: cpp
  - title: Advanced usage with multiple checks
    code: "if (player->CanEquipUniqueItem(itemTemplate, bonusData, SLOT_WEAPON, 3)\
      \ == 0)\n{\n    // Proceed with equip\n}\nelse\n{\n    // Handle failure\n}"
    language: cpp
  notes: This method is primarily used in the context of item validation during equipment
    operations. It's important to note that this method does not actually perform
    the equip operation, but rather checks if the player can successfully equip the
    item. The method may be called multiple times during a single equip operation
    depending on the game mechanics.
  warnings: This method should not be used for direct item equip operations as it
    only validates whether an item can be equipped. It's possible to have false negatives
    due to item-specific restrictions that may not be fully accounted for in this
    method. Additionally, this method may not consider all possible conditions such
    as player level requirements or class restrictions.
  related:
  - CanEquipItem
  - EquipItem
  - Item::CanEquip
  - Player::CanEquipItem
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T17:47:57.838630'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
