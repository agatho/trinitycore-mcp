api:
  class: Item
  method: ReplaceAllItemZoneFlags
  signature: void Item::ReplaceAllItemZoneFlags(ItemZoneFlags flags)
documentation:
  brief: Replaces all zone flags on the item with the specified flags.
  description: The ReplaceAllItemZoneFlags method updates all zone-related flags associated
    with an Item object to match the provided ItemZoneFlags value. This method is
    typically used in World of Warcraft's TrinityCore framework to manage item restrictions
    or permissions based on player zones, such as area restrictions, faction-specific
    items, or zone-based quest requirements. The operation directly modifies internal
    item data structures and may trigger updates to client-side item displays or server-side
    validation checks. This function should be used carefully as it can affect how
    the item behaves in different zones or scenarios.
  parameters:
  - name: flags
    description: The new ItemZoneFlags value that will replace all existing zone flags
      on this item. This parameter defines the zone-related restrictions or permissions
      for the item.
  returns: null
  examples:
  - title: Setting an item to be usable in all zones
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    item->ReplaceAllItemZoneFlags(ItemZoneFlags::None);\n\
      }"
    language: cpp
  - title: Restricting an item to specific zones using custom flags
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    ItemZoneFlags\
      \ restrictedFlags = static_cast<ItemZoneFlags>(ZoneFlag::Outland | ZoneFlag::Northrend);\n\
      \    item->ReplaceAllItemZoneFlags(restrictedFlags);\n}"
    language: cpp
  notes: This method directly modifies the internal state of the Item object and may
    cause immediate changes in how the item interacts with zone-based systems. It
    is recommended to verify that the new flags are valid for the intended use case,
    especially when dealing with faction-specific or restricted items.
  warnings: Modifying zone flags can have unintended consequences on gameplay mechanics
    such as quest progression, item usability, or player experience. Ensure that flag
    modifications align with game design requirements and do not inadvertently create
    exploits or break existing systems.
  related:
  - GetItemZoneFlags
  - AddItemZoneFlag
  - RemoveItemZoneFlag
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T11:21:26.944351'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
