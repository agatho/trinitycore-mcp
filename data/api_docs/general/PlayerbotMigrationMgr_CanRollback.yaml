api:
  class: PlayerbotMigrationMgr
  method: CanRollback
  signature: bool PlayerbotMigrationMgr::CanRollback(const std::string & version)
documentation:
  brief: Determines whether a rollback to the specified version is allowed in the
    playerbot migration system
  description: The CanRollback method checks if a rollback operation to a specific
    version of the playerbot configuration is permitted. This method evaluates the
    current state of the migration manager and verifies whether the target version
    can be safely rolled back to. It typically considers factors such as migration
    history, version compatibility, and system constraints to determine rollback eligibility.
    The method is used internally by the playerbot system to ensure data integrity
    during version transitions.
  parameters:
  - name: version
    description: The target version string to check for rollback capability. This
      should be a valid version identifier that matches the format used by the playerbot
      migration system.
  returns: Returns true if the rollback to the specified version is allowed and safe,
    false otherwise. A return value of false typically indicates that the version
    is not available, incompatible, or that rollback operations are disabled for the
    current state.
  examples:
  - title: Check if rollback to version 1.2.3 is possible
    code: "bool canRollback = PlayerbotMigrationMgr::instance()->CanRollback(\"1.2.3\"\
      );\nif (canRollback)\n{\n    // Proceed with rollback logic\n    LOG_INFO(\"\
      playerbot\", \"Rollback to version 1.2.3 is allowed\");\n}"
    language: cpp
  notes: This method likely interacts with internal version tracking and migration
    state management. It may perform checks against a whitelist of allowed rollback
    versions or validate against a migration history log. The implementation might
    be thread-safe as it's typically called during system initialization or configuration
    changes.
  warnings: Calling this method without proper version validation may lead to inconsistent
    playerbot states. Ensure the version string is properly formatted and represents
    an existing migration state before attempting rollback operations.
  related:
  - PlayerbotMigrationMgr::Migrate
  - PlayerbotMigrationMgr::GetCurrentVersion
  - PlayerbotMigrationMgr::GetAvailableVersions
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:22:20.974737'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
