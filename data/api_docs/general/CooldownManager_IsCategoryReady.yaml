api:
  class: CooldownManager
  method: IsCategoryReady
  signature: bool CooldownManager::IsCategoryReady(uint32 categoryId) const
documentation:
  brief: Checks if a cooldown category is ready for use.
  description: The IsCategoryReady method determines whether all cooldowns within
    a specified category are currently available for use. In World of Warcraft's TrinityCore
    implementation, cooldown categories group related abilities or items that share
    the same cooldown timer. This method is commonly used to prevent players from
    spamming abilities or using items that should be on cooldown. The check considers
    all entries in the category and returns true only if none of them are currently
    cooling down.
  parameters: []
  returns: Returns true if all cooldowns in the specified category are ready (i.e.,
    not on cooldown), false otherwise. If the category does not exist or has no active
    cooldowns, it will return true.
  examples:
  - title: Basic Usage
    code: "if (player->GetCooldownManager()->IsCategoryReady(12345)) {\n    // Player\
      \ can use abilities in category 12345\n    player->CastSpell(target, SPELL_ID,\
      \ true);\n}"
    language: cpp
  - title: Checking Multiple Categories
    code: "CooldownManager* cm = player->GetCooldownManager();\nif (cm->IsCategoryReady(1001)\
      \ && cm->IsCategoryReady(1002)) {\n    // Both categories are ready, safe to\
      \ cast both spells\n    player->CastSpell(target, SPELL_ID_1, true);\n    player->CastSpell(target,\
      \ SPELL_ID_2, true);\n}"
    language: cpp
  notes: This method relies on internal cooldown tracking and should be called after
    any cooldown modifications have been applied. It is typically used in spell casting
    logic to validate whether an ability can be executed based on category-based cooldown
    restrictions.
  warnings: Ensure that categoryId corresponds to a valid cooldown category defined
    in the game's data files; invalid IDs may lead to unexpected behavior or errors.
    This method does not account for global cooldowns, only category-specific ones.
  related:
  - GetCategoryCooldown
  - AddCategoryCooldown
  - ResetCategoryCooldown
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T15:40:25.049240'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
