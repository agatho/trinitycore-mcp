api:
  class: Unit
  method: GetControllingPlayer
  signature: int * Unit::GetControllingPlayer() const
documentation:
  brief: Returns the unique identifier of the player controlling this unit.
  description: The GetControllingPlayer method retrieves the GUID of the player who
    currently controls this unit. This is commonly used in game mechanics where a
    unit (such as a pet or minion) is controlled by a player. The method returns a
    pointer to an integer representing the GUID, which can be used to identify the
    controlling player within the game world. It is particularly useful when dealing
    with summoned creatures or pets that are under player control.
  parameters: []
  returns: Returns a pointer to an integer representing the GUID of the controlling
    player. If no player is controlling the unit, it returns NULL or 0, indicating
    no active controller.
  examples:
  - title: Basic usage example
    code: "Unit* pet = player->GetPet();\nint* playerGUID = pet->GetControllingPlayer();\n\
      if(playerGUID != nullptr)\n{\n    // Player is controlling the pet\n}"
    language: cpp
  notes: This method is typically used in conjunction with other control-related methods
    to determine the relationship between units and players. Performance considerations
    are minimal as this is a simple getter method, but it should be used carefully
    in loops where frequent calls may occur.
  warnings: Be cautious when using this method in scenarios involving multiple players
    or complex control systems, as incorrect handling can lead to unexpected behavior
    or crashes if the unit is not properly controlled.
  related:
  - GetOwner
  - GetControlledUnit
  - GetPlayer
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T13:20:20.003246'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
