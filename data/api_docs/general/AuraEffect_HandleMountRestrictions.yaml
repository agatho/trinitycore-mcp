api:
  class: AuraEffect
  method: HandleMountRestrictions
  signature: void AuraEffect::HandleMountRestrictions(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Applies or removes mount restrictions based on aura application state and
    mode.
  description: The HandleMountRestrictions method manages the application of mount
    restrictions when an aura is applied or removed from a unit. It checks whether
    the specified aura application should prevent the target unit from mounting, depending
    on the provided mode and apply flag. This method is typically invoked during aura
    application or removal events to enforce game mechanics related to character movement
    and mount availability. The behavior may vary based on the aura's properties and
    the current state of the affected unit.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains information about
      the aura being applied or removed.
  - name: mode
    description: Specifies the mode of operation for handling mount restrictions.
      Values typically indicate different types of mount restriction effects (e.g.,
      0 = normal, 1 = temporary, etc.).
  - name: apply
    description: Boolean flag indicating whether to apply or remove the mount restriction.
      True means applying the restriction, false means removing it.
  returns: null
  examples:
  - title: Applying Mount Restriction
    code: 'AuraEffect* effect = aura->GetEffect(0);

      effect->HandleMountRestrictions(auraApp, 0, true);'
    language: cpp
  - title: Removing Mount Restriction
    code: 'AuraEffect* effect = aura->GetEffect(0);

      effect->HandleMountRestrictions(auraApp, 1, false);'
    language: cpp
  notes: This method is part of the internal aura handling system in TrinityCore and
    interacts with unit movement and mount state management. It's commonly used by
    effects that restrict player or creature mounting abilities under certain conditions.
  warnings: Incorrect usage of the mode parameter may lead to unexpected behavior
    in mount restriction logic. Ensure that the aura application context is valid
    before calling this method.
  related:
  - AuraEffect::HandleEffect
  - AuraApplication::GetTarget
  - Unit::SetCanFly
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:15:56.263359'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
