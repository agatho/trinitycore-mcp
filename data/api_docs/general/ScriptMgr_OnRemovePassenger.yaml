api:
  class: ScriptMgr
  method: OnRemovePassenger
  signature: void ScriptMgr::OnRemovePassenger(Transport * transport, Player * player)
documentation:
  brief: Called when a player is removed from a transport, allowing scripts to execute
    custom logic during passenger removal.
  description: The OnRemovePassenger method is invoked by the TrinityCore scripting
    system whenever a Player is dismounted from a Transport object. This event occurs
    during the process of removing a passenger from a vehicle or transport mechanism
    such as boats, zeppelins, or other moving transports in Azeroth. The method provides
    an opportunity for custom scripts to execute logic when this specific event happens,
    such as adjusting player states, triggering quest events, or modifying behavior
    based on the removal. It is part of the general scripting framework and does not
    return any value, making it suitable for side-effect operations rather than data
    manipulation.
  parameters:
  - name: transport
    description: Pointer to the Transport object from which the player is being removed.
      This represents the vehicle or transport mechanism that the player was riding.
  - name: player
    description: Pointer to the Player object that is being removed from the transport.
      This is the character instance of the player who was riding on the transport.
  returns: null
  examples:
  - title: Basic script implementation for OnRemovePassenger
    code: "class MyTransportScript : public TransportScript\n{\npublic:\n    void\
      \ OnRemovePassenger(Transport* transport, Player* player) override\n    {\n\
      \        // Log the event\n        sLog->outString(\"Player %s was removed from\
      \ transport %u\", player->GetName(), transport->GetEntry());\n        \n   \
      \     // Trigger a quest update or other logic here\n        if (player->HasQuest(12345))\n\
      \            player->AreaExploredOrEventHappens(12345);\n    }\n};"
    language: cpp
  notes: This method is typically called from within the core transport update logic,
    and should not be used for heavy computations or blocking operations as it may
    affect performance. It's recommended to avoid modifying the transport or player
    objects directly in this handler unless necessary.
  warnings: Do not attempt to modify or delete the transport or player object within
    this method, as doing so can lead to undefined behavior or crashes. Also, ensure
    that all pointers passed are valid before using them to prevent null pointer dereferences.
  related:
  - OnAddPassenger
  - OnTransportUpdate
  - OnRelocate
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T22:07:39.142355'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
