api:
  class: Player
  method: UpdateZoneDependentAuras
  signature: void Player::UpdateZoneDependentAuras(uint32 zone_id)
documentation:
  brief: Updates zone-dependent auras for the player based on the provided zone ID.
  description: The UpdateZoneDependentAuras method is responsible for managing and
    updating auras that are dependent on the player's current zone. This includes
    applying or removing auras based on zone-specific rules, such as those related
    to faction rep, area triggers, or environmental effects. The method ensures that
    the player's aura state accurately reflects their current geographical location
    within the game world. It is typically invoked when a player enters or leaves
    a zone, or when zone-related conditions change. This method does not directly
    modify the zone ID of the player but uses the provided zone_id parameter to determine
    which zone-dependent auras should be processed.
  parameters:
  - name: zone_id
    description: The unique identifier of the zone that determines which zone-dependent
      auras should be updated. This value corresponds to the ZoneDBC entry in the
      game database and is used to match against aura definitions that specify zone-based
      conditions.
  returns: null
  examples:
  - title: Updating auras when entering a new zone
    code: "void Player::OnZoneChange(uint32 new_zone_id)\n{\n    UpdateZoneDependentAuras(new_zone_id);\n\
      }"
    language: cpp
  - title: Manually triggering zone-dependent aura update for debugging
    code: 'Player* player = ...; // Get a player instance

      uint32 current_zone = player->GetZoneId();

      player->UpdateZoneDependentAuras(current_zone);'
    language: cpp
  notes: This method is part of the core aura management system in TrinityCore and
    is often called automatically by the framework when zone changes occur. Developers
    should be aware that this method may trigger multiple internal operations including
    aura application/removal, stat recalculations, and visual updates. It's important
    to ensure that zone IDs passed to this method are valid and correspond to actual
    zones defined in the game database.
  warnings: Calling this method with an invalid or non-existent zone_id can lead to
    unexpected behavior or crashes. The method assumes that all zone-dependent auras
    have been properly registered in the aura system. Avoid calling this method during
    critical sections of code where player state changes are being processed to prevent
    race conditions.
  related:
  - Player::GetZoneId
  - Player::UpdateAreaDependentAuras
  - Player::AddAura
  - Player::RemoveAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T17:03:38.870908'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
