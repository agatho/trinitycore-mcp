api:
  class: Item
  method: SetGem
  signature: void Item::SetGem(uint16 slot, const ItemDynamicFieldGems * gem, uint32
    gemScalingLevel)
documentation:
  brief: Sets a gem in the specified slot of an item with the given gem data and scaling
    level.
  description: This method assigns a gem to a specific slot within an item's gem socketing
    system. It allows developers to modify the gem properties of items, including
    the gem's ID, enchantment, and scaling level. The method is typically used in
    conjunction with item creation or modification processes to ensure proper gem
    assignment. It operates on the item's dynamic fields, specifically the ItemDynamicFieldGems
    structure which contains gem information. This method does not directly affect
    the item's physical appearance but rather modifies its internal data structure.
  parameters:
  - name: slot
    description: The socket slot index where the gem should be placed, ranging from
      0 to 3. Valid values are 0-3, representing the four possible gem sockets on
      an item.
  - name: gem
    description: Pointer to the ItemDynamicFieldGems structure containing gem data
      including ID, enchantment, and other properties. This parameter can be null
      if removing a gem from the slot.
  - name: gemScalingLevel
    description: The scaling level for the gem, determining how the gem's stats are
      adjusted based on item level. Valid range is 0-1000, with higher values producing
      more powerful gem effects.
  returns: null
  examples:
  - title: Basic Gem Assignment Example
    code: 'Item* item = new Item();

      ItemDynamicFieldGems gemData;


      // Set gem in slot 0

      item->SetGem(0, &gemData, 100);

      '
    language: cpp
  - title: Advanced Gem Assignment with Scaling
    code: 'Item* item = new Item();

      ItemDynamicFieldGems gemData;


      // Set gem in slot 2 with scaling level 200

      item->SetGem(2, &gemData, 200);

      '
    language: cpp
  notes: This method is part of the internal item management system and should be
    used carefully during item creation or modification processes. The gem data structure
    must be properly initialized before calling this method to avoid memory access
    violations. Performance considerations include avoiding frequent calls to this
    method during item processing, as it may trigger updates to item's dynamic fields.
  warnings: This method should not be called directly on items that are already in
    use by players or NPCs, as it may cause data inconsistencies or crashes. The gem
    parameter must be valid and initialized before calling this method. Avoid calling
    this method with invalid slot values (outside 0-3 range) which can lead to undefined
    behavior.
  related:
  - Item::GetGem
  - Item::AddGem
  - Item::RemoveGem
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T04:33:36.378094'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
