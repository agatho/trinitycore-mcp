api:
  class: LazyManagerFactory
  method: GetQuestManager
  signature: QuestManager * LazyManagerFactory::GetQuestManager()
documentation:
  brief: Returns the singleton QuestManager instance for handling quest-related operations
    in the TrinityCore server.
  description: The GetQuestManager method retrieves the global singleton instance
    of the QuestManager class, which is responsible for managing all active quests,
    quest states, and quest-related game logic within the TrinityCore server environment.
    This method ensures that only one instance of the QuestManager exists throughout
    the application lifecycle, providing centralized control over quest data and operations.
    The returned pointer should be used directly without attempting to delete or manage
    its lifetime, as it is managed internally by the LazyManagerFactory. This method
    is typically called during quest initialization, state updates, or when processing
    quest-related events such as quest acceptance, completion, or progression.
  parameters: []
  returns: A pointer to the singleton QuestManager instance. Returns nullptr if the
    manager has not been initialized yet, though this scenario should not occur in
    normal operation since LazyManagerFactory ensures proper initialization of its
    managers.
  examples:
  - title: Basic Usage
    code: "QuestManager* questMgr = sObjectMgr->GetQuestManager();\nif (questMgr)\n\
      {\n    // Use the quest manager to perform quest operations\n    questMgr->HandleQuestComplete(player,\
      \ questId);\n}"
    language: cpp
  - title: Accessing Quest Data
    code: "QuestManager* questMgr = sObjectMgr->GetQuestManager();\nif (questMgr)\n\
      {\n    Quest const* quest = questMgr->GetQuestTemplate(questId);\n    if (quest)\n\
      \    {\n        // Process quest data\n        uint32 requiredItems = quest->GetRequiredItemCount();\n\
      \        // ... other quest processing\n    }\n}"
    language: cpp
  notes: This method follows the lazy initialization pattern, meaning the QuestManager
    instance is created only when first requested. The returned pointer is guaranteed
    to be valid for the lifetime of the server process. Developers should not attempt
    to store or cache this pointer beyond its intended usage scope as it may lead
    to undefined behavior if the manager is reinitialized.
  warnings: Do not delete or attempt to manage the lifetime of the returned QuestManager
    instance, as it's a singleton managed by the LazyManagerFactory. Calling this
    method before the server has properly initialized managers may return nullptr,
    though this should not occur in standard TrinityCore operation.
  related:
  - GetGameObjectManager
  - GetItemManager
  - GetPlayerManager
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T11:33:48.625229'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
