api:
  class: ConversationScript
  method: GetAI
  signature: ConversationAI * ConversationScript::GetAI(Conversation * conversation)
    const
documentation:
  brief: Retrieves the ConversationAI instance associated with a given conversation.
  description: The GetAI method is used to obtain the ConversationAI object that controls
    the behavior of a specific conversation in TrinityCore. This method allows scripts
    and other components to access and interact with the AI logic tied to a conversation,
    enabling dynamic modification of conversation flow, responses, or triggers. The
    returned pointer should be used carefully as it may be null if no AI is assigned
    to the conversation or if the conversation has been destroyed. This functionality
    is essential for customizing interactive dialogue systems within World of Warcraft's
    quest and NPC interaction framework.
  parameters: []
  returns: A pointer to the ConversationAI instance associated with the conversation,
    or nullptr if no AI is assigned or the conversation is invalid.
  examples:
  - title: Basic usage to access conversation AI
    code: "Conversation* conv = sObjectMgr->GetConversation(12345);\nif (conv)\n{\n\
      \    ConversationAI* ai = conv->GetAI();\n    if (ai)\n    {\n        // Interact\
      \ with the AI logic\n        ai->OnPlayerAcceptQuest(player, quest);\n    }\n\
      }"
    language: cpp
  - title: Checking for valid AI before use
    code: "Conversation* conv = sObjectMgr->GetConversation(67890);\nConversationAI*\
      \ ai = conv ? conv->GetAI() : nullptr;\nif (ai && ai->IsInUse())\n{\n    //\
      \ Safe to proceed with AI operations\n    ai->SetCurrentState(CONVERSATION_STATE_IN_PROGRESS);\n\
      }"
    language: cpp
  notes: This method is typically used in conjunction with conversation management
    systems. The returned ConversationAI pointer should not be deleted or managed
    by the caller, as it's owned by the conversation object itself. Ensure that the
    conversation exists and is valid before calling this method to avoid undefined
    behavior.
  warnings: Calling GetAI on a conversation that has been destroyed or is in an invalid
    state may return a null pointer. Always check for null returns before using the
    returned AI instance, as dereferencing a null pointer will cause a crash. Be cautious
    when modifying conversation AI state directly, as this can affect game progression
    and quest completion.
  related:
  - Conversation::SetAI
  - Conversation::GetConversationId
  - Conversation::IsInUse
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T15:48:27.111121'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
