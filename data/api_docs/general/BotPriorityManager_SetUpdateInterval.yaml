api:
  class: BotPriorityManager
  method: SetUpdateInterval
  signature: void BotPriorityManager::SetUpdateInterval(BotPriority priority, uint32
    intervalTicks)
documentation:
  brief: Sets the update interval for a specified bot priority level.
  description: The SetUpdateInterval method configures how frequently bots with a
    given priority level should be updated or processed by the system. This allows
    for fine-grained control over bot behavior timing, enabling higher-priority bots
    to be updated more frequently than lower-priority ones. The interval is specified
    in ticks, which are typically game loop iterations or time units depending on
    the internal implementation. This method is used primarily within the TrinityCore
    bot management system to optimize resource usage and ensure responsive bot behavior
    based on priority levels.
  parameters:
  - name: priority
    description: The BotPriority enum value that specifies which priority level's
      update interval will be modified. Valid values are typically defined in the
      BotPriority enumeration such as LOW, MEDIUM, HIGH, etc.
  - name: intervalTicks
    description: The number of ticks between updates for bots with the specified priority.
      A value of 0 may disable updates or use a default interval depending on implementation.
      Higher values reduce CPU usage but may delay bot responsiveness.
  returns: null
  examples:
  - title: Set High Priority Bot Update Interval
    code: 'BotPriorityManager::instance()->SetUpdateInterval(BotPriority::HIGH, 5);

      // Sets high priority bots to update every 5 ticks'
    language: cpp
  - title: Configure Multiple Priority Intervals
    code: 'BotPriorityManager::instance()->SetUpdateInterval(BotPriority::LOW, 20);

      BotPriorityManager::instance()->SetUpdateInterval(BotPriority::MEDIUM, 10);

      BotPriorityManager::instance()->SetUpdateInterval(BotPriority::HIGH, 5);'
    language: cpp
  notes: This method likely modifies internal data structures that store priority-to-interval
    mappings. Changes take effect immediately for newly scheduled updates but may
    not affect currently running bot processes. The tick-based interval system assumes
    a consistent game loop timing, so interval values should be chosen based on expected
    update frequency requirements.
  warnings: Setting very low interval values (e.g., 1 or 2) may cause excessive CPU
    load and performance degradation. Setting intervals to zero might result in disabled
    updates for that priority level, which could lead to bots becoming unresponsive
    or inactive. Ensure that the tick interval aligns with your game's update cycle
    to avoid timing inconsistencies.
  related:
  - GetUpdateInterval
  - BotPriorityManager::Initialize
  - BotPriorityManager::Update
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T01:40:35.477085'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
