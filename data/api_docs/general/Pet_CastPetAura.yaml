api:
  class: Pet
  method: CastPetAura
  signature: void Pet::CastPetAura(const PetAura * aura)
documentation:
  brief: Casts a specified pet aura on the pet, applying its effects to the pet's
    current state.
  description: The CastPetAura method is responsible for applying a given PetAura
    to the pet instance. This method typically handles the activation of auras that
    provide buffs, debuffs, or special abilities to the pet. It ensures that the aura's
    effects are properly initialized and applied to the pet's current state, including
    updating any relevant stats, visual effects, or behavior modifications. The method
    is commonly invoked when a pet gains a new aura through training, leveling up,
    or specific game events. It does not validate whether the aura is compatible with
    the pet type or level; such checks are usually handled by the calling code or
    aura system.
  parameters:
  - name: aura
    description: A pointer to a PetAura object that defines the aura to be cast on
      the pet. The aura must be valid and properly initialized, containing all necessary
      effect data and duration information.
  returns: null
  examples:
  - title: Basic Usage of CastPetAura
    code: "Pet* myPet = ...; // Assume a valid pet instance\nPetAura* aura = sPetAuraStore.LookupEntry(12345);\
      \ // Lookup a specific aura\nif (aura)\n{\n    myPet->CastPetAura(aura);\n}"
    language: cpp
  - title: Conditional Aura Casting
    code: "Pet* pet = ...;\nPetAura* aura = sPetAuraStore.LookupEntry(67890);\nif\
      \ (aura && pet->GetLevel() >= 10)\n{\n    pet->CastPetAura(aura);\n}\nelse\n\
      {\n    // Handle invalid aura or level condition\n}"
    language: cpp
  notes: This method does not perform any validation on the aura itself. It is assumed
    that the caller has already validated that the aura is appropriate for the pet.
    The actual application of the aura's effects (stat changes, visual effects, etc.)
    is handled internally by the PetAura system.
  warnings: Ensure that the PetAura pointer passed to this method is valid and not
    null. Passing an invalid or uninitialized aura may lead to undefined behavior
    or crashes. Additionally, calling this method on a pet that has not been properly
    initialized can cause errors.
  related:
  - Pet::RemovePetAura
  - Pet::HasAura
  - Pet::GetAura
  - Pet::UpdateAllAuras
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T21:14:13.007401'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
