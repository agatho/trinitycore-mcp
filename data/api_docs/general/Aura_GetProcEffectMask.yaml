api:
  class: Aura
  method: GetProcEffectMask
  signature: uint32 Aura::GetProcEffectMask(AuraApplication * aurApp, ProcEventInfo
    & eventInfo, int now) const
documentation:
  brief: Calculates and returns the proc effect mask for the aura based on the provided
    application and event information.
  description: The GetProcEffectMask method determines which effects of an aura can
    trigger a proc based on the given AuraApplication and ProcEventInfo. This method
    is used internally by the TrinityCore framework to evaluate whether a specific
    aura effect should be triggered during a proc event. It takes into account various
    factors such as the aura's application state, the type of event occurring, and
    timing considerations. The returned mask indicates which proc effects are eligible
    for activation at that moment.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the specific application
      instance of this aura. This parameter defines how the aura is applied to a target
      and influences proc behavior.
  - name: eventInfo
    description: Reference to a ProcEventInfo structure containing detailed information
      about the event that triggered the proc check, including event type, damage
      dealt, spell school, etc.
  - name: now
    description: Integer value representing the current time in milliseconds. Used
      for timing-based checks and ensures accurate evaluation of time-sensitive proc
      conditions.
  returns: A uint32 value representing a bitmask of proc effects that are eligible
    to trigger. Each bit corresponds to a specific effect within the aura's proc system,
    allowing precise control over which effects can activate during a proc event.
  examples:
  - title: Basic usage in proc evaluation
    code: "uint32 mask = aura->GetProcEffectMask(auraApp, eventInfo, getMSTime());\n\
      if (mask & PROC_FLAG_DAMAGE_DONE)\n{\n    // Handle damage done proc effects\n\
      }"
    language: cpp
  - title: Using proc mask to filter active effects
    code: "AuraApplication* app = target->GetAuraApplication(12345);\nProcEventInfo\
      \ eventInfo;\neventInfo.SetSpellSchool(SPELL_SCHOOL_FIRE);\nuint32 procMask\
      \ = aura->GetProcEffectMask(app, eventInfo, getMSTime());\n\n// Check if any\
      \ fire-based effects are active\nif (procMask & PROC_FLAG_SPELL_CAST)\n{\n \
      \   // Trigger fire spell proc logic\n}"
    language: cpp
  notes: This method is typically called during the aura's proc evaluation phase.
    It's important to note that the returned mask may vary depending on the current
    state of the aura application and the event information provided. The implementation
    considers both static aura properties and dynamic event conditions.
  warnings: Ensure that all parameters are valid before calling this method, especially
    'aurApp' which must not be null. Incorrect handling of the returned mask can lead
    to unexpected proc behavior or missed triggers. Be cautious when using timing
    values like 'now' as they should reflect the actual current time for accurate
    proc evaluation.
  related:
  - GetAuraType
  - GetEffectMask
  - IsProcActive
  - ProcTriggerSpell
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:17:02.850247'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
