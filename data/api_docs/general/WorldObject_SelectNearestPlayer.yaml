api:
  class: WorldObject
  method: SelectNearestPlayer
  signature: Player * WorldObject::SelectNearestPlayer(float range) const
documentation:
  brief: Returns the nearest player within the specified range.
  description: The SelectNearestPlayer method retrieves the closest player object
    within a given range from the current WorldObject. This method is commonly used
    in game mechanics to find target players for spell effects, NPC interactions,
    or other gameplay scenarios where proximity matters. The method searches through
    all nearby players and returns the one that is closest to the caller, considering
    only those within the specified range. It's important to note that this method
    does not consider line-of-sight restrictions, meaning it will return a player
    even if there are obstacles between them and the caller.
  parameters: []
  returns: Returns a pointer to the nearest Player object within the specified range.
    If no players are found within the range, or if the WorldObject is not a valid
    type that can have players nearby, this method returns nullptr.
  examples:
  - title: Basic usage example
    code: "Player* target = pObject->SelectNearestPlayer(10.0f);\nif (target)\n{\n\
      \    // Do something with the nearest player\n}"
    language: cpp
  - title: Advanced usage example
    code: "Player* target = pObject->SelectNearestPlayer(5.0f);\nif (target && target->IsInWorld())\n\
      {\n    // Perform actions on the nearest player\n    // This could be used for\
      \ spell targeting or NPC interaction\n}"
    language: cpp
  notes: This method is typically used in conjunction with other methods that require
    proximity checks. Performance considerations include the range parameter, as larger
    ranges may impact performance due to more extensive searching. The method operates
    on a per-object basis and should be used carefully in loops or frequent calls
    to avoid performance degradation.
  warnings: This method does not account for line-of-sight restrictions, so it may
    return players that are obstructed by terrain or objects. Be cautious when using
    this method in scenarios where line-of-sight is required for gameplay mechanics.
    Also, ensure the WorldObject is valid before calling this method to avoid potential
    null pointer dereferences.
  related:
  - SelectNearestCreature
  - SelectNearestGameObject
  - GetNearbyPlayer
  - IsInWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T19:38:04.431926'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
