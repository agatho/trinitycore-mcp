api:
  class: WorldObject
  method: _IsWithinDist
  signature: bool WorldObject::_IsWithinDist(const WorldObject * obj, float dist2compare,
    bool is3D, bool incOwnRadius, bool incTargetRadius) const
documentation:
  brief: Determines whether another WorldObject is within a specified distance.
  description: The _IsWithinDist method checks if a given WorldObject is within a
    certain distance from the calling object. This method supports both 2D and 3D
    distance calculations, and can optionally include the radii of both objects in
    the comparison. It is commonly used for determining proximity-based interactions
    such as spell targeting, combat range, or NPC behavior triggers. The method performs
    efficient distance checks using squared distances to avoid expensive square root
    operations where possible.
  parameters:
  - name: obj
    description: Pointer to the WorldObject to check against. Must not be null.
  - name: dist2compare
    description: The maximum allowed distance between the two objects. Should be a
      positive value representing the distance in yards.
  - name: is3D
    description: If true, calculates 3D distance including z-coordinate differences.
      If false, only x and y coordinates are considered.
  - name: incOwnRadius
    description: If true, includes the radius of the calling object in the distance
      calculation. This means the actual distance is measured from the edge of this
      object's bounding sphere.
  - name: incTargetRadius
    description: If true, includes the radius of the target object in the distance
      calculation. This means the actual distance is measured from the edge of the
      target object's bounding sphere.
  returns: Returns true if the specified object is within the given distance considering
    all parameters; otherwise returns false.
  examples:
  - title: Basic 2D Distance Check
    code: "if (player->_IsWithinDist(mob, 10.0f, false, false, false)) {\n    // Player\
      \ is within 10 yards horizontally\n}"
    language: cpp
  - title: 3D Proximity Check Including Radii
    code: "if (npc->_IsWithinDist(player, 5.0f, true, true, true)) {\n    // NPC is\
      \ within 5 yards including both radii\n    // Used for melee combat range checks\n\
      }"
    language: cpp
  notes: This method uses squared distances internally for performance optimization.
    The 'incOwnRadius' and 'incTargetRadius' parameters are particularly important
    for accurate collision detection and interaction boundaries in game mechanics.
    When both radii are included, the method effectively checks if the bounding spheres
    of two objects intersect or overlap.
  warnings: Ensure that the input object pointer is valid before calling this method
    to avoid null pointer dereferences. Be cautious when using large distances with
    incRadius enabled as it may cause unexpected behavior in edge cases involving
    very large objects. The method assumes both objects are in the same map/instance
    for accurate distance calculations.
  related:
  - _IsWithinDistInMap
  - _IsWithinDist3D
  - _IsWithinDist2D
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:29:29.202358'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
