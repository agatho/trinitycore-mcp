api:
  class: Player
  method: UpdateAllStats
  signature: bool Player::UpdateAllStats()
documentation:
  brief: Updates all player statistics including attributes, resistances, and combat
    ratings.
  description: The UpdateAllStats method recalculates and applies all character statistics
    for a player, ensuring that changes to base stats, equipment, buffs, or other
    modifiers are properly reflected in the player's current combat capabilities.
    This includes updating strength, agility, stamina, intellect, spirit, armor, resistances,
    attack power, spell power, and various combat ratings. The method typically triggers
    when a player's gear changes, gains levels, or experiences status modifications
    that affect their overall performance in the game. It is commonly called internally
    by the TrinityCore framework during state transitions or when significant gameplay
    events occur.
  parameters: []
  returns: Returns true if the statistics update was successful and all values were
    properly recalculated; returns false if an error occurred during the update process.
  examples:
  - title: Basic usage to refresh player stats after equipment change
    code: "Player* player = ...;\nif (player->UpdateAllStats()) {\n    // Stats successfully\
      \ updated\n    player->SendUpdateWorldState();\n}"
    language: cpp
  - title: Using UpdateAllStats in a custom command handler
    code: "void HandleRefreshStatsCommand(ChatHandler* handler) {\n    Player* player\
      \ = handler->GetSession()->GetPlayer();\n    if (player->UpdateAllStats()) {\n\
      \        handler->PSendSysMessage(\"Player stats refreshed successfully.\");\n\
      \    } else {\n        handler->PSendSysMessage(\"Failed to refresh player stats.\"\
      );\n    }\n}"
    language: cpp
  notes: This method performs a comprehensive recalculation of all player attributes
    and should not be called excessively during gameplay as it may impact performance.
    It internally calls UpdateStats() for each individual stat category, so changes
    to one stat may trigger updates to multiple related values.
  warnings: Calling this method frequently or in rapid succession can cause performance
    degradation due to the extensive recalculations involved. Avoid calling it within
    tight loops or high-frequency event handlers unless absolutely necessary.
  related:
  - UpdateStats
  - SetStat
  - GetStat
  - UpdateArmor
  - UpdateMaxHealth
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T19:13:37.390664'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
