api:
  class: SmartScript
  method: UpdateTimer
  signature: void SmartScript::UpdateTimer(SmartScriptHolder & e, const uint32 diff)
documentation:
  brief: Updates the timer for a SmartScript event holder
  description: The UpdateTimer method is responsible for managing the timing logic
    of SmartScript events. It decrements the timer associated with a given SmartScriptHolder
    based on the elapsed time difference provided. This method is typically called
    during the AI update cycle to handle timed events such as delays, repeats, or
    scheduled actions. The method ensures that events are executed at the correct
    intervals according to their defined timing parameters.
  parameters:
  - name: e
    description: Reference to a SmartScriptHolder object containing the event data
      and timer information to be updated
  - name: diff
    description: The time difference in milliseconds since the last update call, used
      to decrement the internal timer
  returns: null
  examples:
  - title: Basic Timer Update Usage
    code: "void AIUpdate(Unit* me) {\n    if (me->GetAI()) {\n        SmartScriptHolder&\
      \ holder = me->GetAI()->GetScriptHolder();\n        uint32 diff = GetTickTime();\n\
      \        me->GetAI()->UpdateTimer(holder, diff);\n    }\n}"
    language: cpp
  - title: Handling Timed Events in Smart AI
    code: "void UpdateAI(uint32 diff) {\n    if (!UpdateVictim())\n        return;\n\
      \    \n    // Update all smart script timers\n    for (auto& entry : m_smartScriptEntries)\
      \ {\n        UpdateTimer(entry, diff);\n    }\n    \n    // Continue with normal\
      \ AI logic\n    DoMeleeAttackIfReady();\n}"
    language: cpp
  notes: This method is typically called from within the AI update loop and should
    be invoked with accurate time differences to maintain proper event timing. The
    timer decrementing logic handles overflow conditions internally, but developers
    should ensure that diff values are reasonable to prevent unexpected behavior.
  warnings: Incorrect diff values can cause timers to behave erratically or execute
    prematurely. Ensure that the time difference passed corresponds to actual elapsed
    time since last update call. This method modifies the internal state of the SmartScriptHolder,
    so it should not be called on const objects.
  related:
  - SmartScript::GetTimer
  - SmartScript::SetTimer
  - SmartScript::ExecuteEvent
metadata:
  confidence: 0.92
  generated_at: '2025-10-31T18:02:17.281262'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
