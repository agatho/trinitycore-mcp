api:
  class: Unit
  method: SetCharmedBy
  signature: bool Unit::SetCharmedBy(Unit * charmer, CharmType type, const AuraApplication
    * aurApp)
documentation:
  brief: Charms a unit by another unit, establishing a charm relationship with specified
    type and aura application.
  description: This method establishes a charm relationship between two units, where
    one unit (the charmer) becomes the master of another unit (the charmed). The method
    sets up the charm state using the provided CharmType and AuraApplication, which
    defines the nature and duration of the charm. It is typically used in game mechanics
    involving creature or player charm behavior, such as when a player or NPC charms
    another creature or player. The method returns true if the charm was successfully
    applied, false otherwise.
  parameters:
  - name: charmer
    description: Pointer to the unit that is performing the charm action. This is
      typically a player or NPC that initiates the charm.
  - name: type
    description: The type of charm being applied, such as 'CHARM_TYPE_CHARM' or 'CHARM_TYPE_SUMMON'.
      Determines how the charm affects the target unit.
  - name: aurApp
    description: Pointer to the AuraApplication that defines the charm's properties
      and duration. This is used for tracking the charm's effects on the charmed unit.
  returns: Returns true if the charm was successfully applied, false otherwise. The
    method may return false if the charm fails due to invalid parameters or if the
    target unit is already charmed by another unit.
  examples:
  - title: Basic Charm Application
    code: "Unit* charmer = player;\nUnit* charmed = creature;\nCharmType type = CHARMTYPE_CHARM;\n\
      AuraApplication* aurApp = new AuraApplication();\nbool success = charmed->SetCharmedBy(charmer,\
      \ type, aurApp);\nif (success)\n{\n    // Charm was applied successfully\n}"
    language: cpp
  - title: Advanced Charm with Multiple Conditions
    code: "Unit* charmer = player;\nUnit* charmed = creature;\nCharmType type = CHARMTYPE_SUMMON;\n\
      AuraApplication* aurApp = new AuraApplication();\nbool success = charmed->SetCharmedBy(charmer,\
      \ type, aurApp);\nif (success)\n{\n    // Charm was applied successfully\n \
      \   // Check if the charmed unit is now under control\n    // Handle charm-related\
      \ behavior in game logic\n}"
    language: cpp
  notes: This method should only be called when the charmer and charmed units are
    in valid states for charm interaction. The method involves setting up internal
    state tracking for the charm relationship, including updating unit's ownership
    status and ensuring proper handling of aura applications. It is recommended to
    use this method with caution as it can affect game balance if used improperly.
  warnings: This method should not be called without checking that the charmed unit
    is not already charmed by another unit. Also, care must be taken when setting
    up the charm type and aura application to avoid invalid or inconsistent charm
    states. Improper use may lead to game mechanics issues or unexpected behavior.
  related:
  - SetCharmed
  - GetCharmer
  - IsCharmed
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T01:24:30.362715'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
