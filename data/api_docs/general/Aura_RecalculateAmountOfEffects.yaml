api:
  class: Aura
  method: RecalculateAmountOfEffects
  signature: void Aura::RecalculateAmountOfEffects()
documentation:
  brief: Recalculates the amount of effects for the aura based on current modifiers
    and conditions.
  description: The RecalculateAmountOfEffects method updates the calculated values
    of all effects associated with the aura. This function is typically invoked when
    aura properties or modifiers change, ensuring that the active effect values reflect
    the most up-to-date state. It iterates through all aura effects and recalculates
    their amounts using current modifiers, base values, and any applicable calculations
    such as stacking rules or percentage adjustments. The method is crucial for maintaining
    accurate aura behavior in World of Warcraft mechanics, particularly when buffs,
    debuffs, or enchantments are applied or removed.
  parameters: []
  returns: null
  examples:
  - title: Recalculating Aura Effects After Modifier Change
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    aura->RecalculateAmountOfEffects();\n\
      \    // Effect amounts are now updated based on current modifiers\n}"
    language: cpp
  notes: This method is automatically called during aura application and modification
    events, but may also be invoked manually when external factors affect aura calculations.
    It's important to understand that this function modifies the internal state of
    the aura effects directly, so calling it at inappropriate times might lead to
    inconsistent behavior.
  warnings: Calling RecalculateAmountOfEffects on an aura that is not fully initialized
    or during aura removal can cause undefined behavior. This method should only be
    called when the aura's state is consistent and valid for recalculation.
  related:
  - Aura::AddModifier
  - Aura::RemoveModifier
  - Aura::GetEffect
  - Aura::ApplyAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:52:19.909308'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
