api:
  class: MotionMaster
  method: ~MotionMaster
  signature: void MotionMaster::~MotionMaster()
documentation:
  brief: Destroys the motion master object and cleans up associated movement data.
  description: The MotionMaster destructor is responsible for cleaning up all movement-related
    data and resources associated with a creature or player's movement behavior. It
    ensures proper memory management by releasing any allocated movement paths, waypoints,
    and other movement-related structures. This method is automatically called when
    the object is destroyed, making it essential for maintaining game stability and
    preventing memory leaks. The destructor also handles cleanup of active movement
    generators and ensures that all pending movement commands are properly cleared
    before the object is removed from memory.
  parameters: []
  returns: null
  examples:
  - title: Basic usage example
    code: "void exampleFunction() {\n    MotionMaster* mm = new MotionMaster();\n\
      \    // ... use motion master ...\n    delete mm; // Destructor automatically\
      \ called\n}\n"
    language: cpp
  notes: The destructor is automatically invoked during object destruction. It's crucial
    to ensure that all movement-related resources are properly released to prevent
    memory leaks. The method handles cleanup of various movement generators and ensures
    proper termination of active movement commands.
  warnings: Improper handling of motion master objects can lead to memory leaks or
    crashes. Always ensure proper deletion of MotionMaster objects to avoid dangling
    pointers.
  related: []
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T02:57:40.453214'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
