api:
  class: PositionManager
  method: GetOptimalRangedPosition
  signature: int PositionManager::GetOptimalRangedPosition(int * target, float range)
documentation:
  brief: Calculates and returns the optimal ranged position for a unit to engage a
    target within the specified range.
  description: The GetOptimalRangedPosition method determines the best positional
    coordinates for a unit to maintain an optimal distance from a target while remaining
    within a defined range. This method is typically used in AI behavior scripting
    to calculate movement positions that balance engagement distance with combat effectiveness.
    It considers factors such as unit size, target positioning, and environmental
    constraints to determine a suitable location. The method returns a unique identifier
    representing the calculated position, which can be used for subsequent movement
    or targeting operations.
  parameters:
  - name: target
    description: Pointer to an integer representing the target's unique identifier
      (GUID). This parameter specifies which unit the optimal position should be calculated
      relative to.
  - name: range
    description: Float value specifying the maximum distance from the target that
      the calculated position should maintain. This defines the engagement range for
      the unit.
  returns: Returns an integer identifier representing the calculated optimal ranged
    position. A return value of 0 typically indicates failure to calculate a valid
    position, while positive values represent successful position calculations.
  examples:
  - title: Basic usage example
    code: "int targetGuid = player->GetGUID();\nint optimalPosition = positionManager->GetOptimalRangedPosition(&targetGuid,\
      \ 10.0f);\nif (optimalPosition > 0) {\n    // Use the calculated position for\
      \ movement\n    player->MoveTo(optimalPosition);\n}"
    language: cpp
  - title: Advanced usage with error handling
    code: "int targetGuid = mob->GetGUID();\nfloat attackRange = 15.0f;\nint result\
      \ = positionManager->GetOptimalRangedPosition(&targetGuid, attackRange);\nswitch\
      \ (result) {\n    case 0:\n        // Failed to calculate position\n       \
      \ sLog->outError(\"Failed to calculate optimal ranged position\");\n       \
      \ break;\n    case -1:\n        // Invalid parameters\n        sLog->outError(\"\
      Invalid target or range specified\");\n        break;\n    default:\n      \
      \  // Successfully calculated position\n        player->MoveTo(result);\n  \
      \      break;\n}"
    language: cpp
  notes: This method is primarily used in AI pathfinding and positioning calculations.
    The implementation may take into account unit collision detection, terrain height
    differences, and obstacle avoidance to ensure the calculated position is valid
    for movement. Performance-wise, this method should be called sparingly during
    active combat scenarios as it involves complex spatial calculations.
  warnings: The target parameter must point to a valid GUID; passing an invalid or
    uninitialized pointer may cause undefined behavior. The range parameter should
    be positive and within reasonable combat distances to avoid performance issues
    or unrealistic positioning. This method does not validate whether the calculated
    position is actually reachable by the unit.
  related:
  - GetRandomRangedPosition
  - CalculatePathToTarget
  - ValidatePosition
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T08:15:33.179765'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
