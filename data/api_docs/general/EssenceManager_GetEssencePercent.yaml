api:
  class: EssenceManager
  method: GetEssencePercent
  signature: float EssenceManager::GetEssencePercent() const
documentation:
  brief: Calculates and returns the percentage of essence currently available for
    the player.
  description: The GetEssencePercent method computes the ratio of current essence
    to maximum essence for a player, expressed as a floating-point percentage value.
    This method is typically used in UI elements or game mechanics that require displaying
    or calculating how much essence the player has relative to their maximum capacity.
    The returned value represents a normalized percentage (0.0 to 100.0) indicating
    the player's essence utilization. This calculation may involve internal state
    tracking of essence resources and could be affected by various game systems such
    as buffs, debuffs, or class-specific mechanics.
  parameters: []
  returns: A float value representing the percentage of essence currently available,
    ranging from 0.0 (no essence) to 100.0 (full essence). Returns 0.0 if no essence
    data is available or if the maximum essence is zero.
  examples:
  - title: Basic Usage in Player Logic
    code: "float essencePercent = player->GetEssenceManager()->GetEssencePercent();\n\
      if (essencePercent > 75.0f)\n{\n    // Player has high essence, can perform\
      \ powerful abilities\n}"
    language: cpp
  - title: UI Display Example
    code: 'float percent = player->GetEssenceManager()->GetEssencePercent();

      std::string displayText = "Essence: " + std::to_string(percent) + "%";

      // Update UI element with displayText

      player->SendUpdateWorldText(displayText);'
    language: cpp
  notes: This method may perform internal calculations involving cached essence values
    and should be called sparingly in performance-critical code paths. The result
    is typically updated when essence changes occur through game events or player
    actions.
  warnings: Ensure that the EssenceManager instance exists and is properly initialized
    before calling this method, as calling it on a null manager may lead to undefined
    behavior. Avoid frequent calls in tight loops due to potential performance implications
    from internal calculations.
  related:
  - GetEssence
  - SetEssence
  - AddEssence
  - RemoveEssence
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:53:41.252490'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
