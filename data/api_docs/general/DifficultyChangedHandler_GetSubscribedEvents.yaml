api:
  class: DifficultyChangedHandler
  method: GetSubscribedEvents
  signature: int DifficultyChangedHandler::GetSubscribedEvents() const
documentation:
  brief: Returns the bitmask of events this handler is subscribed to for difficulty
    changes.
  description: The GetSubscribedEvents method retrieves the event mask that indicates
    which difficulty change events this handler instance is registered to process.
    In TrinityCore's event-driven architecture, handlers subscribe to specific types
    of events using bitmasks. This method returns the bitmask value representing all
    subscribed difficulty-related events, allowing the system to determine when and
    how to invoke the handler's event processing logic. The returned integer typically
    represents a combination of event flags defined in the core's event system.
  parameters: []
  returns: An integer bitmask representing the set of difficulty change events this
    handler is subscribed to. Each bit in the integer corresponds to a specific event
    type, following standard bitwise operations for event subscription management.
  examples:
  - title: Basic Usage
    code: "DifficultyChangedHandler* handler = new DifficultyChangedHandler();\nint\
      \ subscribedEvents = handler->GetSubscribedEvents();\nif (subscribedEvents &\
      \ DIFFICULTY_EVENT_PLAYER_DIFFICULTY_CHANGED)\n{\n    // Handle player difficulty\
      \ change event\n}"
    language: cpp
  notes: This method is typically called during event system initialization or when
    the handler needs to verify its subscription status. The bitmask values are usually
    defined as constants in the core's event handling headers, such as DIFFICULTY_EVENT_*
    macros.
  warnings: null
  related:
  - SetSubscribedEvents
  - HandleDifficultyChanged
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T14:16:26.624740'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
