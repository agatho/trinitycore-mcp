api:
  class: CombatManager
  method: EndCombatBeyondRange
  signature: void CombatManager::EndCombatBeyondRange(float range, bool includingPvP)
documentation:
  brief: Ends combat for all units beyond a specified range, optionally including
    PvP combatants.
  description: The EndCombatBeyondRange method terminates active combat states for
    all units located outside of a given distance from the calling object. This function
    is typically used to clean up stale combat engagements when targets move out of
    effective range. The method respects PvP settings to determine whether to end
    PvP combat sessions as well. It iterates through the current combatants and removes
    those that exceed the specified range, ensuring that combat state is properly
    synchronized with the physical positioning of units in the game world.
  parameters:
  - name: range
    description: The maximum distance (in yards) from the calling object beyond which
      combat will be ended. Units located further than this range will have their
      combat state terminated.
  - name: includingPvP
    description: When true, PvP combat sessions for units beyond the range will also
      be ended. When false, only PvE combat is affected.
  returns: null
  examples:
  - title: Basic Usage to End Combat Beyond 50 Yards
    code: 'CombatManager* combatMgr = player->GetCombatManager();

      combatMgr->EndCombatBeyondRange(50.0f, false);'
    language: cpp
  - title: End All Combat Including PvP Beyond 30 Yards
    code: 'CombatManager* combatMgr = unit->GetCombatManager();

      combatMgr->EndCombatBeyondRange(30.0f, true);'
    language: cpp
  notes: This method is typically called during movement updates or when a unit's
    position changes significantly. It may trigger combat state synchronization events
    and should be used carefully to avoid performance issues in high-traffic scenarios.
  warnings: Calling this method while iterating through active combatants can lead
    to iterator invalidation. Ensure that the calling code properly handles potential
    concurrent modification of combat lists.
  related:
  - CombatManager::BeginCombat
  - CombatManager::EndCombat
  - CombatManager::IsInCombat
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T11:48:03.021669'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
