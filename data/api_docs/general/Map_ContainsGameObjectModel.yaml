api:
  class: Map
  method: ContainsGameObjectModel
  signature: bool Map::ContainsGameObjectModel(const GameObjectModel & model) const
documentation:
  brief: Checks if a GameObjectModel is contained within the map's boundaries.
  description: The ContainsGameObjectModel method determines whether a given GameObjectModel
    instance is fully contained within the current Map object's spatial boundaries.
    This method is typically used during collision detection and spatial queries to
    ensure that game objects are properly managed within their respective maps. It
    evaluates the model's bounding box against the map's defined limits, returning
    true if the entire model lies within the map's area, and false otherwise. The
    method does not perform detailed collision checks between the model and other
    objects, but rather verifies spatial containment.
  parameters: []
  returns: Returns true if the GameObjectModel is completely contained within the
    map's boundaries; returns false if any part of the model extends outside the map
    area.
  examples:
  - title: Basic Usage Example
    code: "GameObjectModel model;\n// ... initialize model ...\nif (map->ContainsGameObjectModel(model))\
      \ {\n    // Model is fully contained in the map\n    printf(\"Model is within\
      \ map boundaries\\n\");\n} else {\n    // Model extends outside of map boundaries\n\
      \    printf(\"Model is outside map boundaries\\n\");\n}"
    language: cpp
  notes: This method performs a simple bounding box containment check rather than
    complex spatial queries. It's primarily used for map boundary validation during
    object placement and movement operations in TrinityCore's world simulation.
  warnings: null
  related:
  - GetGameObjectModel
  - AddGameObjectModel
  - RemoveGameObjectModel
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T11:12:16.064614'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
