api:
  class: ScriptedAI
  method: ~ScriptedAI
  signature: void ScriptedAI::~ScriptedAI()
documentation:
  brief: Destroys a ScriptedAI instance and performs necessary cleanup operations.
  description: The ~ScriptedAI destructor is automatically invoked when a ScriptedAI
    object goes out of scope or is explicitly deleted. This method ensures proper
    cleanup of any resources allocated by the ScriptedAI instance, including releasing
    references to associated creatures, clearing internal state variables, and performing
    any necessary teardown operations required by the TrinityCore AI system. The destructor
    is part of the standard C++ object lifecycle management and should not be called
    directly by user code.
  parameters: []
  returns: null
  examples:
  - title: Automatic destruction of ScriptedAI instance
    code: "class MyAI : public ScriptedAI\n{\npublic:\n    MyAI(Creature* creature)\
      \ : ScriptedAI(creature) {}\n    ~MyAI() override = default;\n    void UpdateAI(uint32\
      \ diff) override\n    {\n        // AI logic here\n    }\n};\n\nvoid CreateMyAI(Creature*\
      \ creature)\n{\n    new MyAI(creature); // AI instance created\n    // When\
      \ function exits or object is deleted, ~ScriptedAI is called automatically\n\
      }"
    language: cpp
  notes: The destructor is implicitly virtual in the base ScriptedAI class, ensuring
    proper polymorphic destruction when derived classes are destroyed. Developers
    should not manually invoke this destructor unless implementing custom memory management
    patterns.
  warnings: null
  related:
  - ScriptedAI::ScriptedAI
  - CreatureAI::UpdateAI
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T03:08:38.149135'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
