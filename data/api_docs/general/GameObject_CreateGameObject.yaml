api:
  class: GameObject
  method: CreateGameObject
  signature: GameObject * GameObject::CreateGameObject(uint32 entry, int * map, const
    int & pos, const QuaternionData & rotation, uint32 animProgress, int goState,
    uint32 artKit)
documentation:
  brief: Creates a new GameObject instance with specified properties and returns a
    pointer to it.
  description: The CreateGameObject method is a static factory function used within
    the TrinityCore framework to instantiate new GameObject objects. It allows developers
    to create game objects such as doors, chests, quest items, or any interactive
    environment element by specifying various attributes like entry ID, position,
    rotation, and state. This method integrates with the core World of Warcraft server
    mechanics to ensure proper spawning and synchronization of game objects across
    the world. The created GameObject is initialized with provided parameters and
    added to the appropriate map instance for rendering and interaction.
  parameters:
  - name: entry
    description: The unique identifier (entry ID) that defines the type of GameObject
      to create, referencing entries in the game's database tables such as gameobject_template.
  - name: map
    description: Pointer to an integer representing the map ID where the GameObject
      will be spawned. This determines which instance or map the object belongs to.
  - name: pos
    description: Reference to a position structure (likely Vector3) defining the X,
      Y, Z coordinates of the GameObject's location in the world.
  - name: rotation
    description: QuaternionData object specifying the orientation and rotation of
      the GameObject in 3D space using quaternion representation for smooth rotation
      handling.
  - name: animProgress
    description: Animation progress value indicating the current state of any animations
      associated with the GameObject, typically ranging from 0 to 100 percent.
  - name: goState
    description: Game object state value defining the initial state of the GameObject
      (e.g., active, inactive, open, closed) which affects how it behaves and appears
      in the game world.
  - name: artKit
    description: Art kit identifier used for visual effects or special rendering properties
      specific to certain types of game objects, often related to visual appearance
      or particle systems.
  returns: Returns a pointer to the newly created GameObject instance. If creation
    fails due to invalid parameters or memory allocation issues, this method may return
    nullptr.
  examples:
  - title: Basic GameObject Creation
    code: "#include \"GameObject.h\"\n\n// Create a basic chest GameObject at position\
      \ (100, 200, 300)\nuint32 entryId = 17654; // Example chest entry ID\nint mapId\
      \ = 0; // Default map (Azeroth)\nfloat x = 100.0f, y = 200.0f, z = 300.0f;\n\
      Vector3 position(x, y, z);\nQuaternionData rotation(0.0f, 0.0f, 0.0f, 1.0f);\
      \ // Identity quaternion\nGameObject* chest = GameObject::CreateGameObject(entryId,\
      \ &mapId, position, rotation, 0, GO_STATE_READY, 0);\n\nif (chest)\n{\n    //\
      \ Successfully created, now add to world or perform further operations\n}"
    language: cpp
  - title: Advanced GameObject Creation with Rotation
    code: "#include \"GameObject.h\"\n\n// Create a door at specific location with\
      \ custom rotation\nuint32 entryId = 17654;\nint mapId = 0;\nVector3 position(500.0f,\
      \ 600.0f, 700.0f);\n\n// Set rotation to face east (90 degrees around Y axis)\n\
      float yaw = M_PI / 2.0f; // 90 degrees in radians\nQuaternionData rotation;\n\
      rotation.FromEulerAnglesZYX(0.0f, yaw, 0.0f);\n\nGameObject* door = GameObject::CreateGameObject(entryId,\
      \ &mapId, position, rotation, 50, GO_STATE_ACTIVE, 1);\n\nif (door)\n{\n   \
      \ // Door created with specific orientation and animation state\n}"
    language: cpp
  notes: This method is typically used during map loading or dynamic object spawning.
    The GameObject must be properly initialized before being added to the world, otherwise
    it may not render correctly or respond to interactions. Developers should ensure
    that the entry ID exists in the database and that all parameters are valid to
    prevent crashes or undefined behavior.
  warnings: Calling this method with invalid map IDs or non-existent entry IDs can
    lead to crashes or corrupted game state. Always validate inputs before calling
    this function, especially when creating objects dynamically during gameplay. The
    returned GameObject pointer should be checked for null before use.
  related:
  - GameObject::Update
  - GameObject::AddToWorld
  - GameObject::RemoveFromWorld
  - GameObject::SetGoState
metadata:
  confidence: 0.92
  generated_at: '2025-10-29T20:19:07.601519'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
