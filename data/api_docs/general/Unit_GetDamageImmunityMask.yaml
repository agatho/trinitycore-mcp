api:
  class: Unit
  method: GetDamageImmunityMask
  signature: uint32 Unit::GetDamageImmunityMask() const
documentation:
  brief: Returns the damage immunity mask for the unit, which determines what damage
    types the unit is immune to.
  description: This method retrieves the damage immunity mask of a Unit, which represents
    the set of damage types that the unit is immune to. The returned value is a bitmask
    that can be used to check specific damage types using bitwise operations. This
    is commonly used in game mechanics to determine whether a unit can take certain
    types of damage, such as physical, magical, or specific elemental damage types.
    The mask is typically calculated based on various effects like immunity spells,
    buffs, or other game mechanics that modify the unit's damage immunity.
  parameters: []
  returns: Returns a uint32 value representing the damage immunity mask. Each bit
    in the mask corresponds to a specific damage type, where 1 indicates immunity
    to that damage type and 0 indicates vulnerability. The mask can be used to check
    against specific damage types using bitwise operations.
  examples:
  - title: Basic Usage Example
    code: "uint32 immunityMask = unit->GetDamageImmunityMask();\nif (immunityMask\
      \ & DAMAGETYPE_PHYSICAL)\n{\n    // Unit is immune to physical damage\n}"
    language: cpp
  - title: Checking Specific Damage Type
    code: "uint32 immunityMask = unit->GetDamageImmunityMask();\nuint32 physicalImmunity\
      \ = immunityMask & DAMAGETYPE_PHYSICAL;\nuint32 magicalImmunity = immunityMask\
      \ & DAMAGETYPE_MAGIC;\nif (physicalImmunity != 0)\n{\n    // Unit is immune\
      \ to physical damage\n}\nif (magicalImmunity != 0)\n{\n    // Unit is immune\
      \ to magical damage\n}"
    language: cpp
  notes: The method is typically used in conjunction with other damage-related methods
    and should be used carefully when checking against specific damage types. Performance
    considerations are minimal as this is a simple bitmask operation, but it's important
    to note that the mask may change based on various game effects during runtime.
  warnings: Care must be taken when using bitwise operations with the returned mask,
    as incorrect usage can lead to unexpected behavior or logic errors. The mask should
    be interpreted carefully as different bits represent different damage types, and
    some damage types might overlap in certain contexts.
  related:
  - GetDamageMultiplier
  - GetDamageBonus
  - GetDamageImmunity
  - GetSpellImmunityMask
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T13:17:48.764159'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
