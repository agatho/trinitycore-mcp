api:
  class: GameObject
  method: AI
  signature: GameObjectAI * GameObject::AI() const
documentation:
  brief: Returns the AI instance associated with the GameObject
  description: The GameObject::AI method retrieves the GameObjectAI instance that
    is attached to a specific GameObject. This method is used to access the game object's
    AI behavior, which controls how the object interacts with the world and responds
    to events. The returned AI instance is typically created during the GameObject's
    initialization process and can be used to implement custom behaviors or access
    the object's current state. This method is essential for developers working with
    GameObjects in TrinityCore, particularly when implementing custom AI logic or
    accessing game object properties.
  parameters: []
  returns: Returns a pointer to the GameObjectAI instance associated with this GameObject.
    If no AI has been assigned, the method may return nullptr, indicating that the
    GameObject does not have any AI behavior implemented.
  examples:
  - title: Basic usage example
    code: "GameObject* go = ...;\nGameObjectAI* ai = go->AI();\nif (ai)\n{\n    //\
      \ Use the AI instance\n}"
    language: cpp
  - title: Accessing AI in custom behavior implementation
    code: "class CustomGameObjectAI : public GameObjectAI\n{\npublic:\n    void UpdateAI(uint32\
      \ diff) override\n    {\n        // Access the GameObject's AI\n        GameObject*\
      \ go = GetGameObject();\n        // Perform custom logic\n    }\n};\n\nvoid\
      \ SomeFunction()\n{\n    GameObject* go = ...;\n    GameObjectAI* ai = go->AI();\n\
      \    // Use ai to access game object properties\n}"
    language: cpp
  notes: The AI instance returned by this method is typically created during the GameObject's
    initialization phase. Developers should be aware that calling this method on a
    GameObject without an assigned AI will return nullptr, which can lead to null
    pointer dereferences if not handled properly. This method is thread-safe and can
    be called from any thread.
  warnings: Calling this method on a GameObject that has not yet been initialized
    or does not have an AI instance assigned may result in returning nullptr. Always
    check for null before using the returned AI instance. Avoid calling this method
    during object initialization when the AI might not be fully set up yet.
  related:
  - GameObject::GetAI
  - GameObject::SetAI
  - GameObject::GetGOData
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T02:35:00.530250'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
