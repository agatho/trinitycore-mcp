api:
  class: KitingManager
  method: GetOptimalDistance
  signature: float KitingManager::GetOptimalDistance() const
documentation:
  brief: Calculates and returns the optimal distance for kiting behavior based on
    current target and player attributes.
  description: The GetOptimalDistance method computes the ideal distance a player
    should maintain from their target during kiting gameplay. This distance is determined
    by considering factors such as the player's attack range, the target's movement
    speed, and the player's own mobility characteristics. The method is typically
    used in AI decision-making processes to determine when to move closer or farther
    from an enemy during combat. It ensures that the player maintains a safe yet effective
    distance for sustained damage output while avoiding unnecessary melee engagement.
  parameters: []
  returns: A float value representing the optimal kiting distance in yards. This value
    is typically greater than the player's attack range but less than maximum melee
    reach, allowing for continuous ranged attacks without requiring frequent movement.
  examples:
  - title: Basic usage in AI logic
    code: "float optimalDist = kitingManager.GetOptimalDistance();\nif (player->GetDistance(target)\
      \ < optimalDist)\n{\n    player->MoveTowards(target, optimalDist - player->GetDistance(target));\n\
      }"
    language: cpp
  - title: Integration with movement system
    code: "float distance = kitingManager.GetOptimalDistance();\nPosition targetPos\
      \ = target->GetPosition();\nPosition playerPos = player->GetPosition();\nfloat\
      \ currentDist = playerPos.GetExactDist(&targetPos);\n\nif (currentDist < distance)\n\
      {\n    // Move away from target\n    player->MoveTowards(target, distance -\
      \ currentDist);\n}\nelse if (currentDist > distance + 5.0f)\n{\n    // Move\
      \ closer to target\n    player->MoveTowards(target, currentDist - distance);\n\
      }"
    language: cpp
  notes: This method is primarily used in NPC AI implementations for kiting behavior.
    The calculation may vary based on the specific creature type and its combat abilities.
    The returned value should be treated as a target distance rather than an absolute
    position, and it's recommended to use this value in conjunction with movement
    calculations that account for pathfinding.
  warnings: The optimal distance may not always be suitable for all situations. In
    some cases, environmental factors or specific encounter mechanics might require
    deviation from the calculated optimal distance. Always validate the returned value
    against current combat conditions before applying movement decisions.
  related:
  - SetOptimalDistance
  - GetKitingState
  - UpdateKitingBehavior
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:02:14.311904'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
