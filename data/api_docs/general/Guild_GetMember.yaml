api:
  class: Guild
  method: GetMember
  signature: const Member * Guild::GetMember(const int & guid) const
documentation:
  brief: Retrieves a guild member by their unique identifier (GUID).
  description: The GetMember method is used to retrieve a specific guild member from
    the guild's member list using their unique identifier (GUID). This method performs
    a lookup operation within the guild's internal data structure to find and return
    a pointer to the Member object associated with the provided GUID. The returned
    pointer is const, indicating that the member data should not be modified through
    this interface. This functionality is essential for accessing individual guild
    member information such as their name, rank, last login time, and other player-specific
    attributes within the context of guild management.
  parameters:
  - name: guid
    description: The unique identifier (GUID) of the guild member to retrieve. This
      should be a valid player GUID that corresponds to an existing member in the
      guild.
  returns: A const pointer to the Member object if a member with the specified GUID
    exists in the guild; otherwise, returns nullptr if no matching member is found.
  examples:
  - title: Basic Usage
    code: "uint32 playerGuid = 12345;\nconst Guild::Member* member = guild->GetMember(playerGuid);\n\
      if (member)\n{\n    std::cout << \"Member name: \" << member->name << std::endl;\n\
      }"
    language: cpp
  - title: Checking Member Existence
    code: "uint32 targetGuid = 67890;\nconst Guild::Member* member = guild->GetMember(targetGuid);\n\
      if (member != nullptr)\n{\n    // Member exists, proceed with operations\n \
      \   std::cout << \"Found member: \" << member->name << std::endl;\n}\nelse\n\
      {\n    // Member not found in guild\n    std::cout << \"Player is not a guild\
      \ member\" << std::endl;\n}"
    language: cpp
  notes: This method performs an internal lookup operation which may have performance
    implications when called frequently. The returned Member pointer is valid only
    as long as the guild and its members remain in memory. It's recommended to cache
    the returned pointer if multiple operations are needed on the same member, rather
    than repeatedly calling this method.
  warnings: Be cautious when using the returned const pointer - while it's marked
    as const, the underlying Member object may still be modified through other interfaces.
    Always check for null return values before dereferencing the pointer to avoid
    segmentation faults.
  related:
  - GetMembers
  - AddMember
  - RemoveMember
  - GetMemberCount
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T15:10:26.989356'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
