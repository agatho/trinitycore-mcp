api:
  class: DefensiveBehaviorManager
  method: GetExternalDefensiveTarget
  signature: int DefensiveBehaviorManager::GetExternalDefensiveTarget() const
documentation:
  brief: Retrieves the external defensive target identifier for the DefensiveBehaviorManager
    instance.
  description: The GetExternalDefensiveTarget method returns an integer identifier
    representing the current external defensive target assigned to the DefensiveBehaviorManager.
    This target is typically used in AI behavior systems to determine which entity
    should be prioritized for defensive actions, such as healing or protection. The
    method does not modify any internal state and is read-only. It is commonly invoked
    during AI decision-making processes where the system needs to know the current
    defensive priority target. The returned value may represent a GUID, unit identifier,
    or other internal reference depending on how the behavior manager is configured.
  parameters: []
  returns: An integer representing the external defensive target identifier. A value
    of 0 typically indicates no target is set, while positive values indicate valid
    targets. Negative values may denote error states or special conditions depending
    on implementation.
  examples:
  - title: Basic Usage Example
    code: "int targetId = defensiveBehaviorManager.GetExternalDefensiveTarget();\n\
      if (targetId > 0)\n{\n    // Process the defensive target\n    printf(\"Current\
      \ defensive target ID: %d\\n\", targetId);\n}"
    language: cpp
  - title: Integration with AI Decision Logic
    code: "void UpdateDefensiveBehavior()\n{\n    int externalTarget = defensiveBehaviorManager.GetExternalDefensiveTarget();\n\
      \    if (externalTarget != 0)\n    {\n        // Use the target for defensive\
      \ actions\n        Unit* targetUnit = ObjectAccessor::GetUnit(*me, externalTarget);\n\
      \        if (targetUnit && targetUnit->IsAlive())\n        {\n            //\
      \ Perform defensive action on the target\n            DoDefensiveAction(targetUnit);\n\
      \        }\n    }\n}"
    language: cpp
  notes: This method is part of the AI behavior system and should only be called during
    appropriate AI update cycles. The returned identifier may not always correspond
    to a valid object, so callers should verify target existence before using it.
    Performance is generally good as this is a simple getter method with no complex
    computations.
  warnings: Do not assume that the returned identifier corresponds to an active or
    valid unit. Always validate the target before performing operations on it. If
    the method returns 0, it indicates no external defensive target is set, which
    may be a valid state in some contexts.
  related:
  - SetExternalDefensiveTarget
  - HasExternalDefensiveTarget
  - ClearExternalDefensiveTarget
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T14:20:54.050544'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
