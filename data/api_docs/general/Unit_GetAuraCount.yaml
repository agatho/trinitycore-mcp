api:
  class: Unit
  method: GetAuraCount
  signature: uint32 Unit::GetAuraCount(uint32 spellId) const
documentation:
  brief: Counts the number of active auras for a specific spell on the unit.
  description: The GetAuraCount method returns the total number of active aura applications
    for a given spell ID on the unit. This method is commonly used in World of Warcraft's
    TrinityCore to determine how many times a specific spell effect is currently active
    on a target, such as a buff or debuff. It provides insight into the current state
    of spell effects and can be crucial for game mechanics like cooldowns, stacking
    rules, and spell interactions. The method does not distinguish between different
    aura applications of the same spell; it simply counts all active instances.
  parameters: []
  returns: Returns a uint32 value representing the count of active aura applications
    for the specified spell ID. A value of 0 indicates no active auras, while higher
    values indicate multiple active applications.
  examples:
  - title: Basic Usage Example
    code: uint32 count = unit->GetAuraCount(12345); // Counts active aura applications
      for spell ID 12345
    language: cpp
  - title: Advanced Usage Example
    code: "if (unit->GetAuraCount(12345) > 0)\n{\n    // Perform action when aura\
      \ is active\n    // e.g., apply additional effect or trigger cooldown\n}\nelse\n\
      {\n    // No active aura, proceed with normal behavior\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    such as GetAuraApplication or GetAuraEffect. It's important to note that this
    count includes all active aura applications regardless of whether they are from
    the same spell or different spells. Performance considerations include checking
    for valid spell IDs before calling this method, as invalid spell IDs may result
    in undefined behavior.
  warnings: Caution should be taken when using this method with spell IDs that may
    not have any active auras, as it could lead to incorrect assumptions about the
    presence of effects. Additionally, this method does not account for aura stacking
    rules or the possibility of multiple applications being applied by different sources;
    it simply counts all active instances.
  related:
  - GetAuraApplication
  - GetAuraEffect
  - GetAuraCount
  - GetSpellInfo
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:31:41.972019'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
