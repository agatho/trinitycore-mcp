api:
  class: ObjectMgr
  method: GetPlayerClassLevelInfo
  signature: void ObjectMgr::GetPlayerClassLevelInfo(uint32 class_, uint8 level, uint32
    & baseMana) const
documentation:
  brief: Retrieves the base mana value for a player of the specified class and level
  description: The GetPlayerClassLevelInfo method fetches the base mana amount that
    a player of a given class and level would have. This information is used internally
    by the game engine to calculate player stats, particularly for mana-based classes
    such as mages, priests, and warlocks. The method populates the provided reference
    parameter with the base mana value. It's typically called during character creation
    or level-up processes when the game needs to determine the initial mana pool for
    a player based on their class and current level.
  parameters:
  - name: class_
    description: The player's class identifier (e.g., CLASS_WARRIOR = 1, CLASS_MAGE
      = 8). Must be a valid class enum value.
  - name: level
    description: The player's current level (typically between 1 and MAX_PLAYER_LEVEL).
      Values outside this range may produce undefined behavior.
  - name: baseMana
    description: Reference parameter that will be filled with the calculated base
      mana value for the specified class and level.
  returns: null
  examples:
  - title: Retrieve Base Mana for a Mage at Level 10
    code: 'uint32 mana;

      ObjectMgr::GetPlayerClassLevelInfo(CLASS_MAGE, 10, mana);

      // mana now contains the base mana value for a level 10 mage'
    language: cpp
  - title: Calculate Mana Pool for Character Creation
    code: "void OnCharacterCreate(Player* player)\n{\n    uint32 baseMana;\n    ObjectMgr::GetPlayerClassLevelInfo(player->getClass(),\
      \ player->getLevel(), baseMana);\n    player->SetMaxPower(POWER_MANA, baseMana);\n\
      }"
    language: cpp
  notes: This method is part of the internal stat calculation system and relies on
    predefined class-level data tables. The implementation assumes valid inputs and
    does not perform input validation. It's designed to be fast and efficient for
    frequent calls during gameplay operations.
  warnings: Passing invalid class values or levels outside the expected range may
    result in incorrect calculations or memory access violations. Ensure that class_
    is a valid player class enum and level is within acceptable bounds before calling
    this method.
  related:
  - GetPlayerClassLevelInfo
  - GetPlayerLevelInfo
  - GetPlayerStartLevel
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T09:23:02.678219'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
