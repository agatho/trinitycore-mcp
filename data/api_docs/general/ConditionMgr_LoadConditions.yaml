api:
  class: ConditionMgr
  method: LoadConditions
  signature: void ConditionMgr::LoadConditions(bool isReload)
documentation:
  brief: Loads and initializes all game conditions from the database into memory for
    use during runtime evaluation.
  description: The LoadConditions method is responsible for loading all condition
    entries from the database tables into the in-memory condition manager. This method
    is typically called during server startup or when reloading configuration data.
    It processes condition definitions that are used throughout the TrinityCore system
    to control various game mechanics such as quest gating, item usage restrictions,
    NPC dialog options, and more. The method supports both initial loading and reload
    scenarios through its isReload parameter, which determines whether existing conditions
    should be cleared before loading new ones. During execution, it validates loaded
    conditions and ensures they are properly indexed for fast lookup during runtime
    evaluation.
  parameters:
  - name: isReload
    description: Boolean flag indicating if this is a reload operation. When true,
      clears existing conditions before loading new ones; when false, loads conditions
      without clearing previous data.
  returns: null
  examples:
  - title: Basic usage during server initialization
    code: ConditionMgr::instance()->LoadConditions(false);
    language: cpp
  - title: Reload conditions after database update
    code: ConditionMgr::instance()->LoadConditions(true);
    language: cpp
  notes: This method is typically called during server startup and should not be invoked
    frequently in normal operation. The condition manager uses internal caching mechanisms
    to optimize lookup performance after initial load. During reload operations, all
    existing conditions are invalidated and reloaded from the database.
  warnings: Calling this method while game objects are actively using conditions may
    lead to inconsistent behavior or crashes. Always ensure no active game logic is
    dependent on conditions during a reload operation. This method should only be
    called from the main thread in single-threaded contexts.
  related:
  - ConditionMgr::GetCondition
  - ConditionMgr::CheckCondition
  - ConditionMgr::LoadConditions
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T01:17:44.498661'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
