api:
  class: InterruptManager
  method: ShouldInterruptBuff
  signature: bool InterruptManager::ShouldInterruptBuff(const SpellInfo * spellInfo,
    Unit * caster)
documentation:
  brief: Determines whether a spell buff should be interrupted based on its properties
    and caster.
  description: The ShouldInterruptBuff method evaluates if a given spell buff, identified
    by its SpellInfo structure and caster unit, should be interrupted. This typically
    occurs during combat when certain conditions are met, such as the caster being
    interrupted or the spell having interruptible properties. The method checks various
    spell flags and caster states to make this determination. It is used internally
    by the game engine to manage spell casting behavior and ensure proper interruption
    mechanics.
  parameters:
  - name: spellInfo
    description: Pointer to the SpellInfo structure containing information about the
      spell being evaluated for interruption. Must not be null.
  - name: caster
    description: Pointer to the Unit that cast the spell. This represents the caster's
      current state and properties. Must not be null.
  returns: Returns true if the spell buff should be interrupted according to game
    rules, false otherwise. The decision is based on spell flags, caster status, and
    other interrupt conditions.
  examples:
  - title: Basic usage in spell interruption logic
    code: "if (interruptManager->ShouldInterruptBuff(spellInfo, caster)) {\n    //\
      \ Handle spell interruption\n    caster->InterruptSpell(CURRENT_GENERIC_SPELL);\n\
      }"
    language: cpp
  - title: Integration with custom interrupt system
    code: "bool CustomInterruptHandler(Unit* target, const SpellInfo* spellInfo) {\n\
      \    if (!spellInfo || !target) return false;\n    \n    InterruptManager* im\
      \ = sObjectMgr->GetInterruptManager();\n    return im->ShouldInterruptBuff(spellInfo,\
      \ target);\n}"
    language: cpp
  notes: This method is part of the core spell interruption system in TrinityCore.
    It relies on internal spell flags and caster state checks to determine interruption
    eligibility. The method does not perform any direct spell interruption but rather
    evaluates whether interruption should occur based on defined criteria.
  warnings: Ensure that both parameters are valid non-null pointers before calling
    this method, as dereferencing null pointers will cause crashes. This method is
    typically called during active combat scenarios where spell casting and interruption
    logic is critical.
  related:
  - InterruptManager::InterruptSpell
  - Unit::InterruptSpell
  - SpellInfo::IsInterruptible
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T12:26:03.744706'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
