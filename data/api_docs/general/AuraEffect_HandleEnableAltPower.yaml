api:
  class: AuraEffect
  method: HandleEnableAltPower
  signature: void AuraEffect::HandleEnableAltPower(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Enables or disables alternative power display for aura effects.
  description: The HandleEnableAltPower method manages the display state of alternative
    power types (such as rage, focus, energy) when an aura is applied or removed from
    a unit. This method is typically invoked during aura application or removal events
    to update the client's UI and ensure that alternative power bars are correctly
    shown or hidden for affected players or creatures. It interacts with the AuraApplication
    object to determine whether to enable or disable the alt power display based on
    the provided mode and apply flag.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This parameter is used to access aura properties and determine
      the target unit for which alternative power display should be modified.
  - name: mode
    description: An unsigned 8-bit integer indicating the mode of operation, typically
      used to specify how the alt power should be handled (e.g., enable/disable, specific
      type). Values may vary depending on implementation but usually correspond to
      predefined constants or flags.
  - name: apply
    description: Boolean flag indicating whether the aura is being applied (true)
      or removed (false). This determines whether alternative power display should
      be enabled or disabled for the affected unit.
  returns: null
  examples:
  - title: Enable Alternative Power on Aura Application
    code: "void MyAuraEffect::HandleEnableAltPower(const AuraApplication* aurApp,\
      \ uint8 mode, bool apply) const {\n    if (apply && mode == ALT_POWER_MODE_RAGE)\n\
      \        aurApp->GetTarget()->SetDisplayAltPower(true);\n}"
    language: cpp
  - title: Conditional Alt Power Handling Based on Aura Type
    code: "void MyAuraEffect::HandleEnableAltPower(const AuraApplication* aurApp,\
      \ uint8 mode, bool apply) const {\n    if (aurApp->GetAura()->GetSpellInfo()->Id\
      \ == 12345) {\n        if (apply)\n            aurApp->GetTarget()->SetDisplayAltPower(true);\n\
      \        else\n            aurApp->GetTarget()->SetDisplayAltPower(false);\n\
      \    }\n}"
    language: cpp
  notes: This method is part of the aura effect handling system in TrinityCore and
    is usually called internally by the core engine during aura application/removal.
    Developers should be aware that this method modifies client-side UI elements and
    may require synchronization with server-side state changes.
  warnings: Improper use of this method can lead to incorrect visual feedback for
    players or inconsistencies between server and client states. Ensure that the mode
    parameter is correctly interpreted according to the expected behavior of the aura
    effect.
  related:
  - AuraEffect::HandleApply
  - AuraEffect::HandleRemove
  - Unit::SetDisplayAltPower
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:50:54.373095'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
