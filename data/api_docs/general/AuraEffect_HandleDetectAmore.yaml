api:
  class: AuraEffect
  method: HandleDetectAmore
  signature: void AuraEffect::HandleDetectAmore(const AuraApplication * aurApp, uint8
    mode, bool apply) const
documentation:
  brief: Applies or removes the detect amour effect from an aura application.
  description: The HandleDetectAmore method manages the application and removal of
    the detect amour aura effect on a target. This aura effect typically allows a
    player to detect hidden or invisible enemies within a certain range. The method
    is called internally by the aura system when an aura is applied or removed from
    a unit. It handles the necessary updates to the target's visibility state and
    any related game mechanics such as updating the player's detection status or triggering
    visual effects.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This contains information about which unit the aura is affecting
      and the aura's properties.
  - name: mode
    description: The mode of operation, typically indicating whether the aura is being
      applied (1) or removed (0). This parameter controls the behavior of the method
      during application versus removal.
  - name: apply
    description: Boolean flag indicating if the aura should be applied (true) or removed
      (false). This directly influences the logic path within the method.
  returns: null
  examples:
  - title: Basic usage in aura application context
    code: "void MyAuraHandler::HandleDetectAmore(const AuraApplication* aurApp, uint8\
      \ mode, bool apply) const {\n    if (apply) {\n        // Apply detect amour\
      \ effect\n        aurApp->GetTarget()->SetVisible(true);\n        // Trigger\
      \ visual effects or update detection state\n    } else {\n        // Remove\
      \ detect amour effect\n        aurApp->GetTarget()->SetVisible(false);\n   \
      \     // Restore normal visibility state\n    }\n}"
    language: cpp
  notes: This method is part of the aura effect handling system in TrinityCore and
    is typically invoked by the core aura application logic. Developers should ensure
    that any custom implementations properly handle both application and removal cases
    to maintain game balance and prevent unintended behavior.
  warnings: Improper handling of the apply flag can cause incorrect visibility states
    for players or NPCs, potentially breaking gameplay mechanics related to stealth
    detection. Always verify that the aura's target is valid before modifying its
    state.
  related:
  - AuraEffect::HandlePeriodicDummy
  - AuraEffect::HandleApplyAura
  - AuraApplication::GetTarget
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T12:52:58.253886'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
