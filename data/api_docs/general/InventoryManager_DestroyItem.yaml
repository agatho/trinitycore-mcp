api:
  class: InventoryManager
  method: DestroyItem
  signature: bool InventoryManager::DestroyItem(Item * item, bool update)
documentation:
  brief: Destroys a specified item from the inventory, removing it and updating the
    player's inventory state.
  description: The DestroyItem method removes a given Item object from the player's
    inventory. It handles the cleanup of the item's data, updates the inventory container,
    and ensures that any associated game mechanics (such as enchantments or durability)
    are properly managed. The method supports an optional update flag that determines
    whether the client should be notified of the change. This is commonly used when
    items are consumed, sold, or destroyed through gameplay actions such as using
    a potion or selling an item to a vendor.
  parameters:
  - name: item
    description: Pointer to the Item object that needs to be destroyed. Must not be
      null.
  - name: update
    description: Boolean flag indicating whether to send inventory updates to the
      client. If true, the client will be notified of the item removal; if false,
      no update is sent.
  returns: Returns true if the item was successfully destroyed and removed from the
    inventory, false otherwise.
  examples:
  - title: Basic Usage
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    inventoryManager->DestroyItem(item,\
      \ true);\n}"
    language: cpp
  - title: Destroy Item Without Client Update
    code: "Item* item = player->GetItemByGuid(itemGuid);\nif (item)\n{\n    inventoryManager->DestroyItem(item,\
      \ false); // No client update\n}"
    language: cpp
  notes: This method performs necessary cleanup operations including removing the
    item from its container and updating internal data structures. It is recommended
    to use this method instead of directly deleting the Item object to ensure proper
    inventory state management.
  warnings: Ensure that the Item pointer passed to DestroyItem is valid and not already
    destroyed or deleted. Passing a null pointer will likely result in undefined behavior
    or crashes.
  related:
  - InventoryManager::AddItem
  - InventoryManager::RemoveItem
  - Player::GetItemByGuid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T00:02:55.143399'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
