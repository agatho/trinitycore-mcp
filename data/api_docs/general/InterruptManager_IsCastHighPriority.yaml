api:
  class: InterruptManager
  method: IsCastHighPriority
  signature: bool InterruptManager::IsCastHighPriority(Unit * caster)
documentation:
  brief: Determines whether a cast from the specified unit is considered high priority
    for interruption purposes.
  description: The IsCastHighPriority method evaluates if a spell or ability being
    cast by a given unit should be treated as a high-priority interrupt target. This
    typically relates to spells that are critical to gameplay mechanics, such as those
    that prevent player movement, cause significant damage over time, or have strong
    defensive properties. The method checks various conditions including the spell's
    category, duration, and potential impact on combat flow. It is used internally
    by the InterruptManager to prioritize which casts should be interrupted first
    when multiple interrupts are possible.
  parameters:
  - name: caster
    description: Pointer to the Unit object that is currently casting a spell or ability.
      This parameter must not be null and should represent a valid unit in the game
      world.
  returns: Returns true if the cast is considered high priority for interruption,
    false otherwise. High priority casts usually include those that are instant, have
    significant impact on gameplay, or are flagged as such by the spell system.
  examples:
  - title: Basic usage to check if a unit's cast is high priority
    code: "Unit* target = ...; // some unit casting a spell\nif (interruptManager->IsCastHighPriority(target))\
      \ {\n    // Handle high priority interrupt logic\n    printf(\"High priority\
      \ cast detected\\n\");\n}"
    language: cpp
  - title: Using the result in an interrupt decision system
    code: "Unit* caster = ...; // unit casting a spell\nif (interruptManager->IsCastHighPriority(caster))\
      \ {\n    // Prioritize interrupting this cast over others\n    interruptManager->InterruptCast(caster,\
      \ true); // High priority interrupt\n} else {\n    // Normal interrupt handling\n\
      \    interruptManager->InterruptCast(caster, false);\n}"
    language: cpp
  notes: This method is primarily used within the core interrupt handling logic of
    TrinityCore. It may rely on internal spell flags and categories that are defined
    in the spell database. The implementation might be optimized for performance since
    it's called frequently during combat events.
  warnings: Ensure that the Unit pointer passed to this method is valid and not null,
    as dereferencing an invalid pointer will result in undefined behavior. This method
    should only be called on units that are actively casting spells.
  related:
  - InterruptManager::InterruptCast
  - InterruptManager::IsInterruptible
  - InterruptManager::GetInterruptPriority
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:30:36.430363'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
