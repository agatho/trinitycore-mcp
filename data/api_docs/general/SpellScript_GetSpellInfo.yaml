api:
  class: SpellScript
  method: GetSpellInfo
  signature: const SpellInfo * SpellScript::GetSpellInfo() const
documentation:
  brief: Retrieves the SpellInfo structure for the spell being processed by the script.
  description: The GetSpellInfo method returns a constant pointer to the SpellInfo
    structure that contains all the static data and configuration for the spell currently
    being executed or scripted. This method is commonly used within SpellScript implementations
    to access spell properties such as duration, range, effects, and other spell-related
    attributes. The returned SpellInfo pointer is valid for the lifetime of the spell
    execution and should not be modified. It provides access to fundamental spell
    mechanics and can be used to implement conditional logic based on spell characteristics.
  parameters: []
  returns: A constant pointer to the SpellInfo structure representing the spell being
    processed by this script instance. Returns nullptr if the script is not associated
    with a valid spell or if the spell data is not accessible.
  examples:
  - title: Accessing Spell Duration
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleApplyAura()\
      \ override\n    {\n        const SpellInfo* spellInfo = GetSpellInfo();\n  \
      \      if (spellInfo)\n        {\n            int32 duration = spellInfo->DurationEntry\
      \ ? spellInfo->DurationEntry->Duration : 0;\n            // Use duration for\
      \ custom logic\n        }\n    }\n};"
    language: cpp
  - title: Checking Spell Effects
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void OnPrepare()\
      \ override\n    {\n        const SpellInfo* spellInfo = GetSpellInfo();\n  \
      \      if (spellInfo && spellInfo->Effects[0].Effect == SPELL_EFFECT_SCHOOL_DAMAGE)\n\
      \        {\n            // Custom handling for damage spells\n        }\n  \
      \  }\n};"
    language: cpp
  notes: The SpellInfo structure returned by this method is read-only and should not
    be modified. It's important to check for null returns when using this method,
    especially in cases where the script might be invoked outside of normal spell
    execution contexts. The data pointed to remains valid only during the spell's
    execution lifecycle.
  warnings: Never modify the SpellInfo structure returned by this method as it contains
    immutable static spell definitions. Accessing the returned pointer after the spell
    has completed execution may result in undefined behavior or memory corruption.
  related:
  - GetSpell
  - GetCaster
  - GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T05:51:22.047783'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
