api:
  class: Unit
  method: IsUninteractible
  signature: bool Unit::IsUninteractible() const
documentation:
  brief: Determines whether the unit is uninteractible, meaning it cannot be interacted
    with by players.
  description: The IsUninteractible method checks if a unit (such as an NPC or object)
    is in a state where it cannot be interacted with by players. This typically occurs
    when the unit is in a state of being immune to player interaction, such as during
    certain phases of combat, or when it's flagged as non-interactable due to game
    mechanics like being in a 'not interactible' state. The method returns true if
    the unit is currently uninteractible and false otherwise. This functionality is
    essential for determining whether a unit can be interacted with by players in
    various game scenarios.
  parameters: []
  returns: Returns true if the unit is uninteractible, indicating that it cannot be
    interacted with by players; returns false otherwise.
  examples:
  - title: Basic usage example
    code: "if (unit->IsUninteractible()) {\n    // Do something\n}\nelse {\n    //\
      \ Do something else\n}"
    language: cpp
  notes: This method is commonly used in conjunction with other interaction-related
    methods to determine if a unit can be interacted with. It may be affected by game
    state changes, such as combat or phase transitions. Performance-wise, this method
    should not cause any noticeable overhead.
  warnings: This method does not guarantee that the unit will remain uninteractible
    throughout its lifecycle; it depends on dynamic game states and conditions. Be
    cautious when using this in combination with other interaction methods to avoid
    conflicting logic.
  related:
  - IsInWorld
  - IsVisible
  - IsAlive
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T11:51:37.174900'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
