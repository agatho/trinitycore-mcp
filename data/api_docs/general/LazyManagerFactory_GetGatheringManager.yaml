api:
  class: LazyManagerFactory
  method: GetGatheringManager
  signature: GatheringManager * LazyManagerFactory::GetGatheringManager()
documentation:
  brief: Returns the singleton GatheringManager instance used for managing gathering-related
    game mechanics.
  description: The GetGatheringManager method retrieves the singleton instance of
    the GatheringManager class, which is responsible for handling all gathering-related
    game mechanics such as mining, herbalism, and other resource collection activities
    within the TrinityCore framework. This method ensures that only one instance of
    the GatheringManager exists throughout the application lifecycle, providing centralized
    control over gathering operations. The returned pointer should be used directly
    without attempting to delete or manage its lifetime, as it is managed internally
    by the LazyManagerFactory. This method is typically called during game initialization
    or when specific gathering actions need to be processed.
  parameters: []
  returns: A pointer to the singleton GatheringManager instance. Returns nullptr if
    the manager has not been initialized or if there was an error during initialization.
  examples:
  - title: Basic Usage
    code: "GatheringManager* gatheringMgr = LazyManagerFactory::GetGatheringManager();\n\
      if (gatheringMgr)\n{\n    // Use the gathering manager to perform gathering\
      \ operations\n    gatheringMgr->ProcessGather(player, item);\n}"
    language: cpp
  - title: Checking for Valid Manager
    code: "GatheringManager* mgr = LazyManagerFactory::GetGatheringManager();\nif\
      \ (!mgr)\n{\n    sLog->outError(LOG_FILTER_GENERAL, \"Failed to retrieve GatheringManager\"\
      );\n    return false;\n}\n// Proceed with gathering operations using the valid\
      \ manager\nmgr->AddGatheredResource(player, resourceType, amount);"
    language: cpp
  notes: This method implements lazy initialization pattern, meaning the GatheringManager
    instance is created only when first requested. The returned pointer is guaranteed
    to be valid for the lifetime of the application as long as no explicit destruction
    occurs. This method is thread-safe and can be called from any thread context.
  warnings: Do not attempt to delete or manage the returned pointer's memory, as it
    is managed by the LazyManagerFactory. Calling this method before the manager has
    been initialized may return nullptr, so always check for null before using the
    returned pointer.
  related:
  - LazyManagerFactory::GetSingleton
  - GatheringManager::Initialize
  - GatheringManager::IsInitialized
metadata:
  confidence: 0.92
  generated_at: '2025-11-01T11:34:43.971416'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
