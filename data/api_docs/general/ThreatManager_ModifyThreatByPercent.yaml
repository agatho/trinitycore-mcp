api:
  class: ThreatManager
  method: ModifyThreatByPercent
  signature: void ThreatManager::ModifyThreatByPercent(Unit * target, int32 percent)
documentation:
  brief: Modifies the threat generated by a unit towards a target by a specified percentage.
  description: The ModifyThreatByPercent method adjusts the threat value that a given
    unit generates towards a specific target. This is commonly used in AI behavior
    scripting to modify how much aggro a creature or NPC will generate from actions
    such as damaging a player, casting spells, or performing certain abilities. The
    percentage value can be positive (increasing threat) or negative (reducing threat).
    This method directly affects the unit's threat table and influences combat behavior,
    including target switching and mob focus mechanics.
  parameters:
  - name: target
    description: Pointer to the Unit object representing the target towards which
      threat is being modified. Must be a valid Unit instance; passing nullptr may
      result in undefined behavior or crashes.
  - name: percent
    description: Integer value indicating the percentage change to apply to the threat.
      Positive values increase threat, negative values decrease it. For example, +50
      increases threat by 50%, while -25 reduces it by 25%.
  returns: null
  examples:
  - title: Increase Threat by 30%
    code: 'Unit* target = player;

      Unit* attacker = mob;

      attacker->GetThreatManager()->ModifyThreatByPercent(target, 30);'
    language: cpp
  - title: Reduce Threat by Half
    code: 'Unit* target = player;

      Unit* attacker = mob;

      attacker->GetThreatManager()->ModifyThreatByPercent(target, -50);'
    language: cpp
  notes: This method modifies the internal threat table and should be used carefully
    in combat scripts. It does not directly trigger any visual feedback or combat
    events; it only changes the underlying threat calculation. The change is immediate
    and affects all future threat calculations involving this target.
  warnings: Passing a nullptr for 'target' can lead to crashes or undefined behavior.
    Ensure that both the attacker and target units are valid and in the same map before
    calling this method. Be cautious with large negative percentages, as they may
    cause threat values to drop below zero, potentially leading to unexpected targeting
    behavior.
  related:
  - GetThreat
  - AddThreat
  - ResetAllThreat
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:44:09.188143'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
