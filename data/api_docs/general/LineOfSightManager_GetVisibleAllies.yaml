api:
  class: LineOfSightManager
  method: GetVisibleAllies
  signature: int LineOfSightManager::GetVisibleAllies(float maxRange)
documentation:
  brief: Calculates and returns the number of visible allied units within a specified
    range using line-of-sight checks.
  description: 'The GetVisibleAllies method determines how many friendly units are
    currently visible to the calling object within a given maximum range. It performs
    line-of-sight checks to ensure that the units are not obstructed by terrain or
    other objects. This functionality is commonly used in AI behavior scripts, threat
    detection systems, and group coordination logic. The method evaluates visibility
    based on the current position of the object and applies standard WoW visibility
    rules including range, line-of-sight, and faction-based visibility constraints.
    Precondition: The object must have a valid position and be part of a valid world
    context. Postcondition: Returns an integer count of visible allies, or zero if
    none are found within range.'
  parameters: []
  returns: An integer representing the number of allied units that are currently visible
    within the specified maximum range. Returns zero if no allies are visible or if
    the object is not in a valid world context.
  examples:
  - title: Basic usage to count nearby allies
    code: "int allyCount = lineOfSightManager.GetVisibleAllies(30.0f);\nif (allyCount\
      \ > 0)\n{\n    // Perform action based on visible allies\n    // e.g., coordinate\
      \ group strategy or avoid overextending\n}"
    language: cpp
  - title: Using result to adjust AI behavior
    code: "float maxRange = 25.0f;\nint visibleAllies = lineOfSightManager.GetVisibleAllies(maxRange);\n\
      if (visibleAllies >= 3)\n{\n    // Switch to defensive stance\n    unit->SetReactState(REACT_DEFENSIVE);\n\
      }\nelse if (visibleAllies == 0)\n{\n    // Move toward group or seek cover\n\
      \    unit->MoveToGroupLeader();\n}"
    language: cpp
  notes: This method performs expensive visibility calculations involving raycasting
    and faction checks. It should not be called frequently in tight loops without
    caching results. The method relies on the underlying WorldObject's position and
    orientation for accurate line-of-sight determination. Performance can be impacted
    by high object density or complex terrain.
  warnings: Calling this method from within a combat loop without proper caching may
    cause performance degradation. Ensure that the calling object has a valid position
    in the world before invoking this method, otherwise it will return zero. The range
    parameter should be validated to prevent excessive computation on very large values.
  related:
  - GetVisibleEnemies
  - IsInLineOfSight
  - GetVisibleUnits
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:07:02.781402'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
