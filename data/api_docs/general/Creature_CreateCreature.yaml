api:
  class: Creature
  method: CreateCreature
  signature: Creature * Creature::CreateCreature(uint32 entry, int * map, const int
    & pos, uint32 vehId)
documentation:
  brief: Creates a new Creature instance with the specified entry, map, position,
    and vehicle ID.
  description: The CreateCreature method is used to dynamically spawn a new creature
    in the World of Warcraft environment. It initializes a Creature object based on
    the provided entry ID, which determines the creature's type, appearance, and behavior.
    The method accepts a map reference, position coordinates, and an optional vehicle
    ID for mounting the creature. This function is typically used by game scripts,
    AI systems, or administrative commands to programmatically add creatures to the
    world. The returned Creature pointer can be used to further manipulate the spawned
    creature's properties, AI behavior, or movement patterns.
  parameters:
  - name: entry
    description: The unique identifier for the creature template. This ID corresponds
      to an entry in the creature_template table and defines the creature's base properties
      such as display ID, health, damage, faction, and AI behavior.
  - name: map
    description: A pointer to an integer representing the map ID where the creature
      will be spawned. This determines which instance or world area the creature will
      appear in.
  - name: pos
    description: A reference to a position structure (likely containing x, y, z coordinates)
      that specifies the exact location where the creature should be created within
      the map.
  - name: vehId
    description: An optional vehicle ID used to mount the creature on a vehicle. If
      set to 0 or invalid, the creature will be spawned without mounting.
  returns: Returns a pointer to the newly created Creature object. If the creation
    fails due to invalid parameters, missing templates, or memory allocation issues,
    this method may return NULL.
  examples:
  - title: Basic Creature Creation
    code: "Creature* myCreature = creature->CreateCreature(12345, &mapId, position,\
      \ 0);\nif (myCreature)\n{\n    // Successfully created a creature with entry\
      \ ID 12345\n    myCreature->SetReactState(REACT_AGGRESSIVE);\n}"
    language: cpp
  - title: Creature Creation with Vehicle Mounting
    code: "uint32 vehicleId = 9876;\nCreature* mountedCreature = creature->CreateCreature(54321,\
      \ &mapId, position, vehicleId);\nif (mountedCreature)\n{\n    // Creature is\
      \ created and mounted on vehicle with ID 9876\n    mountedCreature->SetFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_NON_ATTACKABLE);\n}"
    language: cpp
  notes: This method should only be called from within a valid game context where
    the world is initialized and map data is accessible. The position parameter must
    contain valid coordinates for the specified map. If the entry ID does not correspond
    to an existing creature template, the creation will fail and return NULL.
  warnings: Do not call this method with invalid map IDs or non-existent entry IDs
    as it may lead to crashes or undefined behavior. Always check the returned pointer
    for NULL before using the Creature object. Be cautious when creating multiple
    creatures in rapid succession as it can impact performance.
  related:
  - Creature::SummonCreature
  - Creature::DespawnOrUnsummon
  - Creature::GetEntry
  - Creature::SetPosition
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T20:41:58.866967'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
