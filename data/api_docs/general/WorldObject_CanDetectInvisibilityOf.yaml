api:
  class: WorldObject
  method: CanDetectInvisibilityOf
  signature: bool WorldObject::CanDetectInvisibilityOf(const WorldObject * obj) const
documentation:
  brief: Determines whether this WorldObject can detect the invisibility of another
    WorldObject.
  description: The CanDetectInvisibilityOf method evaluates if the calling WorldObject
    has the capability to detect invisible or stealthed objects in the game world.
    This functionality is crucial for determining visibility mechanics, such as whether
    a player can see an invisible NPC or if a creature can detect a hidden player.
    The method considers various factors including the object's detection abilities,
    aura states, and game rules related to invisibility detection. It returns true
    if the object can detect the target's invisibility, false otherwise.
  parameters: []
  returns: Returns true if this WorldObject can detect the invisibility of the specified
    object; otherwise returns false.
  examples:
  - title: Basic Usage
    code: "if (player->CanDetectInvisibilityOf(npc)) {\n    // Player can see the\
      \ invisible NPC\n    player->SendPacket(packet);\n}"
    language: cpp
  - title: Invisibility Detection Check
    code: "if (creature->CanDetectInvisibilityOf(player)) {\n    // Creature can detect\
      \ player's invisibility\n    creature->AI()->AttackStart(player);\n} else {\n\
      \    // Creature cannot see the player\n    creature->AI()->DoNothing();\n}"
    language: cpp
  notes: This method is typically used in game logic related to stealth detection,
    visibility checks, and AI behavior. It may involve checking for specific auras,
    abilities, or detection flags on both objects. The implementation likely involves
    multiple internal checks including aura state evaluation and game rule compliance.
  warnings: Ensure that the object being checked is valid before calling this method
    to avoid undefined behavior. This method should not be used in performance-critical
    code paths without proper optimization, as it may involve complex detection logic.
  related:
  - HasInvisibilityAura
  - IsInvisible
  - CanSee
  - DetectInvisibility
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:31:15.142947'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
