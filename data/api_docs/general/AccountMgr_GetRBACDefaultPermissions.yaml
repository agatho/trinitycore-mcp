api:
  class: AccountMgr
  method: GetRBACDefaultPermissions
  signature: const rbac::RBACPermissionContainer & AccountMgr::GetRBACDefaultPermissions(uint8
    secLevel)
documentation:
  brief: Returns the default RBAC permissions associated with a specified security
    level.
  description: The GetRBACDefaultPermissions method retrieves the set of Role-Based
    Access Control (RBAC) permissions that are automatically assigned to accounts
    based on their security level. This function is used internally by the TrinityCore
    authentication and authorization system to determine what privileges an account
    should have by default, depending on its access level (secLevel). The returned
    RBACPermissionContainer contains all permission bits that are enabled for the
    given security level, allowing the server to quickly check whether a player has
    specific permissions without needing to query individual permission records. This
    method is essential for maintaining consistent access control across the game
    world and ensuring proper privilege enforcement.
  parameters: []
  returns: A constant reference to an rbac::RBACPermissionContainer which holds all
    default RBAC permissions for the specified security level. The container can be
    queried using standard RBAC methods to check if a particular permission is granted.
  examples:
  - title: Retrieve Default Permissions for GM Level 1
    code: "const rbac::RBACPermissionContainer& perms = AccountMgr::GetRBACDefaultPermissions(1);\n\
      if (perms.HasPermission(RBAC_PERM_ACCOUNT_GM_LEVEL))\n{\n    // Player with\
      \ security level 1 has GM permissions\n}"
    language: cpp
  - title: Check Permissions for Admin Account
    code: "uint8 adminSecLevel = 3;\nconst rbac::RBACPermissionContainer& defaultPerms\
      \ = AccountMgr::GetRBACDefaultPermissions(adminSecLevel);\n// Use defaultPerms\
      \ to validate or apply administrative permissions\nif (defaultPerms.HasPermission(RBAC_PERM_ACCOUNT_ADMIN))\n\
      {\n    // Administrative privileges are enabled for this security level\n}"
    language: cpp
  notes: This method is typically called during account login or initialization to
    load default permissions. It's important to note that these default permissions
    may be overridden by individual account-specific RBAC assignments in the database.
    The returned container is immutable and should not be modified directly.
  warnings: Do not modify the returned RBACPermissionContainer as it represents a
    shared default configuration. Modifications could affect all accounts using that
    security level. Ensure that any permission checks are performed against this container
    rather than relying on hardcoded values.
  related:
  - AccountMgr::GetRBACPermissions
  - AccountMgr::LoadRBAC
  - AccountMgr::SetSecurityLevel
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:51:52.076824'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
