api:
  class: Unit
  method: AddUnitState
  signature: void Unit::AddUnitState(uint32 f)
documentation:
  brief: Adds a unit state to the current unit object, enabling specific game mechanics
    behaviors.
  description: This method adds a specified unit state flag to the current Unit object,
    allowing for control over various game mechanics such as movement, combat, and
    casting. The method is used to set states like 'dead', 'rooted', 'silenced', or
    'invulnerable' which affect how the unit behaves in the world. It's commonly used
    in conjunction with other state management methods to properly handle unit conditions
    during gameplay.
  parameters: []
  returns: null
  examples:
  - title: Basic usage example
    code: "Unit* target = GetTarget();\nif (target)\n{\n    target->AddUnitState(UNIT_STATE_ROOT);\n\
      }"
    language: cpp
  notes: This method directly modifies the unit's state flags, which are stored in
    a bitmask. The operation is thread-safe when used properly, but care must be taken
    to avoid race conditions during state changes. Performance impact is minimal as
    it simply sets a flag without complex computations.
  warnings: Be cautious when using this method with multiple states simultaneously
    as it may cause conflicts or unexpected behavior if not properly managed. Avoid
    calling this method on units that are already in the process of being modified
    by other threads.
  related:
  - Unit::ClearUnitState
  - Unit::HasUnitState
  - Unit::GetUnitState
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T21:31:15.768981'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
