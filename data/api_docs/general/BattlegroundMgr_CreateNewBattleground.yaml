api:
  class: BattlegroundMgr
  method: CreateNewBattleground
  signature: Battleground * BattlegroundMgr::CreateNewBattleground(int queueId, int
    bracketId)
documentation:
  brief: Creates a new battleground instance for the specified queue and bracket IDs.
  description: The CreateNewBattleground method is responsible for initializing and
    returning a new Battleground instance based on the provided queue and bracket
    identifiers. This method is typically invoked during the matchmaking process when
    players are ready to enter a battleground. It handles the creation of battleground
    objects, assigns appropriate settings based on the queue and bracket parameters,
    and ensures that the battleground is properly configured for player participation.
    The method may also perform necessary checks to validate that the battleground
    can be created with the given parameters.
  parameters:
  - name: queueId
    description: The unique identifier of the battleground queue that this battleground
      instance will belong to. This ID determines the type of battleground being created
      (e.g., AV, WS, AB).
  - name: bracketId
    description: The bracket identifier that defines the player level range and grouping
      for the battleground. This ensures players are matched appropriately based on
      their level.
  returns: A pointer to the newly created Battleground instance, or NULL if the creation
    failed due to invalid parameters or resource constraints.
  examples:
  - title: Basic Usage
    code: "Battleground* bg = sBattlegroundMgr->CreateNewBattleground(1, 0);\nif (bg)\n\
      {\n    // Successfully created a battleground\n    bg->StartBattleground();\n\
      }"
    language: cpp
  - title: Error Handling
    code: "Battleground* bg = sBattlegroundMgr->CreateNewBattleground(10, 5);\nif\
      \ (!bg)\n{\n    // Handle failure to create battleground\n    sLog->outError(\"\
      Failed to create battleground for queue %d and bracket %d\", 10, 5);\n}"
    language: cpp
  notes: This method is typically called internally by the matchmaking system. Developers
    should ensure that queueId and bracketId values are valid before calling this
    method to avoid unexpected behavior or crashes.
  warnings: Calling this method with invalid queueId or bracketId values may result
    in a NULL return value, which must be checked for before using the returned pointer.
    Do not assume that all combinations of queueId and bracketId will successfully
    create a battleground.
  related:
  - GetBattlegroundTemplate
  - GetBattleground
  - AddBattleground
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T02:06:18.790145'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
