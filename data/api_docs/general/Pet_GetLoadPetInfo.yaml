api:
  class: Pet
  method: GetLoadPetInfo
  signature: std::pair<const PetStable::PetInfo *, PetSaveMode> Pet::GetLoadPetInfo(const
    PetStable & stable, uint32 petEntry, uint32 petnumber, int slot)
documentation:
  brief: Retrieves pet information and save mode from a stable for a specified pet
    entry and slot.
  description: The GetLoadPetInfo method is used to fetch the PetInfo structure and
    associated save mode for a specific pet within a given stable. It takes into account
    the pet's entry ID, number, and slot position to locate and return relevant data
    needed for loading or managing the pet. This method is typically invoked during
    pet loading processes in the game world, particularly when handling pet stables
    and their contents. The returned pair consists of a pointer to the PetInfo structure
    and a PetSaveMode enum value indicating how the pet should be saved or managed.
  parameters:
  - name: stable
    description: Reference to the PetStable object containing pet data.
  - name: petEntry
    description: The entry ID of the pet to retrieve information for.
  - name: petnumber
    description: The unique identifier number assigned to the pet within the stable.
  - name: slot
    description: The slot index where the pet is stored in the stable (-1 indicates
      no specific slot).
  returns: A std::pair containing a const pointer to PetStable::PetInfo and a PetSaveMode
    enum value. The first element points to the pet's information structure, while
    the second indicates how the pet should be saved or managed.
  examples:
  - title: Basic usage of GetLoadPetInfo
    code: "PetStable stable;\nuint32 entry = 12345;\nuint32 number = 67890;\nint slot\
      \ = 0;\n\nauto result = pet->GetLoadPetInfo(stable, entry, number, slot);\n\
      if (result.first)\n{\n    // Process pet info\n    PetSaveMode saveMode = result.second;\n\
      \    // Use saveMode to determine how to handle the pet\n}"
    language: cpp
  notes: This method is part of the internal pet management system in TrinityCore
    and is primarily used during server startup or when loading player pets from database.
    The returned PetInfo pointer should be treated as read-only since it's a const
    reference.
  warnings: Ensure that the stable object passed to this method is valid and properly
    initialized before calling. Accessing invalid slots or entries may result in null
    pointers being returned, which must be handled appropriately by the caller.
  related:
  - Pet::LoadFromDB
  - Pet::SaveToDB
  - PetStable::GetPetInfo
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:20:20.409923'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
