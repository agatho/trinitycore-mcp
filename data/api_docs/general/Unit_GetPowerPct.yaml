api:
  class: Unit
  method: GetPowerPct
  signature: float Unit::GetPowerPct(int power) const
documentation:
  brief: Returns the percentage of power for a specified power type.
  description: The GetPowerPct method calculates and returns the percentage value
    of a specific power type relative to the maximum power available for the unit.
    This method is commonly used in World of Warcraft client-side calculations to
    determine how much mana, rage, energy, or other power types are remaining compared
    to their maximum values. It's particularly useful for determining resource percentages
    for UI elements, spell calculations, and game mechanics that require power-based
    computations.
  parameters:
  - name: power
    description: The power type to calculate percentage for. Valid values include
      0 (mana), 1 (rage), 2 (focus), 3 (energy), 4 (happiness), 5 (runic power), and
      other power types defined in the game.
  returns: Returns a float value representing the percentage of the specified power
    type. The value ranges from 0.0 to 100.0, where 0.0 represents no power and 100.0
    represents full power. If the power type is invalid or the unit has no power,
    returns 0.0.
  examples:
  - title: Basic usage example
    code: "float manaPct = unit->GetPowerPct(POWER_MANA);\nif (manaPct > 25.0f)\n\
      {\n    // Perform actions when mana is above 25% \n}"
    language: cpp
  - title: Advanced usage example
    code: "float energyPct = unit->GetPowerPct(POWER_ENERGY);\nfloat ragePct = unit->GetPowerPct(POWER_RAGE);\n\
      if (energyPct >= 80.0f && ragePct >= 80.0f)\n{\n    // Perform actions when\
      \ both energy and rage are above 80% \n}"
    language: cpp
  notes: This method is typically used in conjunction with other power-related methods
    to determine resource status. It's important to note that the power type parameter
    must match the actual power type defined in the game, as invalid values can lead
    to incorrect calculations or potential errors.
  warnings: Care should be taken when using this method with different power types,
    as incorrect usage may lead to unexpected results. Also, if the unit doesn't have
    a specific power type, the method will return 0.0, which might not be expected
    in some contexts.
  related:
  - GetPower
  - GetMaxPower
  - GetPowerType
  - GetPowerPct
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T08:22:12.015643'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
