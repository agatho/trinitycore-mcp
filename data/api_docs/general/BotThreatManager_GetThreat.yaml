api:
  class: BotThreatManager
  method: GetThreat
  signature: float BotThreatManager::GetThreat(Unit * target) const
documentation:
  brief: Retrieves the threat level that this bot has generated towards a specified
    target unit.
  description: The GetThreat method returns a float value representing the current
    threat level the bot has accumulated against a specific target unit. In World
    of Warcraft's combat system, threat determines which units are targeted by enemies.
    This method is typically used by AI systems to evaluate combat situations and
    make decisions about targeting or switching targets. The returned value usually
    ranges from 0.0f (no threat) to 1.0f (maximum threat), though actual values may
    vary based on the bot's behavior and the target's current threat state. This method
    does not modify any internal state and is safe for read-only access during combat
    evaluation.
  parameters: []
  returns: A float value representing the threat level towards the target unit, typically
    ranging from 0.0f (no threat) to 1.0f (maximum threat). Returns 0.0f if no threat
    has been generated or if the target is invalid.
  examples:
  - title: Basic Threat Retrieval
    code: "Unit* target = bot->GetVictim();\nfloat threatLevel = botThreatManager->GetThreat(target);\n\
      if (threatLevel > 0.5f)\n{\n    // Bot has significant threat on target\n  \
      \  // Perform actions accordingly\n}"
    language: cpp
  - title: Using Threat for Target Switching Logic
    code: "Unit* currentTarget = bot->GetVictim();\nUnit* newTarget = nullptr;\nfloat\
      \ highestThreat = 0.0f;\n\n// Iterate through nearby units to find the one with\
      \ highest threat\nfor (auto& unit : bot->GetMap()->GetCreatureStorage())\n{\n\
      \    if (!unit || unit == currentTarget) continue;\n    \n    float threat =\
      \ botThreatManager->GetThreat(unit);\n    if (threat > highestThreat)\n    {\n\
      \        highestThreat = threat;\n        newTarget = unit;\n    }\n}\n\nif\
      \ (newTarget && highestThreat > 0.1f)\n{\n    bot->AttackStart(newTarget);\n\
      }"
    language: cpp
  notes: This method relies on the internal threat calculation system of the bot's
    AI. The exact implementation details may vary depending on the specific bot type
    and its configured threat generation behavior. For performance reasons, repeated
    calls to this method should be minimized during high-frequency combat updates.
  warnings: The method assumes that the target unit is valid and accessible. Calling
    this method with a null or invalid target may result in undefined behavior or
    return unexpected values. Ensure that the target unit is still alive and within
    the bot's detection range before calling this method.
  related:
  - AddThreat
  - ResetThreat
  - GetThreatList
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T16:43:19.862076'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
