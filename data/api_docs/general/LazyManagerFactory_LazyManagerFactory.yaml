api:
  class: LazyManagerFactory
  method: LazyManagerFactory
  signature: void LazyManagerFactory::LazyManagerFactory(Player * bot, BotAI * ai)
documentation:
  brief: Initializes a new LazyManagerFactory instance with the specified player and
    AI components
  description: The LazyManagerFactory constructor initializes a new factory instance
    for managing bot-related lazy loading operations. This method sets up internal
    references to the provided Player object and BotAI instance, which are essential
    for creating and managing bot behaviors, actions, and decision-making processes
    within the TrinityCore framework. The initialization ensures that all subsequent
    lazy manager operations have access to the necessary player context and AI logic.
    This constructor is typically called during bot creation or initialization phases
    when establishing the core infrastructure for automated player behavior.
  parameters:
  - name: bot
    description: Pointer to the Player object representing the bot character that
      will be managed by this factory
  - name: ai
    description: Pointer to the BotAI object containing the artificial intelligence
      logic and decision-making capabilities for the bot
  returns: null
  examples:
  - title: Basic LazyManagerFactory Initialization
    code: 'Player* myBot = ...; // Bot player instance

      BotAI* myAI = ...;     // Bot AI instance

      LazyManagerFactory factory(myBot, myAI);'
    language: cpp
  notes: This constructor is typically invoked during bot creation when establishing
    the core infrastructure for automated behavior management. The factory pattern
    allows for lazy initialization of various bot components, improving performance
    by only creating resources when needed.
  warnings: null
  related: []
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T03:46:04.168559'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
