api:
  class: Unit
  method: AIUpdateTick
  signature: void Unit::AIUpdateTick(uint32 diff)
documentation:
  brief: Updates the AI behavior of the unit based on the time elapsed since last
    update
  description: The AIUpdateTick method is responsible for executing periodic AI logic
    for a Unit instance. It processes AI behaviors, actions, and state updates based
    on the time delta (diff) passed to it. This method is typically called by the
    core game loop at regular intervals to ensure that AI-controlled creatures and
    NPCs respond appropriately to their environment and game events. The method handles
    various AI states including combat, movement, spell casting, and target selection.
    It's a critical part of the TrinityCore AI system that ensures dynamic and responsive
    NPC behavior.
  parameters:
  - name: diff
    description: The time elapsed (in milliseconds) since the last AI update tick.
      This value is used to determine how much time has passed for AI decision-making,
      cooldown calculations, and behavior timing.
  returns: null
  examples:
  - title: Basic AI Update Usage
    code: "void GameLoop()\n{\n    uint32 diff = sWorld->GetLastTickTime();\n    for\
      \ (auto& unit : units)\n    {\n        if (unit->IsAIEnabled())\n          \
      \  unit->AIUpdateTick(diff);\n    }\n}"
    language: cpp
  - title: Custom AI Tick Override
    code: "class MyCreatureAI : public CreatureAI\n{\npublic:\n    void AIUpdateTick(uint32\
      \ diff) override\n    {\n        // Custom AI logic before base update\n   \
      \     if (me->GetVictim())\n            DoMeleeAttackIfReady();\n        \n\
      \        // Call parent implementation\n        CreatureAI::AIUpdateTick(diff);\n\
      \        \n        // Custom AI logic after base update\n        UpdateCombatMovement(diff);\n\
      \    }\n};"
    language: cpp
  notes: This method is called automatically by the core game loop for all units with
    active AI. Developers should not call this method directly unless implementing
    custom AI behavior. The diff parameter represents actual game time and should
    be used for timing-sensitive AI operations such as spell cooldowns, movement timing,
    or behavior delays.
  warnings: Do not call this method manually in most cases - it's intended to be called
    by the core game loop. Improper usage can lead to unexpected AI behavior or performance
    issues. Be careful when overriding this method to ensure proper inheritance and
    avoid breaking base AI functionality.
  related:
  - Unit::UpdateAI
  - Unit::GetAI
  - Unit::IsAIEnabled
  - Creature::AIUpdate
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T16:48:16.158939'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
