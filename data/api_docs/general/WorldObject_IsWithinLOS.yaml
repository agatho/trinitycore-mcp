api:
  class: WorldObject
  method: IsWithinLOS
  signature: bool WorldObject::IsWithinLOS(float x, float y, float z, int checks,
    int ignoreFlags) const
documentation:
  brief: Checks if a WorldObject has line-of-sight to a specified point in 3D space
  description: The IsWithinLOS method determines whether there is an unobstructed
    line of sight between the calling WorldObject and a given set of coordinates (x,
    y, z). This function performs a raycast check through the game world's collision
    system to verify that no solid objects, terrain features, or other obstacles block
    the direct path between the object and the target point. The method is commonly
    used for spell targeting, NPC vision checks, and determining whether an entity
    can see or interact with another in the game world. It respects various ignore
    flags that allow certain types of collisions to be bypassed during the LOS check.
  parameters:
  - name: x
    description: The X coordinate of the target point to check line-of-sight to
  - name: y
    description: The Y coordinate of the target point to check line-of-sight to
  - name: z
    description: The Z coordinate of the target point to check line-of-sight to
  - name: checks
    description: An integer value that controls how many checks or samples are performed
      along the ray path (default is usually 1 for basic checks)
  - name: ignoreFlags
    description: A bitmask of flags indicating which types of collision should be
      ignored during the LOS check (e.g., ignore terrain, ignore creatures, etc.)
  returns: Returns true if there is a clear line-of-sight from the WorldObject to
    the specified point; false otherwise
  examples:
  - title: Basic usage for spell targeting
    code: "if (player->IsWithinLOS(targetX, targetY, targetZ)) {\n    // Cast spell\
      \ or perform action\n    player->CastSpell(target, SPELL_FIREBALL, true);\n}"
    language: cpp
  - title: Advanced usage with ignore flags
    code: "if (npc->IsWithinLOS(playerX, playerY, playerZ, 3, 0x01)) {\n    // NPC\
      \ can see player but ignores certain collision types\n    npc->Say(\"You're\
      \ visible!\", LANG_UNIVERSAL);\n}"
    language: cpp
  notes: This method uses the underlying TrinityCore's collision system and may be
    computationally expensive if called frequently. It's recommended to cache results
    or limit calls per frame for performance reasons. The default implementation typically
    performs a single raycast from the object's center position.
  warnings: Calling this method with invalid coordinates or without proper bounds
    checking can lead to unexpected behavior or crashes. Ensure that the target point
    is within valid world boundaries before calling.
  related:
  - IsWithinDist
  - IsInMap
  - GetDistance
  - HasInArc
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:11:47.482530'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
