api:
  class: AuraEffect
  method: IsAffectingSpell
  signature: bool AuraEffect::IsAffectingSpell(const SpellInfo * spell) const
documentation:
  brief: Determines whether the aura effect is applied to a specific spell.
  description: The IsAffectingSpell method checks if the current aura effect modifies
    or influences the behavior of a given spell. This is commonly used in spell processing
    and aura application logic to determine compatibility or interaction between auras
    and spells. The method evaluates the spell's properties against the aura effect's
    internal filtering rules, which may include spell family flags, spell effects,
    or specific spell IDs. It returns true if the aura effect applies to the specified
    spell, false otherwise. This functionality is crucial for proper spell mechanics
    such as spell proc systems, aura stacking rules, and spell-specific modifications.
  parameters: []
  returns: Returns true if the aura effect affects the given spell; otherwise returns
    false.
  examples:
  - title: Basic Usage in Spell Proc Check
    code: "if (auraEffect->IsAffectingSpell(spellInfo))\n{\n    // Apply proc logic\n\
      \    ApplyProcEffect(caster, target);\n}"
    language: cpp
  - title: Aura Effect Filtering for Spell Application
    code: "bool CanApplyAuraToSpell(AuraEffect* aura, SpellInfo const* spell)\n{\n\
      \    // Check if this aura effect modifies the spell\n    return aura->IsAffectingSpell(spell);\n\
      }\n\n// Usage\nif (CanApplyAuraToSpell(myAuraEffect, targetSpell))\n{\n    //\
      \ Proceed with aura application\n}"
    language: cpp
  notes: This method typically relies on internal spell filtering mechanisms such
    as SpellFamilyFlags and SpellSpecific values. The implementation may involve checking
    against spell categories, effect types, or other spell attributes defined in the
    spell database. Performance-wise, this check is generally lightweight but can
    be called frequently during spell processing.
  warnings: Be cautious when using this method in loops or high-frequency code paths
    as it may trigger complex filtering logic internally. Ensure that the SpellInfo
    pointer passed is valid and not null to prevent undefined behavior.
  related:
  - GetAuraType
  - GetSpellInfo
  - IsPositive
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T08:57:30.652136'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
