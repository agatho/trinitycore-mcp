api:
  class: Unit
  method: HasAuraTypeWithCaster
  signature: bool Unit::HasAuraTypeWithCaster(int auraType, int caster) const
documentation:
  brief: Checks if the unit has a specific aura type with a specified caster.
  description: This method determines whether the Unit object possesses a particular
    aura type from a specific caster. It is commonly used in World of Warcraft's TrinityCore
    framework to evaluate magical effects and their sources. The method returns true
    if the specified aura type exists on the unit and was applied by the given caster,
    false otherwise. This functionality is essential for handling spell mechanics,
    such as determining if a player has a certain buff or debuff from a specific source.
  parameters:
  - name: auraType
    description: The aura type to check for (e.g., 13 for 'AuraType' or 24 for 'AuraType').
      Valid values are typically defined by the game's aura system and can represent
      various effects like buffs, debuffs, or passive abilities.
  - name: caster
    description: The caster ID to check against (e.g., 13 for 'AuraType' or 24 for
      'AuraType'). This represents the source of the aura, such as a player, NPC,
      or spell that applied the effect.
  returns: Returns true if the unit has the specified aura type from the given caster;
    otherwise false.
  examples:
  - title: Basic Usage Example
    code: "if (unit->HasAuraTypeWithCaster(13, 1)) {\n    // Do something\n}\n"
    language: cpp
  - title: Advanced Usage Example
    code: "bool hasStun = unit->HasAuraTypeWithCaster(24, 100);\nif (hasStun) {\n\
      \    // Handle stun effect\n}\n"
    language: cpp
  notes: This method is part of the core Unit class functionality and relies on internal
    aura tracking mechanisms. Performance considerations include checking for multiple
    aura types in sequence, which may impact execution time. The method is thread-safe
    when used within proper context.
  warnings: This method should be used carefully when evaluating spell effects, as
    incorrect usage can lead to false positive results or misinterpretation of game
    mechanics. Avoid using it with invalid caster IDs or aura types that do not exist
    in the system.
  related:
  - HasAuraType
  - GetAura
  - GetCaster
  - IsInWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:23:59.366057'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
