api:
  class: TradeManager
  method: IsTradeScam
  signature: bool TradeManager::IsTradeScam() const
documentation:
  brief: Determines whether a trade between two players is flagged as a scam based
    on game mechanics and trade validation rules.
  description: The IsTradeScam method evaluates the current trade state within the
    TradeManager to determine if the trade is considered fraudulent or suspicious
    according to World of Warcraft's anti-scam mechanisms. This method checks various
    conditions such as item value discrepancies, trade balance violations, and other
    game-specific rules that define what constitutes a scam trade. The result is used
    by the game client and server to prevent exploitation and maintain fair play.
    This method does not modify any state and is purely a read-only check.
  parameters: []
  returns: Returns true if the current trade is flagged as a scam based on internal
    validation rules; otherwise returns false if the trade appears legitimate.
  examples:
  - title: Basic Usage in Trade Validation
    code: "if (tradeManager.IsTradeScam()) {\n    // Handle scam trade scenario\n\
      \    player->SendNotification(\"This trade has been flagged as suspicious.\"\
      );\n}"
    language: cpp
  - title: Integration with Trade Completion Logic
    code: "void ProcessTradeCompletion(TradeManager& tradeManager, Player* player1,\
      \ Player* player2) {\n    if (tradeManager.IsTradeScam()) {\n        // Cancel\
      \ the trade and log the incident\n        tradeManager.CancelTrade();\n    \
      \    sLog->outInfo(LOG_FILTER_TRADES, \"Scam trade detected between %s and %s\"\
      , \n                      player1->GetName().c_str(), player2->GetName().c_str());\n\
      \    } else {\n        // Proceed with normal trade completion\n        tradeManager.FinalizeTrade();\n\
      \    }\n}"
    language: cpp
  notes: This method relies on internal trade state tracking and should only be called
    when a trade is actively in progress. The scam detection logic may evolve with
    game updates, so behavior could change over time. It's recommended to call this
    method before finalizing any trade to ensure compliance with anti-scam policies.
  warnings: Do not rely solely on this method for security-critical operations; it's
    designed primarily for client-side feedback and logging rather than enforcement.
    The method may return false positives or negatives depending on the complexity
    of the trade being evaluated.
  related:
  - TradeManager::GetTradeState
  - TradeManager::ValidateTrade
  - TradeManager::CancelTrade
  - TradeManager::FinalizeTrade
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T05:08:48.763816'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
