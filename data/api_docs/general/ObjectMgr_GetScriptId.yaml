api:
  class: ObjectMgr
  method: GetScriptId
  signature: uint32 ObjectMgr::GetScriptId(std::string_view name, bool isDatabaseBound)
documentation:
  brief: Retrieves the script identifier for a given script name, optionally checking
    database binding.
  description: The GetScriptId method is used to obtain a unique identifier (ID) associated
    with a specific script name within the TrinityCore framework. This ID is typically
    used to link game objects, creatures, or other entities to their corresponding
    scripted behaviors. The method supports both database-bound and non-database-bound
    scripts, allowing flexibility in how scripts are managed and referenced. It is
    commonly utilized during server initialization or when dynamically loading scripts
    to ensure proper linkage between script names and their unique identifiers.
  parameters:
  - name: name
    description: A string view representing the name of the script to look up. This
      should match the exact name used in the database or script definitions.
  - name: isDatabaseBound
    description: A boolean flag indicating whether the script is bound to the database.
      If true, the method will search for a database entry; if false, it may use alternative
      lookup mechanisms such as in-memory mappings.
  returns: Returns a uint32 value representing the unique identifier (ID) of the script.
    If no matching script is found, the method typically returns 0 or a default invalid
    ID.
  examples:
  - title: Basic Usage
    code: uint32 scriptId = sObjectMgr->GetScriptId("example_script", true);
    language: cpp
  - title: Checking Script Existence
    code: "if (sObjectMgr->GetScriptId(\"my_custom_script\", false) != 0)\n{\n   \
      \ // Script exists and has a valid ID\n    LOG_INFO(\"server\", \"Custom script\
      \ found with ID: {}\", sObjectMgr->GetScriptId(\"my_custom_script\", false));\n\
      }"
    language: cpp
  notes: This method likely relies on internal mappings or caches for performance.
    It's important to ensure that the provided script name is correctly formatted
    and matches existing entries in the system. The 'isDatabaseBound' parameter affects
    how the lookup is performed, so developers should be aware of whether their scripts
    are stored in the database or handled differently.
  warnings: Incorrectly formatted script names may result in a return value of 0,
    which can lead to logic errors if not properly checked. Developers should always
    validate the returned ID before using it for further operations.
  related:
  - GetScriptByName
  - GetScriptByEntry
  - LoadScriptedCreatures
  - LoadScriptedGameObjects
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T09:11:55.198269'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
