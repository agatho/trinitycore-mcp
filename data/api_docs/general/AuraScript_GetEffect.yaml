api:
  class: AuraScript
  method: GetEffect
  signature: AuraEffect * AuraScript::GetEffect(int effIndex) const
documentation:
  brief: Retrieves a specific aura effect from the AuraScript instance by its index.
  description: The GetEffect method retrieves a pointer to a specific AuraEffect object
    associated with the AuraScript instance. This method is commonly used within AuraScript
    implementations to access and manipulate individual effects of an aura. The effIndex
    parameter specifies which effect to retrieve, where each effect corresponds to
    a different application or aspect of the aura. The returned AuraEffect pointer
    can be used to query or modify the properties of that specific aura effect, such
    as its amount, periodic tick behavior, or visual effects. This method is essential
    for implementing complex aura behaviors in TrinityCore's spell and aura system.
  parameters: []
  returns: A pointer to the AuraEffect object at the specified index, or nullptr if
    the index is invalid or out of bounds.
  examples:
  - title: Accessing a Specific Aura Effect
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnApply(AuraEffect\
      \ const* eff, AuraEffectHandleModes mode) override\n    {\n        AuraEffect*\
      \ effect = GetEffect(0);\n        if (effect)\n        {\n            // Modify\
      \ the first aura effect\n            effect->SetAmount(100);\n        }\n  \
      \  }\n};"
    language: cpp
  - title: Checking Effect Type Before Manipulation
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnUpdate(int32\
      \ duration) override\n    {\n        AuraEffect* effect = GetEffect(1);\n  \
      \      if (effect && effect->GetAuraType() == SPELL_AURA_PERIODIC_DAMAGE)\n\
      \        {\n            // Adjust periodic damage effect\n            effect->SetAmount(effect->GetAmount()\
      \ * 2);\n        }\n    }\n};"
    language: cpp
  notes: The method assumes that the AuraScript instance is properly initialized and
    that the specified effIndex corresponds to a valid aura effect. The index should
    typically be within the range of effects defined for the aura. This method does
    not perform bounds checking internally, so developers must ensure the index is
    valid before calling.
  warnings: Calling GetEffect with an invalid index may return nullptr or cause undefined
    behavior. Always verify that the returned pointer is not null before dereferencing
    it. Additionally, modifying aura effects directly can affect gameplay balance
    and should be done carefully.
  related:
  - GetAura
  - GetEffectIndex
  - SetEffect
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:18:53.175830'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
