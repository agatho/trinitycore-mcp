api:
  class: KitingManager
  method: IsKiteable
  signature: bool KitingManager::IsKiteable(Unit * target)
documentation:
  brief: Determines whether a target unit is eligible for kiting behavior based on
    AI and movement constraints.
  description: The IsKiteable method evaluates if a given Unit target can be kited
    by the current AI-controlled creature. This determination considers factors such
    as the target's mobility, distance from the AI unit, and whether the target is
    within valid kiting range. Kiting is a common combat behavior in World of Warcraft
    where an AI-controlled unit maintains distance from its target while dealing damage
    or avoiding melee attacks. The method returns true if the target meets all necessary
    conditions for kiting, such as being able to move away from the AI unit and not
    being in a state that would prevent kiting (e.g., rooted or stunned).
  parameters:
  - name: target
    description: A pointer to the Unit object representing the target that is being
      evaluated for kiting eligibility. This parameter must not be null; passing a
      null pointer will likely result in undefined behavior or a crash.
  returns: Returns true if the target unit is eligible for kiting behavior, meaning
    it can move away from the AI unit and is not in a state that prevents kiting (e.g.,
    rooted, stunned). Returns false otherwise, indicating that kiting should not be
    attempted with this target.
  examples:
  - title: Basic usage in an AI behavior
    code: "if (kitingManager->IsKiteable(targetUnit)) {\n    // Initiate kiting behavior\n\
      \    ai->SetReactState(REACT_AGGRESSIVE);\n    ai->AttackStart(targetUnit);\n\
      } else {\n    // Switch to melee or other behavior\n    ai->SetReactState(REACT_DEFENSIVE);\n\
      }"
    language: cpp
  - title: Checking kiting eligibility before initiating movement
    code: "if (kitingManager->IsKiteable(target)) {\n    // Move to maintain distance\n\
      \    Movement::MoveSplineInit init(movementInfo);\n    init.MoveTo(x, y, z);\n\
      \    init.SetWalk(false);\n    init.Launch();\n} else {\n    // Target is not\
      \ kitable, consider alternative actions\n    DoMeleeAttackIfReady();\n}"
    language: cpp
  notes: This method likely performs checks on the target's current movement state,
    speed, and AI flags. It may also consider whether the target has a valid path
    to escape from the AI unit. The implementation might be part of a larger kiting
    system that includes movement logic, threat management, and combat decision-making.
  warnings: Ensure that the target pointer passed to this method is valid and not
    null before calling. Using an invalid pointer will lead to crashes or undefined
    behavior. Additionally, this method may not account for all edge cases in complex
    AI scenarios involving multiple targets or environmental constraints.
  related:
  - KitingManager::StartKiting
  - KitingManager::StopKiting
  - KitingManager::IsInKiteRange
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:59:26.768406'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
