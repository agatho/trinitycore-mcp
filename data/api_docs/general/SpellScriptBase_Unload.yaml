api:
  class: SpellScriptBase
  method: Unload
  signature: void SpellScriptBase::Unload()
documentation:
  brief: Releases all resources and cleans up the spell script instance
  description: The Unload method is responsible for releasing all allocated resources
    and performing cleanup operations on a SpellScriptBase instance. This method ensures
    that memory is properly freed, references are cleared, and any internal state
    is reset to prevent memory leaks or dangling pointers. It is typically called
    when a spell script is no longer needed, such as during spell cancellation, removal
    from active effects, or when the spell effect has completed its execution. The
    method should be invoked before the object is destroyed to maintain proper resource
    management within the TrinityCore framework.
  parameters: []
  returns: null
  examples:
  - title: Basic Unload Usage
    code: "void MySpellScript::HandleEffect(SpellEffIndex effIndex)\n{\n    // ...\
      \ spell effect logic ...\n    \n    // Clean up resources when spell ends\n\
      \    Unload();\n}"
    language: cpp
  - title: Unload in Spell Script Destructor
    code: "MySpellScript::~MySpellScript()\n{\n    // Ensure cleanup happens before\
      \ destruction\n    Unload();\n}"
    language: cpp
  notes: This method is part of the spell script lifecycle management system. It's
    important to call Unload explicitly when needed, as automatic cleanup may not
    always occur. The method should be called only once per instance to avoid double-free
    errors.
  warnings: Calling Unload multiple times on the same instance can lead to undefined
    behavior or crashes. Ensure that no references to the spell script remain after
    calling Unload, as accessing freed memory will cause segmentation faults.
  related:
  - Load
  - Initialize
  - Execute
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T20:57:47.897778'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
