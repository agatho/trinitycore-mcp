api:
  class: Player
  method: ApplyTraitEntry
  signature: void Player::ApplyTraitEntry(int32 traitNodeEntryId, int32 rank, int32
    grantedRanks, bool apply)
documentation:
  brief: Applies or removes a trait entry from the player's character sheet.
  description: The ApplyTraitEntry method allows developers to add or remove a specific
    trait entry from a player's character sheet. This method is used in conjunction
    with the trait system, which enables players to allocate points into various traits
    that provide benefits and abilities. The method handles the application of trait
    entries based on node ID, rank, and granted ranks, allowing for precise control
    over trait progression. It is typically used during character creation or when
    modifying player traits during gameplay.
  parameters:
  - name: traitNodeEntryId
    description: The unique identifier for the trait node entry being applied or removed.
      This ID corresponds to a specific trait in the game's trait system, such as
      a talent or ability.
  - name: rank
    description: The rank of the trait entry being applied or removed. This determines
      how many points are used for the trait entry.
  - name: grantedRanks
    description: The number of ranks that are granted to the player for this trait
      entry. This value represents the total number of ranks that will be applied
      to the trait entry.
  - name: apply
    description: A boolean flag indicating whether to apply or remove the trait entry.
      True applies the trait, False removes it.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Player* player = new Player();

      player->ApplyTraitEntry(12345, 1, 1, true);'
    language: cpp
  - title: Advanced usage example
    code: 'Player* player = new Player();

      int32 traitId = 54321;

      int32 rank = 2;

      int32 grantedRanks = 3;

      bool apply = false;

      player->ApplyTraitEntry(traitId, rank, grantedRanks, apply);'
    language: cpp
  notes: This method is typically used in conjunction with other trait-related methods
    such as GetTraitPoints and SetTraitPoints to manage the player's trait system
    effectively. It requires careful handling of trait node IDs and ranks to ensure
    correct application or removal of traits.
  warnings: Improper use of this method can lead to incorrect trait progression, potentially
    causing players to lose access to certain abilities or talents. Care must be taken
    when applying or removing trait entries to avoid conflicts with existing trait
    systems.
  related:
  - GetTraitPoints
  - SetTraitPoints
  - ApplyTraitEntry
  - TraitManager
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T01:11:41.074228'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
