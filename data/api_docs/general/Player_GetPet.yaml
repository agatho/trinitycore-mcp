api:
  class: Player
  method: GetPet
  signature: Pet * Player::GetPet() const
documentation:
  brief: Returns the player's currently active pet
  description: This method retrieves the Pet object associated with the player's current
    summoned pet. It returns a pointer to the Pet object if the player has an active
    pet, or nullptr if no pet is currently summoned. The method is commonly used in
    game mechanics to access pet properties, abilities, and behavior during gameplay.
    This function does not create or summon a new pet; it simply returns the existing
    pet that is currently active.
  parameters: []
  returns: Returns a pointer to the Pet object if the player has an active pet, or
    nullptr if no pet is currently summoned. The returned pointer may be null when
    the player has no pet in their possession.
  examples:
  - title: Basic Usage Example
    code: "Pet* pet = player->GetPet();\nif (pet)\n{\n    // Pet exists, perform actions\n\
      \    pet->SetOwner(player);\n}\nelse\n{\n    // No pet currently summoned\n\
      \    // Handle accordingly\n}"
    language: cpp
  notes: The method returns a pointer to the Pet object which is valid only as long
    as the pet exists. If the pet is dismissed or killed, the returned pointer becomes
    invalid. This method should be used carefully in scenarios where pet state changes
    may occur.
  warnings: This method will return nullptr if no pet is summoned, but it does not
    check whether a pet was previously summoned. Care should be taken when using this
    method to avoid dereferencing null pointers.
  related:
  - GetPet
  - SummonPet
  - RemovePet
  - HasPet
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:43:31.459918'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
