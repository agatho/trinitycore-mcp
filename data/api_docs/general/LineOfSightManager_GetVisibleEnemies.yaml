api:
  class: LineOfSightManager
  method: GetVisibleEnemies
  signature: int LineOfSightManager::GetVisibleEnemies(float maxRange)
documentation:
  brief: Calculates and returns the number of enemy units visible within the specified
    maximum range using line-of-sight checks.
  description: 'The GetVisibleEnemies method determines how many hostile targets are
    within a given range and have unobstructed visibility from the calling object''s
    position. This function performs line-of-sight calculations to ensure that only
    enemies not blocked by terrain, objects, or other obstacles are counted. It is
    commonly used in AI behavior systems to assess threat levels and determine appropriate
    combat responses. The method uses internal visibility caches and spatial partitioning
    for performance optimization, making it suitable for frequent calls during NPC
    update cycles. Precondition: The calling object must be a valid unit with a defined
    position and associated world map context.'
  parameters: []
  returns: Returns an integer representing the count of visible enemy units within
    the specified maximum range. A return value of zero indicates no enemies are visible,
    while positive values indicate the number of hostile targets that can be seen.
    Negative values may indicate error conditions or invalid internal states, though
    this behavior depends on implementation details.
  examples:
  - title: Basic Usage in AI Update
    code: "void EnemyAI::UpdateAI(uint32 diff)\n{\n    if (Unit* target = GetVisibleEnemies(50.0f))\n\
      \    {\n        // Proceed with combat logic\n        Attack(target);\n    }\n\
      \    else\n    {\n        // No visible enemies, return to patrol\n        ReturnToPatrol();\n\
      \    }\n}"
    language: cpp
  notes: This method relies on the underlying LineOfSightManager's internal cache
    and spatial grid system for efficient visibility checks. It is recommended to
    use reasonable range values to avoid performance degradation from excessive calculations.
    The method may internally perform multiple raycasts per enemy unit, so frequent
    calls should be monitored in high-frequency AI update scenarios.
  warnings: Do not assume that the returned count directly corresponds to enemies
    that can attack the caller; visibility does not necessarily mean threat level
    or engagement capability. The method may return cached results if the visibility
    state hasn't changed recently, potentially leading to stale data in rapidly changing
    environments.
  related:
  - IsInLineOfSight
  - GetVisibleTargets
  - CheckVisibility
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:06:26.225904'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
