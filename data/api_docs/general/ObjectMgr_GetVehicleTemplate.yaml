api:
  class: ObjectMgr
  method: GetVehicleTemplate
  signature: const int * ObjectMgr::GetVehicleTemplate(Vehicle * veh) const
documentation:
  brief: Retrieves the vehicle template data for a given vehicle object
  description: The GetVehicleTemplate method fetches the vehicle template information
    associated with a specific Vehicle object. This template contains configuration
    data that defines how the vehicle behaves, including seat layouts, movement properties,
    and interaction mechanics. The method returns a pointer to an integer array representing
    the vehicle's template data, which is typically used internally by the game engine
    to manage vehicle behavior and player interactions. The returned pointer should
    be treated as read-only and must not be modified directly. This method is commonly
    used during vehicle initialization, passenger boarding logic, and vehicle state
    management within TrinityCore's core systems.
  parameters: []
  returns: A const pointer to an integer array containing the vehicle template data.
    Returns nullptr if no valid template data exists for the provided vehicle object
    or if the input vehicle is invalid.
  examples:
  - title: Basic Usage Example
    code: "Vehicle* myVehicle = ...; // Some vehicle object\nconst int* templateData\
      \ = ObjectMgr::Instance()->GetVehicleTemplate(myVehicle);\nif (templateData\
      \ != nullptr)\n{\n    // Process vehicle template data\n    printf(\"Vehicle\
      \ template ID: %d\\n\", templateData[0]);\n}"
    language: cpp
  - title: Safe Template Access Example
    code: "Vehicle* veh = player->GetVehicle();\nif (veh)\n{\n    const int* vehicleTemplate\
      \ = ObjectMgr::Instance()->GetVehicleTemplate(veh);\n    if (vehicleTemplate\
      \ && vehicleTemplate[0] > 0)\n    {\n        // Use the template data for custom\
      \ logic\n        uint32 templateId = static_cast<uint32>(vehicleTemplate[0]);\n\
      \        // Perform actions based on vehicle type\n    }\n}"
    language: cpp
  notes: This method operates on the singleton ObjectMgr instance and should be called
    only when a valid Vehicle object is available. The returned integer array typically
    contains multiple values representing different aspects of vehicle configuration,
    such as ID, seat count, movement flags, and other behavioral parameters. The data
    structure is internal to TrinityCore's vehicle system and may change between versions.
  warnings: Do not modify the returned integer array directly as it points to internal
    game data structures. Always check for null return values before accessing template
    data. This method should only be called from within valid game context where Vehicle
    objects are properly initialized.
  related:
  - GetVehicleTemplate
  - GetVehicleEntry
  - GetVehicleSeatForPassenger
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T09:02:53.159218'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
