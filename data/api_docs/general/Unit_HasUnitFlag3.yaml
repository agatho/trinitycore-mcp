api:
  class: Unit
  method: HasUnitFlag3
  signature: bool Unit::HasUnitFlag3(UnitFlags3 flags) const
documentation:
  brief: Checks if the unit has a specific UnitFlags3 flag set.
  description: This method determines whether a given UnitFlags3 flag is currently
    set on the unit. It is commonly used in game mechanics to check for specific states
    or properties of units, such as whether a unit is in combat, is a ghost, or is
    in a specific state like being rooted or feared. The method returns true if the
    specified flag is present, false otherwise. This functionality is essential for
    implementing various gameplay logic and checks within TrinityCore's framework.
  parameters: []
  returns: Returns true if the unit has the specified UnitFlags3 flag set, false otherwise.
  examples:
  - title: Basic usage example
    code: "if (unit->HasUnitFlag3(UnitFlags3::UNIT_FLAG_IN_COMBAT)) {\n    // Do something\n\
      }\n"
    language: cpp
  notes: This method is typically used in conjunction with other flag checking methods
    to determine the current state of a unit. Performance-wise, it's a lightweight
    operation that simply checks bit flags, but care should be taken when using it
    in loops or frequently called functions.
  warnings: Be cautious when using this method in scenarios where flags may change
    rapidly; ensure proper synchronization if needed. Also note that UnitFlags3 flags
    are not the same as UnitFlags - make sure you're checking the correct flag type.
  related:
  - Unit::HasUnitFlag
  - Unit::GetUnitFlags
  - Unit::SetUnitFlag
  - Unit::RemoveUnitFlag
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:16:44.419020'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
