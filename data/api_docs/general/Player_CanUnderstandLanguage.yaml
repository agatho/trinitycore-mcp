api:
  class: Player
  method: CanUnderstandLanguage
  signature: bool Player::CanUnderstandLanguage(int language) const
documentation:
  brief: Checks whether the player can understand a specific language.
  description: This method determines if the player character has the necessary language
    skill to comprehend a particular language. It evaluates the player's current language
    proficiency and returns true if the language is understood, false otherwise. The
    method is commonly used in game mechanics involving NPC dialogue, quest interactions,
    and language-based communication systems where players need to understand specific
    languages for progression.
  parameters:
  - name: language
    description: The language ID to check for understanding. This parameter represents
      a specific language from the game's language system, typically corresponding
      to a language skill or language type in the database.
  returns: Returns true if the player has the language skill enabled and can understand
    the specified language; false otherwise. The method may return false if the player
    lacks the required language skill or if the language ID is invalid.
  examples:
  - title: Basic Language Check
    code: "if (player->CanUnderstandLanguage(LANG_COMMON))\n{\n    // Player can understand\
      \ Common language\n    // Proceed with dialogue or quest\n}"
    language: cpp
  - title: Advanced Language Check with Multiple Languages
    code: "int languageId = LANG_ORCISH;\nif (player->CanUnderstandLanguage(languageId))\n\
      {\n    // Player understands Orcish language\n    // Can proceed with related\
      \ quest or NPC interaction\n}\nelse\n{\n    // Player does not understand the\
      \ language\n    // Handle accordingly\n}"
    language: cpp
  notes: This method is typically used in conjunction with other language-related
    methods such as 'CanSpeakLanguage' and 'LearnLanguage'. The implementation checks
    against the player's current language skill database entries, which are updated
    through various gameplay mechanics including quest completion, NPC interaction,
    and skill training. Performance considerations include checking against a large
    number of languages during combat or quest progression scenarios.
  warnings: This method should not be used for determining language proficiency in
    isolation without considering other related methods. The player's language skill
    must be properly initialized and updated through game mechanics before this method
    can provide accurate results. Improper use may lead to incorrect dialogue handling
    or quest completion issues.
  related:
  - CanSpeakLanguage
  - LearnLanguage
  - HasSkill
  - GetLanguage
  - GetSkill
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T17:35:05.589427'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
