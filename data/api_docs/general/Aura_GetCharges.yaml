api:
  class: Aura
  method: GetCharges
  signature: uint8 Aura::GetCharges() const
documentation:
  brief: Retrieves the current charge count of the aura.
  description: The GetCharges method returns the number of charges currently available
    for the aura. In World of Warcraft mechanics, auras with charges represent effects
    that can be consumed over time or through use, such as buffs or debuffs with limited
    applications. This value typically decreases each time the aura's effect is applied
    or consumed, and may reset based on the aura's configuration or duration. The
    method provides access to this charge count for gameplay logic, UI display, or
    conditional checks.
  parameters: []
  returns: A uint8 value representing the current number of charges remaining for
    the aura. A return value of 0 indicates that no charges are left and the aura
    is effectively expired or depleted.
  examples:
  - title: Check Aura Charges Before Application
    code: "if (Aura* aura = player->GetAura(12345))\n{\n    uint8 charges = aura->GetCharges();\n\
      \    if (charges > 0)\n    {\n        // Apply effect or consume a charge\n\
      \        // Logic to reduce charges would be handled separately\n    }\n}"
    language: cpp
  - title: Display Charges in UI
    code: "Aura* aura = player->GetAura(67890);\nif (aura)\n{\n    uint8 charges =\
      \ aura->GetCharges();\n    // Update UI element to show charge count\n    SendChatMessage(\"\
      Current charges: \" + std::to_string(charges));\n}"
    language: cpp
  notes: This method does not modify the aura's state; it only retrieves the current
    charge value. The returned value is always non-negative and reflects the actual
    number of times the aura's effect can be applied before depletion.
  warnings: Ensure that the aura exists before calling this method, as accessing a
    null aura may lead to undefined behavior. Also note that some auras might not
    support charges at all, in which case this method will return 0 or an unexpected
    value depending on implementation.
  related:
  - GetAura
  - SetCharges
  - ModCharges
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T09:20:50.734153'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
