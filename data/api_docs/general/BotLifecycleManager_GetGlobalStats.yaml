api:
  class: BotLifecycleManager
  method: GetGlobalStats
  signature: GlobalStats BotLifecycleManager::GetGlobalStats() const
documentation:
  brief: Retrieves global statistics related to bot lifecycle management within the
    TrinityCore server.
  description: The GetGlobalStats method returns a GlobalStats object containing aggregated
    data about bot creation, destruction, and overall lifecycle events across the
    entire server instance. This includes metrics such as total bots created, currently
    active bots, failed initialization attempts, and other operational statistics
    that help monitor the health and performance of the bot system. The returned statistics
    are typically used for administrative oversight, performance tuning, and debugging
    purposes within the TrinityCore framework.
  parameters: []
  returns: A GlobalStats object containing cumulative counts and metrics related to
    bot lifecycle events across the server. This includes total created bots, active
    bots, failed operations, and other relevant statistical data that reflects the
    overall state of bot management in the system.
  examples:
  - title: Retrieve and Display Global Bot Statistics
    code: 'BotLifecycleManager& manager = BotLifecycleManager::instance();

      GlobalStats stats = manager.GetGlobalStats();

      std::cout << "Total bots created: " << stats.totalCreated << std::endl;

      std::cout << "Active bots: " << stats.activeBots << std::endl;

      std::cout << "Failed initializations: " << stats.failedInitializations << std::endl;'
    language: cpp
  notes: This method is typically called by administrative tools or monitoring systems
    to gather aggregate data about bot operations. The returned statistics are thread-safe
    and represent a snapshot of the current state at the time of the call. The GlobalStats
    object may be updated periodically by internal background processes, so repeated
    calls might return different values.
  warnings: The method does not perform any locking internally, so if called concurrently
    with bot creation/destruction operations, it may return inconsistent data across
    multiple calls. For critical applications requiring consistent statistics, consider
    implementing external synchronization mechanisms.
  related:
  - GetBotStats
  - GetActiveBots
  - CreateBot
  - DestroyBot
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:13:05.704359'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
