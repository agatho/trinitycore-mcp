api:
  class: Object
  method: GetDynamicFlags
  signature: uint32 Object::GetDynamicFlags() const
documentation:
  brief: Returns the dynamic flags of the object, which determine its interactive
    state and visual appearance.
  description: The GetDynamicFlags method retrieves the dynamic flags associated with
    an Object instance, which control how the object appears and behaves in the game
    world. These flags are used to determine if an object is visible, interactable,
    or has specific visual effects applied. The method returns a uint32 value representing
    the current dynamic flags state of the object, which can be modified through various
    game mechanics such as visibility changes, interaction states, or visual effects.
    This method is commonly used in World of Warcraft client-server interactions to
    determine object behavior and appearance.
  parameters: []
  returns: Returns a uint32 value representing the dynamic flags of the object. The
    value can be interpreted as a bitmask where each bit corresponds to different
    dynamic states such as visibility, interaction status, or visual effects. Possible
    values include 0x00000001 (visible), 0x00000002 (interactable), and other combinations
    based on game mechanics.
  examples:
  - title: Basic usage example
    code: "uint32 dynamicFlags = object->GetDynamicFlags();\nif (dynamicFlags & 0x00000001)\n\
      {\n    // Object is visible\n}\nelse\n{\n    // Object is not visible\n}"
    language: cpp
  - title: Advanced usage example
    code: "uint32 dynamicFlags = object->GetDynamicFlags();\nuint32 visibilityFlag\
      \ = 0x00000001;\nuint32 interactionFlag = 0x00000002;\nif (dynamicFlags & visibilityFlag)\n\
      {\n    // Object is visible\n}\nif (dynamicFlags & interactionFlag)\n{\n   \
      \ // Object is interactable\n}"
    language: cpp
  notes: This method is part of the Object class and is commonly used in World of
    Warcraft's object management system. The dynamic flags are typically set by game
    mechanics and can be modified through various methods including client-server
    communication. Performance considerations include that this method should be used
    sparingly as it involves bitwise operations on potentially large bitmasks.
  warnings: Care must be taken when interpreting dynamic flags values, as they may
    change based on game state or server updates. Incorrect handling of these flags
    can lead to objects appearing incorrectly in the game world or not responding
    to interaction properly.
  related:
  - SetDynamicFlags
  - GetUInt32Value
  - GetObjectGuid
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T18:01:32.576175'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
