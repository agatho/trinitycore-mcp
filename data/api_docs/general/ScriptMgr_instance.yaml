api:
  class: ScriptMgr
  method: instance
  signature: ScriptMgr * ScriptMgr::instance()
documentation:
  brief: Returns the singleton instance of the ScriptMgr class for managing game scripts
    and events.
  description: The instance() method is a static getter that provides access to the
    global singleton instance of the ScriptMgr class. This class serves as the central
    hub for script management within TrinityCore, handling registration, execution,
    and lifecycle management of various game scripts including creature scripts, game
    object scripts, area trigger scripts, and other event-driven behaviors. The method
    ensures thread safety and provides a consistent interface for accessing script-related
    functionality throughout the game engine. It is typically called during server
    initialization and runtime to register or query script behavior.
  parameters: []
  returns: A pointer to the singleton instance of ScriptMgr. The returned pointer
    is never null as the singleton pattern guarantees its existence.
  examples:
  - title: Basic Usage for Script Registration
    code: "void RegisterCustomScripts()\n{\n    ScriptMgr* scriptMgr = ScriptMgr::instance();\n\
      \    // Use scriptMgr to register custom scripts\n    scriptMgr->RegisterCreatureScript(12345,\
      \ &MyCustomCreatureAI);\n}"
    language: cpp
  - title: Accessing Script Manager in Event Handler
    code: "void OnPlayerEnterWorld(Player* player)\n{\n    ScriptMgr* mgr = ScriptMgr::instance();\n\
      \    // Query or modify script behavior\n    if (mgr->GetCreatureScript(12345))\n\
      \    {\n        // Custom logic here\n    }\n}"
    language: cpp
  notes: This method implements the singleton pattern, ensuring only one instance
    exists throughout the application lifecycle. The ScriptMgr singleton is initialized
    during server startup and should be accessed only after the core systems are fully
    operational. This method is thread-safe as it returns a constant reference to
    a globally accessible singleton.
  warnings: Avoid calling this method before the ScriptMgr has been initialized, which
    typically occurs during server startup. Do not attempt to manually delete or destroy
    the returned instance as it's managed by the singleton pattern. Using this in
    performance-critical code paths should be avoided due to potential synchronization
    overhead.
  related:
  - RegisterCreatureScript
  - GetCreatureScript
  - RegisterGameObjectScript
  - GetGameObjectScript
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:58:52.575268'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
