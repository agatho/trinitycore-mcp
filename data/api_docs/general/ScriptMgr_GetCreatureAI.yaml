api:
  class: ScriptMgr
  method: GetCreatureAI
  signature: CreatureAI * ScriptMgr::GetCreatureAI(Creature * creature)
documentation:
  brief: Retrieves the AI instance associated with a given creature.
  description: The GetCreatureAI method is used to obtain the CreatureAI object that
    controls the behavior of a specific creature in the game world. This method is
    typically called during creature initialization or when the AI system needs to
    access the creature's behavior logic. The returned CreatureAI pointer allows developers
    to interact with and control the creature's AI state, actions, and decision-making
    processes. It serves as a bridge between the core game logic and custom AI implementations.
  parameters:
  - name: creature
    description: A pointer to the Creature object for which to retrieve the AI instance.
      This parameter must be a valid creature pointer; passing null will result in
      undefined behavior.
  returns: Returns a pointer to the CreatureAI object associated with the specified
    creature. If no AI is assigned or if the creature is invalid, this method may
    return nullptr.
  examples:
  - title: Basic usage to access creature AI
    code: "Creature* myCreature = ...; // some creature\nCreatureAI* ai = ScriptMgr::GetCreatureAI(myCreature);\n\
      if (ai)\n{\n    // Use the AI instance for behavior control\n    ai->DoAction(1);\n\
      }"
    language: cpp
  - title: Checking AI type before casting
    code: "Creature* creature = ...;\nCreatureAI* ai = ScriptMgr::GetCreatureAI(creature);\n\
      if (ai && ai->IsAIEnabled())\n{\n    // Safe to cast or use specific AI methods\n\
      \    if (auto* basicAI = dynamic_cast<BasicCreatureAI*>(ai))\n    {\n      \
      \  basicAI->DoSpecialBehavior();\n    }\n}"
    language: cpp
  notes: This method is part of the TrinityCore scripting system and relies on proper
    AI registration. The returned CreatureAI instance should not be deleted or modified
    directly by external code. The method assumes that the creature has been properly
    initialized with an AI component.
  warnings: Passing a null pointer to this method will likely cause a crash or undefined
    behavior. Always validate the creature pointer before calling this method. Be
    aware that some creatures may not have AI assigned, particularly during early
    initialization phases.
  related:
  - GetCreatureTemplateAI
  - RegisterCreatureAI
  - Creature::GetAI
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T06:50:01.466665'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
