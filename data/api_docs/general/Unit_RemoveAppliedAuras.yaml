api:
  class: Unit
  method: RemoveAppliedAuras
  signature: void Unit::RemoveAppliedAuras(uint32 spellId, const int & check, int
    removeMode)
documentation:
  brief: Removes applied auras from a unit based on spell ID and removal mode
  description: This method removes all applied auras from a Unit that match the specified
    spell ID. It allows for precise control over which auras are removed based on
    the removal mode parameter, enabling developers to manage aura applications effectively.
    The method supports various removal modes including direct removal, stack-based
    removal, and conditional removal based on specific conditions. This functionality
    is essential for managing game mechanics such as aura effects, debuffs, and buffs
    in World of Warcraft.
  parameters:
  - name: spellId
    description: The spell ID of the aura to be removed. This parameter determines
      which specific auras are targeted for removal.
  - name: check
    description: A reference to an integer that represents the condition check for
      removal. This allows developers to specify whether the removal should occur
      based on certain conditions or thresholds.
  - name: removeMode
    description: The mode of removal, determining how the aura removal is handled.
      Valid values include direct removal, stack-based removal, and conditional removal
      based on specific criteria.
  returns: null
  examples:
  - title: Basic Aura Removal Example
    code: 'Unit* target = GetUnit();

      uint32 spellId = 12345;

      int check = 0;

      int removeMode = 0;

      target->RemoveAppliedAuras(spellId, check, removeMode);'
    language: cpp
  - title: Advanced Aura Removal with Conditional Check
    code: 'Unit* target = GetUnit();

      uint32 spellId = 12345;

      int check = 1;

      int removeMode = 1;

      target->RemoveAppliedAuras(spellId, check, removeMode);'
    language: cpp
  notes: This method is typically used in conjunction with other aura management functions
    to ensure precise control over applied auras. Performance considerations include
    avoiding unnecessary calls when multiple auras need to be removed simultaneously.
    Thread safety depends on the implementation of the Unit class and its methods,
    which may vary across different versions of TrinityCore.
  warnings: Improper use of this method can lead to incorrect aura removal or inconsistent
    game behavior. Developers should ensure that the spell ID and removal mode parameters
    are correctly set to avoid unintended consequences. Additionally, the check parameter
    must be carefully handled to prevent removal of unwanted auras.
  related:
  - Unit::RemoveAura
  - Unit::ApplyAura
  - Unit::AddAura
  - Unit::GetAppliedAuras
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:47:10.444634'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
