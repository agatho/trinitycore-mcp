api:
  class: LineOfSightManager
  method: GetVisibilityWaypoints
  signature: int LineOfSightManager::GetVisibilityWaypoints(const int & destination)
documentation:
  brief: Calculates and returns the number of visibility waypoints between the current
    object and a specified destination.
  description: The GetVisibilityWaypoints method determines the number of intermediate
    waypoints required to establish line-of-sight visibility from the current object's
    position to a given destination point. This method is typically used in pathfinding
    and visibility calculations within the TrinityCore framework, particularly for
    determining whether an NPC or player can see another entity without obstructions.
    The method internally performs collision detection checks along the path between
    the source and destination points, counting each significant waypoint that affects
    visibility. It's commonly employed in AI behavior systems where visual awareness
    and line-of-sight are critical for decision-making processes.
  parameters:
  - name: destination
    description: The index or identifier of the destination point for which visibility
      waypoints are calculated. This parameter typically refers to a waypoint index
      within the current object's movement path or a predefined location in the game
      world.
  returns: Returns an integer representing the number of visibility waypoints found
    between the current object and the specified destination. A return value of 0
    indicates no waypoints were found, while negative values may indicate errors in
    calculation or invalid input parameters.
  examples:
  - title: Basic usage to check visibility waypoints
    code: "int waypoints = lineOfSightManager.GetVisibilityWaypoints(5);\nif (waypoints\
      \ >= 0)\n{\n    // Proceed with visibility-based logic\n    printf(\"Found %d\
      \ waypoints for visibility\\n\", waypoints);\n}"
    language: cpp
  - title: Using return value to determine visibility status
    code: "int waypoints = lineOfSightManager.GetVisibilityWaypoints(targetWaypointIndex);\n\
      switch (waypoints)\n{\n    case 0:\n        // Direct line of sight\n      \
      \  printf(\"No obstacles detected\\n\");\n        break;\n    case -1:\n   \
      \     // Error occurred during calculation\n        printf(\"Error calculating\
      \ waypoints\\n\");\n        break;\n    default:\n        // Obstacles present\
      \ along the path\n        printf(\"%d obstacles in line of sight\\n\", waypoints);\n\
      \        break;\n}"
    language: cpp
  notes: This method may perform expensive collision detection operations depending
    on the complexity of the terrain and objects between source and destination. It
    should be used judiciously in performance-critical code paths. The method assumes
    that the current object has a valid position and that the destination parameter
    refers to a valid waypoint or location within the game world's navigation system.
  warnings: The method may return negative values indicating errors, so callers should
    always validate the return value before using it. In high-frequency scenarios,
    consider caching results or using alternative visibility methods to avoid repeated
    expensive calculations.
  related:
  - GetVisibilityDistance
  - IsWithinVisibilityRange
  - CalculatePathToDestination
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:07:42.422566'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
