api:
  class: Unit
  method: GetScheduledChangeAI
  signature: UnitAI * Unit::GetScheduledChangeAI()
documentation:
  brief: Returns the scheduled AI change for the unit, allowing for dynamic AI switching
    during combat.
  description: This method retrieves the AI instance that has been scheduled to replace
    the current AI of a Unit. It is commonly used in TrinityCore's AI system to facilitate
    dynamic AI transitions, particularly when a unit needs to switch between different
    AI behaviors during combat or other game events. The returned AI instance represents
    the new AI state that will be activated at the next AI update cycle. This method
    is essential for implementing AI-based behavior changes and can be used to prepare
    units for specific AI states without immediate activation.
  parameters: []
  returns: Returns a pointer to the UnitAI instance that has been scheduled for change,
    or nullptr if no scheduled change exists. The returned pointer may be used to
    access or modify the scheduled AI state before it becomes active.
  examples:
  - title: Basic AI Change Example
    code: "UnitAI* newAI = unit->GetScheduledChangeAI();\nif (newAI)\n{\n    // Use\
      \ newAI to set up new behavior\n    newAI->SetReactState(REACT_PASSive);\n}"
    language: cpp
  - title: Advanced AI Change Example
    code: "UnitAI* scheduledAI = unit->GetScheduledChangeAI();\nif (scheduledAI)\n\
      {\n    // Schedule a new AI for later activation\n    scheduledAI->SetReactState(REACT_DEFENSIVE);\n\
      }\nelse\n{\n    // Handle case where no change is scheduled\n    unit->SetReactState(REACT_PASSIVE);\n\
      }"
    language: cpp
  notes: This method should be used carefully as it may return nullptr if no AI has
    been scheduled. Developers should ensure that the returned pointer is valid before
    using it to avoid memory access violations. This method is typically used in conjunction
    with other AI scheduling methods to manage dynamic AI transitions.
  warnings: Be cautious when using this method, as returning a null pointer can lead
    to crashes or undefined behavior if not handled properly. Ensure proper checks
    are performed before accessing the returned AI instance.
  related:
  - GetAI
  - SetScheduledChangeAI
  - UpdateAI
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T03:07:14.318197'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
