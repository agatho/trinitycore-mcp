api:
  class: ScriptMgr
  method: GetSpellScriptLoader
  signature: SpellScriptLoader * ScriptMgr::GetSpellScriptLoader(uint32 scriptId)
documentation:
  brief: Retrieves the SpellScriptLoader instance associated with a given spell script
    ID.
  description: The GetSpellScriptLoader method is used to fetch a SpellScriptLoader
    object from the script manager based on a provided script identifier. This loader
    contains the necessary information and logic for handling spell-specific scripting
    behaviors in TrinityCore. The method serves as a lookup mechanism within the core
    scripting system, allowing the game engine to retrieve and apply custom spell
    behaviors defined by script loaders. It is typically invoked during spell initialization
    or execution phases when specific spell script logic needs to be accessed. The
    returned SpellScriptLoader instance can then be used to create or manage spell
    scripts for spells that are registered with the corresponding script ID.
  parameters: []
  returns: A pointer to the SpellScriptLoader object associated with the specified
    script ID, or nullptr if no loader is found for the given ID. The returned pointer
    should not be deleted by the caller as it is managed by the ScriptMgr system.
  examples:
  - title: Basic Usage to Retrieve Spell Script Loader
    code: "uint32 spellScriptId = 12345;\nSpellScriptLoader* loader = sScriptMgr->GetSpellScriptLoader(spellScriptId);\n\
      if (loader != nullptr)\n{\n    // Use the loader to initialize or manage spell\
      \ scripts\n    // Example: loader->CreateSpellScript();\n}"
    language: cpp
  notes: This method is part of TrinityCore's internal scripting architecture and
    should only be used when working with custom spell scripts. The SpellScriptLoader
    instances are typically registered during server startup or script loading phases.
    This lookup operation is generally fast as it uses an internal map for O(1) access,
    but performance can degrade if there are many script IDs without proper indexing.
  warnings: Do not attempt to delete the returned SpellScriptLoader pointer as it
    is managed by the ScriptMgr system. Accessing a loader with an invalid or unregistered
    script ID will return nullptr, which must be checked before use to prevent null
    pointer dereferences.
  related:
  - GetSpellScript
  - RegisterSpellScript
  - UnregisterSpellScript
metadata:
  confidence: 0.95
  generated_at: '2025-10-31T20:35:49.510196'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
