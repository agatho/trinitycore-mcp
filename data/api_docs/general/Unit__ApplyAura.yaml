api:
  class: Unit
  method: _ApplyAura
  signature: void Unit::_ApplyAura(AuraApplication * aurApp, uint32 effMask)
documentation:
  brief: Applies an aura application to the unit, updating the aura's effect on the
    target.
  description: This method handles the application of auras to a Unit, typically used
    during aura creation or modification processes. It updates the aura's effect on
    the target unit based on the specified effect mask. The method is part of the
    core aura handling system in TrinityCore and is crucial for managing how auras
    affect unit attributes, abilities, and status effects. This function ensures that
    the aura application is properly processed and applied to the target unit, including
    updating relevant stats, abilities, or status effects depending on the aura's
    nature.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object that contains the aura being
      applied. This object represents the specific aura being applied to the unit.
  - name: effMask
    description: Bitmask representing which effects of the aura are being applied.
      This determines which aura effects are active and how they affect the target
      unit.
  returns: null
  examples:
  - title: Basic Aura Application Example
    code: 'Unit* target = GetPlayer();

      AuraApplication* auraApp = new AuraApplication();


      // Apply aura to target

      target->_ApplyAura(auraApp, 1);

      '
    language: cpp
  - title: Advanced Aura Application with Effect Mask
    code: 'Unit* target = GetPlayer();

      AuraApplication* auraApp = new AuraApplication();


      // Apply specific effects

      uint32 effMask = 0x01;

      target->_ApplyAura(auraApp, effMask);

      '
    language: cpp
  notes: The method is typically called during aura creation or modification processes.
    It's important to note that this method does not directly apply the aura itself
    but rather handles the application of the AuraApplication object to the unit.
    The implementation involves updating the target unit's state based on the aura's
    effects, and it may involve multiple internal calls to other methods within the
    aura system.
  warnings: Improper handling of aura applications can lead to incorrect stat updates
    or even crashes if the aura application is not properly initialized before calling
    this method. Care should be taken when applying auras to ensure that the AuraApplication
    object is valid and properly constructed.
  related:
  - Unit::AddAura
  - Unit::RemoveAura
  - Unit::ApplyAura
  - AuraApplication::GetAura
  - AuraApplication::GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T20:02:24.853438'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
