api:
  class: BotMemoryManager
  method: GetMemoryEfficiency
  signature: double BotMemoryManager::GetMemoryEfficiency(uint32_t botGuid) const
documentation:
  brief: Calculates and returns the memory efficiency ratio for a specified bot based
    on its current resource usage.
  description: The GetMemoryEfficiency method computes a double-precision floating-point
    value representing how efficiently a bot is utilizing its allocated memory resources.
    This metric typically reflects the ratio of useful data stored in memory versus
    total allocated memory, helping identify potential memory leaks or inefficient
    memory management within bot instances. The method takes a bot's unique identifier
    (GUID) as input and performs internal calculations to determine this efficiency
    score. It is commonly used for monitoring and optimizing bot performance in World
    of Warcraft's TrinityCore environment.
  parameters:
  - name: botGuid
    description: The unique global identifier (GUID) of the bot whose memory efficiency
      is being calculated. This value must correspond to an active bot instance within
      the system.
  returns: A double-precision floating-point number between 0.0 and 1.0, where 1.0
    indicates optimal memory usage and 0.0 indicates maximum inefficiency or no usable
    memory allocated.
  examples:
  - title: Basic Usage
    code: "uint32_t botGuid = 12345;\ndouble efficiency = botMemoryManager->GetMemoryEfficiency(botGuid);\n\
      if (efficiency < 0.5) {\n    // Log warning about inefficient memory usage\n\
      }"
    language: cpp
  - title: Performance Monitoring
    code: "for (uint32_t i = 0; i < botCount; ++i) {\n    double efficiency = botMemoryManager->GetMemoryEfficiency(i);\n\
      \    if (efficiency < 0.3) {\n        // Trigger memory cleanup or alert system\n\
      \        sLog->outString(\"Bot %u has low memory efficiency: %.2f\", i, efficiency);\n\
      \    }\n}"
    language: cpp
  notes: This method may involve performance overhead due to internal memory analysis
    operations. It should be called sparingly in high-frequency loops or during critical
    game ticks. The returned value is an approximation and might not reflect real-time
    memory usage fluctuations.
  warnings: Ensure that the provided botGuid corresponds to an existing active bot
    instance; otherwise, the behavior is undefined and may cause crashes or incorrect
    results. Avoid calling this method from multiple threads simultaneously without
    proper synchronization.
  related:
  - GetMemoryUsage
  - GetBotCount
  - ResetBotMemory
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:07:23.843238'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
