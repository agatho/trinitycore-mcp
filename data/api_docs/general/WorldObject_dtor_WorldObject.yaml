api:
  class: WorldObject
  method: ~WorldObject
  signature: void WorldObject::~WorldObject()
documentation:
  brief: Destroys a WorldObject instance and performs necessary cleanup operations.
  description: The destructor for the WorldObject class is responsible for cleaning
    up resources associated with a world object when it is being destroyed. This includes
    removing the object from any relevant containers, notifying subsystems of the
    object's destruction, and ensuring proper memory deallocation. In the context
    of TrinityCore, WorldObject serves as the base class for all entities that exist
    in the game world such as players, creatures, game objects, and items. The destructor
    ensures that when a WorldObject instance goes out of scope or is explicitly deleted,
    all associated resources are properly released to prevent memory leaks and maintain
    game stability.
  parameters: []
  returns: null
  examples:
  - title: Basic Object Destruction
    code: 'WorldObject* obj = new WorldObject();

      // ... use the object ...

      delete obj; // This calls ~WorldObject()'
    language: cpp
  - title: Automatic Cleanup in Container
    code: 'std::vector<WorldObject*> objects;

      objects.push_back(new WorldObject());

      objects.push_back(new WorldObject());

      // When vector is destroyed, ~WorldObject() is called for each element

      objects.clear(); // Objects are automatically cleaned up'
    language: cpp
  notes: The destructor is automatically invoked by the C++ runtime when an object
    goes out of scope or is deleted. Developers should not manually call destructors
    unless implementing custom memory management patterns. The WorldObject destructor
    ensures that all subsystems are notified of object destruction, which may include
    removing the object from spatial partitioning systems and clearing references
    in various game managers.
  warnings: Do not manually invoke the destructor on stack-allocated objects as this
    will result in undefined behavior. When using smart pointers or containers, ensure
    proper ownership semantics to avoid double-deletion issues. The destructor assumes
    that all derived class destructors have already been called before it executes.
  related:
  - WorldObject::IsInWorld
  - WorldObject::AddToWorld
  - WorldObject::RemoveFromWorld
  - WorldObject::GetGUID
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T20:47:18.722653'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
