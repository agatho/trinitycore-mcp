api:
  class: SpellScriptLoader
  method: GetSpellScript
  signature: SpellScript * SpellScriptLoader::GetSpellScript() const
documentation:
  brief: Creates and returns a new instance of a spell script associated with this
    loader.
  description: The GetSpellScript method is a virtual function in the SpellScriptLoader
    class that instantiates and returns a new SpellScript object. This method is typically
    overridden by derived classes to provide specific spell script implementations
    for individual spells. It serves as a factory method for creating spell scripts
    during spell initialization. The returned SpellScript instance will be managed
    by the core system and executed according to the spell's trigger conditions and
    effects. This method should only be called during spell loading or activation
    phases, not during active gameplay execution.
  parameters: []
  returns: A pointer to a newly created SpellScript object, or nullptr if instantiation
    fails. The caller does not own the returned object and should not delete it directly.
  examples:
  - title: Basic spell script loader implementation
    code: "class MySpellScriptLoader : public SpellScriptLoader\n{\npublic:\n    MySpellScriptScriptLoader()\
      \ : SpellScriptLoader(\"my_spell\") {}\n    \n    SpellScript* GetSpellScript()\
      \ const override\n    {\n        return new MySpellScript();\n    }\n};"
    language: cpp
  - title: Usage in spell registration context
    code: "void AddSC_my_spell()\n{\n    new MySpellScriptLoader();\n}\n\n// Later\
      \ in core initialization:\nSpellScript* script = sSpellScriptLoader->GetSpellScript();\n\
      if (script)\n{\n    // Configure and register the spell script\n    script->Register();\n\
      }"
    language: cpp
  notes: This method is part of the TrinityCore's spell scripting system and is called
    internally by the core during spell loading. Developers should ensure that their
    implementations return valid SpellScript instances or nullptr, but never delete
    or free memory manually as the core manages the lifecycle. The method should be
    thread-safe as it may be called from different threads during server initialization.
  warnings: Do not attempt to delete or manage the returned SpellScript pointer directly,
    as the core handles its destruction. Calling this method outside of spell loading
    context may result in undefined behavior. Ensure that derived classes properly
    implement this method to avoid runtime errors.
  related:
  - SpellScriptLoader::SpellScriptLoader
  - SpellScript::Register
  - sSpellScriptLoader
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T05:40:23.531446'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
