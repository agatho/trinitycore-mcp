api:
  class: RBACData
  method: LoadFromDBAsync
  signature: int RBACData::LoadFromDBAsync()
documentation:
  brief: Asynchronously loads role-based access control data from the database for
    the associated account.
  description: The LoadFromDBAsync method retrieves all role-based access control
    (RBAC) permissions, roles, and grants associated with the current account from
    the database using an asynchronous operation. This method is typically invoked
    during account login or initialization to populate the RBAC system with the appropriate
    permissions. It performs a non-blocking database query that allows the game server
    to continue processing other requests while waiting for the data retrieval to
    complete. The method ensures that access control information is up-to-date and
    reflects the latest permissions assigned to the player's account.
  parameters: []
  returns: Returns 0 on successful completion of the asynchronous database load operation.
    Returns a non-zero error code if the database query fails or if there are issues
    with data retrieval or processing. The specific error codes may indicate connection
    failures, invalid data formats, or permission-related issues.
  examples:
  - title: Basic usage in account login
    code: "RBACData rbacData;\nint result = rbacData.LoadFromDBAsync();\nif (result\
      \ == 0)\n{\n    // RBAC data successfully loaded\n    // Proceed with account\
      \ access control checks\n}\nelse\n{\n    // Handle error in loading RBAC data\n\
      \    sLog->outError(\"Failed to load RBAC data for account: %d\", accountId);\n\
      }"
    language: cpp
  notes: This method is designed to be thread-safe and should not be called concurrently
    with other RBAC operations on the same instance. The asynchronous nature means
    that the RBAC data may not be immediately available after calling this method,
    so proper synchronization or completion checking should be implemented when relying
    on the loaded permissions.
  warnings: Calling LoadFromDBAsync without ensuring proper database connectivity
    may result in failed permission loading and potential access control issues. This
    method does not validate the loaded data against current game rules; it simply
    retrieves what exists in the database. If the database contains malformed or inconsistent
    RBAC entries, those errors will be reflected in the loaded data.
  related:
  - RBACData::LoadFromDB
  - RBACData::HasPermission
  - RBACData::AddPermission
  - RBACData::RemovePermission
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T20:46:19.977379'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
