api:
  class: Aura
  method: CallScriptAfterEffectRemoveHandlers
  signature: void Aura::CallScriptAfterEffectRemoveHandlers(const AuraEffect * aurEff,
    const AuraApplication * aurApp, AuraEffectHandleModes mode)
documentation:
  brief: Invokes all script handlers after an aura effect is removed from a unit.
  description: The CallScriptAfterEffectRemoveHandlers method is responsible for executing
    any registered script callbacks that are associated with the removal of a specific
    aura effect. This method is typically called internally by the TrinityCore framework
    when an aura effect is being removed from a unit, either through natural expiration,
    manual removal, or other game mechanics such as dispel effects. It ensures that
    any custom logic defined in scripts (such as those written in Lua or C++) related
    to the removal of an aura effect is properly executed. The method takes into account
    the specific aura effect, application context, and handle mode to determine which
    script handlers should be invoked.
  parameters:
  - name: aurEff
    description: Pointer to the AuraEffect object that is being removed. This parameter
      specifies the exact effect instance that triggered the handler calls.
  - name: aurApp
    description: Pointer to the AuraApplication object representing the application
      context of the aura. This provides information about how and where the aura
      was applied to a unit.
  - name: mode
    description: The AuraEffectHandleModes enum value indicating the mode in which
      the aura effect is being removed. This affects which script handlers are invoked,
      such as whether it's due to expiration, dispel, or manual removal.
  returns: null
  examples:
  - title: Basic usage within aura removal logic
    code: "void MyAuraScript::OnEffectRemove(AuraEffect const* aurEff, AuraApplication\
      \ const* aurApp, AuraEffectHandleModes mode)\n{\n    // Custom logic before\
      \ calling base handler\n    // ...\n    // Call the script handlers after effect\
      \ removal\n    aura->CallScriptAfterEffectRemoveHandlers(aurEff, aurApp, mode);\n\
      }"
    language: cpp
  notes: This method is part of the internal aura management system in TrinityCore
    and should not be directly called from outside the core framework unless you are
    implementing a custom aura handler or extending existing aura behavior. The method
    relies on registered script callbacks, so ensure that any custom scripts are properly
    initialized before this method is invoked.
  warnings: Improper handling of script handlers or calling this method without valid
    parameters can lead to undefined behavior or crashes. Ensure all pointers passed
    are valid and that the aura system is in a consistent state before invoking this
    method.
  related:
  - CallScriptBeforeEffectRemoveHandlers
  - CallScriptAfterEffectApplyHandlers
  - Aura::AddAuraEffect
  - Aura::RemoveAuraEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T14:13:30.013323'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
