api:
  class: Aura
  method: _InitEffects
  signature: void Aura::_InitEffects(uint32 effMask, Unit * caster, const int32 *
    baseAmount)
documentation:
  brief: Initializes the effects of an aura based on the provided effect mask, caster,
    and base amounts.
  description: The _InitEffects method is responsible for setting up the initial state
    of an aura's effects. It takes a bitmask indicating which effects are active,
    a pointer to the unit that cast the aura, and an array of base amounts for those
    effects. This method is typically called during aura application or creation to
    properly configure all effect-related data structures. The method ensures that
    each active effect within the aura is initialized with appropriate values derived
    from the caster and baseAmount parameters. It plays a crucial role in determining
    how the aura will behave throughout its duration, including any modifications
    to stats, damage, healing, or other game mechanics.
  parameters:
  - name: effMask
    description: A bitmask specifying which effects of the aura are active. Each bit
      corresponds to a specific effect index within the aura.
  - name: caster
    description: Pointer to the Unit object that cast this aura. Used to determine
      caster properties, such as level, stats, or spell modifiers when initializing
      effects.
  - name: baseAmount
    description: An array of base amounts for each effect. The size and interpretation
      depend on the number of active effects defined by effMask.
  returns: null
  examples:
  - title: Basic Aura Initialization
    code: 'Aura* aura = new Aura();

      uint32 effectMask = 0x07; // First three effects

      Unit* caster = player;

      int32 baseAmounts[3] = {100, 50, 25};

      aura->_InitEffects(effectMask, caster, baseAmounts);'
    language: cpp
  - title: Initializing Effects for a Spell Aura
    code: 'Aura* aura = new Aura();

      uint32 effectMask = 0x01; // Only first effect

      Unit* caster = mob;

      int32 baseAmounts[1] = {200};

      aura->_InitEffects(effectMask, caster, baseAmounts);'
    language: cpp
  notes: This method is typically invoked internally by the TrinityCore framework
    during aura application. Developers should ensure that effMask correctly reflects
    the number of effects being initialized and that baseAmount array contains valid
    values for each corresponding effect. The method does not directly apply the effects
    to units but prepares them for later application.
  warnings: Incorrectly setting effMask can lead to uninitialized or improperly configured
    effects, potentially causing unexpected behavior in spell mechanics. Ensure that
    the baseAmount array size matches the number of active effects indicated by effMask.
  related:
  - Aura::ApplyEffect
  - Aura::RemoveEffect
  - Aura::HasEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:46:36.411223'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
