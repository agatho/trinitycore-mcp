api:
  class: Unit
  method: JumpTo
  signature: void Unit::JumpTo(float speedXY, float speedZ, float angle, int dest)
documentation:
  brief: Initiates a jump movement to a specified destination with given speed and
    angle parameters
  description: The Unit::JumpTo method is used to initiate a jump movement for a unit,
    typically in the context of World of Warcraft gameplay mechanics. This method
    allows for precise control over the jump trajectory by specifying speedXY, speedZ,
    angle, and destination parameters. It is commonly used in scripting or game AI
    to enable units to perform jumps with specific characteristics such as height,
    distance, and direction. The method does not directly handle physics calculations
    but rather sets up the movement parameters for the unit's movement system.
  parameters:
  - name: speedXY
    description: Horizontal speed component of the jump, determining how fast the
      unit moves horizontally during the jump
  - name: speedZ
    description: Vertical speed component of the jump, controlling the upward or downward
      movement of the unit during the jump
  - name: angle
    description: Angle of the jump trajectory, specifying the direction and elevation
      of the jump relative to the ground
  - name: dest
    description: Destination identifier or index for the jump, indicating where the
      unit should land or reach during the jump movement
  returns: null
  examples:
  - title: Basic Jump Movement Example
    code: 'Unit* unit = new Unit;

      unit->JumpTo(10.0f, 5.0f, 45.0f, 1);'
    language: cpp
  - title: Advanced Jump with Custom Parameters
    code: 'Unit* unit = new Unit;

      unit->JumpTo(15.0f, 8.0f, 60.0f, 3);

      // This would initiate a jump with increased horizontal speed and vertical speed

      // while maintaining a higher angle for more dramatic jump trajectory'
    language: cpp
  notes: 'Implementation details: The method likely triggers the unit''s movement
    system to handle jump mechanics. Performance considerations include ensuring that
    parameters are within valid ranges, as invalid values may cause errors or unexpected
    behavior. Thread safety is not explicitly mentioned but generally implies that
    such methods should be called from a single thread context unless otherwise specified.'
  warnings: The method requires careful parameter handling; incorrect values for speedXY,
    speedZ, or angle may result in unrealistic jump trajectories or movement errors.
    Common mistakes include misinterpreting the destination parameter as a coordinate
    rather than an index, leading to incorrect jump destinations.
  related: []
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T21:00:35.916528'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
