api:
  class: LFGMgr
  method: GetDungeon
  signature: uint32 LFGMgr::GetDungeon(int guid, bool asId)
documentation:
  brief: Retrieves the dungeon ID associated with a given player GUID
  description: 'The GetDungeon method retrieves the dungeon identifier (ID) for a
    specific player based on their globally unique identifier (GUID). This function
    is typically used within the LFG (Looking For Group) system to determine which
    dungeon a player is currently assigned to or scheduled for. The method supports
    two modes of operation depending on the ''asId'' parameter: when true, it returns
    the raw dungeon ID; when false, it may return additional metadata or process the
    GUID differently. This functionality is essential for managing group formations,
    dungeon matching, and tracking player progress through various LFG activities.'
  parameters:
  - name: guid
    description: The globally unique identifier (GUID) of the player whose dungeon
      information is being retrieved. This value uniquely identifies a specific player
      within the game world.
  - name: asId
    description: Boolean flag that determines how the dungeon information is processed.
      When true, returns the raw dungeon ID; when false, may return additional metadata
      or perform alternative processing based on internal LFG logic.
  returns: Returns a uint32 value representing either the dungeon ID (when asId=true)
    or processed dungeon-related data (when asId=false). A return value of 0 typically
    indicates no active dungeon assignment or an invalid player GUID.
  examples:
  - title: Basic Usage to Get Player's Dungeon ID
    code: "uint32 dungeonId = sLFGMgr->GetDungeon(playerGuid, true);\nif (dungeonId\
      \ > 0)\n{\n    // Player is assigned to a dungeon\n    printf(\"Player is in\
      \ dungeon %u\\n\", dungeonId);\n}"
    language: cpp
  - title: Using GetDungeon with Metadata Processing
    code: "uint32 dungeonData = sLFGMgr->GetDungeon(playerGuid, false);\nif (dungeonData\
      \ > 0)\n{\n    // Process additional LFG metadata\n    printf(\"Player has LFG\
      \ data: %u\\n\", dungeonData);\n}"
    language: cpp
  notes: This method relies on internal LFG state tracking and assumes that the player
    GUID is valid and registered within the LFG system. The behavior of 'asId=false'
    may vary depending on implementation details in different TrinityCore versions.
    Performance-wise, this function should be used judiciously as it accesses internal
    LFG data structures.
  warnings: Ensure that the provided GUID corresponds to an actual player who has
    been registered with the LFG system; otherwise, unexpected behavior or invalid
    return values may occur. Avoid calling this method from contexts where LFG subsystem
    is not initialized.
  related:
  - GetDungeon
  - IsPlayerInLFGQueue
  - SetPlayerDungeon
  - RemovePlayerFromLFG
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:53:43.019086'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
