api:
  class: BotThreatManager
  method: GetSortedThreatTargets
  signature: int BotThreatManager::GetSortedThreatTargets()
documentation:
  brief: Sorts and returns the list of threat targets for a bot based on current threat
    levels.
  description: The GetSortedThreatTargets method retrieves and sorts all current threat
    targets associated with a bot's AI system. It organizes these targets in descending
    order of threat level, making it easier for the bot to prioritize which enemies
    to focus on during combat. This method is typically used by the bot's decision-making
    logic to determine the most dangerous opponents. The sorting is performed based
    on the internal threat calculation system within TrinityCore's AI framework. The
    method does not modify any existing data but returns a count of sorted targets,
    allowing the calling code to iterate through them in order of priority.
  parameters: []
  returns: Returns an integer representing the number of threat targets that were
    successfully sorted and are available for use. A return value of zero indicates
    no active threats or an error occurred during sorting.
  examples:
  - title: Basic usage to get sorted threat targets
    code: "int targetCount = botThreatManager->GetSortedThreatTargets();\nfor (int\
      \ i = 0; i < targetCount; ++i)\n{\n    // Process each sorted threat target\n\
      \    Unit* target = botThreatManager->GetThreatTarget(i);\n    if (target &&\
      \ target->IsAlive())\n    {\n        // Perform actions based on threat priority\n\
      \        bot->Attack(target);\n    }\n}"
    language: cpp
  notes: This method relies on the internal threat calculation system of the bot's
    AI. The sorting is performed in real-time and may be affected by changes in combat
    state or target status. It is recommended to call this method before iterating
    through threat targets to ensure up-to-date ordering.
  warnings: The returned integer only indicates the count of sorted targets; it does
    not guarantee that all targets are valid or alive. Always validate the returned
    targets before using them in combat actions.
  related:
  - GetThreatTarget
  - AddThreat
  - RemoveThreat
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T16:44:35.755273'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
