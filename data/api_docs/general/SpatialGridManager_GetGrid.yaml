api:
  class: SpatialGridManager
  method: GetGrid
  signature: DoubleBufferedSpatialGrid * SpatialGridManager::GetGrid(Map * map)
documentation:
  brief: Retrieves the spatial grid associated with a given map for managing object
    placement and visibility.
  description: The GetGrid method retrieves a DoubleBufferedSpatialGrid instance that
    corresponds to the specified Map. This grid is used internally by TrinityCore's
    spatial partitioning system to efficiently manage the positioning, movement, and
    visibility of game objects within a specific map area. The double-buffered nature
    of the grid allows for safe concurrent access during updates while maintaining
    consistency. The returned grid object can be used to query nearby objects, perform
    spatial operations, or manage object registration and unregistration. This method
    is typically called when needing to interact with the spatial grid system for
    a particular map context.
  parameters: []
  returns: A pointer to the DoubleBufferedSpatialGrid associated with the specified
    Map. Returns nullptr if the grid could not be retrieved or if the input Map is
    invalid.
  examples:
  - title: Basic Grid Retrieval
    code: "Map* map = sMapMgr->FindMap(0, 0);\nDoubleBufferedSpatialGrid* grid = sSpatialGridManager->GetGrid(map);\n\
      if (grid)\n{\n    // Use the grid for spatial operations\n}"
    language: cpp
  - title: Using Grid for Object Queries
    code: "Map* map = player->GetMap();\nDoubleBufferedSpatialGrid* grid = sSpatialGridManager->GetGrid(map);\n\
      if (grid)\n{\n    // Query nearby objects within a radius\n    GridRefManager<WorldObject>\
      \ const& refMgr = grid->GetGridRefManager();\n    // Perform spatial queries\
      \ using the grid\n}"
    language: cpp
  notes: The method performs internal lookups and may involve locking mechanisms depending
    on implementation. The returned grid is managed by the SpatialGridManager and
    should not be deleted by the caller. This method is commonly used in conjunction
    with other spatial grid operations for efficient object management.
  warnings: Do not assume that a non-null return value guarantees valid grid state;
    always verify that the map is properly initialized before using the returned grid.
    Be cautious when accessing grids from multiple threads as concurrent access may
    require proper synchronization.
  related:
  - GetGridByPosition
  - CreateGrid
  - RemoveGrid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T06:30:20.126735'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
