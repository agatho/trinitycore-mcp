api:
  class: GameEventMgr
  method: GetNPCFlag
  signature: uint64 GameEventMgr::GetNPCFlag(Creature * cr)
documentation:
  brief: Retrieves the NPC flags for a specified creature during a game event.
  description: The GetNPCFlag method retrieves the NPC flags associated with a given
    creature instance, taking into account any active game events that may modify
    the creature's behavior or appearance. This method is typically used by the GameEventMgr
    to determine how a creature should behave during specific in-game events such
    as holidays or seasonal celebrations. The returned uint64 value represents a bitmask
    of various NPC flags that define the creature's state and properties within the
    context of active game events.
  parameters:
  - name: cr
    description: Pointer to the Creature object for which to retrieve NPC flags. Must
      not be null.
  returns: A uint64 value representing the NPC flags bitmask for the specified creature
    during active game events. Each bit in the mask corresponds to a specific flag
    that modifies the creature's behavior, such as invisibility, escort status, or
    event-specific modifications.
  examples:
  - title: Basic Usage Example
    code: "Creature* npc = ...; // Get a creature instance\nuint64 flags = sGameEventMgr->GetNPCFlag(npc);\n\
      if (flags & UNIT_FLAG_NON_ATTACKABLE)\n{\n    // Creature is non-attackable\
      \ during event\n}"
    language: cpp
  - title: Event-Based Flag Checking
    code: "Creature* creature = ...;\nuint64 currentFlags = sGameEventMgr->GetNPCFlag(creature);\n\
      if (currentFlags & UNIT_FLAG_NOT_SELECTABLE)\n{\n    // This creature should\
      \ not be selectable during the event\n    creature->SetFlag(UNIT_FIELD_FLAGS,\
      \ UNIT_FLAG_NOT_SELECTABLE);\n}"
    language: cpp
  notes: This method is primarily used internally by TrinityCore's game event system
    to ensure creatures properly reflect their event-specific states. The returned
    flags may differ from the creature's base flags if a game event is active and
    modifies NPC behavior. Developers should be aware that this method may return
    different values depending on active events, making it dynamic rather than static.
  warnings: Ensure that the Creature pointer passed to this method is valid and not
    null, as passing an invalid pointer will likely result in undefined behavior or
    crashes. Additionally, since this method is tied to game events, its return value
    can change dynamically during runtime based on event states.
  related:
  - GetGameEvent
  - IsActiveEvent
  - GetCreatureEventState
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:36:35.297741'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
