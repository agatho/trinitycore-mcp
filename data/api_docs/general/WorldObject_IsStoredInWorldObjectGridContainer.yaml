api:
  class: WorldObject
  method: IsStoredInWorldObjectGridContainer
  signature: bool WorldObject::IsStoredInWorldObjectGridContainer() const
documentation:
  brief: Determines whether the WorldObject is currently stored within a grid container
    in the world.
  description: This method checks if the WorldObject instance is actively managed
    and stored inside a grid container, which is part of the spatial partitioning
    system used by TrinityCore to efficiently manage objects in the game world. The
    grid container system helps optimize object visibility, movement, and updates
    by organizing objects into manageable chunks. This method is typically used internally
    by the core engine to verify an object's presence in the world grid before performing
    operations such as sending updates or checking proximity. It does not perform
    any spatial queries but rather confirms the object's storage state within the
    grid management system.
  parameters: []
  returns: Returns true if the WorldObject is currently stored in a grid container
    and managed by the world system; otherwise, returns false if the object has been
    removed from the grid or is not yet added to it.
  examples:
  - title: Check if Object is Stored in Grid
    code: "if (player->IsStoredInWorldObjectGridContainer()) {\n    // Object is currently\
      \ in the world grid\n    // Safe to perform grid-based operations\n}"
    language: cpp
  - title: Use in Movement Update Logic
    code: "void Player::UpdateMovement() {\n    if (!IsStoredInWorldObjectGridContainer())\
      \ {\n        // Object not in grid, skip movement updates\n        return;\n\
      \    }\n    // Proceed with normal movement logic\n}"
    language: cpp
  notes: This method is primarily used internally by TrinityCore's core systems and
    should rarely be called directly from game logic. The internal grid management
    system automatically handles adding and removing objects as they move between
    grids or are destroyed. Performance-wise, this check is very fast as it only involves
    checking a flag or internal state.
  warnings: Calling this method on an object that has been destroyed but not yet cleaned
    up may lead to inconsistent results. Always ensure the object is valid before
    calling this method in critical code paths.
  related:
  - WorldObject::AddToWorld
  - WorldObject::RemoveFromWorld
  - WorldObject::IsInWorld
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:19:18.626797'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
