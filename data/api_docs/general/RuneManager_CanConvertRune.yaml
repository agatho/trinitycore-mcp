api:
  class: RuneManager
  method: CanConvertRune
  signature: bool RuneManager::CanConvertRune(RuneType from, RuneType to) const
documentation:
  brief: Determines whether a rune can be converted from one type to another.
  description: The CanConvertRune method evaluates if a conversion is allowed between
    two RuneType values. This functionality is typically used in the context of World
    of Warcraft's death knight class mechanics, where runes can be converted between
    different types (e.g., blood, frost, unholy) under specific conditions. The method
    checks internal rune state and game rules to determine validity of the conversion.
    It does not modify any rune states but simply returns a boolean indicating whether
    the operation would be permitted.
  parameters:
  - name: from
    description: The RuneType representing the source rune type that is being converted
      from.
  - name: to
    description: The RuneType representing the target rune type that the source rune
      will be converted to.
  returns: Returns true if the conversion from 'from' rune type to 'to' rune type
    is allowed; otherwise returns false.
  examples:
  - title: Basic rune conversion check
    code: "RuneManager* rm = player->GetRuneManager();\nif (rm->CanConvertRune(RUNE_BLOOD,\
      \ RUNE_FROST)) {\n    // Conversion is allowed\n    std::cout << \"Blood rune\
      \ can be converted to frost rune\" << std::endl;\n} else {\n    // Conversion\
      \ is not allowed\n    std::cout << \"Blood rune cannot be converted to frost\
      \ rune\" << std::endl;\n}"
    language: cpp
  notes: This method relies on internal rune state tracking and game rule enforcement.
    It should be called before attempting any actual rune conversion to avoid invalid
    operations.
  warnings: null
  related:
  - ConvertRune
  - GetRuneType
  - SetRuneType
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T07:04:37.802552'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
