api:
  class: Aura
  method: IsSingleTargetWith
  signature: bool Aura::IsSingleTargetWith(const Aura * aura) const
documentation:
  brief: Determines whether this aura and another aura are single-target auras that
    can coexist on the same unit.
  description: The IsSingleTargetWith method checks if this aura and the provided
    aura are both single-target auras, meaning they are designed to affect only one
    target at a time. This is important in World of Warcraft's spell system where
    certain effects (like DoTs or debuffs) should not stack on the same unit. The
    method evaluates compatibility based on aura properties such as spell ID, effect
    index, and target restrictions. It returns true if both auras are single-target
    and can be applied to the same unit without conflict, and false otherwise.
  parameters: []
  returns: Returns true if this aura and the provided aura are both single-target
    auras that can coexist on the same target; otherwise returns false.
  examples:
  - title: Check if two auras are compatible for single-target application
    code: "Aura* aura1 = unit->GetAura(12345);\nAura* aura2 = unit->GetAura(67890);\n\
      if (aura1 && aura2 && aura1->IsSingleTargetWith(aura2)) {\n    // Both auras\
      \ are single-target and can be applied to the same target\n    // Proceed with\
      \ logic that allows stacking or handling of these auras\n}"
    language: cpp
  notes: This method is primarily used internally by TrinityCore's aura management
    system to determine whether two auras should be allowed to exist simultaneously
    on the same unit. It considers spell properties and aura flags rather than just
    aura duration or stack count.
  warnings: null
  related:
  - Aura::IsSingleTarget
  - Aura::GetSpellInfo
  - Unit::AddAura
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:10:00.851110'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
