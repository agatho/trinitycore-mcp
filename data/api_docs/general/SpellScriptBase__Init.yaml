api:
  class: SpellScriptBase
  method: _Init
  signature: void SpellScriptBase::_Init(const int & scriptname, int spellId)
documentation:
  brief: Initializes a spell script with the provided script name and spell ID.
  description: The _Init method is responsible for setting up internal state of a
    SpellScriptBase instance by associating it with a specific spell identifier and
    script name. This initialization step is crucial for proper execution of spell
    effects within the TrinityCore framework. The method typically gets called during
    spell loading or activation phases, ensuring that all necessary data structures
    are properly configured before the spell's behavior is executed. It prepares the
    script context so that subsequent calls to spell handlers can access the correct
    spell information and perform appropriate game mechanics logic.
  parameters:
  - name: scriptname
    description: Reference to an integer identifier representing the name or type
      of the spell script. This value is used internally by TrinityCore to distinguish
      between different spell script implementations.
  - name: spellId
    description: Integer identifier for the specific spell that this script instance
      will handle. This ID corresponds to entries in the spell database and determines
      which spell effects are applied.
  returns: null
  examples:
  - title: Basic Spell Script Initialization
    code: "class MySpellScript : public SpellScriptBase {\npublic:\n    void OnInitialize()\
      \ override {\n        _Init(12345, 67890);\n    }\n};"
    language: cpp
  - title: Initializing Script with Dynamic Values
    code: "void InitializeSpellScript(int scriptType, uint32 spellId) {\n    SpellScriptBase*\
      \ script = new MySpellScript();\n    script->_Init(scriptType, spellId);\n}"
    language: cpp
  notes: This method should only be called once during the lifetime of a SpellScriptBase
    instance. Reinitialization may lead to undefined behavior or memory leaks. The
    method does not perform any validation on input parameters; it is assumed that
    valid spell IDs and script names are passed in.
  warnings: Do not call _Init after the script has already been initialized, as this
    can cause corruption of internal state. Ensure that the spell ID corresponds to
    an existing spell entry in the database or unexpected runtime errors may occur.
  related:
  - SpellScriptBase::GetSpellId
  - SpellScriptBase::GetScriptName
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T20:56:11.394323'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
