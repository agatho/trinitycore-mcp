api:
  class: Player
  method: ItemRemovedQuestCheck
  signature: void Player::ItemRemovedQuestCheck(uint32 entry, uint32 count)
documentation:
  brief: Checks if a quest item has been removed from player's inventory
  description: This method verifies whether a specific quest item has been removed
    from the player's inventory, typically used during quest completion checks. It
    ensures that the required items have been properly removed from the player's inventory
    before allowing quest completion. The method is commonly used in conjunction with
    other quest-related functions to validate item requirements and prevent quest
    exploitation. This function helps maintain game balance by ensuring players cannot
    exploit quest mechanics through item duplication or removal.
  parameters:
  - name: entry
    description: The entry ID of the quest item being checked for removal. This represents
      the unique identifier for the specific item in the database, typically corresponding
      to a quest item or object that needs to be removed from inventory.
  - name: count
    description: The number of items to check for removal from player's inventory.
      This parameter specifies how many of the item should have been removed from
      the player's inventory before the quest can be completed, typically used in
      conjunction with the entry parameter to validate item requirements.
  returns: null
  examples:
  - title: Basic Quest Item Removal Check
    code: 'Player* player = GetPlayer();

      uint32 itemEntry = 12345;

      uint32 itemCount = 2;

      player->ItemRemovedQuestCheck(itemEntry, itemCount);'
    language: cpp
  - title: Complete Quest Completion Validation
    code: "Player* player = GetPlayer();\nuint32 itemEntry = 12345;\nuint32 itemCount\
      \ = 1;\nif (player->ItemRemovedQuestCheck(itemEntry, itemCount)) {\n    // Item\
      \ has been removed from inventory\n    // Proceed with quest completion logic\n\
      }"
    language: cpp
  notes: This method is typically called during quest completion validation processes.
    It's important to note that the method may not be thread-safe and should be used
    carefully in multi-threaded environments. Performance considerations include checking
    inventory items efficiently, as this method might involve database queries or
    inventory checks.
  warnings: This method should only be used when validating quest completion requirements.
    Using it outside of proper quest context can lead to incorrect quest completion
    or game balance issues. It's also important to understand that the method may
    not always reflect the actual removal status if the item was removed through other
    means, such as temporary item removal or special effects.
  related:
  - QuestComplete
  - ItemRemoved
  - QuestCheck
  - Player::HasItemCount
  - Player::RemoveItem
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T00:40:24.277557'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
