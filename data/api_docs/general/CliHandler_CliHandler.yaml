api:
  class: CliHandler
  method: CliHandler
  signature: void CliHandler::CliHandler(void * callbackArg, Print * zprint)
documentation:
  brief: Initializes a CLI handler with the specified callback argument and print
    function
  description: The CliHandler constructor initializes a command-line interface handler
    that manages console input/output operations. This method sets up internal state
    to handle CLI commands, associating a callback argument with a print function
    for output formatting. The handler is typically used in TrinityCore's console-based
    administrative interfaces where server operators can execute commands through
    the terminal. It prepares the environment for processing user input and directing
    responses to the appropriate output mechanism.
  parameters:
  - name: callbackArg
    description: A void pointer to an argument that will be passed to callback functions
      when handling CLI commands. This can contain context information or state data
      needed by command handlers.
  - name: zprint
    description: A pointer to a Print object that defines how output should be formatted
      and displayed. This controls the destination and formatting of console messages,
      typically directing output to standard console streams.
  returns: null
  examples:
  - title: Basic CLI Handler Initialization
    code: 'void* callbackArg = nullptr;

      Print* printFunc = new Print();

      CliHandler handler(callbackArg, printFunc);'
    language: cpp
  - title: CLI Handler with Context Data
    code: "struct HandlerContext {\n    int serverId;\n    bool isDebugMode;\n};\n\
      \nHandlerContext* ctx = new HandlerContext{1, true};\nPrint* consolePrinter\
      \ = new Print();\nCliHandler handler((void*)ctx, consolePrinter);"
    language: cpp
  notes: This method is typically called during server initialization when setting
    up command-line interface functionality. The handler maintains internal state
    that may be accessed by other CLI-related methods. It's important to ensure the
    Print object remains valid throughout the lifetime of the CliHandler instance.
  warnings: The callbackArg parameter should not be null if command handlers expect
    context data. The Print object must remain valid for the duration of the handler's
    use, as it's referenced during command processing and output operations.
  related:
  - CliHandler::HandleCommand
  - CliHandler::ProcessInput
  - CliHandler::SetPrintFunction
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T04:23:43.427557'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
