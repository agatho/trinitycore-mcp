api:
  class: InstanceScript
  method: GetPersistentScriptValues
  signature: int & InstanceScript::GetPersistentScriptValues()
documentation:
  brief: Returns a reference to the instance's persistent script values storage.
  description: The GetPersistentScriptValues method provides access to an integer-based
    storage mechanism within the InstanceScript class that persists across different
    script events and updates during an instance's lifecycle. This allows scripts
    to maintain state information that survives temporary script resets or reloads,
    making it useful for tracking quest progress, event states, or other persistent
    data within a dungeon or raid instance. The returned reference enables direct
    modification of these values, which are typically used to store flags, counters,
    or identifiers relevant to the instance's scripted behavior.
  parameters: []
  returns: A reference to an integer value that serves as a persistent storage location
    for script-related data within the instance. This integer can be used to store
    and retrieve state information that persists throughout the instance's duration.
  examples:
  - title: Accessing Persistent Script Values
    code: "class MyInstanceScript : public InstanceScript\n{\npublic:\n    void Update(uint32\
      \ diff) override\n    {\n        // Access and modify persistent script values\n\
      \        GetPersistentScriptValues() = 42;\n        \n        // Read the value\
      \ back\n        int currentValue = GetPersistentScriptValues();\n        if\
      \ (currentValue == 42)\n        {\n            // Perform some action\n    \
      \    }\n    }\n};"
    language: cpp
  notes: The persistent script values are typically initialized to zero when the instance
    is created. Modifying these values directly affects the instance's state and should
    be done carefully to avoid unexpected behavior or conflicts with other scripts.
    The integer returned by this method acts as a shared storage location that all
    scripts within the same instance can access.
  warnings: Direct modification of persistent script values can lead to data corruption
    or unexpected behavior if not properly synchronized with other scripts in the
    same instance. Changes made to these values may persist across reloads, so ensure
    proper initialization and validation when using them for state tracking.
  related:
  - SetPersistentScriptValues
  - GetPersistentScriptValue
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T12:47:03.452204'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
