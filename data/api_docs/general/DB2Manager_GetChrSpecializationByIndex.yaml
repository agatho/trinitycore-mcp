api:
  class: DB2Manager
  method: GetChrSpecializationByIndex
  signature: const ChrSpecializationEntry * DB2Manager::GetChrSpecializationByIndex(uint32
    class_, uint32 index) const
documentation:
  brief: Retrieves a character specialization entry by class and index from the DB2
    database.
  description: The GetChrSpecializationByIndex method fetches a specific ChrSpecializationEntry
    from the database based on the provided class identifier and index. This method
    is used to access specialization data for player classes, which defines their
    abilities, spells, and other class-specific properties. The method performs a
    lookup in the DB2 storage system, which contains pre-loaded static data tables
    for efficient access during gameplay. It's commonly used when determining available
    specializations for a given class or iterating through specialization entries.
  parameters:
  - name: class_
    description: The class identifier (e.g., WARRIOR, PALADIN, MAGE) to retrieve specializations
      for.
  - name: index
    description: The zero-based index of the specialization within the specified class.
  returns: A pointer to the ChrSpecializationEntry structure if found, or nullptr
    if no specialization exists at the given class and index combination.
  examples:
  - title: Retrieve a specialization for a specific class and index
    code: "const ChrSpecializationEntry* spec = sDB2Manager->GetChrSpecializationByIndex(CLASS_WARRIOR,\
      \ 0);\nif (spec)\n{\n    printf(\"Specialization Name: %s\\n\", spec->Name);\n\
      }"
    language: cpp
  - title: Iterate through all specializations for a class
    code: "for (uint32 i = 0; i < MAX_SPECIALIZATIONS_PER_CLASS; ++i)\n{\n    const\
      \ ChrSpecializationEntry* spec = sDB2Manager->GetChrSpecializationByIndex(CLASS_MAGE,\
      \ i);\n    if (!spec) break;\n    printf(\"Mage Spec %u: %s\\n\", i, spec->Name);\n\
      }"
    language: cpp
  notes: This method accesses pre-loaded DB2 data structures and is optimized for
    fast lookups. It assumes that the class and index parameters are valid and within
    expected ranges. The method does not perform any bounds checking on the index
    parameter, so accessing invalid indices may result in nullptr returns or undefined
    behavior.
  warnings: Ensure that the class parameter corresponds to a valid player class ID.
    Accessing an index beyond the number of available specializations for a class
    will return nullptr. This method should not be used during DB2 loading phases
    as it assumes data is already loaded and indexed.
  related:
  - GetChrSpecializationById
  - GetChrSpecializationByIndex
  - LoadDB2Data
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T15:15:03.784827'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
