api:
  class: Unit
  method: GetAppliedAuras
  signature: const AuraApplicationMap & Unit::GetAppliedAuras() const
documentation:
  brief: Returns the map of applied aura applications for the unit
  description: This method retrieves the complete collection of aura applications
    currently active on the unit. It provides access to all debuffs and buffs that
    are affecting the unit, including those that may be applied through various mechanics
    such as spell effects, talent abilities, or environmental triggers. The returned
    map contains key-value pairs where keys represent the aura application ID and
    values represent the actual aura application objects. This method is essential
    for understanding the current state of a unit's aura status and is commonly used
    in game logic calculations involving effects, duration tracking, and visual representation
    of applied auras.
  parameters: []
  returns: Returns a constant reference to the AuraApplicationMap which contains all
    active aura applications on this unit. Each entry in the map represents an individual
    aura application with its associated ID and corresponding application object,
    allowing for detailed inspection of applied effects.
  examples:
  - title: Basic usage example
    code: "Unit* target = GetTarget();\nconst AuraApplicationMap& auraMap = target->GetAppliedAuras();\n\
      for (auto itr = auraMap.begin(); itr != auraMap.end(); ++itr)\n{\n    AuraApplication*\
      \ app = itr->second;\n    // Process each applied aura\n}"
    language: cpp
  notes: This method is thread-safe and can be safely called from any thread. Performance
    considerations are minimal as the method simply returns a reference to an existing
    data structure rather than creating new objects. Implementation details include
    that this map is maintained internally by the unit class and updates automatically
    when aura applications are added or removed.
  warnings: The returned reference should not be modified directly as it could lead
    to inconsistent state in the aura system. This method does not guarantee that
    all applied auras will be visible, as some may be hidden or filtered based on
    game mechanics such as invisibility or stealth effects.
  related:
  - GetAuraApplication
  - RemoveAuraApplication
  - AddAuraApplication
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:37:44.433357'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
