api:
  class: Creature
  method: LoadFromDB
  signature: bool Creature::LoadFromDB(int spawnId, int * map, bool addToMap, bool
    allowDuplicate)
documentation:
  brief: Loads creature data from the database using the specified spawn identifier.
  description: The LoadFromDB method initializes a Creature object by loading its
    data from the database based on the provided spawn ID. It retrieves all relevant
    creature information such as position, orientation, entry ID, and other properties
    needed for the creature to exist in the game world. The method supports optional
    parameters to control whether the creature should be added to the map and whether
    duplicate entries are allowed. This function is typically invoked during server
    startup or when spawning creatures dynamically. It ensures that all necessary
    data is loaded before the creature becomes active in the world.
  parameters:
  - name: spawnId
    description: Unique identifier for the creature spawn point in the database. This
      ID corresponds to a row in the creature table and determines which creature
      data will be loaded.
  - name: map
    description: Pointer to an integer representing the map ID where the creature
      should be loaded. If null, the map information is retrieved from the database.
  - name: addToMap
    description: Boolean flag indicating whether the creature should automatically
      be added to the game map after loading. If true, the creature will be placed
      in the world; if false, only data is loaded without adding to the map.
  - name: allowDuplicate
    description: Boolean flag that determines whether duplicate creature entries are
      permitted. When set to true, multiple instances of the same creature can exist;
      when false, duplicates are prevented.
  returns: Returns true if the creature data was successfully loaded from the database
    and initialized. Returns false if the loading process failed due to invalid spawn
    ID, missing data, or other errors during initialization.
  examples:
  - title: Basic Creature Load
    code: "Creature* creature = new Creature();\nbool success = creature->LoadFromDB(12345,\
      \ nullptr, true, false);\nif (success) {\n    // Creature loaded successfully\n\
      }"
    language: cpp
  - title: Load Creature Without Adding to Map
    code: "Creature* creature = new Creature();\nint mapId = 0;\nbool success = creature->LoadFromDB(67890,\
      \ &mapId, false, true);\nif (success) {\n    // Creature data loaded but not\
      \ added to the map yet\n    // Can be manually added later using AddToMap()\n\
      }"
    language: cpp
  notes: This method performs database queries and should be used carefully in performance-critical
    sections. It is recommended to avoid calling this method frequently in loops or
    high-frequency code paths. The method internally handles memory management for
    the creature's data structures.
  warnings: Calling LoadFromDB with an invalid spawnId may result in undefined behavior
    or crashes. Always validate the spawnId before invoking this method. If addToMap
    is set to true, ensure that the map is valid and ready to accept new creatures
    to prevent runtime errors.
  related:
  - Creature::SaveToDB
  - Creature::AddToMap
  - Creature::RemoveFromMap
metadata:
  confidence: 0.9
  generated_at: '2025-10-29T20:33:43.239081'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
