api:
  class: AuraScript
  method: GetApplyTime
  signature: time_t AuraScript::GetApplyTime() const
documentation:
  brief: Returns the timestamp when the aura was applied to a unit.
  description: The GetApplyTime method retrieves the time_t value representing when
    the aura effect was initially applied to the target unit. This timestamp is typically
    used in conjunction with other aura-related functions to calculate duration, remaining
    time, or to determine the order of application for multiple auras. The returned
    value corresponds to the system's time since epoch (January 1, 1970), making it
    suitable for time-based calculations and comparisons within the game logic.
  parameters: []
  returns: A time_t value representing the Unix timestamp when the aura was applied.
    This value can be used directly with standard C++ time functions or converted
    to a human-readable format for debugging purposes.
  examples:
  - title: Check if an aura has been active for more than 30 seconds
    code: "class MyAuraScript : public AuraScript\n{\npublic:\n    void OnUpdate(int32\
      \ duration) override\n    {\n        time_t applyTime = GetApplyTime();\n  \
      \      time_t currentTime = time(nullptr);\n        if (currentTime - applyTime\
      \ > 30)\n        {\n            // Aura has been active for over 30 seconds\n\
      \            // Perform some action\n        }\n    }\n};"
    language: cpp
  notes: This method is typically called from within an AuraScript's event handlers
    such as OnApply, OnRemove, or OnUpdate. The returned timestamp remains constant
    throughout the aura's lifetime and does not change even if the aura is refreshed
    or extended by other effects.
  warnings: null
  related:
  - GetDuration
  - GetMaxDuration
  - GetAura
  - GetTarget
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T18:22:50.233731'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
