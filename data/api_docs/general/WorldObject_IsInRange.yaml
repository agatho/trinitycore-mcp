api:
  class: WorldObject
  method: IsInRange
  signature: bool WorldObject::IsInRange(const WorldObject * obj, float minRange,
    float maxRange, bool is3D) const
documentation:
  brief: Determines whether another WorldObject is within a specified range of this
    object.
  description: The IsInRange method checks if a given WorldObject lies within a defined
    minimum and maximum distance from the calling object. This method supports both
    2D (horizontal) and 3D (including vertical) range calculations based on the is3D
    parameter. It's commonly used in game logic for determining line of sight, spell
    targeting, or interaction conditions between game entities such as players, creatures,
    and game objects. The method performs efficient distance calculations using spatial
    coordinates stored in the WorldObject instances.
  parameters:
  - name: obj
    description: Pointer to the WorldObject to check range against. Must not be null.
  - name: minRange
    description: Minimum allowed distance (inclusive). Set to 0 for no minimum limit.
  - name: maxRange
    description: Maximum allowed distance (inclusive). Set to 0 or a large value for
      no maximum limit.
  - name: is3D
    description: If true, calculates 3D distance including vertical offset. If false,
      only horizontal distance is considered.
  returns: Returns true if the object is within the specified range; otherwise returns
    false.
  examples:
  - title: Basic Range Check
    code: "if (player->IsInRange(target, 0.0f, 30.0f, true)) {\n    // Target is within\
      \ 30 yards in 3D space\n    player->CastSpell(target, SPELL_SHOOT, true);\n}"
    language: cpp
  - title: 2D Range Check for Ground-based Spells
    code: "if (creature->IsInRange(player, 5.0f, 15.0f, false)) {\n    // Player is\
      \ within 5-15 yards horizontally\n    creature->AI()->DoMeleeAttackIfReady();\n\
      }"
    language: cpp
  notes: This method uses optimized distance calculations and is suitable for frequent
    calls in game loops. For performance-critical code, consider caching positions
    or using spatial partitioning systems. The method internally accesses position
    data from WorldObject's internal state.
  warnings: Ensure that the 'obj' parameter is not null to prevent crashes. When using
    3D range checks with objects of significantly different heights, results may be
    unexpected if vertical positioning isn't properly accounted for in your game logic.
  related:
  - GetDistance
  - GetPosition
  - IsWithinDist
  - IsWithinDistInMap
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:24:54.836623'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
