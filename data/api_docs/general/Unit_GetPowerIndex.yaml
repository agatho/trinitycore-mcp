api:
  class: Unit
  method: GetPowerIndex
  signature: uint32 Unit::GetPowerIndex(int power) const
documentation:
  brief: Returns the power index for a given power type.
  description: The GetPowerIndex method retrieves the power index associated with
    a specific power type, such as mana, rage, focus, or energy. This index is used
    internally by TrinityCore to identify and manage different power types for units.
    The method accepts an integer representing the power type and returns a uint32
    representing the corresponding power index. It is commonly used in conjunction
    with other power-related methods like GetPowerType and GetPowerValue to manage
    unit power systems.
  parameters:
  - name: power
    description: An integer representing the power type (e.g., 0 for mana, 1 for rage,
      2 for focus, 3 for energy). Valid values are typically 0-4, with 0 being mana
      and 1-3 being other power types.
  returns: Returns a uint32 representing the power index associated with the specified
    power type. The value is typically 0-4, where 0 corresponds to mana and 1-3 correspond
    to other power types like rage, focus, and energy.
  examples:
  - title: Basic usage example
    code: 'Unit* unit = player;

      uint32 powerIndex = unit->GetPowerIndex(0); // Get mana index

      std::cout << "Power index: " << powerIndex << std::endl;'
    language: cpp
  - title: Advanced usage example
    code: "Unit* unit = player;\nint powerType = 3; // energy\nuint32 powerIndex =\
      \ unit->GetPowerIndex(powerType);\nif (powerIndex != 0) {\n    std::cout <<\
      \ \"Energy power index: \" << powerIndex << std::endl;\n}\nelse {\n    std::cout\
      \ << \"Invalid power type\" << std::endl;\n}"
    language: cpp
  notes: This method is part of the unit's power management system and should be used
    in conjunction with other power-related methods. The power index returned by this
    method is used internally by TrinityCore to determine which power type a unit
    has, particularly for units that have multiple power types.
  warnings: This method should not be called directly without proper context. It is
    typically used in combination with GetPowerType and GetPowerValue methods to manage
    unit power systems correctly. Incorrect usage may lead to unexpected behavior
    or errors.
  related:
  - GetPowerType
  - GetPowerValue
  - GetMaxPower
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T12:48:43.460272'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
