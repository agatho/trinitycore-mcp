api:
  class: WorldObject
  method: GetMap
  signature: Map * WorldObject::GetMap() const
documentation:
  brief: Returns a pointer to the Map object that the WorldObject is currently located
    on.
  description: The GetMap method retrieves the Map instance associated with the WorldObject,
    which represents the current game map (such as Azeroth, Kalimdor, or a specific
    dungeon). This method is essential for determining the object's location within
    the game world and is frequently used in gameplay logic, movement calculations,
    and zone-based operations. The returned pointer is guaranteed to be valid during
    the object's lifetime and should not be null unless the object has been removed
    from the map or is in an invalid state. This method does not perform any operations
    on the map itself but simply returns a reference to it.
  parameters: []
  returns: A pointer to the Map object that contains this WorldObject. Returns nullptr
    if the object is not currently on any map (e.g., during destruction or invalid
    state).
  examples:
  - title: Basic usage to check current map
    code: "Map* map = player->GetMap();\nif (map != nullptr)\n{\n    uint32 mapId\
      \ = map->GetId();\n    printf(\"Player is on map ID: %u\\n\", mapId);\n}"
    language: cpp
  - title: Using GetMap in a movement handler
    code: "void OnMove(WorldObject* mover)\n{\n    Map* currentMap = mover->GetMap();\n\
      \    if (currentMap && currentMap->IsDungeon())\n    {\n        // Handle dungeon-specific\
      \ logic\n        printf(\"Moving in a dungeon map\\n\");\n    }\n}"
    language: cpp
  notes: This method is a constant operation and does not modify the WorldObject.
    It's safe to call from any thread that has access to the object, but be aware
    that the returned Map pointer may become invalid if the object is removed from
    the map or the map is destroyed. The method performs no locking internally, so
    concurrent access should be handled by the caller.
  warnings: Do not assume the returned Map pointer will remain valid indefinitely;
    it can become null if the WorldObject is removed from its current map. Always
    check for null before using the returned pointer to avoid crashes.
  related:
  - GetMapId
  - IsInMap
  - GetPhaseMask
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T22:01:33.428139'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
