api:
  class: BehaviorPriorityManager
  method: GetConflicts
  signature: int BehaviorPriorityManager::GetConflicts(BehaviorPriority priority)
    const
documentation:
  brief: Calculates and returns the number of conflicting behaviors for a given priority
    level within the behavior priority manager.
  description: The GetConflicts method determines how many behaviors in the BehaviorPriorityManager
    are in conflict with the specified behavior priority. This is typically used in
    AI systems to identify potential conflicts between different behavioral priorities,
    such as when multiple behaviors attempt to control the same aspect of an NPC's
    actions. The method evaluates all registered behaviors against the provided priority
    and returns a count of those that are considered conflicting based on internal
    conflict resolution logic. This functionality is essential for maintaining coherent
    AI behavior and preventing contradictory actions from being executed simultaneously.
  parameters: []
  returns: Returns an integer representing the number of behaviors that conflict with
    the specified priority level. A return value of 0 indicates no conflicts, while
    a positive integer indicates the count of conflicting behaviors. The method does
    not return negative values under normal circumstances.
  examples:
  - title: Basic Usage Example
    code: 'BehaviorPriorityManager manager;

      int conflictCount = manager.GetConflicts(BehaviorPriority::Low);

      // conflictCount now holds the number of behaviors conflicting with Low priority'
    language: cpp
  - title: Conflict Detection in AI System
    code: "void CheckBehaviorConflicts(BehaviorPriorityManager& manager) {\n    for\
      \ (int i = 0; i < MAX_BEHAVIOR_PRIORITY; ++i) {\n        int conflicts = manager.GetConflicts(static_cast<BehaviorPriority>(i));\n\
      \        if (conflicts > 0) {\n            // Handle conflict resolution\n \
      \           LOG_INFO(\"ai\", \"Priority level {} has {} conflicting behaviors\"\
      , i, conflicts);\n        }\n    }\n}"
    language: cpp
  notes: This method is typically used in conjunction with behavior priority management
    systems within TrinityCore's AI framework. The conflict detection logic may vary
    based on the specific implementation details of how behaviors are registered and
    evaluated for compatibility. The method performs a read-only operation on the
    internal behavior registry, making it safe to call from multiple threads if the
    underlying data structure is properly synchronized.
  warnings: Ensure that BehaviorPriority values passed to this method are within valid
    range to avoid undefined behavior. The method assumes all behaviors in the manager
    have been properly initialized and registered before conflict checking occurs.
    Improper use of invalid priority values may lead to incorrect conflict counts
    or access violations.
  related:
  - SetBehaviorPriority
  - RegisterBehavior
  - UnregisterBehavior
  - GetPriorityCount
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T17:36:30.134662'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
