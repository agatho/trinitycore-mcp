api:
  class: ObjectMgr
  method: GetCreatureTemplates
  signature: const CreatureTemplateContainer & ObjectMgr::GetCreatureTemplates() const
documentation:
  brief: Returns a constant reference to the container holding all creature templates
    in the game world.
  description: The GetCreatureTemplates method provides access to the complete collection
    of creature templates stored within the ObjectMgr singleton. These templates define
    the base properties and behaviors for all creatures in the game world, including
    their stats, loot tables, AI scripts, and spawn parameters. The returned reference
    is const, ensuring that external code cannot modify the internal template data
    structure directly. This method is typically used during server initialization,
    when loading or querying creature data, or by other systems that need to iterate
    through all available creature templates for various purposes such as spawn management,
    quest requirements, or database validation.
  parameters: []
  returns: A constant reference to the CreatureTemplateContainer which holds all registered
    creature templates in the game world. This container allows iteration and lookup
    of creature templates by their entry ID (creature ID).
  examples:
  - title: Iterating Through All Creature Templates
    code: "const CreatureTemplateContainer& creatureTemplates = sObjectMgr->GetCreatureTemplates();\n\
      for (const auto& pair : creatureTemplates)\n{\n    const CreatureTemplate* creatureTemplate\
      \ = pair.second;\n    // Process each creature template\n    printf(\"Creature\
      \ ID: %u, Name: %s\\n\", creatureTemplate->Entry, creatureTemplate->Name.c_str());\n\
      }"
    language: cpp
  - title: Finding a Specific Creature Template
    code: "const CreatureTemplateContainer& creatureTemplates = sObjectMgr->GetCreatureTemplates();\n\
      uint32 creatureEntry = 12345;\nauto itr = creatureTemplates.find(creatureEntry);\n\
      if (itr != creatureTemplates.end())\n{\n    const CreatureTemplate* templateData\
      \ = itr->second;\n    // Use the found template data\n    printf(\"Found creature:\
      \ %s\\n\", templateData->Name.c_str());\n}\nelse\n{\n    printf(\"Creature with\
      \ entry %u not found\\n\", creatureEntry);\n}"
    language: cpp
  notes: The returned container is populated during server startup when database loading
    occurs. Modifications to creature templates at runtime are not supported through
    this interface. The method is thread-safe as it returns a const reference and
    the underlying data structure is typically read-only after initialization.
  warnings: Do not attempt to modify the contents of the returned CreatureTemplateContainer,
    as it's a const reference. Any modifications should be done through appropriate
    database update mechanisms or server APIs designed for creature template modification.
  related:
  - GetCreatureTemplate
  - LoadCreatureTemplates
  - GetCreatureData
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T09:51:50.278412'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
