api:
  class: WorldObject
  method: GetOwnerGUID
  signature: ObjectGuid WorldObject::GetOwnerGUID() const
documentation:
  brief: Returns the unique identifier (GUID) of the object's owner.
  description: The GetOwnerGUID method retrieves the ObjectGuid of the entity that
    owns the current WorldObject. This is commonly used for creatures, game objects,
    and other entities that may have an associated owner such as player-controlled
    summons or vehicles. The returned GUID can be used to identify the owner within
    the game world, allowing for operations like checking ownership, accessing owner
    data, or performing owner-specific actions. For objects without owners, this method
    typically returns an invalid or null GUID.
  parameters: []
  returns: An ObjectGuid representing the unique identifier of the object's owner.
    If the object has no owner, it returns an invalid ObjectGuid (typically ObjectGuid::Empty).
  examples:
  - title: Check if a creature has an owner
    code: "Creature* creature = ...;\nObjectGuid ownerGUID = creature->GetOwnerGUID();\n\
      if (!ownerGUID.IsEmpty())\n{\n    // Creature has an owner\n    Player* owner\
      \ = ObjectAccessor::FindPlayer(ownerGUID);\n    if (owner)\n    {\n        //\
      \ Perform actions related to the owner\n    }\n}"
    language: cpp
  - title: Determine ownership of a game object
    code: "GameObject* go = ...;\nObjectGuid ownerGUID = go->GetOwnerGUID();\nif (ownerGUID.IsPlayer())\n\
      {\n    // The GameObject is owned by a player\n    Player* player = ObjectAccessor::FindPlayer(ownerGUID);\n\
      \    if (player)\n    {\n        // Access player-specific data or perform player-related\
      \ logic\n    }\n}"
    language: cpp
  notes: This method is thread-safe and can be called from any context where a WorldObject
    instance is available. It's important to note that the returned GUID may not always
    correspond to an active object in the world, especially if the owner has logged
    out or been destroyed.
  warnings: Be cautious when using the returned GUID without verifying its validity
    first. Always check if the GUID is empty or invalid before attempting to access
    the corresponding object. Additionally, some objects might return a valid GUID
    even when they are not truly owned by another entity, so context-dependent validation
    may be required.
  related:
  - GetOwner
  - SetOwnerGUID
  - IsOwnedBy
metadata:
  confidence: 0.95
  generated_at: '2025-10-29T21:50:28.957770'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
