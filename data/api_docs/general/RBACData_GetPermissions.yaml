api:
  class: RBACData
  method: GetPermissions
  signature: const RBACPermissionContainer & RBACData::GetPermissions() const
documentation:
  brief: Returns the container of permissions associated with this RBAC data instance.
  description: The GetPermissions method retrieves a constant reference to the RBACPermissionContainer
    that holds all permissions assigned to this RBACData object. This container typically
    includes all granted permissions for a user or role within the TrinityCore authentication
    and authorization system. The returned reference is const, meaning the permissions
    cannot be modified through this interface, ensuring data integrity. This method
    is commonly used when checking or iterating over a user's effective permissions
    during runtime operations such as command validation or access control checks.
  parameters: []
  returns: A constant reference to an RBACPermissionContainer object containing all
    permissions associated with this RBACData instance. The container can be empty
    if no permissions have been granted, but will never be null.
  examples:
  - title: Basic Usage to Check Permissions
    code: "RBACData* rbacData = player->GetSession()->GetRBACData();\nconst RBACPermissionContainer&\
      \ permissions = rbacData->GetPermissions();\nfor (auto it = permissions.begin();\
      \ it != permissions.end(); ++it)\n{\n    uint32 permissionId = *it;\n    //\
      \ Process each permission ID\n}"
    language: cpp
  - title: Checking Specific Permission Existence
    code: "RBACData* rbacData = player->GetSession()->GetRBACData();\nconst RBACPermissionContainer&\
      \ permissions = rbacData->GetPermissions();\nbool hasAdminPerm = permissions.find(RBAC_PERM_ADMIN)\
      \ != permissions.end();\nif (hasAdminPerm)\n{\n    // Grant admin access\n}"
    language: cpp
  notes: This method is thread-safe as it only returns a const reference to an already
    initialized container. The RBACPermissionContainer returned is managed internally
    by the RBACData object and should not be modified directly. Performance-wise,
    this operation is O(1) since it simply returns a reference to an existing data
    structure.
  warnings: Do not attempt to modify the returned RBACPermissionContainer through
    this reference as it is const. Modifications should be done via dedicated RBAC
    management methods. Be aware that the container may be empty if no permissions
    have been assigned, which could lead to unexpected behavior in access control
    logic if not properly checked.
  related:
  - RBACData::AddPermission
  - RBACData::RemovePermission
  - RBACData::HasPermission
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:41:10.662031'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
