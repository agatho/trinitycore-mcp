api:
  class: ScriptMgr
  method: OnEventTrigger
  signature: void ScriptMgr::OnEventTrigger(WorldObject * object, WorldObject * invoker,
    uint32 eventId)
documentation:
  brief: Invokes event trigger scripts for a given object and its invoker with specified
    event ID.
  description: The OnEventTrigger method is a callback function in the ScriptMgr class
    that handles event-based scripting logic within TrinityCore. It is invoked when
    an event occurs that requires script execution, typically triggered by game objects,
    creatures, or players interacting with specific triggers. The method accepts a
    WorldObject pointer for the object that triggered the event, another WorldObject
    pointer for the invoker (the entity that initiated the trigger), and a uint32
    eventId which identifies the specific event being triggered. This allows for flexible
    scripting where different events can be handled by different script implementations
    depending on the context and parameters provided.
  parameters:
  - name: object
    description: Pointer to the WorldObject that triggered the event. This could be
      a creature, game object, or player depending on the event type.
  - name: invoker
    description: Pointer to the WorldObject that invoked or initiated the event trigger.
      Often represents the entity causing the event to occur.
  - name: eventId
    description: Unique identifier for the specific event being triggered. Used by
      scripts to determine how to handle the event based on its type.
  returns: null
  examples:
  - title: Basic Event Trigger Implementation
    code: "void MyScript::OnEventTrigger(WorldObject* object, WorldObject* invoker,\
      \ uint32 eventId)\n{\n    if (eventId == 1001)\n    {\n        // Handle event\
      \ 1001\n        if (Creature* creature = object->ToCreature())\n        {\n\
      \            creature->Say(\"Event triggered!\", LANG_UNIVERSAL);\n        }\n\
      \    }\n}"
    language: cpp
  - title: Advanced Event Trigger with Multiple Conditions
    code: "void AdvancedScript::OnEventTrigger(WorldObject* object, WorldObject* invoker,\
      \ uint32 eventId)\n{\n    switch (eventId)\n    {\n        case 1002:\n    \
      \        if (Player* player = invoker->ToPlayer())\n            {\n        \
      \        player->KilledMonsterCredit(12345);\n            }\n            break;\n\
      \        case 1003:\n            if (GameObject* go = object->ToGameObject())\n\
      \            {\n                go->SetGoState(GO_STATE_ACTIVE);\n         \
      \   }\n            break;\n    }\n}"
    language: cpp
  notes: This method is part of the TrinityCore scripting system and is called from
    core game logic when events occur. It should not be used directly in custom scripts
    unless implementing a new event handler. The method assumes valid pointers are
    passed, so null checks should be performed if unsure about input validity.
  warnings: Do not modify or delete objects within this callback without proper synchronization
    as it may cause memory corruption or undefined behavior. Avoid long-running operations
    in this function to prevent blocking the game thread.
  related:
  - OnCreatureEvent
  - OnGameObjectEvent
  - OnPlayerEvent
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T22:50:36.187241'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
