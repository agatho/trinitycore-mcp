api:
  class: DB2Manager
  method: GetPVPStatIDsForMap
  signature: const int * DB2Manager::GetPVPStatIDsForMap(uint32 mapId) const
documentation:
  brief: Retrieves the array of PvP stat IDs associated with a specified map ID.
  description: The GetPVPStatIDsForMap method retrieves a constant pointer to an array
    of integer identifiers that correspond to PvP statistics for the given map. This
    function is typically used in TrinityCore's DB2Manager to access PvP-related data
    structures, such as battleground statistics or arena team performance metrics
    associated with specific maps. The returned array may contain zero or more stat
    IDs depending on whether the map has any PvP-related statistics defined in the
    database. The method does not validate the input mapId, so calling it with an
    invalid or non-existent map ID may result in undefined behavior or return a null
    pointer.
  parameters: []
  returns: A constant pointer to an array of integers representing the PvP stat IDs
    for the specified map. If no stats are defined for the map, the method may return
    nullptr or an empty array depending on internal implementation.
  examples:
  - title: Retrieve and iterate through PvP stat IDs for a map
    code: "const int* pvpStats = sDB2Manager->GetPVPStatIDsForMap(1234);\nif (pvpStats\
      \ != nullptr)\n{\n    for (int i = 0; i < MAX_PVP_STATS_PER_MAP; ++i)\n    {\n\
      \        if (pvpStats[i] == 0) break;\n        printf(\"PvP Stat ID: %d\\n\"\
      , pvpStats[i]);\n    }\n}"
    language: cpp
  notes: This method is part of the DB2Manager class which handles loading and accessing
    data from World of Warcraft's DB2 files. The returned array should not be modified
    by the caller, as it points to internal data structures. Performance considerations
    are minimal since this function likely returns cached data, but repeated calls
    with different map IDs may cause memory lookups.
  warnings: The method returns a raw pointer that could be null if no PvP stats exist
    for the specified map or if the map ID is invalid. Always check for null before
    using the returned pointer to avoid segmentation faults. Additionally, ensure
    that the size of the returned array is known or bounded to prevent buffer overruns.
  related:
  - GetPVPStatDataForMap
  - LoadPVPStats
  - GetMapInfo
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T14:51:56.330911'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
