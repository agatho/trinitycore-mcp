api:
  class: Quest
  method: BuildQueryData
  signature: int Quest::BuildQueryData(LocaleConstant loc, Player * player) const
documentation:
  brief: Builds and returns the query data for a quest, including localized information
    and player-specific details.
  description: The BuildQueryData method constructs and populates a data structure
    containing all relevant information about a quest, tailored to the specified locale
    and player context. This includes localized quest titles, descriptions, objectives,
    rewards, and other metadata that is essential for displaying quest information
    in the game client. The method ensures that the data reflects the current state
    of the quest for the given player, including any progress or completion status.
    It is typically invoked when the game needs to send quest details to the client
    for display purposes, such as when a player opens a quest log or interacts with
    a quest giver. This method does not modify the internal state of the quest object
    but rather prepares data for external consumption.
  parameters:
  - name: loc
    description: The locale constant specifying the language and regional settings
      to use for localized quest data.
  - name: player
    description: Pointer to the Player object for whom the quest data is being built,
      used to determine player-specific quest state and localization.
  returns: An integer value representing the result of the query data build operation.
    A return value of 0 typically indicates success, while non-zero values may indicate
    errors or warnings during data construction.
  examples:
  - title: Basic usage of BuildQueryData
    code: "Quest* quest = sObjectMgr->GetQuestTemplate(12345);\nPlayer* player = session->GetPlayer();\n\
      int result = quest->BuildQueryData(LocaleConstant::LOCALE_en, player);\nif (result\
      \ == 0) {\n    // Data successfully built\n}"
    language: cpp
  - title: Using BuildQueryData with different locales
    code: 'Quest* quest = sObjectMgr->GetQuestTemplate(12345);

      Player* player = session->GetPlayer();

      int result_en = quest->BuildQueryData(LocaleConstant::LOCALE_en, player);

      int result_de = quest->BuildQueryData(LocaleConstant::LOCALE_de, player);

      // Handle results for different locales

      '
    language: cpp
  notes: This method is primarily used internally by the TrinityCore server to prepare
    quest data for network transmission. It may involve localization lookups and player
    state checks, so performance should be considered in high-frequency scenarios.
    The method assumes that the provided player object is valid and properly initialized.
  warnings: Do not call this method with a null player pointer as it will likely cause
    a crash or undefined behavior. Ensure that the quest template exists and is valid
    before calling this method to avoid unexpected results.
  related:
  - GetQuestTemplate
  - GetQuestData
  - BuildQuestData
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T10:08:18.123179'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
