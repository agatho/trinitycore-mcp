api:
  class: SmartScript
  method: operator=
  signature: SmartScript & SmartScript::operator=(SmartScript && other)
documentation:
  brief: Moves ownership of a SmartScript object's resources to another SmartScript
    object.
  description: The move assignment operator transfers all resources from the source
    SmartScript object (rvalue reference) to the current object, leaving the source
    in a valid but unspecified state. This operation is typically used to efficiently
    transfer ownership of dynamically allocated memory or other resources without
    performing deep copies. In the context of TrinityCore's AI system, this allows
    for efficient handling of SmartScript instances during object construction, destruction,
    or reassignment. The method ensures that any existing resources in the current
    object are properly cleaned up before transferring new ones.
  parameters: []
  returns: A reference to the current SmartScript object after the move operation
    has completed.
  examples:
  - title: Basic Move Assignment
    code: 'SmartScript script1;

      // ... initialize script1 ...

      SmartScript script2 = std::move(script1); // Move assignment

      // script1 is now in a valid but unspecified state'
    language: cpp
  - title: Move Assignment in Function Context
    code: "SmartScript createScript() {\n    SmartScript script;\n    // ... initialize\
      \ script ...\n    return script; // Move return value\n}\n\nSmartScript mainScript\
      \ = createScript(); // Move assignment from function return"
    language: cpp
  notes: This operator is part of the C++ move semantics standard and should be used
    when transferring ownership of resources. It's particularly important for performance
    in AI scripting systems where SmartScript objects may contain large data structures
    or dynamic allocations. The moved-from object remains valid but its contents are
    unspecified after the operation.
  warnings: Be cautious when using this operator with objects that have shared references
    or external dependencies, as the move operation may invalidate those references.
    Also, avoid using the moved-from object afterward unless explicitly documented
    otherwise by the implementation.
  related:
  - SmartScript::SmartScript(SmartScript&&)
  - SmartScript::operator=
  - SmartScript::operator==
  - SmartScript::operator!=
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T21:19:21.789483'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
