api:
  class: Spell
  method: CallScriptEffectHandlers
  signature: bool Spell::CallScriptEffectHandlers(int effIndex, SpellEffectHandleMode
    mode)
documentation:
  brief: Executes all script handlers associated with a specific spell effect.
  description: The CallScriptEffectHandlers method invokes all registered script handlers
    for a given spell effect index and execution mode. This method is typically called
    during spell casting or effect application to allow custom scripts (such as those
    defined in SpellScripts) to modify or override the default behavior of spell effects.
    It ensures that any scripted modifications are applied before the effect is fully
    processed. The method returns true if all handlers executed successfully, or false
    if an error occurred during handler execution.
  parameters:
  - name: effIndex
    description: The index of the spell effect to process. This corresponds to the
      effect's position in the spell's effect array.
  - name: mode
    description: The mode in which the effect handler should be called. This determines
      when and how the script handlers are executed, such as during initial application,
      periodic updates, or removal of effects.
  returns: True if all script handlers for the specified spell effect were executed
    successfully; false otherwise.
  examples:
  - title: Basic usage in spell effect handling
    code: "if (spell->CallScriptEffectHandlers(0, SPELL_EFFECT_HANDLE_HIT)) {\n  \
      \  // Effect processed successfully\n} else {\n    // Error occurred during\
      \ script execution\n}"
    language: cpp
  - title: Using CallScriptEffectHandlers in a custom spell script
    code: "class MySpellScript : public SpellScript {\npublic:\n    void HandleEffect(SpellEffIndex\
      \ effIndex, SpellEffectHandleMode mode) override {\n        if (!GetSpell()->CallScriptEffectHandlers(effIndex,\
      \ mode)) {\n            PreventHit();\n        }\n    }\n};"
    language: cpp
  notes: This method is part of the spell scripting system in TrinityCore and relies
    on proper registration of spell scripts. It should only be called during appropriate
    spell lifecycle events to avoid unintended behavior or crashes.
  warnings: Improper use of this method, such as calling it outside of valid spell
    execution contexts, can lead to undefined behavior or crashes. Ensure that all
    script handlers are properly registered and do not perform operations that could
    invalidate the spell state.
  related:
  - Spell::CallScriptHandlers
  - Spell::DoEffect
  - Spell::GetSpellInfo
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:58:11.820252'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
