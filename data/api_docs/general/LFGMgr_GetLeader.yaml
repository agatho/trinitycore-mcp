api:
  class: LFGMgr
  method: GetLeader
  signature: int LFGMgr::GetLeader(int guid)
documentation:
  brief: Returns the GUID of the leader for a specified group in the LFG system.
  description: The GetLeader method retrieves the unique identifier (GUID) of the
    player who is currently designated as the leader of a specific group within the
    Looking For Group (LFG) system. This method is typically used to determine group
    leadership for managing permissions, loot distribution, or role assignments. The
    method operates on a per-group basis and requires a valid group identifier to
    return meaningful results. It's important to note that this method may return
    0 if no leader is assigned or if the specified group does not exist in the LFG
    manager.
  parameters: []
  returns: Returns the GUID of the group leader as an integer value. If no leader
    exists for the specified group or the group is invalid, the method returns 0.
  examples:
  - title: Retrieve Group Leader GUID
    code: "int groupId = 12345;\nint leaderGuid = lfgMgr->GetLeader(groupId);\nif\
      \ (leaderGuid != 0)\n{\n    // Process the leader GUID\n    printf(\"Group leader\
      \ GUID: %d\\n\", leaderGuid);\n}\nelse\n{\n    printf(\"No leader found for\
      \ group %d\\n\", groupId);\n}"
    language: cpp
  notes: This method is part of the LFG (Looking For Group) subsystem in TrinityCore,
    which manages player groups for dungeons, raids, and other organized activities.
    The implementation likely involves internal tracking of group membership and leadership
    assignments within the LFG manager's data structures.
  warnings: null
  related:
  - GetGroup
  - SetLeader
  - IsLeader
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T11:50:35.218366'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
