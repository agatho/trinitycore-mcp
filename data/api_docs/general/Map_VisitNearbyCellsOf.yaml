api:
  class: Map
  method: VisitNearbyCellsOf
  signature: void Map::VisitNearbyCellsOf(WorldObject * obj, int & gridVisitor, int
    & worldVisitor)
documentation:
  brief: Visits all nearby cells of a given WorldObject using grid and world visitors.
  description: The VisitNearbyCellsOf method iterates through all grid cells that
    are near the specified WorldObject, invoking the provided gridVisitor and worldVisitor
    functions for each cell. This functionality is essential for managing object visibility,
    handling area-based events, and processing nearby entities in the game world.
    The method typically operates within the context of the Map's spatial partitioning
    system, ensuring efficient traversal of nearby cells without redundant checks.
    It is commonly used during object updates, visibility calculations, and event
    propagation across the game world.
  parameters:
  - name: obj
    description: Pointer to the WorldObject whose nearby cells should be visited.
      This object determines the center point for cell traversal and must be a valid
      object in the game world.
  - name: gridVisitor
    description: Reference to an integer that serves as a visitor identifier or counter
      for grid-based operations. This parameter is typically used to track or modify
      state during grid cell processing.
  - name: worldVisitor
    description: Reference to an integer that serves as a visitor identifier or counter
      for world-based operations. This parameter is typically used to track or modify
      state during world cell processing.
  returns: null
  examples:
  - title: Basic usage of VisitNearbyCellsOf
    code: "#include \"Map.h\"\n\nvoid ExampleUsage(Player* player) {\n    int gridVisitor\
      \ = 0;\n    int worldVisitor = 0;\n    \n    // Visit nearby cells of the player\n\
      \    player->GetMap()->VisitNearbyCellsOf(player, gridVisitor, worldVisitor);\n\
      }"
    language: cpp
  - title: Using VisitNearbyCellsOf with custom visitor logic
    code: "#include \"Map.h\"\n\nvoid CustomVisitorLogic(WorldObject* obj) {\n   \
      \ int gridVisitor = 0;\n    int worldVisitor = 0;\n    \n    // Perform custom\
      \ processing on nearby cells\n    obj->GetMap()->VisitNearbyCellsOf(obj, gridVisitor,\
      \ worldVisitor);\n    \n    // Use visitor values for further logic\n    if\
      \ (gridVisitor > 0) {\n        // Handle grid-based actions\n    }\n}"
    language: cpp
  notes: This method relies on the Map's internal spatial partitioning system and
    assumes that the provided WorldObject is properly initialized and located within
    a valid map. The visitor parameters are passed by reference, allowing modification
    of their values during cell traversal. Performance may be impacted if the gridVisitor
    or worldVisitor functions perform heavy operations.
  warnings: Ensure that the WorldObject pointer passed to this method is valid and
    not null, as passing an invalid object can lead to undefined behavior. Be cautious
    when modifying visitor parameters within the visitor functions, as incorrect handling
    might affect subsequent processing or cause unexpected side effects.
  related:
  - Map::VisitAllCellsOf
  - Map::GetGrid
  - WorldObject::GetMap
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T10:49:35.943842'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
