api:
  class: AuraEffect
  method: HandleAuraModDecreaseSpeed
  signature: void AuraEffect::HandleAuraModDecreaseSpeed(const AuraApplication * aurApp,
    uint8 mode, bool apply) const
documentation:
  brief: Applies or removes a speed reduction aura effect on the target.
  description: The HandleAuraModDecreaseSpeed method is responsible for managing the
    application and removal of aura effects that reduce movement speed. This method
    is typically invoked during aura application or removal events, adjusting the
    target's movement speed based on the aura's properties. It interacts with the
    AuraApplication object to determine the context of the aura state change (apply
    or remove) and processes the effect accordingly. The method ensures that speed
    modifications are properly synchronized with the game's movement system and player
    state updates.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura being
      applied or removed. This parameter contains information about the aura's state,
      target, and application context.
  - name: mode
    description: The mode of operation indicating how the aura should be handled.
      This typically represents the aura application mode (e.g., whether it's being
      applied, removed, or updated).
  - name: apply
    description: Boolean flag indicating whether to apply (true) or remove (false)
      the speed reduction effect from the target.
  returns: null
  examples:
  - title: Applying a Speed Reduction Aura
    code: 'AuraEffect* auraEffect = new AuraEffect();

      AuraApplication* app = new AuraApplication();

      auraEffect->HandleAuraModDecreaseSpeed(app, 1, true); // Apply speed reduction'
    language: cpp
  - title: Removing a Speed Reduction Aura
    code: 'AuraEffect* auraEffect = new AuraEffect();

      AuraApplication* app = new AuraApplication();

      auraEffect->HandleAuraModDecreaseSpeed(app, 1, false); // Remove speed reduction'
    language: cpp
  notes: This method is part of the aura handling system in TrinityCore and directly
    affects player movement mechanics. It should only be called from within the aura
    application lifecycle management code. The actual speed modification is handled
    through the target's movement speed calculations, which may involve multiple auras
    being applied simultaneously.
  warnings: Improper usage of this method can lead to incorrect movement behavior
    for players or creatures. Ensure that the AuraApplication parameter is valid and
    properly initialized before calling this method. Incorrect mode values or apply
    flags can cause unexpected behavior in the target's movement speed.
  related:
  - HandleAuraModIncreaseSpeed
  - HandleAuraModSpeed
  - AuraEffect::ApplyEffect
  - AuraEffect::RemoveEffect
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T13:27:13.929420'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
