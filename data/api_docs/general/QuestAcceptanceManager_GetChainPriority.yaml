api:
  class: QuestAcceptanceManager
  method: GetChainPriority
  signature: float QuestAcceptanceManager::GetChainPriority(const int * quest) const
documentation:
  brief: Calculates and returns the priority value for a quest chain based on the
    provided quest ID
  description: The GetChainPriority method determines the relative importance or priority
    of a specific quest within its chain. This value is typically used by the quest
    acceptance system to decide which quests should be prioritized when multiple quests
    are available for acceptance. The method takes a pointer to an integer representing
    the quest ID and returns a floating-point value that indicates how high this quest
    ranks in terms of chain priority. Quest chains often have hierarchical structures
    where certain quests must be completed before others, and this priority helps
    determine the correct order of quest acceptance. The implementation likely considers
    factors such as quest level requirements, prerequisite completion status, and
    quest chain progression logic.
  parameters:
  - name: quest
    description: Pointer to an integer representing the quest ID for which to calculate
      chain priority. Must point to a valid quest identifier in the game's quest database.
  returns: A float value representing the calculated chain priority for the specified
    quest. Higher values typically indicate higher priority within the quest chain.
    The exact range and interpretation of these values may depend on internal implementation
    details but generally follows a normalized scale where 0.0 represents lowest priority
    and higher values represent increasing priority.
  examples:
  - title: Basic usage to check quest chain priority
    code: "int questId = 12345;\nfloat priority = questAcceptanceManager.GetChainPriority(&questId);\n\
      if (priority > 0.5f) {\n    // This quest is considered high priority in its\
      \ chain\n    printf(\"High priority quest: %f\\n\", priority);\n}"
    language: cpp
  - title: Using chain priority to sort quests for acceptance
    code: "std::vector<int> questIds = {12345, 12346, 12347};\nstd::sort(questIds.begin(),\
      \ questIds.end(), [&questAcceptanceManager](int a, int b) {\n    float priorityA\
      \ = questAcceptanceManager.GetChainPriority(&a);\n    float priorityB = questAcceptanceManager.GetChainPriority(&b);\n\
      \    return priorityA > priorityB; // Sort in descending order\n});"
    language: cpp
  notes: This method is likely called during quest acceptance processing to determine
    the correct order of quest progression. The returned priority values may be cached
    or computed dynamically based on player progress and quest state. Developers should
    note that this method operates on a const object, meaning it does not modify internal
    state but may still perform calculations based on current game data.
  warnings: The parameter 'quest' must point to a valid quest ID that exists in the
    game database; passing an invalid or non-existent quest ID could lead to undefined
    behavior. Additionally, since this method is part of a quest acceptance system,
    calling it outside appropriate contexts (such as during quest processing) may
    return inaccurate results.
  related:
  - GetQuestChain
  - IsQuestChainComplete
  - GetQuestPriority
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T07:56:26.718288'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
