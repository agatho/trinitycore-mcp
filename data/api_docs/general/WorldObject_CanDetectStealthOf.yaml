api:
  class: WorldObject
  method: CanDetectStealthOf
  signature: bool WorldObject::CanDetectStealthOf(const WorldObject * obj, bool checkAlert)
    const
documentation:
  brief: Determines whether this WorldObject can detect the stealth status of another
    WorldObject.
  description: The CanDetectStealthOf method evaluates if the calling WorldObject
    has the capability to detect stealthed entities. This includes checking various
    game mechanics such as detection range, line of sight, and specific detection
    abilities or spells that may grant stealth detection. The method considers whether
    the target object is in a stealthed state and if the caller possesses any means
    to perceive that stealth. When checkAlert is enabled, it also verifies if the
    target has been alerted by the caller, which can affect stealth detection. This
    functionality is crucial for determining visibility in stealth-based gameplay
    mechanics such as rogues, druids, or other classes with stealth abilities.
  parameters:
  - name: obj
    description: Pointer to the WorldObject whose stealth status is being checked
      for detection. Must not be null.
  - name: checkAlert
    description: Boolean flag indicating whether to also check if the target object
      has been alerted by this object. If true, the method will consider alert status
      in its evaluation.
  returns: Returns true if the calling WorldObject can detect the stealth status of
    the provided object; otherwise returns false. This includes checking range, line
    of sight, detection abilities, and alert status when applicable.
  examples:
  - title: Basic Stealth Detection Check
    code: "if (player->CanDetectStealthOf(stealthedNPC, true)) {\n    // Player can\
      \ detect the stealthed NPC\n    player->SendUnitSay(\"I see you!\", LANG_UNIVERSAL);\n\
      }"
    language: cpp
  - title: Checking Stealth Detection Without Alert Status
    code: "if (creature->CanDetectStealthOf(player, false)) {\n    // Creature can\
      \ detect player's stealth without considering alert status\n    creature->Attack(player,\
      \ true);\n}"
    language: cpp
  notes: This method is typically used in AI logic for creatures to determine when
    they should reveal or attack stealthed targets. It may involve checks against
    spell effects, aura states, and game rules related to stealth detection. The implementation
    likely includes range calculations and line-of-sight tests.
  warnings: Ensure that the obj parameter is not null before calling this method,
    as dereferencing a null pointer will cause undefined behavior. Be cautious when
    using checkAlert=true in performance-critical sections due to potential additional
    checks required.
  related:
  - IsStealthed
  - HasStealthAura
  - CanSee
  - IsInFront
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:30:43.312437'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
