api:
  class: AoEDecisionManager
  method: GetOptimalStrategy
  signature: AoEStrategy AoEDecisionManager::GetOptimalStrategy() const
documentation:
  brief: Determines and returns the most optimal area-of-effect strategy based on
    current combat conditions and AI state.
  description: The GetOptimalStrategy method evaluates the current game state, including
    target positioning, spell availability, enemy proximity, and AI decision-making
    parameters to select the best applicable AoE (Area of Effect) strategy. This method
    is typically used by AI-controlled entities such as NPCs or bosses during combat
    scenarios where multiple targets are present. It considers factors like damage
    output efficiency, mana cost, cooldowns, and tactical positioning to return a
    strategy that maximizes effectiveness in the given situation. The returned AoEStrategy
    enum value represents a predefined set of behaviors that dictate how the AI should
    execute area-of-effect abilities.
  parameters: []
  returns: An AoEStrategy enum value indicating the optimal strategy for performing
    area-of-effect attacks. Possible values may include strategies such as SINGLE_TARGET,
    CONE, CIRCLE, or other combat-oriented tactics depending on implementation details
    and game mechanics.
  examples:
  - title: Basic Usage in AI Decision Logic
    code: "class MyAI\n{\npublic:\n    void Update()\n    {\n        AoEStrategy strategy\
      \ = decisionManager.GetOptimalStrategy();\n        switch (strategy)\n     \
      \   {\n            case AoEStrategy::CONE:\n                // Cast cone spell\n\
      \                break;\n            case AoEStrategy::CIRCLE:\n           \
      \     // Cast circle spell\n                break;\n            default:\n \
      \               // Fallback to single target\n                break;\n     \
      \   }\n    }\n};"
    language: cpp
  notes: This method is designed to be called frequently during combat updates, so
    performance should be optimized. The strategy selection logic may involve complex
    calculations and state checks, which could impact frame rate if not implemented
    efficiently.
  warnings: Ensure that the AI system calling this method has valid target data before
    invoking it; otherwise, the returned strategy may be unpredictable or invalid.
    Also, this method assumes that all relevant combat parameters are properly initialized
    in the AoEDecisionManager instance.
  related:
  - SetStrategy
  - EvaluateCombatState
  - GetAvailableSpells
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T18:41:27.427031'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
