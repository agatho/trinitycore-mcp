api:
  class: RuneManager
  method: GetTotalAvailableRunes
  signature: uint32 RuneManager::GetTotalAvailableRunes() const
documentation:
  brief: Calculates and returns the total number of available runes for the player
  description: The GetTotalAvailableRunes method computes the aggregate count of all
    currently available runes across all rune types for the player. This includes
    both currently active runes and any runes that are ready to be used immediately
    without cooldown. The method is typically used in conjunction with rune management
    systems to determine how many runes can be consumed for abilities or spells that
    require rune resources. It provides a snapshot of the player's current rune availability
    at the time of the call, factoring in any active cooldowns and regeneration mechanics.
  parameters: []
  returns: Returns a uint32 value representing the total count of available runes.
    This number includes all rune types (such as Blood, Unholy, Frost, and Shadow)
    that are currently usable by the player.
  examples:
  - title: Basic Usage to Check Rune Availability
    code: "uint32 availableRunes = player->GetRuneManager()->GetTotalAvailableRunes();\n\
      if (availableRunes >= 2)\n{\n    // Player can cast a spell requiring 2 runes\n\
      }"
    language: cpp
  - title: Using Available Runes in Rune-Based Spell Logic
    code: "RuneManager* runeMgr = player->GetRuneManager();\nuint32 totalRunes = runeMgr->GetTotalAvailableRunes();\n\
      if (totalRunes > 0)\n{\n    // Process rune consumption for abilities\n    uint32\
      \ runesToConsume = std::min(totalRunes, static_cast<uint32>(3)); // Consume\
      \ up to 3 runes\n    // ... rune consumption logic here\n}"
    language: cpp
  notes: This method does not account for runes that are currently on cooldown but
    will become available in the future. It only returns runes that are immediately
    usable. The value returned may change rapidly during gameplay due to rune regeneration
    and usage.
  warnings: null
  related:
  - GetRuneCooldown
  - ConsumeRune
  - RegenerateRunes
  - GetRuneTypeCount
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:03:17.167373'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
