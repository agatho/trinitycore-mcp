api:
  class: AccountMgr
  method: IsBannedAccount
  signature: bool AccountMgr::IsBannedAccount(const std::string & name)
documentation:
  brief: Checks if a specified account is banned from the game server
  description: The IsBannedAccount method determines whether a given account name
    has been banned by checking the database records. It performs a lookup in the
    account table to verify if the account's ban status is active. This method is
    commonly used during login attempts or account validation processes to prevent
    banned users from accessing the game. The check considers both permanent and temporary
    bans, returning true only if the account is currently subject to an active ban.
  parameters:
  - name: name
    description: The username of the account to check for banning status. Must be
      a valid account name that exists in the database.
  returns: Returns true if the specified account is currently banned, false otherwise.
    A ban may be either permanent or temporary and will return true if active.
  examples:
  - title: Basic usage to check if an account is banned
    code: "if (AccountMgr::IsBannedAccount(\"player123\")) {\n    // Handle banned\
      \ account\n    sLog->outString(\"Account player123 is banned.\");\n} else {\n\
      \    // Allow access\n    sLog->outString(\"Account player123 is not banned.\"\
      );\n}"
    language: cpp
  - title: Using the method in login validation
    code: "bool ValidateLogin(const std::string& username, const std::string& password)\
      \ {\n    if (AccountMgr::IsBannedAccount(username)) {\n        return false;\
      \ // Reject login for banned account\n    }\n    // Continue with normal login\
      \ validation...\n    return true;\n}"
    language: cpp
  notes: This method performs a database query to check the ban status, so it may
    have performance implications if called frequently. The implementation likely
    caches results for better performance in high-frequency scenarios. Ensure that
    account names are properly sanitized before passing them to this method.
  warnings: The method assumes that the provided account name exists in the database.
    If an invalid/non-existent account name is passed, behavior may vary depending
    on database configuration and error handling. Always validate input parameters
    before calling this method.
  related:
  - AccountMgr::GetAccountBanInfo
  - AccountMgr::BanAccount
  - AccountMgr::UnbanAccount
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T18:48:36.955043'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
