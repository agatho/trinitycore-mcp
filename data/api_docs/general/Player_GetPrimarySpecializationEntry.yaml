api:
  class: Player
  method: GetPrimarySpecializationEntry
  signature: const ChrSpecializationEntry * Player::GetPrimarySpecializationEntry()
    const
documentation:
  brief: Returns the primary specialization entry for the player.
  description: This method retrieves the primary specialization entry associated with
    the player's current specialization. It provides access to the specialization
    data that defines the player's class-specific abilities and talents. The returned
    entry contains information about the specialization's ID, name, description, and
    other related attributes. This is particularly useful for determining which specialization
    the player currently has active, especially when dealing with class-specific mechanics
    or when checking if a specific specialization is active.
  parameters: []
  returns: Returns a pointer to the ChrSpecializationEntry structure that represents
    the player's primary specialization. If no specialization is set or the player
    is not in a valid state, this may return nullptr.
  examples:
  - title: Basic usage example
    code: "const ChrSpecializationEntry* specEntry = player->GetPrimarySpecializationEntry();\n\
      if (specEntry)\n{\n    std::cout << \"Specialization Name: \" << specEntry->Name\
      \ << std::endl;\n}"
    language: cpp
  - title: Checking specialization type
    code: "const ChrSpecializationEntry* specEntry = player->GetPrimarySpecializationEntry();\n\
      if (specEntry && specEntry->ID == 259)\n{\n    // This is the Discipline Priest\
      \ specialization\n    std::cout << \"Player has Discipline Priest specialization\"\
      \ << std::endl;\n}"
    language: cpp
  notes: This method should be used carefully as it depends on the player's current
    specialization state. The returned pointer may not always be valid depending on
    the game state or player's class. It is recommended to check if the returned pointer
    is not null before accessing its members.
  warnings: Be cautious when using this method in scenarios where the player might
    not have a valid specialization set, as it could return nullptr. Also, ensure
    that the returned entry is not accessed after the player has changed their specialization,
    since it may become stale.
  related:
  - GetPrimarySpecialization
  - GetSpecialization
  - GetClass
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T16:41:41.893922'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
