api:
  class: GarrisonMgr
  method: GetGarrBuildingPlotInst
  signature: uint32 GarrisonMgr::GetGarrBuildingPlotInst(uint32 garrBuildingId, uint32
    garrSiteLevelPlotInstId) const
documentation:
  brief: Retrieves the plot instance ID for a specified garrison building and site
    level.
  description: The GetGarrBuildingPlotInst method is used to retrieve the unique plot
    instance identifier associated with a specific garrison building and its corresponding
    site level. This function plays a crucial role in managing garrison structures
    within World of Warcraft's Garrison system, allowing developers and scripters
    to accurately identify and manipulate building placements on different garrison
    sites. The method takes into account both the building type (via garrBuildingId)
    and the site level (via garrSiteLevelPlotInstId) to determine the appropriate
    plot instance ID. It is commonly used when validating building placements, checking
    construction status, or retrieving specific garrison data for player characters.
  parameters:
  - name: garrBuildingId
    description: The unique identifier for the garrison building type. This corresponds
      to entries in the garr_building table and defines what type of structure is
      being queried.
  - name: garrSiteLevelPlotInstId
    description: The plot instance ID associated with a specific garrison site level.
      This identifies which site level (e.g., 1, 2, 3) the building should be placed
      on and helps determine valid placement locations.
  returns: Returns a uint32 value representing the plot instance ID for the specified
    garrison building and site level combination. If no matching plot instance is
    found, it typically returns 0 or an invalid identifier.
  examples:
  - title: Basic usage to retrieve plot instance ID
    code: "uint32 plotInstId = sGarrisonMgr->GetGarrBuildingPlotInst(1234, 5678);\n\
      if (plotInstId != 0)\n{\n    // Valid plot instance found\n    printf(\"Plot\
      \ instance ID: %u\\n\", plotInstId);\n}\nelse\n{\n    // No valid plot instance\
      \ found\n    printf(\"No valid plot instance for building ID 1234 at site level\
      \ 5678\\n\");\n}"
    language: cpp
  - title: Using the returned plot instance ID in garrison logic
    code: "uint32 buildingId = 1001; // Example building\nuint32 siteLevel = 3; //\
      \ Example site level\nuint32 plotInstId = sGarrisonMgr->GetGarrBuildingPlotInst(buildingId,\
      \ siteLevel);\n\nif (plotInstId != 0)\n{\n    // Proceed with garrison building\
      \ placement logic using the plot instance ID\n    Player* player = ...; // Get\
      \ player reference\n    // Use plotInstId to validate or place building in garrison\n\
      \    // Example: sGarrisonMgr->PlaceBuilding(player, buildingId, plotInstId);\n\
      }"
    language: cpp
  notes: This method is part of the garrison management system and relies on internal
    data structures that map building types to their respective plot instances based
    on site levels. The function may return 0 if no valid mapping exists for the given
    parameters, which should be handled appropriately in calling code.
  warnings: Ensure that both garrBuildingId and garrSiteLevelPlotInstId are valid
    identifiers before calling this method, as invalid inputs could lead to unexpected
    behavior or incorrect plot instance IDs being returned. This function is typically
    used within the context of garrison operations and should not be called outside
    of appropriate garrison-related systems.
  related:
  - GetGarrBuildingInfo
  - GetGarrSiteLevelPlotInstId
  - PlaceGarrisonBuilding
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T13:33:56.894407'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
