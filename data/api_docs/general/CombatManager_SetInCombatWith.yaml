api:
  class: CombatManager
  method: SetInCombatWith
  signature: bool CombatManager::SetInCombatWith(Unit * who, bool addSecondUnitSuppressed)
documentation:
  brief: Sets a unit into combat with another unit, triggering combat state and associated
    game mechanics.
  description: This method establishes combat between two units by setting one unit
    into combat with another. It handles the necessary game mechanics to initiate
    combat state, including updating the combat state of both units, managing the
    combat log, and potentially suppressing secondary unit behavior if specified.
    The method is typically used in scenarios where a unit needs to be forced into
    combat with another unit, such as during quest events or when initiating combat
    with NPCs. This method is essential for controlling combat state in World of Warcraft's
    TrinityCore framework.
  parameters:
  - name: who
    description: Pointer to the Unit that will be set into combat with the target
      unit. This represents the unit that enters combat state and must be valid.
  - name: addSecondUnitSuppressed
    description: Boolean flag indicating whether to suppress secondary unit behavior
      during combat initiation. If true, secondary unit behavior is suppressed; if
      false, normal combat behavior occurs.
  returns: Returns true if the combat state was successfully established, false otherwise.
    The method may return false if the unit is already in combat or if the operation
    fails due to invalid parameters.
  examples:
  - title: Basic Combat Setup
    code: "Unit* player = new Unit();\nUnit* npc = new Unit();\nbool result = combatManager->SetInCombatWith(player,\
      \ false);\nif (result)\n{\n    // Combat successfully initiated\n}"
    language: cpp
  - title: Combat with Suppressed Secondary Unit
    code: "Unit* player = new Unit();\nUnit* npc = new Unit();\nbool result = combatManager->SetInCombatWith(player,\
      \ true);\nif (result)\n{\n    // Combat initiated with suppressed secondary\
      \ unit behavior\n}"
    language: cpp
  notes: 'Implementation details: This method likely involves updating combat state
    flags, managing combat log entries, and potentially triggering combat-related
    events. Performance considerations include avoiding unnecessary combat state updates
    when units are already in combat. Thread safety is important as combat state changes
    may affect multiple threads simultaneously.'
  warnings: Common mistakes include attempting to set combat with invalid unit pointers
    or not properly handling secondary unit suppression. Dangerous edge cases involve
    setting combat between units that are already in combat or have already been destroyed,
    which may cause undefined behavior or crashes.
  related:
  - CombatManager::GetInCombat
  - CombatManager::SetInCombat
  - CombatManager::RemoveFromCombat
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T05:22:03.222782'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
