api:
  class: ScriptedAI
  method: ScriptedAI
  signature: void ScriptedAI::ScriptedAI(int * creature, int scriptId)
documentation:
  brief: Initializes a ScriptedAI instance with a creature pointer and script ID for
    AI behavior management.
  description: The ScriptedAI constructor initializes an AI system for a creature,
    associating it with a specific script ID that defines its behavior. This method
    sets up the necessary internal state for the AI to function within the TrinityCore
    framework. The creature parameter typically points to a Creature object, while
    the scriptId identifies which scripted behavior should be applied. This initialization
    is crucial for enabling custom AI logic in game entities such as NPCs or mobs.
  parameters:
  - name: creature
    description: Pointer to the Creature object that this AI will control. Must not
      be null for proper functionality.
  - name: scriptId
    description: Unique identifier for the script that defines the AI behavior. Used
      to determine which scripted actions and logic should be executed.
  returns: null
  examples:
  - title: Basic ScriptedAI Initialization
    code: "class MyCustomAI : public ScriptedAI\n{\npublic:\n    MyCustomAI(Creature*\
      \ creature, uint32 scriptId) : ScriptedAI(creature, scriptId) {}\n};\n\n// Usage\
      \ in a creature AI loader\nvoid LoadMyCreatureAI()\n{\n    // Assuming we have\
      \ a valid Creature pointer and script ID\n    Creature* myCreature = ...;\n\
      \    uint32 myScriptId = 12345;\n    new MyCustomAI(myCreature, myScriptId);\n\
      }"
    language: cpp
  notes: This constructor is typically called internally by the TrinityCore framework
    when loading creature AI scripts. Developers should ensure that the creature pointer
    remains valid throughout the lifetime of the ScriptedAI instance. The script ID
    must correspond to a registered script in the database or script system.
  warnings: Passing a null creature pointer will likely cause crashes or undefined
    behavior. Always validate that the creature exists and is properly initialized
    before calling this constructor. Avoid calling this constructor multiple times
    on the same creature without proper cleanup.
  related:
  - ScriptedAI::~ScriptedAI
  - ScriptedAI::UpdateAI
  - ScriptedAI::Initialize
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T03:09:04.773844'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
