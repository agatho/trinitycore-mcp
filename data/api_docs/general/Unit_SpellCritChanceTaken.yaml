api:
  class: Unit
  method: SpellCritChanceTaken
  signature: float Unit::SpellCritChanceTaken(const Unit * caster, Spell * spell,
    const AuraEffect * aurEff, int schoolMask, float doneChance, int attackType) const
documentation:
  brief: Calculates the spell critical chance taken by a unit against a specific spell.
  description: This method computes the effective spell critical chance that a unit
    has against a given spell, considering various factors such as caster's influence,
    aura effects, and attack type. It is used in game mechanics to determine the probability
    of a spell critting when being attacked by another unit. The method accounts for
    different school masks and can be influenced by specific aura effects, making
    it highly configurable for different combat scenarios.
  parameters:
  - name: caster
    description: Pointer to the unit that is casting the spell; can be nullptr if
      not applicable
  - name: spell
    description: Pointer to the spell being attacked; must be valid for proper calculation
  - name: aurEff
    description: Pointer to the aura effect that may influence critical chance; can
      be nullptr if not applicable
  - name: schoolMask
    description: Bitmask representing the spell school(s) being considered; must be
      valid for proper calculation
  - name: doneChance
    description: Base critical chance value to be modified; can be zero or negative
  - name: attackType
    description: Integer representing the type of attack (melee, ranged, etc.); must
      be valid for proper calculation
  returns: Returns a float value representing the effective spell critical chance
    percentage; can be zero or negative depending on modifiers applied
  examples:
  - title: Basic usage example
    code: float critChance = unit->SpellCritChanceTaken(caster, spell, auraEffect,
      schoolMask, baseChance, attackType);
    language: cpp
  - title: Advanced usage example with multiple modifiers
    code: float critChance = unit->SpellCritChanceTaken(nullptr, spell, auraEffect,
      1 << 0, 5.0f, 1);
    language: cpp
  notes: This method is typically used in combat calculations and requires accurate
    knowledge of the unit's state and spell properties to function correctly. Performance
    considerations include checking for null pointers and ensuring valid spell data.
  warnings: Care must be taken when using this method with null pointers; incorrect
    usage can lead to invalid critical chance values or crashes. Ensure that all parameters
    are valid before calling this method.
  related:
  - SpellCritChance
  - SpellCritChanceDone
  - SpellCritChanceMod
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T20:15:37.175924'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
