api:
  class: Player
  method: GetPrimaryStat
  signature: int Player::GetPrimaryStat() const
documentation:
  brief: Returns the primary stat value of the player, which determines character
    progression and combat effectiveness.
  description: The GetPrimaryStat method retrieves the current primary stat value
    for a Player object. This value represents the player's main attribute that influences
    their character's performance in combat and progression. For most classes, this
    corresponds to Strength for Warriors, Agility for Rogues, Intellect for Mages,
    and Spirit for Priests. The method is commonly used in game mechanics calculations
    related to damage output, healing power, and attribute-based bonuses. This function
    is essential for determining player character stats and is often used in combination
    with other stat-related methods for comprehensive character analysis.
  parameters: []
  returns: Returns an integer value representing the primary stat of the player. This
    value typically ranges from 1 to several thousand depending on character level
    and equipment, and represents the base stat value that determines character progression
    and combat effectiveness.
  examples:
  - title: Basic Usage Example
    code: 'int primaryStat = player->GetPrimaryStat();

      int strength = player->GetPrimaryStat();

      // Use primaryStat in calculations

      int damage = primaryStat * 2;'
    language: cpp
  notes: This method is typically used in conjunction with other stat-related methods
    like GetStat, GetArmor, and GetAttackPower. The value returned represents the
    base stat before any modifiers from gear or buffs are applied. Performance considerations
    include that this method may involve calculations based on player level and class-specific
    stat multipliers.
  warnings: This method should not be used for direct stat manipulation without understanding
    of how stat modifiers work in TrinityCore. The returned value may vary significantly
    between different classes and levels, so it's important to verify the context
    before using this value in calculations.
  related:
  - GetStat
  - GetArmor
  - GetAttackPower
  - GetSpellPower
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T16:41:21.396120'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
