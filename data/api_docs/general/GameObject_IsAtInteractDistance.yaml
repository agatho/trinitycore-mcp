api:
  class: GameObject
  method: IsAtInteractDistance
  signature: bool GameObject::IsAtInteractDistance(const int * player, const int *
    spell) const
documentation:
  brief: Determines whether a player is within interaction distance of a game object.
  description: This method checks if the player is within the interaction range of
    the GameObject, which is typically used for determining if a player can interact
    with the object. The method returns true when the player's distance to the object
    is less than or equal to the interaction distance, and false otherwise. It is
    commonly used in game logic to determine if an object can be interacted with by
    a player, such as when triggering quest objectives or opening doors.
  parameters:
  - name: player
    description: Pointer to the player object that is being checked for interaction
      distance. This parameter represents the player character attempting to interact
      with the GameObject.
  - name: spell
    description: Pointer to the spell object that is being checked for interaction
      distance. This parameter represents the spell being cast that may affect the
      interaction distance calculation.
  returns: Returns true if the player is within interaction distance of the GameObject,
    false otherwise.
  examples:
  - title: Basic usage example
    code: "if (gameObject->IsAtInteractDistance(player, spell)) {\n    // Player can\
      \ interact with the object\n    // Perform interaction logic here\n}\nelse {\n\
      \    // Player cannot interact with the object\n}"
    language: cpp
  notes: This method typically uses the player's distance to the GameObject as calculated
    by the game engine, and may be affected by various factors such as movement speed,
    spell casting, or other game mechanics. It is important to note that this method
    does not consider whether the player has the required skill or ability to interact
    with the object - it only checks distance.
  warnings: This method should be used carefully when determining interaction conditions,
    as incorrect usage may lead to players being able to interact with objects they
    shouldn't be able to. Also, ensure that the player and spell pointers are valid
    before calling this method, as dereferencing invalid pointers can cause crashes.
  related:
  - IsAtInteractDistance
  - GetDistance
  - GetObjectData
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T18:14:27.618541'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
