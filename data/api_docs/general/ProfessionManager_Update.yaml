api:
  class: ProfessionManager
  method: Update
  signature: void ProfessionManager::Update(int * player, uint32 diff)
documentation:
  brief: Updates the profession manager state for a given player based on elapsed
    time.
  description: The Update method is responsible for processing and maintaining the
    state of player professions within the TrinityCore framework. It handles progression,
    cooldowns, and other time-based mechanics associated with crafting skills. This
    method is typically called from the main game loop or update system to ensure
    that profession data remains synchronized with real-time gameplay. The method
    accepts a pointer to a player object and a time difference value representing
    milliseconds since the last update call.
  parameters:
  - name: player
    description: Pointer to the Player object whose professions need to be updated.
      Must not be null.
  - name: diff
    description: Time difference in milliseconds since the last update call. Used
      to calculate progression and cooldown expiration.
  returns: null
  examples:
  - title: Basic profession update call
    code: 'Player* player = ...;

      uint32 diff = 1000; // 1 second

      professionManager->Update(&player, diff);'
    language: cpp
  - title: Integration with game loop update
    code: "void GameWorld::Update(uint32 diff)\n{\n    // ... other updates ...\n\
      \    for (auto& player : m_players)\n    {\n        if (player->IsInWorld())\n\
      \            m_professionManager->Update(&player, diff);\n    }\n    // ...\
      \ more updates ...\n}"
    language: cpp
  notes: This method should be called regularly to maintain accurate profession states.
    The 'diff' parameter is crucial for proper time-based calculations and should
    reflect actual elapsed game time. Professions with active cooldowns or crafting
    sessions will be processed during this update cycle.
  warnings: Passing a null player pointer will likely result in a crash or undefined
    behavior. Ensure that the player object remains valid throughout the update process,
    as the method may access player-specific data structures.
  related:
  - GetProfession
  - AddProfession
  - RemoveProfession
  - IsProfessionKnown
metadata:
  confidence: 0.85
  generated_at: '2025-10-31T20:48:31.503362'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
