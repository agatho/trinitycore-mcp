api:
  class: ZoneScript
  method: GetCreatureEntry
  signature: uint32 ZoneScript::GetCreatureEntry(int param0, const CreatureData *
    data)
documentation:
  brief: Retrieves the creature entry ID associated with a given creature data object
    within the zone script context.
  description: The GetCreatureEntry method is used in TrinityCore's ZoneScript system
    to obtain the unique identifier (entry) of a creature based on its data. This
    method allows zone scripts to dynamically access creature information during events
    or triggers, such as when a creature spawns, is killed, or interacts with players.
    It serves as a lookup mechanism that maps creature data to their respective entry
    IDs, which are essential for identifying specific creatures in the game world.
    The method takes a parameter representing an index or identifier and a pointer
    to the creature's data structure, returning the corresponding creature entry ID.
    This functionality is particularly useful for zone-specific logic that needs to
    differentiate between various types of creatures within a defined area.
  parameters:
  - name: param0
    description: An integer parameter that typically represents an index or identifier
      used to determine which creature entry to retrieve from the provided data. The
      exact meaning may vary depending on the zone script implementation.
  - name: data
    description: A pointer to a CreatureData structure containing metadata about a
      specific creature instance. This parameter provides the context needed to resolve
      the correct creature entry ID.
  returns: Returns a uint32 value representing the creature's entry ID, which uniquely
    identifies the type of creature in the game world. If no valid entry is found
    or if the input data is invalid, the method may return zero.
  examples:
  - title: Basic Usage in Zone Script
    code: "class MyZoneScript : public ZoneScript\n{\npublic:\n    uint32 GetCreatureEntry(int\
      \ param0, const CreatureData* data) override\n    {\n        // Example: Return\
      \ the creature entry based on some logic\n        return data ? data->id : 0;\n\
      \    }\n};"
    language: cpp
  - title: Using GetCreatureEntry for Conditional Logic
    code: "void OnCreatureKilled(Creature* creature)\n{\n    uint32 entry = GetCreatureEntry(0,\
      \ &creature->GetCreatureData());\n    if (entry == 12345)\n    {\n        //\
      \ Trigger specific event for this creature type\n        DoSomethingSpecial();\n\
      \    }\n}"
    language: cpp
  notes: This method is typically invoked by the core engine during creature lifecycle
    events. Developers should ensure that the CreatureData pointer passed to this
    method is valid and not null to avoid undefined behavior. The param0 parameter's
    interpretation depends on how it's used within the specific zone script implementation.
  warnings: Passing a null pointer for 'data' will likely result in a crash or undefined
    behavior. Always validate input parameters before using them in critical logic
    paths.
  related:
  - GetGameObjectEntry
  - GetAreaTriggerEntry
  - GetQuestObjectiveEntry
metadata:
  confidence: 0.85
  generated_at: '2025-11-01T04:57:38.728628'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
