api:
  class: Unit
  method: RemoveMovementForce
  signature: void Unit::RemoveMovementForce(int id)
documentation:
  brief: Removes a movement force from the unit, stopping any applied movement mechanics.
  description: The RemoveMovementForce method removes a specific movement force from
    a Unit object, effectively stopping any ongoing movement mechanics that were previously
    applied to the unit. This method is commonly used in World of Warcraft's TrinityCore
    framework to manage unit movement behavior, particularly when dealing with movement
    forces such as knockback, pull, or other motion effects. It ensures that the unit
    stops moving and returns to its normal state, allowing for further control over
    the unit's movement. The method typically requires an identifier to specify which
    movement force to remove, and it is often used in conjunction with other movement-related
    methods to manage complex movement scenarios.
  parameters:
  - name: id
    description: The unique identifier of the movement force to be removed. This ID
      corresponds to a specific movement force applied to the unit, typically used
      for tracking and managing different types of movement effects.
  returns: null
  examples:
  - title: Basic Usage Example
    code: 'Unit* target = GetTarget();


      // Remove a specific movement force from the target unit

      target->RemoveMovementForce(12345);'
    language: cpp
  - title: Advanced Usage Example
    code: "Unit* target = GetTarget();\n\n// Remove multiple movement forces\nfor\
      \ (int i = 0; i < 3; i++) {\n    target->RemoveMovementForce(i);\n}\n\n// Ensure\
      \ unit returns to normal state after removal"
    language: cpp
  notes: 'Implementation details: This method is typically implemented as a wrapper
    around internal movement force tracking systems in TrinityCore. It may involve
    checking if the movement force exists before attempting removal, and can be used
    in conjunction with other movement methods like AddMovementForce or SetMovementForce
    to manage complex movement scenarios. Performance considerations include potential
    overhead when removing multiple forces in sequence.'
  warnings: This method should not be called without proper tracking of movement forces,
    as it may lead to inconsistent movement states. It is important to ensure that
    the identifier passed corresponds to a valid movement force, otherwise the removal
    may fail silently or cause unexpected behavior. Additionally, calling this method
    on units that are not currently under movement force control may result in undefined
    behavior.
  related:
  - AddMovementForce
  - SetMovementForce
  - GetMovementForce
  - UpdateMovementForce
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T20:35:33.785906'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
