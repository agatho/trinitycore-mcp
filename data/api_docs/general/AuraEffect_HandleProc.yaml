api:
  class: AuraEffect
  method: HandleProc
  signature: void AuraEffect::HandleProc(AuraApplication * aurApp, ProcEventInfo &
    eventInfo)
documentation:
  brief: Processes aura proc events for the given aura application and event information.
  description: The HandleProc method is responsible for executing the procedural logic
    associated with an aura effect when a triggering event occurs. This method is
    typically invoked during combat or gameplay events that activate aura procs, such
    as damage dealt, healing received, or specific action triggers. It evaluates whether
    the proc conditions are met and applies the appropriate effects to the target.
    The method takes into account the aura's application state and the event details
    to determine how the proc should be processed. This is a core part of TrinityCore's
    aura system implementation.
  parameters:
  - name: aurApp
    description: Pointer to the AuraApplication object representing the aura instance
      being processed. This contains information about which unit the aura is applied
      to and the current application state.
  - name: eventInfo
    description: Reference to a ProcEventInfo structure containing detailed information
      about the triggering event, such as damage type, spell school, target, and other
      relevant combat data that determines how the proc should be handled.
  returns: null
  examples:
  - title: Basic aura proc handling
    code: "void MyAuraEffect::HandleProc(AuraApplication* aurApp, ProcEventInfo& eventInfo)\n\
      {\n    // Process the aura's proc effect\n    if (eventInfo.GetDamage())\n \
      \   {\n        // Apply healing or damage based on event\n        aurApp->GetTarget()->CastSpell(aurApp->GetTarget(),\
      \ 12345, true);\n    }\n}"
    language: cpp
  notes: This method is part of the aura system's event-driven architecture. It should
    not be called directly from outside the aura processing pipeline; instead, it's
    invoked internally by TrinityCore's core systems when appropriate proc conditions
    are met. The method may modify the target unit's state or trigger additional spells
    as part of its effect.
  warnings: Improper handling of this method can lead to unexpected behavior in combat
    mechanics or spell interactions. Developers should ensure that all proc conditions
    are properly validated before applying effects, and avoid modifying aura states
    during proc execution that could cause recursion or instability.
  related:
  - AuraEffect::GetAuraType
  - AuraEffect::IsProcActive
  - AuraApplication::GetTarget
  - ProcEventInfo::GetDamage
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T12:03:24.991745'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
