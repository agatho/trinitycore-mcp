api:
  class: Map
  method: getNGrid
  signature: int * Map::getNGrid(uint32 x, uint32 y) const
documentation:
  brief: Retrieves a pointer to the grid data structure at the specified coordinates.
  description: The getNGrid method retrieves a pointer to the grid data structure
    located at the given X and Y coordinates within the map. This method is used internally
    by the TrinityCore server to access grid-based spatial partitioning data structures
    that organize game objects, creatures, and players within the world. The returned
    pointer allows direct access to grid-specific information such as object lists,
    terrain data, or other grid-related metadata. Grids are typically organized in
    a 2D array structure where each cell represents a specific area of the map. This
    method does not perform bounds checking on the input coordinates, so calling it
    with invalid coordinates may result in undefined behavior.
  parameters:
  - name: x
    description: The X coordinate of the grid to retrieve. Represents the horizontal
      position within the map's grid system.
  - name: y
    description: The Y coordinate of the grid to retrieve. Represents the vertical
      position within the map's grid system.
  returns: A pointer to an integer representing the grid data structure at the specified
    coordinates. Returns NULL if the grid does not exist or is invalid.
  examples:
  - title: Basic Grid Access
    code: "int* gridData = map->getNGrid(10, 15);\nif (gridData != nullptr) {\n  \
      \  // Process grid data\n    printf(\"Grid data at (10,15): %d\\n\", *gridData);\n\
      }"
    language: cpp
  - title: Safe Grid Retrieval with Bounds Check
    code: "uint32 gridSizeX = map->getSizeX();\nuint32 gridSizeY = map->getSizeY();\n\
      \nif (x < gridSizeX && y < gridSizeY) {\n    int* gridData = map->getNGrid(x,\
      \ y);\n    if (gridData != nullptr) {\n        // Use grid data safely\n   \
      \ }\n}"
    language: cpp
  notes: 'This method provides direct access to internal grid structures and should
    be used carefully. The returned pointer is only valid while the map remains loaded
    and the grid has not been destroyed. Performance considerations: This method performs
    a simple array lookup operation, making it very fast for grid access. Thread safety:
    Accessing grid data through this method requires proper synchronization if multiple
    threads are involved in map operations.'
  warnings: Calling this method with invalid coordinates (outside the valid grid bounds)
    may cause memory access violations or undefined behavior. The returned pointer
    should not be modified directly as it points to internal engine data structures.
    This method does not validate input parameters, so callers must ensure coordinates
    are within valid ranges before calling.
  related:
  - getNGrid
  - getGrid
  - isGridLoaded
  - loadGrid
metadata:
  confidence: 0.9
  generated_at: '2025-11-01T10:41:30.492514'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
