api:
  class: Player
  method: HasDataFlagAccount
  signature: bool Player::HasDataFlagAccount(uint32 dataFlagId) const
documentation:
  brief: Checks if a player has a specific data flag account.
  description: This method determines whether a player possesses a particular data
    flag account, which is used to track various game state flags and permissions
    within the TrinityCore framework. The method returns true if the specified data
    flag ID is present in the player's account data flags, otherwise false. It serves
    as a utility for checking player-specific account settings and permissions, particularly
    useful in scenarios involving account-based gameplay mechanics or administrative
    operations.
  parameters: []
  returns: Returns true if the player has the specified data flag account; otherwise
    returns false if the flag is not set or does not exist.
  examples:
  - title: Basic usage example
    code: "bool hasFlag = player->HasDataFlagAccount(12345);\nif (hasFlag)\n{\n  \
      \  // Player has the data flag\n    // Perform action\n}"
    language: cpp
  notes: This method is typically used in conjunction with other account-related functions
    to manage player permissions and flags. The data flag ID parameter should be a
    valid integer representing an existing account flag within the TrinityCore system.
  warnings: Be cautious when using this method as incorrect flag IDs may lead to unexpected
    behavior or false negatives. Ensure that the flag ID corresponds to a legitimate
    account flag in the database before calling this method.
  related:
  - Player::SetDataFlagAccount
  - Player::GetDataFlagAccount
  - Player::RemoveDataFlagAccount
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T16:07:58.158418'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
