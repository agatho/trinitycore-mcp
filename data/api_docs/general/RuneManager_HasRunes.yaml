api:
  class: RuneManager
  method: HasRunes
  signature: bool RuneManager::HasRunes(uint32 bloodCount, uint32 frostCount, uint32
    unholyCount) const
documentation:
  brief: Checks if the player has sufficient runes of specified types and counts.
  description: The HasRunes method determines whether a player possesses enough runes
    of each specified type (blood, frost, unholy) to satisfy a given requirement.
    This method is typically used in the context of World of Warcraft's Death Knight
    class mechanics, where players must consume specific combinations of runes to
    cast certain spells. The method evaluates the current rune counts against the
    requested amounts and returns true if all requirements are met, otherwise false.
    It does not modify any rune state but simply performs a validation check.
  parameters:
  - name: bloodCount
    description: The required number of blood runes to check for availability.
  - name: frostCount
    description: The required number of frost runes to check for availability.
  - name: unholyCount
    description: The required number of unholy runes to check for availability.
  returns: True if the player has at least the specified number of blood, frost, and
    unholy runes; false otherwise.
  examples:
  - title: Basic rune availability check
    code: "if (runeManager.HasRunes(1, 1, 1)) {\n    // Player can cast a spell requiring\
      \ one rune of each type\n    player.CastSpell(SPELL_DEATH_COIL);\n}"
    language: cpp
  - title: Checking for multiple runes before casting
    code: "if (runeManager.HasRunes(2, 0, 1)) {\n    // Player has at least 2 blood\
      \ runes and 1 unholy rune\n    player.CastSpell(SPELL_BLOOD_BOIL);\n} else {\n\
      \    // Not enough runes available\n    player.SendSystemMessage(\"Not enough\
      \ runes.\");\n}"
    language: cpp
  notes: This method assumes that the RuneManager instance is properly initialized
    with the current rune state of the associated player. The method does not account
    for rune regeneration timing or cooldowns, only the immediate availability of
    runes.
  warnings: Ensure that the rune counts passed to this method are valid (non-negative
    integers). Passing negative values may lead to unexpected behavior or incorrect
    results.
  related:
  - GetRuneCount
  - ConsumeRunes
  - ResetRunes
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T07:02:11.924952'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
