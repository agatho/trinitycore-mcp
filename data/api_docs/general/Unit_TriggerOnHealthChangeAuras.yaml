api:
  class: Unit
  method: TriggerOnHealthChangeAuras
  signature: void Unit::TriggerOnHealthChangeAuras(uint64 oldVal, uint64 newVal)
documentation:
  brief: Triggers aura effects when unit's health changes
  description: This method activates all applicable aura effects that respond to health
    change events for the specified unit. It is typically called internally when a
    unit's health value is updated, and handles the triggering of various aura applications
    based on current health status. The method ensures proper application of game
    mechanics related to health-based triggers, such as periodic damage or healing
    effects, and can be used in conjunction with other health-related methods for
    comprehensive unit behavior management.
  parameters:
  - name: oldVal
    description: The previous health value before the change. This represents the
      old health amount that was previously set for the unit.
  - name: newVal
    description: The new health value after the change. This represents the updated
      health amount that is now set for the unit.
  returns: null
  examples:
  - title: Basic usage example
    code: 'Unit* unit = new Unit;

      uint64 oldHealth = unit->GetHealth();

      uint64 newHealth = unit->SetHealth(newVal);

      unit->TriggerOnHealthChangeAuras(oldHealth, newHealth);'
    language: cpp
  - title: Advanced usage example
    code: 'Unit* unit = new Unit;

      uint64 oldHealth = unit->GetHealth();

      uint64 newHealth = unit->SetHealth(newVal);

      unit->TriggerOnHealthChangeAuras(oldHealth, newHealth);

      // This will trigger all aura effects that depend on health changes

      // and can be used in conjunction with other methods like ApplyAuraEffect'
    language: cpp
  notes: This method is primarily used internally by TrinityCore's core system to
    ensure proper application of health-based aura effects. It should not be directly
    called from outside the core unless specifically needed for custom behavior implementation.
    Performance considerations include potential overhead when multiple auras are
    active, as each trigger may involve additional computations.
  warnings: This method should not be used in scenarios where health changes are not
    properly handled or where the old and new values are not correctly set. Improper
    usage may lead to incorrect aura application or unexpected behavior during gameplay.
  related:
  - GetHealth
  - SetHealth
  - ApplyAuraEffect
  - TriggerOnHealthChangeAuras
  - Unit::UpdateHealth
  - Unit::UpdateMaxHealth
metadata:
  confidence: 0.85
  generated_at: '2025-10-30T20:05:44.673342'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
