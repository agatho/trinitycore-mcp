api:
  class: Unit
  method: GetMaxPositiveAuraModifier
  signature: int32 Unit::GetMaxPositiveAuraModifier(int auraType, const int & predicate)
    const
documentation:
  brief: Returns the maximum positive modifier value for a specific aura type.
  description: This method retrieves the highest positive modifier value applied to
    a unit's aura of a specified type. It is commonly used in World of Warcraft's
    TrinityCore framework to determine the strength of buffs or effects that positively
    impact a unit's attributes, such as health, mana, or damage. The method considers
    all active auras on the unit and returns the maximum value found for the given
    aura type. This functionality is essential for calculating bonuses from various
    spells, abilities, and items.
  parameters:
  - name: auraType
    description: The type of aura to evaluate. This parameter specifies which aura
      type to check for positive modifiers, such as damage bonus, health bonus, or
      other attribute-related auras.
  - name: predicate
    description: A reference to an integer that defines the condition under which
      the maximum modifier is calculated. This parameter typically represents a specific
      value or condition that must be met for the modifier to be considered.
  returns: Returns an int32 value representing the maximum positive modifier found
    for the specified aura type. If no positive modifiers are present, it returns
    0.
  examples:
  - title: Basic Usage Example
    code: int32 maxModifier = unit->GetMaxPositiveAuraModifier(SPELL_AURA_MOD_DAMAGE_DONE,
      predicate);
    language: cpp
  - title: Advanced Usage Example
    code: "int32 maxModifier = unit->GetMaxPositiveAuraModifier(SPELL_AURA_MOD_STAT,\
      \ predicate); \nif (maxModifier > 0) {\n    // Apply additional logic\n}"
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine the full impact of buffs or effects on a unit. It may be affected
    by the order of applied auras and can be influenced by various game mechanics
    such as stacking rules, spell modifiers, and attribute bonuses.
  warnings: Care should be taken when using this method because it might not account
    for all possible modifiers in complex scenarios. Additionally, the result may
    vary depending on whether the unit is player or NPC, and the method does not consider
    negative modifiers.
  related:
  - GetMaxNegativeAuraModifier
  - GetAuraMod
  - GetAuraType
  - GetAura
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T13:02:41.798285'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
