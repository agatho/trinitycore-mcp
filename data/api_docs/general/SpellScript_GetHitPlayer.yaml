api:
  class: SpellScript
  method: GetHitPlayer
  signature: Player * SpellScript::GetHitPlayer() const
documentation:
  brief: Returns the Player object that was hit by the spell.
  description: The GetHitPlayer method retrieves a pointer to the Player object that
    was affected by the spell script. This method is typically used within spell script
    implementations to access information about the player target, such as their stats,
    inventory, or current state. The returned pointer is valid only during the execution
    of the spell script and should not be stored for later use. It is important to
    note that this method will return a null pointer if the spell did not hit a player,
    or if the spell's target was not a player object.
  parameters: []
  returns: A pointer to the Player object that was hit by the spell, or nullptr if
    no player was hit or the target is not a player.
  examples:
  - title: Basic usage in spell script
    code: "class MySpellScript : public SpellScript\n{\npublic:\n    void HandleHit()\n\
      \    {\n        Player* targetPlayer = GetHitPlayer();\n        if (targetPlayer)\n\
      \        {\n            targetPlayer->AddItem(ITEM_ID, 1);\n        }\n    }\n\
      };"
    language: cpp
  - title: Checking for valid player target before using
    code: "class HealingSpellScript : public SpellScript\n{\npublic:\n    void HandleHeal()\n\
      \    {\n        Player* targetPlayer = GetHitPlayer();\n        if (targetPlayer\
      \ && targetPlayer->IsAlive())\n        {\n            int32 healAmount = GetEffectValue();\n\
      \            targetPlayer->ModifyHealth(healAmount);\n        }\n    }\n};"
    language: cpp
  notes: This method should only be called during the execution of a spell script's
    event handlers, such as HandleHit or HandleEffect. The returned Player pointer
    is managed by the core and should not be deleted or modified directly. Calling
    this method outside of a valid spell script context will result in undefined behavior.
  warnings: Do not store the returned Player pointer for later use, as it may become
    invalid after the spell script execution completes. Always check for null before
    using the returned pointer to prevent crashes. This method should only be used
    when the spell's target is expected to be a player; otherwise, it will return
    nullptr.
  related:
  - GetHitUnit
  - GetHitCreature
  - GetHitDest
  - GetHitTarget
metadata:
  confidence: 0.95
  generated_at: '2025-11-01T05:54:10.547295'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
