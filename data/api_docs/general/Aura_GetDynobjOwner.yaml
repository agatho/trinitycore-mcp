api:
  class: Aura
  method: GetDynobjOwner
  signature: DynamicObject * Aura::GetDynobjOwner() const
documentation:
  brief: Returns the DynamicObject that owns this aura.
  description: The GetDynobjOwner method retrieves the DynamicObject instance that
    is responsible for creating and managing this aura. In World of Warcraft's TrinityCore
    implementation, auras can be associated with dynamic objects such as area effect
    spells or traps. This method allows access to the parent dynamic object that spawned
    the aura, which is useful for determining the source of the aura or performing
    operations on the owning object. The returned pointer may be null if the aura
    was not created by a dynamic object or if the dynamic object has been destroyed.
  parameters: []
  returns: A pointer to the DynamicObject that owns this aura, or nullptr if the aura
    is not owned by a dynamic object.
  examples:
  - title: Accessing the owner of an aura
    code: "Aura* aura = player->GetAura(12345);\nif (aura)\n{\n    DynamicObject*\
      \ dynObj = aura->GetDynobjOwner();\n    if (dynObj)\n    {\n        // Use the\
      \ dynamic object\n        WorldObject* owner = dynObj->GetCaster();\n      \
      \  // ... perform operations\n    }\n}"
    language: cpp
  notes: This method is primarily used in spell and aura handling logic where it's
    necessary to trace back from an aura to its originating dynamic object. The returned
    pointer should be checked for null before use, as not all auras are associated
    with dynamic objects.
  warnings: Be cautious when using the returned DynamicObject pointer, as it may become
    invalid if the dynamic object is destroyed. Always verify that the object is still
    valid before dereferencing.
  related:
  - GetCaster
  - GetOwner
  - IsExpired
metadata:
  confidence: 0.9
  generated_at: '2025-10-31T09:19:51.395668'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
