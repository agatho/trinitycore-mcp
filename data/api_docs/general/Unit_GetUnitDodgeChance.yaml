api:
  class: Unit
  method: GetUnitDodgeChance
  signature: float Unit::GetUnitDodgeChance(int attType, const Unit * victim) const
documentation:
  brief: Calculates and returns the dodge chance of a unit against a specific attack
    type.
  description: This method computes the dodge chance for a Unit, taking into account
    various factors such as level difference, base dodge chance, and modifiers from
    attributes or effects. It is used primarily in combat calculations to determine
    whether an attack will be dodged by the target unit. The method considers the
    attack type (melee, ranged, or spell) and the victim's characteristics to provide
    accurate dodge probability values.
  parameters:
  - name: attType
    description: The attack type being evaluated, which can be either melee, ranged,
      or spell attacks. This parameter determines how the dodge chance is calculated
      based on different combat mechanics.
  - name: victim
    description: The target unit against which the dodge chance is being calculated.
      This parameter is essential for determining the level difference and other factors
      that affect dodge calculations.
  returns: Returns a float value representing the probability (in percent) that the
    unit will dodge an attack of the specified type. Values range from 0.0 to 100.0,
    where 0.0 indicates no chance of dodging and 100.0 indicates full chance of dodging.
  examples:
  - title: Basic Dodge Chance Calculation
    code: 'float dodgeChance = unit->GetUnitDodgeChance(ATTACK_TYPE_MELEE, target);

      // Returns the dodge chance for melee attacks against target'
    language: cpp
  - title: Advanced Dodge Chance with Level Difference
    code: 'float dodgeChance = unit->GetUnitDodgeChance(ATTACK_TYPE_SPELL, target);

      // Calculates dodge chance considering spell attack type and target''s level
      difference'
    language: cpp
  notes: This method is part of the core combat system in TrinityCore and should be
    used in conjunction with other combat-related methods for complete battle calculations.
    Performance considerations include checking if the unit is valid before calling
    this method, as invalid units can cause crashes.
  warnings: The method may return 0.0 if the unit is not valid or if the victim is
    null. Care must be taken when using this method in combat calculations to avoid
    incorrect results due to improper parameter handling.
  related:
  - GetUnitBlockChance
  - GetUnitParryChance
  - GetUnitMissChance
  - GetUnitCritChance
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:31:51.619928'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
