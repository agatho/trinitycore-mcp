api:
  class: Unit
  method: HasAuraWithMechanic
  signature: bool Unit::HasAuraWithMechanic(uint64 mechanicMask) const
documentation:
  brief: Checks if the unit has any aura with the specified mechanic type.
  description: This method determines whether a Unit object possesses any active aura
    that matches the given mechanic mask. It is commonly used in game mechanics to
    detect specific status effects or conditions such as stun, root, or silence. The
    method returns true if any aura matching the specified mechanic is present on
    the unit, false otherwise. This functionality is essential for implementing various
    gameplay behaviors and interactions within TrinityCore's framework.
  parameters: []
  returns: Returns true if the unit has at least one aura with the specified mechanic
    type; otherwise returns false.
  examples:
  - title: Basic usage example
    code: "if (unit->HasAuraWithMechanic(MECHANIC_STUN)) {\n    // Do something\n\
      }\n"
    language: cpp
  notes: This method internally utilizes the aura system to check for matching mechanic
    types. Performance considerations should be taken into account when using this
    method in frequently called functions, as it may involve iterating through active
    auras.
  warnings: The method does not distinguish between different types of auras with
    the same mechanic; it simply checks if any aura exists with the specified mechanic
    type.
  related:
  - HasAura
  - GetAura
  - IsAuraWithMechanic
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:21:57.245716'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
