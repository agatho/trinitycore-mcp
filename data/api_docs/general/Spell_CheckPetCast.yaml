api:
  class: Spell
  method: CheckPetCast
  signature: SpellCastResult Spell::CheckPetCast(Unit * target)
documentation:
  brief: Checks if a pet can cast a spell on a target.
  description: This method evaluates whether a pet can cast a specific spell on a
    given target unit. It performs validation checks including target validity, spell
    requirements, and pet state conditions to determine if the spell casting is allowed.
    The method returns a SpellCastResult indicating the success or failure of the
    casting attempt, which helps determine whether the spell should proceed or be
    canceled.
  parameters: []
  returns: SpellCastResult representing the outcome of the spell cast check. Possible
    values include SPELL_CAST_SUCCESS, SPELL_CAST_ERROR, and other error codes indicating
    why the spell cannot be cast.
  examples:
  - title: Basic usage example
    code: "SpellCastResult result = spell->CheckPetCast(target);\nif (result == SPELL_CAST_SUCCESS)\n\
      {\n    // Proceed with spell casting\n    spell->CastSpell(target);\n}\nelse\n\
      {\n    // Handle error condition\n    // Do not cast spell\n}"
    language: cpp
  notes: This method is typically used in pet AI logic to determine if a pet should
    cast a spell on a target. It checks for valid target conditions, spell requirements,
    and pet state constraints. Performance considerations include checking target
    validity and spell requirements efficiently.
  warnings: The method assumes that the spell object has been properly initialized
    and that the target unit is valid. Failure to ensure proper initialization may
    lead to undefined behavior or incorrect results.
  related:
  - Spell::CheckCast
  - Spell::CastSpell
  - Spell::IsSpellValid
metadata:
  confidence: 0.9
  generated_at: '2025-10-30T22:43:53.025809'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
