api:
  class: Unit
  method: GetTotalAuraModifierByMiscMask
  signature: int32 Unit::GetTotalAuraModifierByMiscMask(int auraType, uint32 misc_mask)
    const
documentation:
  brief: Returns the total modifier value for a specific aura type with given misc
    mask
  description: This method retrieves the sum of all aura modifiers applied to the
    unit that match a specific aura type and misc mask. It is commonly used in World
    of Warcraft's TrinityCore engine to calculate bonuses or penalties for various
    game mechanics such as spell effects, stat modifications, or damage multipliers.
    The method operates on the principle that multiple auras can contribute to a single
    modifier value, and it aggregates these contributions into a single total. This
    function is essential for determining how much a specific aura type affects a
    unit's attributes when combined with other similar modifiers.
  parameters:
  - name: auraType
    description: The type of aura being evaluated (e.g., SPELL_AURA_MOD_STAT, SPELL_AURA_MOD_ATTACK_POWER).
      This parameter defines which category of aura is being summed.
  - name: misc_mask
    description: The miscellaneous mask that identifies specific aura effects or categories.
      This mask helps filter which auras are considered in the calculation based on
      their specific properties or flags.
  returns: Returns an integer value representing the total modifier applied to the
    specified aura type and misc mask. A negative value indicates a penalty, while
    positive values indicate bonuses. Zero means no modifier exists for that combination
    of aura type and misc mask.
  examples:
  - title: Basic usage example
    code: int32 modifier = unit->GetTotalAuraModifierByMiscMask(SPELL_AURA_MOD_ATTACK_POWER,
      0x00000001);
    language: cpp
  - title: Advanced usage example
    code: int32 modifier = unit->GetTotalAuraModifierByMiscMask(SPELL_AURA_MOD_DAMAGE_PERCENT,
      0x00000008); // For calculating damage percentage modifiers from specific aura
      types
    language: cpp
  notes: This method is typically used in conjunction with other aura-related functions
    to determine overall stat modifications or effects. It may be called multiple
    times per unit, depending on the number of auras present. Performance considerations
    include avoiding unnecessary calls when not needed, as this function can involve
    iterating through all active auras.
  warnings: This method should only be used when the unit has active auras; otherwise
    it will return zero or invalid values. Also, be cautious about using this method
    with non-standard aura types, as it may lead to incorrect results if not properly
    filtered.
  related:
  - GetTotalAuraModifier
  - GetAuraType
  - GetAura
  - GetAuraEffect
  - GetAuraMod
metadata:
  confidence: 0.95
  generated_at: '2025-10-30T12:37:25.805799'
  generator: lmstudio-qwen3-coder-30b
  version: 1.0.0
  source: core
